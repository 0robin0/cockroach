// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cockroach/pkg/acceptance/cluster/testconfig.proto

/*
	Package cluster is a generated protocol buffer package.

	It is generated from these files:
		cockroach/pkg/acceptance/cluster/testconfig.proto

	It has these top-level messages:
		StoreConfig
		NodeConfig
		TestConfig
*/
package cluster

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import time "time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// InitMode specifies different ways to initialize the cluster.
type InitMode int32

const (
	// INIT_COMMAND starts every node with a join flag and issues the
	// init command.
	INIT_COMMAND InitMode = 0
	// INIT_BOOTSTRAP_NODE_ZERO uses the legacy protocol of omitting the
	// join flag from node zero.
	INIT_BOOTSTRAP_NODE_ZERO InitMode = 1
	// INIT_NONE starts every node with a join flag and leaves the
	// cluster uninitialized.
	INIT_NONE InitMode = 2
)

var InitMode_name = map[int32]string{
	0: "INIT_COMMAND",
	1: "INIT_BOOTSTRAP_NODE_ZERO",
	2: "INIT_NONE",
}
var InitMode_value = map[string]int32{
	"INIT_COMMAND":             0,
	"INIT_BOOTSTRAP_NODE_ZERO": 1,
	"INIT_NONE":                2,
}

func (x InitMode) Enum() *InitMode {
	p := new(InitMode)
	*p = x
	return p
}
func (x InitMode) String() string {
	return proto.EnumName(InitMode_name, int32(x))
}
func (x *InitMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InitMode_value, data, "InitMode")
	if err != nil {
		return err
	}
	*x = InitMode(value)
	return nil
}
func (InitMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorTestconfig, []int{0} }

// StoreConfig holds the configuration of a collection of similar stores.
type StoreConfig struct {
	MaxRanges int32 `protobuf:"varint,2,opt,name=max_ranges,json=maxRanges" json:"max_ranges"`
}

func (m *StoreConfig) Reset()                    { *m = StoreConfig{} }
func (m *StoreConfig) String() string            { return proto.CompactTextString(m) }
func (*StoreConfig) ProtoMessage()               {}
func (*StoreConfig) Descriptor() ([]byte, []int) { return fileDescriptorTestconfig, []int{0} }

// NodeConfig holds the configuration of a collection of similar nodes.
type NodeConfig struct {
	Version string        `protobuf:"bytes,1,opt,name=version" json:"version"`
	Stores  []StoreConfig `protobuf:"bytes,2,rep,name=stores" json:"stores"`
}

func (m *NodeConfig) Reset()                    { *m = NodeConfig{} }
func (m *NodeConfig) String() string            { return proto.CompactTextString(m) }
func (*NodeConfig) ProtoMessage()               {}
func (*NodeConfig) Descriptor() ([]byte, []int) { return fileDescriptorTestconfig, []int{1} }

type TestConfig struct {
	Name  string       `protobuf:"bytes,1,opt,name=name" json:"name"`
	Nodes []NodeConfig `protobuf:"bytes,2,rep,name=nodes" json:"nodes"`
	// Duration is the total time that the test should run for. Important for
	// tests such as TestPut that will run indefinitely.
	Duration time.Duration `protobuf:"varint,3,opt,name=duration,casttype=time.Duration" json:"duration"`
	InitMode InitMode      `protobuf:"varint,4,opt,name=init_mode,json=initMode,enum=cockroach.acceptance.cluster.InitMode" json:"init_mode"`
	// When set, the cluster is started as quickly as possible, without waiting
	// for ranges to replicate, or even ports to be opened.
	NoWait bool `protobuf:"varint,5,opt,name=no_wait,json=noWait" json:"no_wait"`
}

func (m *TestConfig) Reset()                    { *m = TestConfig{} }
func (m *TestConfig) String() string            { return proto.CompactTextString(m) }
func (*TestConfig) ProtoMessage()               {}
func (*TestConfig) Descriptor() ([]byte, []int) { return fileDescriptorTestconfig, []int{2} }

func init() {
	proto.RegisterType((*StoreConfig)(nil), "cockroach.acceptance.cluster.StoreConfig")
	proto.RegisterType((*NodeConfig)(nil), "cockroach.acceptance.cluster.NodeConfig")
	proto.RegisterType((*TestConfig)(nil), "cockroach.acceptance.cluster.TestConfig")
	proto.RegisterEnum("cockroach.acceptance.cluster.InitMode", InitMode_name, InitMode_value)
}
func (m *StoreConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x10
	i++
	i = encodeVarintTestconfig(dAtA, i, uint64(m.MaxRanges))
	return i, nil
}

func (m *NodeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTestconfig(dAtA, i, uint64(len(m.Version)))
	i += copy(dAtA[i:], m.Version)
	if len(m.Stores) > 0 {
		for _, msg := range m.Stores {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTestconfig(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TestConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTestconfig(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTestconfig(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintTestconfig(dAtA, i, uint64(m.Duration))
	dAtA[i] = 0x20
	i++
	i = encodeVarintTestconfig(dAtA, i, uint64(m.InitMode))
	dAtA[i] = 0x28
	i++
	if m.NoWait {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func encodeVarintTestconfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StoreConfig) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTestconfig(uint64(m.MaxRanges))
	return n
}

func (m *NodeConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	n += 1 + l + sovTestconfig(uint64(l))
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			l = e.Size()
			n += 1 + l + sovTestconfig(uint64(l))
		}
	}
	return n
}

func (m *TestConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovTestconfig(uint64(l))
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovTestconfig(uint64(l))
		}
	}
	n += 1 + sovTestconfig(uint64(m.Duration))
	n += 1 + sovTestconfig(uint64(m.InitMode))
	n += 2
	return n
}

func sovTestconfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTestconfig(x uint64) (n int) {
	return sovTestconfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoreConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRanges", wireType)
			}
			m.MaxRanges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRanges |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTestconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stores = append(m.Stores, StoreConfig{})
			if err := m.Stores[len(m.Stores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, NodeConfig{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (time.Duration(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitMode", wireType)
			}
			m.InitMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitMode |= (InitMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWait", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoWait = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTestconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTestconfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTestconfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTestconfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTestconfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTestconfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTestconfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTestconfig   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("cockroach/pkg/acceptance/cluster/testconfig.proto", fileDescriptorTestconfig)
}

var fileDescriptorTestconfig = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x3d, 0xf9, 0x21, 0xc9, 0x2d, 0x45, 0xd1, 0x08, 0x24, 0xab, 0x2a, 0x53, 0x13, 0x24,
	0x64, 0x58, 0xd8, 0x6a, 0xde, 0xa0, 0x69, 0x22, 0x94, 0x45, 0x6c, 0xe4, 0x5a, 0x42, 0xea, 0xc6,
	0x1a, 0x8d, 0x07, 0x33, 0x2a, 0x9e, 0x89, 0xec, 0x09, 0xf4, 0x11, 0x60, 0xc7, 0x3b, 0xf0, 0x32,
	0x59, 0xb2, 0x64, 0x55, 0x81, 0x79, 0x0b, 0x56, 0xc8, 0xee, 0x38, 0x81, 0x4d, 0x76, 0xf6, 0xb9,
	0xe7, 0x9c, 0xef, 0xde, 0x81, 0x73, 0xa6, 0xd8, 0x4d, 0xa1, 0x28, 0x7b, 0xef, 0xaf, 0x6f, 0x32,
	0x9f, 0x32, 0xc6, 0xd7, 0x9a, 0x4a, 0xc6, 0x7d, 0xf6, 0x61, 0x53, 0x6a, 0x5e, 0xf8, 0x9a, 0x97,
	0x9a, 0x29, 0xf9, 0x4e, 0x64, 0xde, 0xba, 0x50, 0x5a, 0xe1, 0xd3, 0x5d, 0xc4, 0xdb, 0xdb, 0x3d,
	0x63, 0x3f, 0x79, 0x9c, 0xa9, 0x4c, 0x35, 0x46, 0xbf, 0xfe, 0xba, 0xcf, 0x4c, 0xa6, 0x70, 0x74,
	0xa5, 0x55, 0xc1, 0x2f, 0x9b, 0x22, 0xfc, 0x1c, 0x20, 0xa7, 0xb7, 0x49, 0x41, 0x65, 0xc6, 0x4b,
	0xbb, 0xe3, 0x20, 0xb7, 0x3f, 0xeb, 0x6d, 0xef, 0xce, 0xac, 0x68, 0x94, 0xd3, 0xdb, 0xa8, 0x91,
	0x27, 0x1b, 0x80, 0x40, 0xa5, 0x6d, 0x84, 0xc0, 0xe0, 0x23, 0x2f, 0x4a, 0xa1, 0xa4, 0x8d, 0x1c,
	0xe4, 0x8e, 0x8c, 0xbf, 0x15, 0xf1, 0x6b, 0x78, 0x50, 0xd6, 0x84, 0xba, 0xae, 0xeb, 0x1e, 0x4d,
	0x5f, 0x7a, 0x87, 0xd6, 0xf4, 0xfe, 0xd9, 0xc6, 0x34, 0x99, 0xf8, 0xe4, 0x4b, 0x07, 0x20, 0xe6,
	0xa5, 0x36, 0x5c, 0x1b, 0x7a, 0x92, 0xe6, 0xfc, 0x3f, 0x68, 0xa3, 0xe0, 0x39, 0xf4, 0xa5, 0x4a,
	0x77, 0x40, 0xf7, 0x30, 0x70, 0x7f, 0x8a, 0x29, 0xb9, 0x0f, 0xe3, 0x73, 0x18, 0xa6, 0x9b, 0x82,
	0xea, 0xfa, 0xb0, 0xae, 0x83, 0xdc, 0xee, 0xec, 0x49, 0x3d, 0xfe, 0x73, 0x77, 0x76, 0xac, 0x45,
	0xce, 0xbd, 0xb9, 0x19, 0x46, 0x3b, 0x1b, 0x5e, 0xc2, 0x48, 0x48, 0xa1, 0x93, 0x5c, 0xa5, 0xdc,
	0xee, 0x39, 0xc8, 0x7d, 0x34, 0x7d, 0x71, 0x18, 0xbe, 0x94, 0x42, 0xaf, 0x54, 0xca, 0x0d, 0x7a,
	0x28, 0xcc, 0x3f, 0x7e, 0x0a, 0x03, 0xa9, 0x92, 0x4f, 0x54, 0x68, 0xbb, 0xef, 0x20, 0x77, 0xd8,
	0xbe, 0x85, 0x54, 0x6f, 0xa9, 0xd0, 0xaf, 0x42, 0x18, 0xb6, 0x51, 0x3c, 0x86, 0x87, 0xcb, 0x60,
	0x19, 0x27, 0x97, 0xe1, 0x6a, 0x75, 0x11, 0xcc, 0xc7, 0x16, 0x3e, 0x05, 0xbb, 0x51, 0x66, 0x61,
	0x18, 0x5f, 0xc5, 0xd1, 0xc5, 0x9b, 0x24, 0x08, 0xe7, 0x8b, 0xe4, 0x7a, 0x11, 0x85, 0x63, 0x84,
	0x8f, 0x61, 0xd4, 0x4c, 0x83, 0x30, 0x58, 0x8c, 0x3b, 0x27, 0xbd, 0xcf, 0xdf, 0x88, 0x35, 0x7b,
	0xb6, 0xfd, 0x45, 0xac, 0x6d, 0x45, 0xd0, 0xf7, 0x8a, 0xa0, 0x1f, 0x15, 0x41, 0x3f, 0x2b, 0x82,
	0xbe, 0xfe, 0x26, 0xd6, 0xf5, 0xc0, 0xec, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0x71, 0x50, 0x0b,
	0x9d, 0x92, 0x02, 0x00, 0x00,
}
