// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:490
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALL_EXISTENCE = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const IMPORT = 57486
const INCREMENTAL = 57487
const IF = 57488
const IFNULL = 57489
const ILIKE = 57490
const IN = 57491
const INET = 57492
const INTERLEAVE = 57493
const INDEX = 57494
const INDEXES = 57495
const INITIALLY = 57496
const INNER = 57497
const INSERT = 57498
const INT = 57499
const INT2VECTOR = 57500
const INT2 = 57501
const INT4 = 57502
const INT8 = 57503
const INT64 = 57504
const INTEGER = 57505
const INTERSECT = 57506
const INTERVAL = 57507
const INTO = 57508
const IS = 57509
const ISOLATION = 57510
const JOB = 57511
const JOBS = 57512
const JOIN = 57513
const JSON = 57514
const JSONB = 57515
const KEY = 57516
const KEYS = 57517
const KV = 57518
const LATERAL = 57519
const LC_CTYPE = 57520
const LC_COLLATE = 57521
const LEADING = 57522
const LEAST = 57523
const LEFT = 57524
const LESS = 57525
const LEVEL = 57526
const LIKE = 57527
const LIMIT = 57528
const LIST = 57529
const LOCAL = 57530
const LOCALTIME = 57531
const LOCALTIMESTAMP = 57532
const LOW = 57533
const LSHIFT = 57534
const MATCH = 57535
const MAXVALUE = 57536
const MINUTE = 57537
const MONTH = 57538
const NAN = 57539
const NAME = 57540
const NAMES = 57541
const NATURAL = 57542
const NEXT = 57543
const NO = 57544
const NO_INDEX_JOIN = 57545
const NORMAL = 57546
const NOT = 57547
const NOTHING = 57548
const NULL = 57549
const NULLIF = 57550
const NULLS = 57551
const NUMERIC = 57552
const OF = 57553
const OFF = 57554
const OFFSET = 57555
const OID = 57556
const ON = 57557
const ONLY = 57558
const OPTIONS = 57559
const OR = 57560
const ORDER = 57561
const ORDINALITY = 57562
const OUT = 57563
const OUTER = 57564
const OVER = 57565
const OVERLAPS = 57566
const OVERLAY = 57567
const PARENT = 57568
const PARTIAL = 57569
const PARTITION = 57570
const PASSWORD = 57571
const PAUSE = 57572
const PLACING = 57573
const PLANS = 57574
const POSITION = 57575
const PRECEDING = 57576
const PRECISION = 57577
const PREPARE = 57578
const PRIMARY = 57579
const PRIORITY = 57580
const QUERIES = 57581
const QUERY = 57582
const RANGE = 57583
const READ = 57584
const REAL = 57585
const RECURSIVE = 57586
const REF = 57587
const REFERENCES = 57588
const REGCLASS = 57589
const REGPROC = 57590
const REGPROCEDURE = 57591
const REGNAMESPACE = 57592
const REGTYPE = 57593
const REMOVE_PATH = 57594
const RENAME = 57595
const REPEATABLE = 57596
const RELEASE = 57597
const RESET = 57598
const RESTORE = 57599
const RESTRICT = 57600
const RESUME = 57601
const RETURNING = 57602
const REVOKE = 57603
const RIGHT = 57604
const ROLLBACK = 57605
const ROLLUP = 57606
const ROW = 57607
const ROWS = 57608
const RSHIFT = 57609
const SAVEPOINT = 57610
const SCATTER = 57611
const SCRUB = 57612
const SEARCH = 57613
const SECOND = 57614
const SELECT = 57615
const SEQUENCES = 57616
const SERIAL = 57617
const SERIALIZABLE = 57618
const SESSION = 57619
const SESSIONS = 57620
const SESSION_USER = 57621
const SET = 57622
const SETTING = 57623
const SETTINGS = 57624
const SHOW = 57625
const SIMILAR = 57626
const SIMPLE = 57627
const SMALLINT = 57628
const SMALLSERIAL = 57629
const SNAPSHOT = 57630
const SOME = 57631
const SOME_EXISTENCE = 57632
const SPLIT = 57633
const SQL = 57634
const START = 57635
const STATUS = 57636
const STDIN = 57637
const STRICT = 57638
const STRING = 57639
const STORE = 57640
const STORING = 57641
const SUBSTRING = 57642
const SYMMETRIC = 57643
const SYSTEM = 57644
const TABLE = 57645
const TABLES = 57646
const TEMP = 57647
const TEMPLATE = 57648
const TEMPORARY = 57649
const TESTING_RANGES = 57650
const TESTING_RELOCATE = 57651
const TEXT = 57652
const THAN = 57653
const THEN = 57654
const TIME = 57655
const TIMESTAMP = 57656
const TIMESTAMPTZ = 57657
const TO = 57658
const TRAILING = 57659
const TRACE = 57660
const TRANSACTION = 57661
const TREAT = 57662
const TRIM = 57663
const TRUE = 57664
const TRUNCATE = 57665
const TYPE = 57666
const UNBOUNDED = 57667
const UNCOMMITTED = 57668
const UNION = 57669
const UNIQUE = 57670
const UNKNOWN = 57671
const UPDATE = 57672
const UPSERT = 57673
const USE = 57674
const USER = 57675
const USERS = 57676
const USING = 57677
const UUID = 57678
const VALID = 57679
const VALIDATE = 57680
const VALUE = 57681
const VALUES = 57682
const VARCHAR = 57683
const VARIADIC = 57684
const VIEW = 57685
const VARYING = 57686
const WHEN = 57687
const WHERE = 57688
const WINDOW = 57689
const WITH = 57690
const WITHIN = 57691
const WITHOUT = 57692
const WRITE = 57693
const YEAR = 57694
const ZONE = 57695
const NOT_LA = 57696
const WITH_LA = 57697
const AS_LA = 57698
const CONTAINED_BY = 57699
const POSTFIXOP = 57700
const UMINUS = 57701
const HELPTOKEN = 57702

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6888

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	380, 54,
	-2, 718,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	152, 569,
	-2, 0,
	-1, 57,
	97, 718,
	156, 718,
	330, 718,
	331, 718,
	-2, 0,
	-1, 67,
	1, 680,
	215, 680,
	260, 680,
	375, 680,
	377, 680,
	379, 680,
	380, 680,
	-2, 693,
	-1, 100,
	4, 720,
	20, 720,
	21, 720,
	24, 720,
	29, 720,
	34, 720,
	35, 720,
	36, 720,
	37, 720,
	38, 720,
	39, 720,
	40, 720,
	41, 720,
	42, 720,
	43, 720,
	45, 720,
	46, 720,
	47, 720,
	48, 720,
	49, 720,
	52, 720,
	53, 720,
	54, 720,
	56, 720,
	57, 720,
	61, 720,
	62, 720,
	63, 720,
	65, 720,
	66, 720,
	67, 720,
	68, 720,
	70, 720,
	72, 720,
	73, 720,
	76, 720,
	77, 720,
	78, 720,
	86, 720,
	87, 720,
	88, 720,
	89, 720,
	90, 720,
	91, 720,
	92, 720,
	93, 720,
	95, 720,
	97, 720,
	99, 720,
	102, 720,
	103, 720,
	105, 720,
	109, 720,
	110, 720,
	111, 720,
	112, 720,
	113, 720,
	114, 720,
	115, 720,
	123, 720,
	124, 720,
	125, 720,
	126, 720,
	127, 720,
	129, 720,
	131, 720,
	136, 720,
	137, 720,
	139, 720,
	142, 720,
	143, 720,
	144, 720,
	145, 720,
	146, 720,
	147, 720,
	150, 720,
	151, 720,
	153, 720,
	156, 720,
	157, 720,
	158, 720,
	159, 720,
	160, 720,
	161, 720,
	162, 720,
	163, 720,
	165, 720,
	168, 720,
	169, 720,
	170, 720,
	172, 720,
	173, 720,
	174, 720,
	175, 720,
	176, 720,
	178, 720,
	179, 720,
	181, 720,
	183, 720,
	184, 720,
	187, 720,
	188, 720,
	191, 720,
	193, 720,
	195, 720,
	196, 720,
	197, 720,
	198, 720,
	199, 720,
	201, 720,
	202, 720,
	203, 720,
	204, 720,
	208, 720,
	209, 720,
	210, 720,
	211, 720,
	212, 720,
	214, 720,
	216, 720,
	217, 720,
	220, 720,
	221, 720,
	223, 720,
	225, 720,
	226, 720,
	227, 720,
	228, 720,
	229, 720,
	230, 720,
	232, 720,
	233, 720,
	234, 720,
	235, 720,
	236, 720,
	238, 720,
	239, 720,
	240, 720,
	241, 720,
	242, 720,
	243, 720,
	244, 720,
	245, 720,
	247, 720,
	248, 720,
	249, 720,
	250, 720,
	251, 720,
	253, 720,
	254, 720,
	255, 720,
	256, 720,
	257, 720,
	258, 720,
	259, 720,
	261, 720,
	263, 720,
	264, 720,
	265, 720,
	266, 720,
	268, 720,
	269, 720,
	270, 720,
	271, 720,
	272, 720,
	274, 720,
	275, 720,
	276, 720,
	277, 720,
	278, 720,
	280, 720,
	281, 720,
	282, 720,
	283, 720,
	285, 720,
	286, 720,
	287, 720,
	288, 720,
	291, 720,
	292, 720,
	293, 720,
	294, 720,
	295, 720,
	296, 720,
	297, 720,
	298, 720,
	299, 720,
	300, 720,
	302, 720,
	304, 720,
	305, 720,
	306, 720,
	307, 720,
	308, 720,
	309, 720,
	310, 720,
	311, 720,
	313, 720,
	314, 720,
	315, 720,
	318, 720,
	319, 720,
	320, 720,
	321, 720,
	323, 720,
	324, 720,
	325, 720,
	326, 720,
	329, 720,
	330, 720,
	331, 720,
	332, 720,
	334, 720,
	336, 720,
	337, 720,
	338, 720,
	339, 720,
	340, 720,
	341, 720,
	344, 720,
	349, 720,
	350, 720,
	351, 720,
	352, 720,
	353, 720,
	-2, 0,
	-1, 126,
	1, 683,
	215, 683,
	260, 683,
	375, 683,
	377, 683,
	379, 683,
	380, 683,
	-2, 692,
	-1, 131,
	1, 618,
	168, 618,
	238, 618,
	242, 618,
	379, 618,
	380, 618,
	-2, 0,
	-1, 133,
	1, 618,
	379, 618,
	380, 618,
	-2, 0,
	-1, 134,
	1, 618,
	379, 618,
	380, 618,
	-2, 0,
	-1, 135,
	1, 622,
	379, 622,
	380, 622,
	-2, 0,
	-1, 142,
	4, 726,
	5, 726,
	6, 726,
	7, 726,
	8, 726,
	9, 726,
	20, 726,
	21, 726,
	24, 726,
	29, 726,
	30, 726,
	34, 726,
	35, 726,
	36, 726,
	37, 726,
	38, 726,
	39, 726,
	40, 726,
	41, 726,
	42, 726,
	43, 726,
	45, 726,
	46, 726,
	47, 726,
	48, 726,
	49, 726,
	50, 726,
	51, 726,
	52, 726,
	53, 726,
	54, 726,
	56, 726,
	57, 726,
	59, 726,
	61, 726,
	62, 726,
	63, 726,
	65, 726,
	66, 726,
	67, 726,
	68, 726,
	70, 726,
	72, 726,
	73, 726,
	75, 726,
	76, 726,
	77, 726,
	78, 726,
	80, 726,
	81, 726,
	82, 726,
	84, 726,
	85, 726,
	86, 726,
	87, 726,
	88, 726,
	89, 726,
	90, 726,
	91, 726,
	92, 726,
	93, 726,
	94, 726,
	95, 726,
	97, 726,
	99, 726,
	102, 726,
	103, 726,
	105, 726,
	109, 726,
	110, 726,
	111, 726,
	112, 726,
	113, 726,
	114, 726,
	115, 726,
	116, 726,
	117, 726,
	123, 726,
	124, 726,
	125, 726,
	126, 726,
	127, 726,
	129, 726,
	131, 726,
	134, 726,
	136, 726,
	137, 726,
	139, 726,
	142, 726,
	143, 726,
	144, 726,
	145, 726,
	146, 726,
	147, 726,
	148, 726,
	150, 726,
	151, 726,
	153, 726,
	155, 726,
	156, 726,
	157, 726,
	158, 726,
	159, 726,
	160, 726,
	161, 726,
	162, 726,
	163, 726,
	165, 726,
	167, 726,
	168, 726,
	169, 726,
	170, 726,
	171, 726,
	172, 726,
	173, 726,
	174, 726,
	175, 726,
	176, 726,
	178, 726,
	179, 726,
	181, 726,
	182, 726,
	183, 726,
	184, 726,
	185, 726,
	187, 726,
	188, 726,
	191, 726,
	193, 726,
	194, 726,
	195, 726,
	196, 726,
	197, 726,
	198, 726,
	199, 726,
	200, 726,
	201, 726,
	202, 726,
	203, 726,
	204, 726,
	205, 726,
	207, 726,
	208, 726,
	209, 726,
	210, 726,
	211, 726,
	212, 726,
	214, 726,
	217, 726,
	220, 726,
	221, 726,
	222, 726,
	223, 726,
	224, 726,
	225, 726,
	226, 726,
	227, 726,
	228, 726,
	229, 726,
	230, 726,
	232, 726,
	233, 726,
	234, 726,
	235, 726,
	236, 726,
	238, 726,
	239, 726,
	240, 726,
	241, 726,
	242, 726,
	243, 726,
	244, 726,
	245, 726,
	247, 726,
	248, 726,
	249, 726,
	250, 726,
	251, 726,
	253, 726,
	254, 726,
	255, 726,
	256, 726,
	257, 726,
	258, 726,
	259, 726,
	261, 726,
	262, 726,
	263, 726,
	264, 726,
	265, 726,
	266, 726,
	268, 726,
	269, 726,
	270, 726,
	271, 726,
	272, 726,
	274, 726,
	275, 726,
	276, 726,
	277, 726,
	278, 726,
	279, 726,
	280, 726,
	281, 726,
	282, 726,
	283, 726,
	284, 726,
	285, 726,
	286, 726,
	287, 726,
	288, 726,
	291, 726,
	292, 726,
	293, 726,
	294, 726,
	295, 726,
	296, 726,
	297, 726,
	298, 726,
	299, 726,
	300, 726,
	302, 726,
	304, 726,
	305, 726,
	306, 726,
	307, 726,
	308, 726,
	309, 726,
	310, 726,
	311, 726,
	313, 726,
	314, 726,
	315, 726,
	318, 726,
	319, 726,
	320, 726,
	321, 726,
	322, 726,
	323, 726,
	324, 726,
	325, 726,
	326, 726,
	329, 726,
	330, 726,
	331, 726,
	332, 726,
	333, 726,
	334, 726,
	336, 726,
	337, 726,
	338, 726,
	339, 726,
	340, 726,
	341, 726,
	344, 726,
	349, 726,
	350, 726,
	351, 726,
	352, 726,
	353, 726,
	354, 726,
	362, 726,
	367, 726,
	368, 726,
	369, 726,
	376, 726,
	382, 726,
	-2, 0,
	-1, 145,
	1, 54,
	380, 54,
	-2, 718,
	-1, 512,
	133, 1336,
	316, 1336,
	359, 1336,
	378, 1336,
	-2, 0,
	-1, 513,
	133, 1283,
	316, 1283,
	359, 1283,
	378, 1283,
	-2, 0,
	-1, 515,
	133, 1395,
	316, 1395,
	359, 1395,
	378, 1395,
	-2, 0,
	-1, 517,
	133, 1418,
	316, 1418,
	359, 1418,
	378, 1418,
	-2, 0,
	-1, 524,
	133, 1341,
	316, 1341,
	359, 1341,
	378, 1341,
	-2, 338,
	-1, 550,
	1, 416,
	375, 416,
	377, 416,
	379, 416,
	380, 416,
	-2, 0,
	-1, 551,
	1, 468,
	130, 468,
	375, 468,
	377, 468,
	379, 468,
	380, 468,
	-2, 0,
	-1, 557,
	1, 430,
	375, 430,
	377, 430,
	379, 430,
	380, 430,
	-2, 0,
	-1, 559,
	1, 434,
	375, 434,
	377, 434,
	379, 434,
	380, 434,
	-2, 0,
	-1, 562,
	1, 442,
	375, 442,
	377, 442,
	379, 442,
	380, 442,
	-2, 0,
	-1, 563,
	1, 447,
	375, 447,
	377, 447,
	379, 447,
	380, 447,
	-2, 0,
	-1, 566,
	1, 457,
	375, 457,
	377, 457,
	379, 457,
	380, 457,
	-2, 0,
	-1, 587,
	118, 728,
	130, 728,
	186, 728,
	213, 728,
	-2, 687,
	-1, 594,
	118, 727,
	130, 727,
	186, 727,
	213, 727,
	-2, 684,
	-1, 650,
	376, 1261,
	-2, 1254,
	-1, 651,
	376, 1262,
	-2, 1255,
	-1, 657,
	5, 912,
	376, 912,
	-2, 1470,
	-1, 682,
	5, 871,
	-2, 1439,
	-1, 683,
	5, 906,
	376, 906,
	-2, 1441,
	-1, 684,
	5, 881,
	-2, 1442,
	-1, 685,
	5, 880,
	-2, 1443,
	-1, 686,
	5, 906,
	376, 906,
	-2, 1446,
	-1, 687,
	5, 906,
	376, 906,
	-2, 1447,
	-1, 688,
	5, 907,
	-2, 1450,
	-1, 689,
	5, 863,
	-2, 1451,
	-1, 690,
	5, 863,
	-2, 1452,
	-1, 691,
	5, 888,
	-2, 1456,
	-1, 692,
	5, 873,
	-2, 1457,
	-1, 693,
	5, 874,
	-2, 1458,
	-1, 694,
	5, 864,
	-2, 1464,
	-1, 695,
	5, 865,
	-2, 1465,
	-1, 696,
	5, 866,
	-2, 1466,
	-1, 697,
	5, 867,
	-2, 1467,
	-1, 698,
	5, 868,
	-2, 1468,
	-1, 699,
	5, 869,
	-2, 1469,
	-1, 700,
	5, 863,
	-2, 1476,
	-1, 701,
	5, 872,
	-2, 1481,
	-1, 702,
	5, 870,
	-2, 1484,
	-1, 703,
	5, 904,
	376, 904,
	-2, 1486,
	-1, 704,
	5, 908,
	-2, 1489,
	-1, 705,
	5, 910,
	-2, 1490,
	-1, 706,
	5, 903,
	376, 903,
	-2, 1495,
	-1, 890,
	229, 716,
	-2, 562,
	-1, 903,
	215, 1258,
	-2, 0,
	-1, 939,
	1, 218,
	375, 218,
	377, 218,
	379, 218,
	380, 218,
	-2, 691,
	-1, 942,
	4, 1494,
	10, 1494,
	11, 1494,
	13, 1494,
	14, 1494,
	15, 1494,
	16, 1494,
	17, 1494,
	18, 1494,
	20, 1494,
	21, 1494,
	23, 1494,
	24, 1494,
	27, 1494,
	29, 1494,
	31, 1494,
	34, 1494,
	35, 1494,
	36, 1494,
	37, 1494,
	38, 1494,
	39, 1494,
	40, 1494,
	41, 1494,
	42, 1494,
	43, 1494,
	45, 1494,
	46, 1494,
	47, 1494,
	48, 1494,
	49, 1494,
	52, 1494,
	53, 1494,
	54, 1494,
	56, 1494,
	57, 1494,
	58, 1494,
	61, 1494,
	62, 1494,
	63, 1494,
	64, 1494,
	65, 1494,
	66, 1494,
	67, 1494,
	68, 1494,
	70, 1494,
	71, 1494,
	72, 1494,
	73, 1494,
	75, 1494,
	76, 1494,
	77, 1494,
	78, 1494,
	86, 1494,
	87, 1494,
	88, 1494,
	89, 1494,
	90, 1494,
	91, 1494,
	92, 1494,
	93, 1494,
	95, 1494,
	97, 1494,
	99, 1494,
	102, 1494,
	103, 1494,
	105, 1494,
	109, 1494,
	110, 1494,
	111, 1494,
	112, 1494,
	113, 1494,
	114, 1494,
	115, 1494,
	119, 1494,
	120, 1494,
	121, 1494,
	122, 1494,
	123, 1494,
	124, 1494,
	125, 1494,
	126, 1494,
	127, 1494,
	128, 1494,
	129, 1494,
	131, 1494,
	134, 1494,
	136, 1494,
	137, 1494,
	139, 1494,
	142, 1494,
	143, 1494,
	144, 1494,
	145, 1494,
	146, 1494,
	147, 1494,
	148, 1494,
	149, 1494,
	150, 1494,
	151, 1494,
	153, 1494,
	155, 1494,
	156, 1494,
	157, 1494,
	158, 1494,
	159, 1494,
	160, 1494,
	161, 1494,
	162, 1494,
	163, 1494,
	165, 1494,
	167, 1494,
	168, 1494,
	169, 1494,
	170, 1494,
	171, 1494,
	172, 1494,
	173, 1494,
	174, 1494,
	175, 1494,
	176, 1494,
	178, 1494,
	179, 1494,
	181, 1494,
	182, 1494,
	183, 1494,
	184, 1494,
	185, 1494,
	187, 1494,
	188, 1494,
	191, 1494,
	192, 1494,
	193, 1494,
	195, 1494,
	196, 1494,
	197, 1494,
	198, 1494,
	199, 1494,
	200, 1494,
	201, 1494,
	202, 1494,
	203, 1494,
	204, 1494,
	208, 1494,
	209, 1494,
	210, 1494,
	211, 1494,
	212, 1494,
	214, 1494,
	217, 1494,
	218, 1494,
	220, 1494,
	221, 1494,
	223, 1494,
	225, 1494,
	226, 1494,
	227, 1494,
	228, 1494,
	229, 1494,
	230, 1494,
	232, 1494,
	233, 1494,
	234, 1494,
	235, 1494,
	236, 1494,
	238, 1494,
	239, 1494,
	240, 1494,
	241, 1494,
	242, 1494,
	243, 1494,
	244, 1494,
	245, 1494,
	247, 1494,
	248, 1494,
	249, 1494,
	250, 1494,
	251, 1494,
	252, 1494,
	253, 1494,
	254, 1494,
	255, 1494,
	256, 1494,
	257, 1494,
	258, 1494,
	259, 1494,
	261, 1494,
	262, 1494,
	263, 1494,
	264, 1494,
	265, 1494,
	266, 1494,
	267, 1494,
	268, 1494,
	269, 1494,
	270, 1494,
	271, 1494,
	272, 1494,
	274, 1494,
	275, 1494,
	276, 1494,
	277, 1494,
	278, 1494,
	280, 1494,
	281, 1494,
	282, 1494,
	283, 1494,
	284, 1494,
	285, 1494,
	286, 1494,
	287, 1494,
	288, 1494,
	290, 1494,
	291, 1494,
	292, 1494,
	293, 1494,
	294, 1494,
	295, 1494,
	296, 1494,
	297, 1494,
	298, 1494,
	299, 1494,
	300, 1494,
	302, 1494,
	304, 1494,
	305, 1494,
	306, 1494,
	307, 1494,
	308, 1494,
	309, 1494,
	310, 1494,
	311, 1494,
	313, 1494,
	314, 1494,
	315, 1494,
	318, 1494,
	319, 1494,
	320, 1494,
	321, 1494,
	323, 1494,
	324, 1494,
	325, 1494,
	326, 1494,
	329, 1494,
	330, 1494,
	331, 1494,
	332, 1494,
	334, 1494,
	336, 1494,
	337, 1494,
	338, 1494,
	339, 1494,
	340, 1494,
	341, 1494,
	344, 1494,
	349, 1494,
	350, 1494,
	351, 1494,
	352, 1494,
	353, 1494,
	354, 1494,
	355, 1494,
	357, 1494,
	358, 1494,
	359, 1494,
	360, 1494,
	361, 1494,
	362, 1494,
	364, 1494,
	365, 1494,
	366, 1494,
	367, 1494,
	368, 1494,
	369, 1494,
	370, 1494,
	371, 1494,
	372, 1494,
	374, 1494,
	377, 1494,
	378, 1494,
	381, 1494,
	382, 1494,
	-2, 0,
	-1, 957,
	133, 1395,
	316, 1395,
	359, 1395,
	378, 1395,
	-2, 0,
	-1, 974,
	133, 1418,
	316, 1418,
	359, 1418,
	378, 1418,
	-2, 0,
	-1, 975,
	168, 630,
	238, 630,
	242, 630,
	-2, 326,
	-1, 1043,
	118, 727,
	130, 727,
	186, 727,
	213, 727,
	-2, 688,
	-1, 1124,
	108, 693,
	118, 693,
	130, 693,
	164, 693,
	186, 693,
	213, 693,
	219, 693,
	327, 693,
	-2, 1042,
	-1, 1134,
	376, 1238,
	-2, 1226,
	-1, 1152,
	377, 1155,
	-2, 0,
	-1, 1176,
	168, 630,
	238, 630,
	242, 630,
	-2, 625,
	-1, 1204,
	377, 1155,
	-2, 0,
	-1, 1208,
	108, 693,
	118, 693,
	130, 693,
	164, 693,
	186, 693,
	213, 693,
	219, 693,
	327, 693,
	-2, 794,
	-1, 1350,
	168, 630,
	238, 630,
	242, 630,
	-2, 328,
	-1, 1458,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 947,
	-1, 1459,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 948,
	-1, 1460,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 949,
	-1, 1461,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 950,
	-1, 1462,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 951,
	-1, 1463,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 952,
	-1, 1464,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 953,
	-1, 1465,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 954,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 963,
	-1, 1475,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 964,
	-1, 1476,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 965,
	-1, 1479,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 970,
	-1, 1485,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 972,
	-1, 1487,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 976,
	-1, 1488,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 977,
	-1, 1489,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 978,
	-1, 1490,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 979,
	-1, 1559,
	133, 1166,
	376, 1261,
	-2, 1254,
	-1, 1560,
	133, 1167,
	-2, 1435,
	-1, 1561,
	133, 1168,
	-2, 1340,
	-1, 1562,
	133, 1169,
	-2, 1301,
	-1, 1563,
	133, 1170,
	-2, 1318,
	-1, 1564,
	133, 1171,
	-2, 1339,
	-1, 1565,
	133, 1172,
	-2, 1392,
	-1, 1642,
	1, 795,
	75, 795,
	108, 795,
	118, 795,
	130, 795,
	134, 795,
	138, 795,
	140, 795,
	155, 795,
	164, 795,
	171, 795,
	182, 795,
	186, 795,
	200, 795,
	213, 795,
	215, 795,
	219, 795,
	260, 795,
	262, 795,
	327, 795,
	335, 795,
	346, 795,
	347, 795,
	356, 795,
	375, 795,
	377, 795,
	379, 795,
	380, 795,
	381, 795,
	-2, 794,
	-1, 1792,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 971,
	-1, 1793,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 973,
	-1, 1798,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 974,
	-1, 1816,
	224, 1126,
	-2, 1128,
	-1, 1990,
	229, 716,
	-2, 562,
	-1, 2048,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 975,
	-1, 2053,
	167, 0,
	-2, 991,
	-1, 2062,
	224, 1127,
	-2, 1129,
	-1, 2104,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1019,
	-1, 2105,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1020,
	-1, 2106,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1021,
	-1, 2110,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1025,
	-1, 2111,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1026,
	-1, 2112,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1027,
	-1, 2248,
	167, 0,
	-2, 992,
	-1, 2251,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 995,
	-1, 2252,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 997,
	-1, 2375,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 996,
	-1, 2376,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 998,
	-1, 2383,
	167, 0,
	-2, 1028,
	-1, 2460,
	167, 0,
	-2, 1029,
	-1, 2542,
	37, 0,
	148, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 1438,
	-1, 2627,
	376, 1506,
	-2, 502,
}

const sqlPrivate = 57344

const sqlLast = 43448

var sqlAct = [...]int{

	651, 2610, 2624, 2608, 2343, 2342, 2541, 2625, 2591, 2550,
	2514, 2551, 2081, 2027, 2552, 2540, 2197, 1248, 1717, 649,
	2465, 2409, 1709, 1786, 2208, 2302, 595, 1637, 932, 893,
	648, 2316, 2237, 1256, 1291, 2353, 2230, 1502, 2164, 935,
	2163, 1994, 184, 2232, 2389, 884, 1202, 184, 1692, 1687,
	1206, 184, 627, 1706, 2224, 1211, 2002, 184, 781, 1931,
	2282, 1910, 184, 184, 467, 26, 184, 1996, 1185, 184,
	1882, 1718, 1655, 1251, 1250, 1691, 2134, 184, 1638, 1681,
	1646, 1918, 450, 185, 1881, 1827, 1688, 1130, 1515, 603,
	121, 1514, 641, 1765, 1244, 1539, 1375, 978, 1216, 1048,
	1214, 1437, 1588, 1523, 66, 1186, 621, 1499, 1432, 1371,
	523, 760, 1415, 928, 1413, 447, 977, 1782, 1162, 1533,
	1166, 918, 925, 1689, 1711, 1695, 763, 1624, 940, 895,
	1611, 1193, 743, 503, 1555, 1119, 1049, 184, 184, 619,
	126, 1416, 127, 1414, 1374, 184, 175, 121, 643, 1176,
	520, 481, 1263, 180, 516, 915, 741, 1175, 2317, 1053,
	2148, 544, 1815, 2149, 1271, 1271, 1271, 1710, 599, 2344,
	2344, 184, 184, 184, 184, 783, 599, 2640, 2639, 184,
	184, 2633, 2633, 2632, 2587, 2586, 2585, 2633, 1239, 1239,
	1239, 2567, 2562, 2561, 2558, 2315, 1618, 1618, 1239, 2538,
	757, 2537, 2011, 1281, 2509, 1281, 1682, 2504, 1742, 495,
	26, 1239, 2503, 594, 2499, 2491, 2367, 2462, 1239, 2315,
	2440, 1742, 2437, 1203, 2315, 2435, 1239, 609, 2420, 2315,
	2419, 2137, 1239, 600, 2315, 121, 2397, 2394, 2377, 2338,
	1239, 1239, 1742, 1618, 2336, 2314, 2295, 2250, 1618, 2315,
	1239, 1742, 2223, 2218, 2046, 2144, 1686, 1686, 784, 2145,
	2012, 2057, 588, 2021, 587, 1618, 872, 1983, 1982, 1907,
	1906, 1899, 1239, 1618, 1239, 1900, 1897, 1896, 1682, 1819,
	1618, 1618, 768, 772, 1895, 1820, 1752, 778, 1618, 1536,
	1618, 604, 1064, 1065, 745, 1094, 1095, 1096, 1104, 1105,
	1106, 1235, 1741, 1281, 1732, 1082, 1742, 1685, 1618, 1097,
	1714, 1686, 1613, 1617, 1284, 2645, 1067, 1618, 1285, 1108,
	1064, 1065, 2641, 2621, 747, 2631, 748, 1618, 2510, 1281,
	1618, 142, 2371, 2367, 2137, 1612, 2037, 1644, 1826, 2117,
	1066, 1537, 1064, 1065, 1067, 2059, 1086, 1983, 1104, 1105,
	1106, 1785, 1763, 1083, 1353, 1852, 1853, 1180, 1518, 1239,
	870, 144, 959, 145, 956, 955, 1067, 2318, 1066, 1108,
	954, 953, 952, 1272, 1272, 1272, 951, 950, 949, 142,
	948, 947, 946, 945, 944, 943, 749, 746, 593, 592,
	1066, 591, 590, 1538, 1535, 586, 1086, 585, 143, 584,
	583, 1089, 1090, 1091, 1092, 582, 136, 576, 575, 144,
	1072, 574, 542, 137, 541, 1372, 540, 1292, 539, 184,
	898, 184, 538, 184, 537, 536, 184, 535, 534, 533,
	1101, 1109, 184, 532, 128, 531, 530, 1269, 1072, 1064,
	1065, 184, 184, 184, 184, 898, 143, 529, 528, 1107,
	898, 1089, 1090, 1091, 1092, 527, 526, 511, 510, 890,
	1072, 509, 508, 1067, 507, 438, 416, 1099, 409, 408,
	1540, 168, 167, 1858, 1087, 166, 184, 165, 164, 163,
	1101, 1109, 128, 162, 602, 2609, 161, 1066, 160, 142,
	184, 159, 158, 157, 2372, 2614, 1277, 1270, 1406, 156,
	1098, 155, 1087, 899, 1852, 1853, 184, 154, 2011, 153,
	152, 151, 150, 149, 41, 40, 184, 1099, 148, 144,
	147, 146, 876, 1926, 1087, 1378, 41, 44, 899, 888,
	990, 901, 1552, 899, 1093, 2612, 1207, 1868, 1550, 44,
	2557, 1852, 1853, 917, 2539, 1548, 1546, 898, 2524, 1088,
	1534, 921, 921, 1739, 600, 2519, 143, 1072, 1060, 2457,
	1612, 2438, 2281, 922, 136, 473, 1102, 2280, 2360, 2276,
	2275, 137, 1081, 883, 1747, 881, 2268, 1088, 184, 941,
	2267, 2266, 1740, 2262, 1093, 2261, 993, 1852, 1853, 2260,
	2259, 476, 1713, 1985, 474, 2253, 2229, 2131, 2126, 1088,
	960, 56, 2125, 476, 57, 2124, 2067, 1981, 1938, 1934,
	1904, 1901, 1869, 1889, 1044, 1880, 1102, 1851, 1848, 1847,
	1845, 988, 1858, 59, 1832, 1831, 1816, 1852, 1853, 1642,
	899, 1060, 1288, 2630, 756, 59, 1100, 1059, 1510, 1078,
	1079, 1085, 1084, 1080, 1103, 1138, 1077, 1075, 1076, 1068,
	1069, 1070, 1071, 1073, 1074, 1205, 2634, 2619, 1131, 1858,
	1122, 2599, 1204, 2277, 2598, 1255, 2083, 975, 2529, 2528,
	972, 2527, 2494, 1043, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 2486, 1064, 1065, 1100, 876, 2485, 1039,
	2476, 2474, 2450, 2449, 1103, 1504, 1077, 1075, 1076, 1068,
	1069, 1070, 1071, 1073, 1074, 1858, 2406, 991, 1067, 60,
	1861, 1862, 1854, 1855, 1856, 1857, 1859, 1860, 2385, 2368,
	2347, 60, 2335, 1852, 1853, 2321, 1870, 1871, 1872, 2359,
	600, 2273, 1066, 1852, 1853, 129, 62, 1045, 63, 1046,
	2247, 184, 2206, 184, 588, 1858, 587, 129, 62, 1511,
	63, 2203, 142, 2202, 2200, 142, 2172, 1056, 1057, 475,
	2171, 2152, 96, 2140, 142, 184, 184, 1061, 1767, 1868,
	2052, 475, 1971, 1965, 96, 1373, 1781, 1867, 2025, 1951,
	1064, 1065, 144, 1950, 1780, 144, 1936, 1867, 1905, 1879,
	1841, 1840, 1837, 1191, 144, 1134, 1068, 1069, 1070, 1071,
	1073, 1074, 1072, 1812, 1067, 1164, 1165, 1807, 1167, 1868,
	1170, 1168, 1064, 1065, 1629, 1600, 1544, 1951, 882, 143,
	1189, 1171, 143, 1247, 1184, 1183, 1174, 136, 1066, 1160,
	136, 143, 1159, 1158, 137, 1157, 1067, 137, 1156, 136,
	1155, 1858, 1154, 1153, 1869, 1152, 137, 1151, 2373, 121,
	1150, 1858, 644, 1149, 1148, 128, 1147, 1146, 128, 1145,
	1066, 1854, 1855, 1856, 1857, 1859, 1860, 128, 1144, 600,
	898, 184, 1143, 1142, 1179, 1201, 1135, 783, 1123, 1122,
	1873, 971, 963, 184, 1869, 937, 2468, 2366, 2255, 1177,
	2228, 1209, 2147, 1924, 2143, 1818, 1630, 1131, 1072, 1181,
	1856, 1857, 1859, 1860, 184, 1868, 2023, 1551, 1744, 1237,
	184, 1120, 184, 1549, 184, 1868, 1205, 987, 184, 1254,
	1547, 1545, 1997, 1751, 611, 2370, 2369, 1064, 1065, 1246,
	1072, 2363, 2150, 2013, 1289, 1240, 1852, 1853, 1682, 1207,
	1974, 1863, 1861, 1862, 1854, 1855, 1856, 1857, 1859, 1860,
	1172, 1067, 1968, 899, 1037, 1173, 1964, 1903, 184, 184,
	784, 1042, 1087, 1902, 1791, 898, 1750, 184, 1410, 984,
	184, 1140, 1359, 2028, 1252, 1066, 1773, 2390, 1260, 1710,
	1869, 2084, 1524, 1862, 1854, 1855, 1856, 1857, 1859, 1860,
	1869, 783, 1823, 1345, 1087, 1163, 184, 2617, 1031, 2616,
	2007, 184, 2159, 2522, 1736, 444, 184, 184, 755, 184,
	419, 184, 1536, 184, 1217, 184, 1137, 1218, 2582, 1417,
	2498, 917, 2583, 2329, 1238, 736, 184, 1217, 1753, 734,
	1218, 2431, 184, 184, 1023, 2430, 1217, 1088, 1032, 1218,
	2428, 184, 2427, 1070, 1071, 1073, 1074, 2034, 899, 1379,
	2191, 732, 1224, 2188, 2156, 729, 2155, 1836, 1835, 707,
	1834, 1833, 1794, 184, 1537, 1262, 1265, 783, 428, 1088,
	1864, 1865, 1866, 1735, 784, 738, 1677, 1863, 1861, 1862,
	1854, 1855, 1856, 1857, 1859, 1860, 2341, 1863, 1861, 1862,
	1854, 1855, 1856, 1857, 1859, 1860, 1219, 1673, 1656, 1670,
	985, 439, 443, 1486, 598, 1286, 1380, 1360, 1178, 1219,
	121, 1287, 972, 1346, 869, 417, 1538, 1535, 1219, 1604,
	1347, 1603, 169, 1447, 1350, 1446, 1648, 429, 2628, 1707,
	422, 1376, 1404, 1364, 1040, 2183, 1394, 1068, 1069, 1070,
	1071, 1073, 1074, 986, 2497, 2195, 2024, 2196, 1573, 1419,
	784, 1384, 1387, 578, 490, 1978, 1501, 1388, 1501, 1389,
	597, 1390, 2411, 1391, 1242, 1392, 442, 1075, 1076, 1068,
	1069, 1070, 1071, 1073, 1074, 1659, 581, 1852, 1853, 184,
	1246, 184, 1398, 1400, 184, 1418, 1411, 443, 1412, 1403,
	580, 1383, 2535, 1540, 588, 184, 1428, 588, 588, 1429,
	1430, 422, 996, 581, 783, 877, 879, 184, 172, 1225,
	1266, 184, 1063, 1436, 184, 599, 1648, 1508, 184, 1521,
	1519, 709, 184, 1506, 970, 1647, 1017, 600, 184, 2174,
	2040, 1222, 600, 1524, 785, 184, 783, 1540, 2506, 2077,
	184, 1583, 1783, 1784, 1497, 2574, 1962, 1973, 184, 1223,
	1621, 442, 1745, 1631, 1512, 2582, 184, 1509, 2004, 1215,
	1495, 2601, 1632, 2507, 1030, 1018, 1649, 184, 2035, 184,
	1609, 184, 173, 1534, 184, 1967, 184, 2005, 184, 184,
	1658, 184, 898, 898, 1566, 961, 898, 784, 1667, 1074,
	184, 965, 1041, 1635, 1679, 1858, 1675, 1271, 1860, 1660,
	1662, 431, 430, 1363, 1362, 1036, 1372, 1369, 1228, 1205,
	2033, 1731, 1606, 1607, 1226, 600, 1540, 441, 611, 784,
	1616, 1730, 2004, 596, 2554, 1626, 1627, 1622, 1712, 2479,
	1712, 1220, 1161, 1665, 1701, 410, 1804, 1209, 2310, 1671,
	1402, 1491, 730, 1652, 1220, 418, 730, 444, 1678, 1492,
	1022, 1493, 1802, 1220, 2594, 1498, 500, 440, 1351, 1868,
	1274, 174, 2573, 1276, 613, 899, 899, 1279, 731, 899,
	423, 1657, 730, 1738, 121, 419, 479, 2311, 2611, 783,
	121, 1724, 2181, 2039, 921, 420, 921, 184, 2412, 740,
	1716, 1727, 739, 1366, 2609, 1725, 2381, 1726, 482, 2344,
	1733, 1728, 441, 184, 184, 184, 2175, 184, 1112, 1113,
	1114, 1115, 1116, 1737, 1734, 941, 418, 2555, 1746, 1125,
	976, 487, 1117, 170, 1796, 1748, 1500, 483, 482, 1133,
	1027, 981, 444, 1799, 1869, 1192, 184, 1764, 1839, 997,
	2074, 423, 440, 1800, 2487, 2041, 419, 1805, 1168, 1229,
	1171, 487, 2434, 1625, 579, 489, 420, 483, 1233, 484,
	1165, 1164, 784, 171, 1339, 1483, 1494, 2572, 599, 1754,
	2602, 1382, 1645, 1496, 1232, 2556, 1405, 478, 998, 900,
	486, 995, 1438, 1445, 1507, 121, 1641, 1367, 2306, 484,
	2307, 1062, 2075, 2038, 1196, 1196, 1230, 479, 2488, 437,
	1028, 982, 411, 969, 900, 983, 1272, 2592, 2242, 900,
	486, 1768, 1004, 2553, 1231, 1199, 1199, 1770, 1772, 432,
	2309, 2581, 1797, 2579, 981, 1777, 1776, 2352, 1756, 2312,
	1704, 1194, 1623, 1779, 1854, 1855, 1856, 1857, 1859, 1860,
	1758, 966, 1197, 1197, 1187, 1187, 958, 1052, 1051, 482,
	606, 1977, 569, 1825, 2422, 2421, 1029, 2271, 1801, 2607,
	1195, 2073, 1759, 2593, 2404, 1803, 2325, 2471, 2158, 1540,
	608, 1947, 487, 412, 1757, 1920, 1481, 1484, 483, 1358,
	2113, 1943, 1705, 1261, 1253, 2595, 981, 1249, 2328, 2515,
	1397, 1795, 708, 1424, 982, 2327, 1354, 485, 983, 1516,
	2620, 1064, 1065, 2209, 607, 886, 900, 885, 1932, 600,
	484, 2308, 1811, 1480, 184, 783, 1050, 656, 1051, 177,
	184, 184, 1198, 1198, 184, 1067, 1822, 485, 1356, 184,
	1047, 486, 184, 2354, 1908, 2405, 570, 1192, 1953, 1914,
	184, 1357, 1051, 1052, 1952, 1789, 184, 184, 184, 1066,
	1921, 981, 184, 1620, 488, 184, 982, 1619, 914, 1928,
	983, 184, 184, 184, 184, 184, 1373, 1370, 2272, 1912,
	1425, 184, 2606, 1913, 184, 1916, 1917, 2324, 184, 1922,
	1933, 1927, 498, 600, 488, 2114, 1050, 184, 1886, 1887,
	1888, 2115, 492, 1937, 597, 1919, 1196, 184, 784, 184,
	1944, 184, 898, 898, 2238, 184, 2326, 1923, 711, 184,
	1050, 903, 1482, 1052, 184, 710, 184, 1199, 1909, 1072,
	2198, 2345, 2402, 184, 1976, 1005, 992, 2283, 569, 433,
	1984, 1963, 1986, 1194, 2135, 1543, 184, 898, 912, 1970,
	2384, 1989, 1990, 1939, 1197, 2270, 608, 571, 485, 2194,
	184, 2403, 1883, 2051, 1979, 1846, 1806, 1749, 653, 472,
	34, 1684, 1195, 1676, 1987, 3, 1961, 1669, 1991, 1035,
	569, 434, 1034, 2009, 471, 33, 2020, 964, 1021, 611,
	611, 728, 1884, 1087, 1047, 899, 899, 874, 608, 875,
	184, 1774, 1395, 470, 30, 1026, 469, 72, 871, 1386,
	1141, 1542, 435, 2549, 436, 488, 1236, 2512, 2006, 2000,
	2299, 1988, 570, 2179, 2177, 2157, 1298, 2014, 600, 1993,
	899, 1708, 913, 1702, 1198, 605, 1700, 572, 1282, 2019,
	468, 71, 465, 22, 466, 23, 1280, 1368, 1278, 1275,
	184, 1273, 2054, 2029, 1421, 2064, 1426, 2030, 2031, 497,
	1015, 2032, 1433, 1234, 570, 2069, 2070, 2071, 1088, 491,
	2036, 573, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 2044, 1485, 2042, 1487, 1488, 1489,
	1490, 2058, 911, 464, 28, 34, 1020, 2060, 2063, 463,
	20, 766, 461, 19, 1513, 733, 735, 1298, 1298, 1227,
	33, 1125, 184, 571, 462, 18, 1025, 2085, 184, 900,
	2076, 2078, 2079, 1013, 2090, 1011, 785, 184, 184, 30,
	1553, 1554, 72, 1221, 1570, 2087, 1582, 1584, 1589, 1592,
	1593, 1594, 2119, 2445, 2092, 2146, 1995, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 1009, 571, 1007, 2120, 2118, 454,
	15, 2169, 455, 16, 460, 54, 71, 2142, 22, 1001,
	23, 1014, 2168, 910, 184, 2151, 184, 752, 2133, 2193,
	2136, 2138, 2583, 2365, 184, 121, 2364, 898, 1377, 2139,
	1054, 453, 53, 572, 459, 12, 2204, 753, 2225, 458,
	47, 1648, 184, 184, 2447, 1787, 2154, 2184, 1664, 2201,
	1663, 2189, 2161, 2153, 900, 1648, 2211, 2192, 2217, 184,
	452, 48, 1775, 2219, 1661, 457, 7, 573, 184, 1680,
	783, 184, 184, 2182, 2170, 572, 1672, 783, 477, 28,
	785, 456, 6, 1668, 2481, 20, 2213, 2185, 19, 2199,
	2214, 2185, 2318, 2210, 1012, 2205, 1010, 2185, 1912, 2244,
	18, 1948, 2212, 2215, 2221, 999, 2226, 636, 1055, 573,
	899, 1788, 2459, 2220, 184, 754, 2433, 2249, 2284, 451,
	5, 1408, 1409, 1058, 1674, 1008, 1666, 1006, 2239, 2511,
	2350, 1064, 1065, 1715, 1703, 2245, 1699, 1608, 1948, 1349,
	1000, 1064, 1065, 499, 909, 15, 1290, 2590, 16, 181,
	54, 2396, 2605, 784, 414, 1067, 785, 2289, 424, 2227,
	784, 1852, 1853, 2132, 445, 1064, 1065, 2080, 184, 493,
	181, 184, 1761, 501, 1761, 1760, 506, 53, 2026, 1066,
	12, 783, 184, 184, 525, 47, 184, 184, 184, 1066,
	2022, 2269, 1929, 2015, 2016, 1898, 2017, 2018, 1762, 1605,
	1602, 1601, 1532, 184, 1128, 2257, 48, 2072, 184, 2293,
	184, 7, 184, 184, 184, 1333, 1138, 1136, 1033, 184,
	2288, 2169, 184, 2285, 1024, 898, 1019, 6, 2319, 2286,
	1016, 1002, 2168, 184, 184, 968, 2298, 1352, 2290, 2291,
	577, 898, 2322, 2410, 744, 744, 480, 1385, 1003, 1925,
	2169, 1628, 414, 2340, 2505, 1126, 2169, 2287, 2263, 1838,
	2464, 2168, 2380, 1541, 784, 5, 1139, 2168, 51, 2294,
	2356, 2346, 2166, 630, 2300, 2160, 1694, 2351, 414, 414,
	776, 414, 1693, 2349, 786, 1361, 181, 873, 652, 2323,
	1557, 1438, 2088, 785, 2170, 1439, 2357, 727, 654, 2374,
	1438, 2093, 1295, 655, 1792, 1793, 2362, 2355, 899, 1296,
	1798, 1169, 642, 2361, 1293, 2379, 1333, 1333, 938, 2348,
	1719, 1365, 1505, 2170, 899, 785, 1522, 1821, 1132, 2170,
	184, 622, 184, 2123, 783, 184, 634, 633, 2386, 1520,
	962, 2310, 1817, 184, 2303, 1930, 2003, 2358, 1824, 783,
	1423, 1828, 1778, 1420, 1999, 2301, 2176, 421, 1849, 936,
	2305, 2393, 1580, 1572, 1568, 2169, 1038, 1118, 1842, 2395,
	2414, 900, 900, 2416, 1720, 900, 2168, 989, 2398, 2010,
	2311, 1743, 1182, 184, 2413, 1190, 898, 1431, 751, 750,
	184, 2618, 2400, 1246, 1355, 1755, 1111, 2169, 184, 184,
	898, 898, 1125, 2304, 184, 1110, 737, 2415, 2168, 1589,
	1589, 1589, 2473, 980, 979, 2443, 1946, 784, 2436, 2600,
	2480, 184, 2173, 2521, 2432, 2178, 184, 2180, 141, 2444,
	138, 2448, 784, 184, 2455, 2452, 1187, 2458, 2170, 2453,
	2454, 2451, 1915, 140, 139, 2439, 1975, 1427, 75, 32,
	2461, 31, 2442, 2467, 95, 2469, 2475, 94, 184, 184,
	93, 92, 91, 90, 2185, 184, 2470, 89, 785, 899,
	2170, 88, 87, 898, 86, 2478, 2446, 85, 184, 2477,
	898, 898, 84, 899, 899, 2492, 2484, 2490, 83, 82,
	2456, 2306, 2493, 2307, 81, 80, 79, 78, 77, 2496,
	521, 518, 2495, 74, 73, 184, 29, 184, 2501, 2502,
	184, 25, 783, 99, 24, 70, 69, 27, 17, 11,
	21, 125, 124, 2309, 123, 122, 525, 14, 525, 13,
	904, 2518, 2312, 907, 2001, 120, 1298, 2530, 119, 414,
	2532, 184, 118, 2531, 2169, 117, 1574, 116, 525, 525,
	414, 929, 2536, 2546, 2548, 2168, 899, 10, 184, 184,
	184, 2547, 2534, 899, 899, 2533, 184, 1283, 2559, 9,
	2523, 98, 2236, 1298, 611, 611, 45, 8, 2566, 2571,
	184, 2569, 2570, 525, 2568, 43, 1332, 611, 42, 97,
	111, 108, 110, 2517, 2580, 784, 2578, 525, 107, 109,
	2584, 1348, 631, 67, 2043, 113, 112, 105, 103, 1433,
	104, 1297, 106, 967, 2308, 2047, 102, 2170, 2048, 2588,
	101, 2589, 2596, 525, 2597, 1298, 114, 2604, 39, 38,
	2053, 37, 36, 35, 2, 2603, 1, 0, 0, 2061,
	783, 0, 783, 0, 2563, 2564, 2565, 2065, 0, 0,
	1915, 0, 0, 2622, 2623, 2629, 0, 0, 0, 0,
	67, 0, 0, 2635, 0, 2636, 0, 2638, 0, 0,
	2089, 2637, 0, 2644, 2091, 2642, 2643, 2646, 1808, 1809,
	0, 0, 0, 0, 0, 414, 0, 1332, 1332, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 2613, 0,
	2615, 0, 1335, 0, 785, 0, 0, 2121, 2122, 1334,
	0, 0, 1297, 1297, 0, 0, 2128, 2129, 2130, 0,
	0, 0, 0, 784, 589, 784, 1298, 1298, 0, 0,
	0, 601, 0, 0, 0, 1298, 1298, 0, 0, 626,
	0, 0, 0, 0, 2141, 0, 0, 762, 67, 0,
	0, 0, 1294, 0, 1875, 1876, 1877, 1126, 0, 0,
	0, 0, 0, 0, 0, 1526, 0, 0, 1298, 0,
	0, 0, 0, 0, 2162, 0, 0, 2424, 1558, 1558,
	1571, 0, 0, 0, 1591, 0, 413, 0, 1595, 1596,
	1598, 900, 900, 0, 0, 0, 0, 0, 2425, 2426,
	0, 0, 0, 1335, 1335, 0, 0, 0, 0, 0,
	1334, 1334, 0, 0, 1610, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 900, 0, 1187, 0,
	0, 0, 0, 0, 0, 0, 0, 2222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 0,
	744, 0, 0, 1294, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 414, 414, 0, 2248, 0, 0, 0, 2251,
	2252, 0, 0, 2254, 761, 0, 0, 0, 0, 0,
	2256, 0, 2258, 0, 1574, 1574, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1333, 0, 0, 2265, 0,
	770, 774, 0, 780, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1298, 0, 0, 0, 0,
	0, 2274, 1333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1574, 1574, 1574, 0, 2049, 2050, 0, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	414, 2320, 0, 0, 1333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1259, 0, 0, 0, 0, 0, 414, 0, 414,
	0, 414, 0, 0, 0, 1267, 0, 0, 0, 0,
	0, 0, 0, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
	2111, 2112, 601, 2116, 0, 0, 0, 0, 0, 1333,
	0, 0, 0, 1064, 1065, 525, 181, 0, 0, 0,
	2375, 2376, 0, 0, 181, 0, 0, 525, 0, 0,
	0, 0, 0, 0, 0, 0, 900, 1067, 0, 0,
	0, 0, 0, 0, 0, 1333, 1333, 0, 0, 0,
	0, 2388, 0, 525, 1333, 1333, 0, 2391, 525, 0,
	0, 1066, 0, 181, 525, 0, 525, 1086, 525, 0,
	525, 0, 525, 0, 0, 0, 0, 0, 0, 785,
	0, 0, 0, 1396, 1810, 0, 785, 1333, 0, 525,
	525, 1813, 0, 0, 0, 0, 0, 0, 414, 0,
	0, 2423, 0, 0, 0, 0, 1298, 0, 1829, 1830,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 774, 1089, 1090, 1091, 1092, 0, 0, 0, 0,
	0, 1072, 780, 0, 0, 0, 0, 0, 0, 0,
	1574, 1574, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 589, 0, 1878, 0,
	0, 0, 1298, 0, 0, 1591, 1591, 1591, 0, 0,
	1891, 0, 0, 0, 0, 0, 1121, 0, 1124, 0,
	2472, 0, 0, 0, 0, 1129, 0, 0, 0, 0,
	785, 0, 0, 0, 0, 1087, 0, 0, 0, 1574,
	1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
	1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1298, 1574,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 506, 0, 744, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	900, 1297, 414, 0, 1333, 1093, 0, 0, 0, 0,
	0, 0, 0, 1332, 1640, 0, 0, 774, 414, 0,
	1088, 414, 0, 0, 0, 1653, 0, 0, 0, 414,
	2545, 2545, 0, 0, 0, 414, 0, 0, 1297, 0,
	0, 0, 414, 0, 0, 0, 2560, 1683, 0, 0,
	0, 0, 0, 0, 0, 1690, 0, 0, 0, 0,
	0, 0, 67, 873, 0, 1332, 2545, 1208, 0, 0,
	0, 0, 0, 0, 414, 0, 1723, 0, 525, 0,
	0, 525, 0, 525, 0, 414, 414, 0, 1729, 0,
	1297, 0, 1335, 785, 0, 0, 0, 1653, 0, 1334,
	0, 0, 0, 0, 0, 0, 0, 0, 785, 0,
	0, 0, 0, 0, 2545, 0, 0, 1077, 1075, 1076,
	1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0, 1335,
	1332, 0, 0, 0, 0, 0, 1334, 0, 0, 0,
	0, 0, 1294, 2626, 0, 900, 0, 0, 0, 2383,
	0, 0, 0, 0, 2626, 1297, 0, 2626, 2626, 900,
	900, 0, 0, 0, 0, 0, 1332, 1332, 0, 0,
	0, 0, 0, 0, 0, 1332, 1332, 0, 0, 1294,
	0, 1335, 0, 0, 0, 0, 0, 0, 1334, 0,
	2407, 1297, 1297, 0, 1766, 0, 0, 0, 0, 0,
	1297, 1297, 0, 0, 761, 1212, 0, 0, 1332, 0,
	414, 414, 414, 0, 414, 0, 0, 0, 0, 0,
	2127, 0, 0, 0, 0, 1333, 0, 0, 0, 0,
	0, 1294, 900, 1297, 0, 0, 0, 0, 0, 900,
	900, 0, 0, 414, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 1334, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2460, 0, 0, 0, 0, 0, 0,
	0, 785, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 1335, 1335, 0, 0, 0, 1200, 0, 1334,
	1334, 1335, 1335, 0, 0, 2187, 1294, 0, 1334, 1334,
	0, 2190, 0, 0, 40, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 1245, 67, 1335, 0, 0, 0, 44, 0,
	0, 1334, 1294, 1294, 0, 0, 0, 1333, 0, 0,
	0, 1294, 1294, 0, 0, 0, 0, 0, 0, 774,
	0, 1264, 0, 1264, 473, 0, 589, 0, 0, 589,
	589, 0, 0, 0, 0, 1574, 0, 0, 0, 0,
	0, 0, 0, 0, 1294, 1332, 0, 0, 0, 0,
	0, 0, 0, 474, 0, 0, 0, 0, 0, 0,
	56, 0, 476, 57, 0, 0, 0, 0, 0, 785,
	1297, 785, 0, 0, 0, 0, 1574, 0, 0, 0,
	0, 0, 1503, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 0, 0, 59, 601, 0, 414, 414, 0,
	1124, 414, 0, 0, 0, 0, 1640, 0, 0, 1640,
	0, 0, 0, 0, 0, 0, 0, 1935, 0, 0,
	0, 0, 0, 414, 1941, 1942, 0, 0, 0, 1653,
	0, 0, 1949, 0, 0, 0, 0, 0, 1954, 1955,
	1957, 1959, 1960, 0, 0, 0, 0, 0, 414, 1574,
	1407, 1969, 0, 0, 0, 1972, 0, 0, 0, 0,
	0, 1335, 0, 0, 414, 0, 0, 762, 1334, 0,
	0, 0, 0, 0, 1259, 0, 1259, 0, 525, 0,
	60, 0, 414, 1208, 0, 0, 1998, 0, 0, 0,
	0, 414, 0, 2008, 0, 0, 67, 0, 0, 0,
	414, 0, 0, 0, 67, 0, 129, 62, 0, 63,
	0, 1294, 0, 1766, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 1766, 0, 0,
	475, 0, 0, 96, 0, 0, 67, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 0, 0, 0, 67, 0, 0,
	0, 0, 0, 67, 0, 0, 1332, 414, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 0, 0, 0,
	0, 0, 0, 0, 2392, 0, 41, 0, 0, 0,
	143, 1297, 0, 0, 0, 0, 0, 0, 136, 44,
	0, 0, 0, 0, 761, 137, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2082, 0, 0,
	761, 2418, 1332, 1643, 0, 473, 128, 0, 0, 0,
	0, 774, 0, 0, 0, 2429, 0, 774, 0, 0,
	0, 0, 0, 0, 780, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 474, 0, 0, 0, 0, 0,
	0, 56, 0, 476, 57, 0, 0, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 1721, 0, 1332, 0,
	0, 0, 1335, 0, 0, 0, 0, 780, 780, 1334,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 414,
	0, 0, 0, 1297, 0, 1640, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 1640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2165,
	0, 0, 1294, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 2186, 0, 0, 1334, 2186, 0, 0, 0,
	0, 0, 2186, 0, 0, 0, 0, 1503, 0, 2508,
	0, 1653, 0, 1259, 0, 0, 0, 0, 0, 0,
	0, 2207, 0, 0, 0, 0, 0, 1124, 0, 0,
	0, 60, 0, 0, 0, 2525, 2526, 0, 1294, 414,
	414, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 1334, 0, 448, 0, 0, 2233, 129, 62, 0,
	63, 0, 1769, 780, 1771, 2235, 774, 0, 2240, 414,
	0, 0, 0, 0, 142, 40, 0, 0, 1393, 0,
	0, 475, 0, 0, 96, 0, 41, 0, 0, 0,
	0, 0, 0, 0, 1294, 1790, 0, 0, 0, 44,
	0, 1124, 0, 0, 144, 0, 0, 0, 0, 0,
	0, 2264, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 762, 0, 0, 0,
	0, 143, 762, 762, 0, 0, 762, 0, 0, 136,
	0, 0, 0, 0, 474, 0, 137, 0, 0, 0,
	0, 56, 0, 476, 57, 414, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 1640,
	873, 0, 0, 2296, 2297, 1653, 0, 0, 0, 67,
	0, 0, 0, 0, 0, 59, 0, 67, 0, 2165,
	873, 0, 0, 0, 0, 2330, 0, 2331, 0, 414,
	2333, 2334, 0, 0, 0, 0, 414, 0, 0, 2339,
	0, 0, 67, 0, 0, 0, 67, 0, 2165, 0,
	873, 1690, 0, 0, 2165, 0, 601, 0, 0, 0,
	1064, 1065, 0, 1094, 1095, 1096, 1104, 1105, 1106, 0,
	0, 0, 0, 1082, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 1067, 0, 0, 1108, 0, 0,
	0, 0, 0, 761, 0, 0, 0, 0, 0, 761,
	761, 60, 0, 761, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 1940, 0, 129, 62, 0,
	63, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 1653, 0, 2399,
	1966, 475, 2401, 0, 96, 0, 0, 0, 0, 0,
	414, 0, 0, 2165, 0, 0, 1980, 0, 0, 1089,
	1090, 1091, 1092, 0, 144, 0, 0, 0, 1072, 0,
	0, 0, 0, 0, 1992, 0, 0, 0, 0, 2186,
	0, 0, 0, 1245, 0, 2165, 0, 0, 1101, 1109,
	414, 0, 1245, 0, 0, 0, 0, 873, 0, 0,
	0, 143, 0, 0, 0, 2233, 2233, 1107, 0, 136,
	0, 873, 0, 0, 0, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 2466, 0,
	0, 0, 1087, 1640, 0, 0, 0, 449, 67, 40,
	1259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 0, 762, 0, 0, 0, 1098, 2045,
	0, 0, 0, 44, 0, 2482, 2483, 0, 0, 0,
	0, 0, 414, 0, 0, 0, 0, 1852, 1853, 0,
	1870, 1871, 1872, 0, 0, 2500, 0, 0, 0, 473,
	0, 0, 1093, 0, 2246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 2516, 0, 873, 0, 0, 414, 474, 0,
	0, 0, 0, 0, 1102, 56, 0, 476, 57, 0,
	1081, 1867, 2165, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 762, 0, 0, 2466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 0, 0, 873, 873, 873, 0, 0,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2577, 0, 0,
	0, 761, 0, 0, 1100, 1858, 0, 1078, 1079, 1085,
	1084, 1080, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 0, 0, 0, 0, 0, 0, 1064,
	1065, 1894, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0,
	0, 0, 1082, 0, 1873, 0, 1097, 0, 0, 0,
	0, 0, 0, 1067, 0, 60, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1868,
	0, 0, 0, 0, 0, 0, 0, 1066, 0, 0,
	762, 129, 62, 1086, 63, 0, 0, 0, 0, 0,
	1083, 1721, 761, 0, 0, 40, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 475, 41, 131, 96, 1852,
	1853, 0, 1870, 1871, 1872, 0, 0, 0, 0, 44,
	0, 2241, 0, 0, 0, 0, 2056, 0, 144, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 1089, 1090,
	1091, 1092, 0, 46, 1869, 49, 0, 1072, 0, 1852,
	1853, 0, 1870, 1871, 1872, 0, 0, 0, 0, 0,
	0, 67, 0, 1867, 0, 143, 50, 1101, 1109, 0,
	52, 0, 0, 136, 55, 0, 0, 134, 0, 0,
	137, 56, 0, 115, 57, 0, 1107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 1867, 1099, 0, 58, 0, 0, 0,
	0, 1087, 0, 0, 0, 59, 0, 761, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1858, 0, 0,
	0, 0, 0, 0, 1864, 1865, 1866, 1098, 0, 0,
	0, 1863, 1861, 1862, 1854, 1855, 1856, 1857, 1859, 1860,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2332, 0, 0, 0, 0, 1873, 1858, 2337, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 0, 0, 0,
	0, 1868, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 1102, 0, 0, 1503, 61, 0, 1081,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 129, 62, 0,
	63, 1868, 64, 0, 135, 0, 0, 0, 0, 65,
	0, 0, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 1869, 0, 0, 0,
	0, 0, 0, 1100, 144, 0, 1078, 1079, 1085, 1084,
	1080, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 2408, 0, 100, 0, 0, 0, 0, 0,
	1893, 0, 0, 130, 0, 0, 1869, 0, 0, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 137, 0, 0, 0,
	0, 0, 2441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	4, 0, 0, 0, 0, 0, 1864, 1865, 1866, 0,
	0, 0, 0, 1863, 1861, 1862, 1854, 1855, 1856, 1857,
	1859, 1860, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1864, 1865, 1866, 782,
	0, 0, 0, 1863, 1861, 1862, 1854, 1855, 1856, 1857,
	1859, 1860, 0, 0, 2489, 186, 187, 788, 0, 188,
	789, 790, 791, 792, 349, 793, 794, 795, 796, 189,
	190, 191, 350, 351, 352, 353, 192, 354, 355, 797,
	193, 356, 357, 194, 195, 798, 799, 358, 359, 360,
	800, 196, 361, 801, 787, 802, 197, 198, 199, 2520,
	201, 202, 203, 200, 803, 204, 0, 205, 206, 804,
	712, 207, 208, 209, 805, 806, 808, 807, 809, 810,
	811, 210, 211, 415, 212, 362, 213, 363, 364, 812,
	214, 813, 215, 814, 216, 815, 816, 217, 218, 817,
	219, 818, 0, 819, 365, 220, 222, 221, 223, 366,
	367, 820, 713, 821, 0, 1721, 0, 0, 224, 225,
	368, 369, 370, 0, 226, 822, 227, 823, 824, 714,
	825, 228, 371, 826, 372, 827, 0, 229, 230, 231,
	232, 373, 374, 716, 828, 375, 236, 829, 233, 830,
	715, 234, 376, 235, 377, 378, 379, 380, 381, 831,
	382, 832, 717, 237, 238, 239, 718, 383, 384, 240,
	241, 242, 833, 244, 243, 834, 385, 719, 245, 246,
	720, 835, 247, 248, 836, 837, 249, 0, 250, 721,
	251, 252, 254, 386, 253, 722, 255, 256, 258, 257,
	838, 839, 840, 387, 259, 388, 260, 261, 841, 262,
	842, 843, 263, 844, 845, 264, 389, 723, 265, 724,
	390, 266, 267, 268, 269, 270, 846, 271, 391, 272,
	392, 273, 847, 274, 275, 276, 277, 278, 393, 279,
	280, 848, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 849, 293, 725, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 850, 306,
	395, 305, 307, 308, 851, 309, 297, 298, 310, 726,
	311, 396, 397, 312, 852, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 853, 320, 854, 321,
	322, 323, 324, 325, 326, 327, 328, 855, 400, 401,
	402, 856, 857, 329, 330, 403, 404, 858, 331, 332,
	333, 334, 859, 860, 335, 336, 337, 338, 861, 339,
	862, 405, 340, 341, 342, 406, 407, 863, 864, 343,
	865, 866, 867, 868, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 782,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1633,
	0, 0, 0, 0, 0, 186, 187, 788, 1634, 188,
	789, 790, 791, 792, 349, 793, 794, 795, 796, 189,
	190, 191, 350, 351, 352, 353, 192, 354, 355, 797,
	193, 356, 357, 194, 195, 798, 799, 358, 359, 360,
	800, 196, 361, 801, 787, 802, 197, 198, 199, 0,
	201, 202, 203, 200, 803, 204, 0, 205, 206, 804,
	712, 207, 208, 209, 805, 806, 808, 807, 809, 810,
	811, 210, 211, 415, 212, 362, 213, 363, 364, 812,
	214, 813, 215, 814, 216, 815, 816, 217, 218, 817,
	219, 818, 0, 819, 365, 220, 222, 221, 223, 366,
	367, 820, 713, 821, 0, 0, 0, 0, 224, 225,
	368, 369, 370, 0, 226, 822, 227, 823, 824, 714,
	825, 228, 371, 826, 372, 827, 0, 229, 230, 231,
	232, 373, 374, 716, 828, 375, 236, 829, 233, 830,
	715, 234, 376, 235, 377, 378, 379, 380, 381, 831,
	382, 832, 717, 237, 238, 239, 718, 383, 384, 240,
	241, 242, 833, 244, 243, 834, 385, 719, 245, 246,
	720, 835, 247, 248, 836, 837, 249, 0, 250, 721,
	251, 252, 254, 386, 253, 722, 255, 256, 258, 257,
	838, 839, 840, 387, 259, 388, 260, 261, 841, 262,
	842, 843, 263, 844, 845, 264, 389, 723, 265, 724,
	390, 266, 267, 268, 269, 270, 846, 271, 391, 272,
	392, 273, 847, 274, 275, 276, 277, 278, 393, 279,
	280, 848, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 849, 293, 725, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 850, 306,
	395, 305, 307, 308, 851, 309, 297, 298, 310, 726,
	311, 396, 397, 312, 852, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 853, 320, 854, 321,
	322, 323, 324, 325, 326, 327, 328, 855, 400, 401,
	402, 856, 857, 329, 330, 403, 404, 858, 331, 332,
	333, 334, 859, 860, 335, 336, 337, 338, 861, 339,
	862, 405, 340, 341, 342, 406, 407, 863, 864, 343,
	865, 866, 867, 868, 344, 345, 346, 347, 348, 0,
	782, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 788, 2292,
	188, 789, 790, 791, 792, 349, 793, 794, 795, 796,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	797, 193, 356, 357, 194, 195, 798, 799, 358, 359,
	360, 800, 196, 361, 801, 787, 802, 197, 198, 199,
	0, 201, 202, 203, 200, 803, 204, 0, 205, 206,
	804, 712, 207, 208, 209, 805, 806, 808, 807, 809,
	810, 811, 210, 211, 415, 212, 362, 213, 363, 364,
	812, 214, 813, 215, 814, 216, 815, 816, 217, 218,
	817, 219, 818, 0, 819, 365, 220, 222, 221, 223,
	366, 367, 820, 713, 821, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 822, 227, 823, 824,
	714, 825, 228, 371, 826, 372, 827, 0, 229, 230,
	231, 232, 373, 374, 716, 828, 375, 236, 829, 233,
	830, 715, 234, 376, 235, 377, 378, 379, 380, 381,
	831, 382, 832, 717, 237, 238, 239, 718, 383, 384,
	240, 241, 242, 833, 244, 243, 834, 385, 719, 245,
	246, 720, 835, 247, 248, 836, 837, 249, 0, 250,
	721, 251, 252, 254, 386, 253, 722, 255, 256, 258,
	257, 838, 839, 840, 387, 259, 388, 260, 261, 841,
	262, 842, 843, 263, 844, 845, 264, 389, 723, 265,
	724, 390, 266, 267, 268, 269, 270, 846, 271, 391,
	272, 392, 273, 847, 274, 275, 276, 277, 278, 393,
	279, 280, 848, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 849, 293, 725, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 850,
	306, 395, 305, 307, 308, 851, 309, 297, 298, 310,
	726, 311, 396, 397, 312, 852, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 853, 320, 854,
	321, 322, 323, 324, 325, 326, 327, 328, 855, 400,
	401, 402, 856, 857, 329, 330, 403, 404, 858, 331,
	332, 333, 334, 859, 860, 335, 336, 337, 338, 861,
	339, 862, 405, 340, 341, 342, 406, 407, 863, 864,
	343, 865, 866, 867, 868, 344, 345, 346, 347, 348,
	782, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1241, 186, 187, 788, 0,
	188, 789, 790, 791, 792, 349, 793, 794, 795, 796,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	797, 193, 356, 357, 194, 195, 798, 799, 358, 359,
	360, 800, 196, 361, 801, 787, 802, 197, 198, 199,
	0, 201, 202, 203, 200, 803, 204, 0, 205, 206,
	804, 712, 207, 208, 209, 805, 806, 808, 807, 809,
	810, 811, 210, 211, 415, 212, 362, 213, 363, 364,
	812, 214, 813, 215, 814, 216, 815, 816, 217, 218,
	817, 219, 818, 0, 819, 365, 220, 222, 221, 223,
	366, 367, 820, 713, 821, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 822, 227, 823, 824,
	714, 825, 228, 371, 826, 372, 827, 0, 229, 230,
	231, 232, 373, 374, 716, 828, 375, 236, 829, 233,
	830, 715, 234, 376, 235, 377, 378, 379, 380, 381,
	831, 382, 832, 717, 237, 238, 239, 718, 383, 384,
	240, 241, 242, 833, 244, 243, 834, 385, 719, 245,
	246, 720, 835, 247, 248, 836, 837, 249, 0, 250,
	721, 251, 252, 254, 386, 253, 722, 255, 256, 258,
	257, 838, 839, 840, 387, 259, 388, 260, 261, 841,
	262, 842, 843, 263, 844, 845, 264, 389, 723, 265,
	724, 390, 266, 267, 268, 269, 270, 846, 271, 391,
	272, 392, 273, 847, 274, 275, 276, 277, 278, 393,
	279, 280, 848, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 849, 293, 725, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 850,
	306, 395, 305, 307, 308, 851, 309, 297, 298, 310,
	726, 311, 396, 397, 312, 852, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 853, 320, 854,
	321, 322, 323, 324, 325, 326, 327, 328, 855, 400,
	401, 402, 856, 857, 329, 330, 403, 404, 858, 331,
	332, 333, 334, 859, 860, 335, 336, 337, 338, 861,
	339, 862, 405, 340, 341, 342, 406, 407, 863, 864,
	343, 865, 866, 867, 868, 344, 345, 346, 347, 348,
	1531, 0, 650, 639, 640, 637, 638, 629, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 187,
	1528, 0, 188, 0, 0, 0, 0, 667, 632, 0,
	0, 0, 189, 190, 191, 350, 682, 352, 683, 192,
	684, 685, 0, 193, 356, 357, 194, 195, 635, 666,
	686, 687, 360, 0, 196, 678, 0, 658, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 712, 207, 208, 209, 0, 659, 660,
	662, 0, 661, 663, 210, 211, 415, 212, 688, 213,
	689, 690, 620, 214, 0, 215, 0, 216, 1529, 0,
	681, 218, 0, 219, 0, 0, 0, 623, 220, 222,
	221, 223, 668, 669, 646, 713, 0, 0, 0, 0,
	0, 224, 225, 691, 692, 693, 0, 226, 0, 227,
	0, 0, 714, 0, 228, 679, 0, 372, 0, 0,
	229, 230, 231, 232, 675, 677, 716, 0, 375, 236,
	0, 233, 0, 715, 234, 694, 235, 695, 696, 697,
	698, 699, 0, 657, 0, 717, 237, 238, 239, 718,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 680,
	719, 245, 246, 720, 0, 247, 248, 0, 0, 249,
	0, 250, 721, 251, 252, 254, 386, 253, 722, 255,
	256, 258, 257, 617, 0, 647, 676, 259, 700, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	723, 265, 724, 670, 266, 267, 268, 269, 270, 0,
	271, 671, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 701, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	725, 294, 295, 624, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 664, 309, 297,
	298, 310, 726, 311, 702, 397, 312, 0, 0, 319,
	313, 314, 299, 315, 318, 703, 316, 317, 672, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 704, 705, 0, 0, 329, 330, 673, 674,
	645, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 665, 339, 0, 405, 340, 341, 342, 406, 706,
	1527, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 618, 0, 0, 0, 0, 0, 0, 0,
	616, 0, 0, 0, 0, 614, 615, 1530, 0, 0,
	0, 0, 0, 0, 625, 1525, 0, 0, 0, 602,
	628, 650, 639, 640, 637, 638, 629, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 187, 0,
	0, 188, 0, 0, 0, 0, 667, 632, 0, 0,
	0, 189, 190, 191, 350, 682, 352, 683, 192, 684,
	685, 0, 193, 356, 357, 194, 195, 635, 666, 686,
	687, 360, 0, 196, 678, 0, 658, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 712, 207, 208, 209, 0, 659, 660, 662,
	0, 661, 663, 210, 211, 415, 212, 688, 213, 689,
	690, 620, 214, 0, 215, 0, 216, 0, 0, 681,
	218, 0, 219, 0, 0, 0, 623, 220, 222, 221,
	223, 668, 669, 646, 713, 0, 0, 0, 0, 0,
	224, 225, 691, 692, 693, 0, 226, 0, 227, 0,
	0, 714, 0, 228, 679, 0, 372, 0, 0, 229,
	230, 231, 232, 675, 677, 716, 0, 375, 236, 0,
	233, 0, 715, 234, 694, 235, 695, 696, 697, 698,
	699, 0, 657, 0, 717, 237, 238, 239, 718, 383,
	384, 240, 241, 242, 0, 244, 243, 0, 680, 719,
	245, 246, 720, 0, 247, 248, 0, 0, 249, 0,
	250, 721, 251, 252, 254, 386, 253, 722, 255, 256,
	258, 257, 617, 0, 647, 676, 259, 700, 260, 261,
	0, 262, 0, 0, 263, 0, 0, 264, 389, 723,
	265, 724, 670, 266, 267, 268, 269, 270, 0, 271,
	671, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	701, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 725,
	294, 295, 624, 296, 0, 300, 301, 302, 303, 304,
	142, 306, 395, 305, 307, 308, 664, 309, 297, 298,
	310, 726, 311, 702, 397, 312, 0, 0, 319, 313,
	314, 299, 315, 318, 703, 316, 317, 672, 0, 320,
	144, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 704, 705, 0, 0, 329, 330, 673, 674, 645,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	665, 339, 0, 405, 340, 341, 342, 942, 706, 0,
	0, 343, 0, 0, 0, 136, 344, 345, 346, 347,
	348, 618, 137, 0, 0, 0, 0, 0, 0, 616,
	0, 0, 0, 0, 614, 615, 650, 639, 640, 637,
	638, 629, 0, 1127, 0, 0, 0, 0, 0, 628,
	0, 0, 186, 187, 0, 0, 188, 0, 0, 0,
	0, 667, 632, 0, 0, 0, 189, 190, 191, 350,
	682, 352, 683, 192, 684, 685, 0, 193, 356, 357,
	194, 195, 635, 666, 686, 687, 360, 0, 196, 678,
	0, 658, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 712, 207, 208,
	209, 0, 659, 660, 662, 0, 661, 663, 210, 211,
	415, 212, 688, 213, 689, 690, 620, 214, 0, 215,
	0, 216, 0, 0, 681, 218, 0, 219, 0, 0,
	0, 623, 220, 222, 221, 223, 668, 669, 646, 713,
	0, 0, 0, 0, 0, 224, 225, 691, 692, 693,
	0, 226, 0, 227, 0, 0, 714, 0, 228, 679,
	0, 372, 0, 0, 229, 230, 231, 232, 675, 677,
	716, 0, 375, 236, 0, 233, 0, 715, 234, 694,
	235, 695, 696, 697, 698, 699, 0, 657, 0, 717,
	237, 238, 239, 718, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 680, 719, 245, 246, 720, 0, 247,
	248, 0, 0, 249, 0, 250, 721, 251, 252, 254,
	386, 253, 722, 255, 256, 258, 257, 617, 0, 647,
	676, 259, 700, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 723, 265, 724, 670, 266, 267,
	268, 269, 270, 0, 271, 671, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 701, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 725, 294, 295, 624, 296, 0,
	300, 301, 302, 303, 304, 142, 306, 395, 305, 307,
	308, 664, 309, 297, 298, 310, 726, 311, 702, 397,
	312, 0, 0, 319, 313, 314, 299, 315, 318, 703,
	316, 317, 672, 0, 320, 144, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 704, 705, 0, 0,
	329, 330, 673, 674, 645, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 665, 339, 0, 405, 340,
	341, 342, 942, 706, 0, 0, 343, 0, 0, 0,
	136, 344, 345, 346, 347, 348, 618, 137, 0, 0,
	0, 0, 0, 0, 616, 0, 0, 0, 0, 614,
	615, 650, 639, 640, 637, 638, 629, 0, 1127, 0,
	0, 0, 0, 0, 628, 0, 0, 186, 187, 0,
	0, 188, 0, 0, 0, 0, 667, 632, 0, 0,
	0, 189, 190, 191, 350, 682, 352, 683, 192, 684,
	685, 1585, 193, 356, 357, 194, 195, 635, 666, 686,
	687, 360, 0, 196, 678, 0, 658, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 712, 207, 208, 209, 0, 659, 660, 662,
	0, 661, 663, 210, 211, 415, 212, 688, 213, 689,
	690, 620, 214, 0, 215, 0, 216, 0, 0, 681,
	218, 0, 219, 0, 0, 0, 623, 220, 222, 221,
	223, 668, 669, 646, 713, 0, 0, 0, 0, 0,
	224, 225, 691, 692, 693, 0, 226, 0, 227, 0,
	1590, 714, 0, 228, 679, 0, 372, 0, 0, 229,
	230, 231, 232, 675, 677, 716, 0, 375, 236, 0,
	233, 0, 715, 234, 694, 235, 695, 696, 697, 698,
	699, 0, 657, 0, 717, 237, 238, 239, 718, 383,
	384, 240, 241, 242, 0, 244, 243, 1586, 680, 719,
	245, 246, 720, 0, 247, 248, 0, 0, 249, 0,
	250, 721, 251, 252, 254, 386, 253, 722, 255, 256,
	258, 257, 617, 0, 647, 676, 259, 700, 260, 261,
	0, 262, 0, 0, 263, 0, 0, 264, 389, 723,
	265, 724, 670, 266, 267, 268, 269, 270, 0, 271,
	671, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	701, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 725,
	294, 295, 624, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 664, 309, 297, 298,
	310, 726, 311, 702, 397, 312, 0, 0, 319, 313,
	314, 299, 315, 318, 703, 316, 317, 672, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 704, 705, 0, 1587, 329, 330, 673, 674, 645,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	665, 339, 0, 405, 340, 341, 342, 406, 706, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 618, 650, 639, 640, 637, 638, 629, 0, 616,
	0, 0, 0, 0, 614, 615, 0, 0, 186, 187,
	0, 0, 188, 625, 0, 0, 0, 667, 632, 628,
	0, 0, 189, 190, 191, 350, 682, 352, 683, 192,
	684, 685, 0, 193, 356, 357, 194, 195, 635, 666,
	686, 687, 360, 0, 196, 678, 0, 658, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 712, 207, 208, 209, 0, 659, 660,
	662, 0, 661, 663, 210, 211, 415, 212, 688, 213,
	689, 690, 620, 214, 0, 215, 0, 216, 0, 0,
	681, 218, 0, 219, 0, 0, 0, 623, 220, 222,
	221, 223, 668, 669, 646, 713, 0, 0, 0, 0,
	0, 224, 225, 691, 692, 693, 0, 226, 0, 227,
	0, 0, 714, 0, 228, 679, 0, 372, 0, 0,
	229, 230, 231, 232, 675, 677, 716, 0, 375, 236,
	0, 233, 0, 715, 234, 694, 235, 695, 696, 697,
	698, 699, 0, 657, 0, 717, 237, 238, 239, 718,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 680,
	719, 245, 246, 720, 0, 247, 248, 0, 0, 249,
	0, 250, 721, 251, 252, 254, 386, 253, 722, 255,
	256, 258, 257, 617, 2216, 647, 676, 259, 700, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	723, 265, 724, 670, 266, 267, 268, 269, 270, 0,
	271, 671, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 701, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	725, 294, 295, 624, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 664, 309, 297,
	298, 310, 726, 311, 702, 397, 312, 0, 0, 319,
	313, 314, 299, 315, 318, 703, 316, 317, 672, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 704, 705, 0, 0, 329, 330, 673, 674,
	645, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 665, 339, 0, 405, 340, 341, 342, 406, 706,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 618, 650, 639, 640, 637, 638, 629, 0,
	616, 0, 0, 0, 0, 614, 615, 1188, 0, 186,
	187, 0, 0, 188, 625, 0, 0, 0, 667, 632,
	628, 0, 0, 189, 190, 191, 350, 682, 352, 683,
	192, 684, 685, 0, 193, 356, 357, 194, 195, 635,
	666, 686, 687, 360, 0, 196, 678, 0, 658, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 712, 207, 208, 209, 0, 659,
	660, 662, 0, 661, 663, 210, 211, 415, 212, 688,
	213, 689, 690, 620, 214, 0, 215, 0, 216, 0,
	0, 681, 218, 0, 219, 0, 0, 0, 623, 220,
	222, 221, 223, 668, 669, 646, 713, 0, 0, 0,
	0, 0, 224, 225, 691, 692, 693, 0, 226, 0,
	227, 0, 0, 714, 0, 228, 679, 0, 372, 0,
	0, 229, 230, 231, 232, 675, 677, 716, 0, 375,
	236, 1435, 233, 0, 715, 234, 694, 235, 695, 696,
	697, 698, 699, 0, 657, 0, 717, 237, 238, 239,
	718, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	680, 719, 245, 246, 720, 0, 247, 248, 0, 0,
	249, 0, 250, 721, 251, 252, 254, 386, 253, 722,
	255, 256, 258, 257, 617, 0, 647, 676, 259, 700,
	260, 261, 0, 262, 0, 0, 263, 0, 0, 264,
	389, 723, 265, 724, 670, 266, 267, 268, 269, 270,
	0, 271, 671, 272, 392, 273, 1434, 274, 275, 276,
	277, 278, 701, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 725, 294, 295, 624, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 664, 309,
	297, 298, 310, 726, 311, 702, 397, 312, 0, 0,
	319, 313, 314, 299, 315, 318, 703, 316, 317, 672,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 704, 705, 0, 0, 329, 330, 673,
	674, 645, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 665, 339, 0, 405, 340, 341, 342, 406,
	706, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 618, 0, 0, 0, 0, 0, 0,
	0, 616, 0, 0, 0, 0, 614, 615, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	610, 628, 650, 639, 640, 637, 638, 629, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 187,
	0, 0, 188, 0, 0, 0, 0, 667, 632, 0,
	0, 0, 189, 190, 191, 350, 682, 352, 683, 192,
	684, 685, 0, 193, 356, 357, 194, 195, 635, 666,
	686, 687, 360, 0, 196, 678, 0, 658, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 712, 207, 208, 209, 0, 659, 660,
	662, 0, 661, 663, 210, 211, 415, 212, 688, 213,
	689, 690, 620, 214, 0, 215, 0, 216, 0, 0,
	681, 218, 0, 219, 0, 0, 0, 623, 220, 222,
	221, 223, 668, 669, 646, 713, 0, 0, 0, 0,
	0, 224, 225, 691, 692, 693, 0, 226, 0, 227,
	0, 0, 714, 0, 228, 679, 0, 372, 0, 0,
	229, 230, 231, 232, 675, 677, 716, 0, 375, 236,
	0, 233, 0, 715, 234, 694, 235, 695, 696, 697,
	698, 699, 0, 657, 0, 717, 237, 238, 239, 718,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 680,
	719, 245, 246, 720, 0, 247, 248, 0, 0, 249,
	0, 250, 721, 251, 252, 254, 386, 253, 722, 255,
	256, 258, 257, 617, 0, 647, 676, 259, 700, 260,
	261, 0, 262, 612, 0, 263, 0, 0, 264, 389,
	723, 265, 724, 670, 266, 267, 268, 269, 270, 0,
	271, 671, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 701, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	725, 294, 295, 624, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 664, 309, 297,
	298, 310, 726, 311, 702, 397, 312, 0, 0, 319,
	313, 314, 299, 315, 318, 703, 316, 317, 672, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 704, 705, 0, 0, 329, 330, 673, 674,
	645, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 665, 339, 0, 405, 340, 341, 342, 406, 706,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 618, 650, 639, 640, 637, 638, 629, 0,
	616, 0, 0, 0, 0, 614, 615, 0, 0, 186,
	187, 0, 0, 188, 625, 0, 0, 0, 667, 632,
	628, 0, 0, 189, 190, 191, 350, 682, 352, 683,
	192, 684, 685, 0, 193, 356, 357, 194, 195, 635,
	666, 686, 687, 360, 0, 196, 678, 0, 658, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 712, 207, 208, 209, 0, 659,
	660, 662, 0, 661, 663, 210, 211, 415, 212, 688,
	213, 689, 690, 620, 214, 0, 215, 0, 216, 0,
	0, 681, 218, 0, 219, 0, 0, 0, 623, 220,
	222, 221, 223, 668, 669, 646, 713, 0, 0, 0,
	0, 0, 224, 225, 691, 692, 693, 0, 226, 0,
	227, 0, 0, 714, 0, 228, 679, 0, 372, 0,
	0, 229, 230, 231, 232, 675, 677, 716, 0, 375,
	236, 0, 233, 0, 715, 234, 694, 235, 695, 696,
	697, 698, 699, 0, 657, 0, 717, 237, 238, 239,
	718, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	680, 719, 245, 246, 720, 0, 247, 248, 0, 0,
	249, 0, 250, 721, 251, 252, 254, 386, 253, 722,
	255, 256, 258, 257, 617, 0, 647, 676, 259, 700,
	260, 261, 0, 262, 0, 0, 263, 0, 0, 264,
	389, 723, 265, 724, 670, 266, 267, 268, 269, 270,
	0, 271, 671, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 701, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 725, 294, 295, 624, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 664, 309,
	297, 298, 310, 726, 311, 702, 397, 312, 0, 0,
	319, 313, 314, 299, 315, 318, 703, 316, 317, 672,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 704, 705, 0, 0, 329, 330, 673,
	674, 645, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 665, 339, 0, 405, 340, 341, 342, 406,
	706, 2068, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 618, 650, 639, 640, 637, 638, 629,
	0, 616, 0, 0, 0, 0, 614, 615, 0, 0,
	186, 187, 0, 0, 188, 625, 0, 0, 0, 667,
	632, 628, 0, 0, 189, 190, 191, 350, 682, 352,
	683, 192, 684, 685, 0, 193, 356, 357, 194, 195,
	635, 666, 686, 687, 360, 0, 196, 678, 0, 658,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 712, 207, 208, 209, 0,
	659, 660, 662, 0, 661, 663, 210, 211, 415, 212,
	688, 213, 689, 690, 620, 214, 0, 215, 0, 216,
	0, 0, 681, 218, 0, 219, 0, 0, 0, 623,
	220, 222, 221, 223, 668, 669, 646, 713, 0, 0,
	0, 0, 0, 224, 225, 691, 692, 693, 0, 226,
	0, 227, 0, 0, 714, 0, 228, 679, 0, 372,
	0, 0, 229, 230, 231, 232, 675, 677, 716, 0,
	375, 236, 0, 233, 0, 715, 234, 694, 235, 695,
	696, 697, 698, 699, 0, 657, 0, 717, 237, 238,
	239, 718, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 680, 719, 245, 246, 720, 0, 247, 248, 0,
	0, 249, 0, 250, 721, 251, 252, 254, 386, 253,
	722, 255, 256, 258, 257, 617, 0, 647, 676, 259,
	700, 260, 261, 0, 262, 612, 0, 263, 0, 0,
	264, 389, 723, 265, 724, 670, 266, 267, 268, 269,
	270, 0, 271, 671, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 701, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 725, 294, 295, 624, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 664,
	309, 297, 298, 310, 726, 311, 702, 397, 312, 0,
	0, 319, 313, 314, 299, 315, 318, 703, 316, 317,
	672, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 704, 705, 0, 0, 329, 330,
	673, 674, 645, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 665, 339, 0, 405, 340, 341, 342,
	406, 706, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 618, 650, 639, 640, 637, 638,
	629, 0, 616, 0, 0, 0, 0, 614, 615, 0,
	0, 186, 187, 0, 0, 188, 625, 0, 0, 0,
	667, 632, 628, 0, 0, 189, 190, 191, 350, 682,
	352, 683, 192, 684, 685, 0, 193, 356, 357, 194,
	195, 635, 666, 686, 687, 360, 0, 196, 678, 0,
	658, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 712, 207, 208, 209,
	0, 659, 660, 662, 0, 661, 663, 210, 211, 415,
	212, 688, 213, 689, 690, 620, 214, 0, 215, 0,
	216, 0, 0, 681, 218, 0, 219, 0, 0, 0,
	623, 220, 222, 221, 223, 668, 669, 646, 713, 0,
	0, 0, 0, 0, 224, 225, 691, 692, 693, 0,
	226, 0, 227, 0, 0, 714, 0, 228, 679, 0,
	372, 0, 0, 229, 230, 231, 232, 675, 677, 716,
	0, 375, 236, 0, 233, 0, 715, 234, 694, 235,
	695, 696, 697, 698, 699, 0, 657, 0, 717, 237,
	238, 239, 718, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 680, 719, 245, 246, 720, 0, 247, 248,
	0, 0, 249, 0, 250, 721, 251, 252, 254, 386,
	253, 722, 255, 256, 258, 257, 617, 0, 647, 676,
	259, 700, 260, 261, 0, 262, 0, 0, 263, 0,
	0, 264, 389, 723, 265, 724, 670, 266, 267, 268,
	269, 270, 0, 271, 671, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 701, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 725, 294, 295, 624, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	664, 309, 297, 298, 310, 726, 311, 702, 397, 312,
	0, 0, 319, 313, 314, 299, 315, 318, 703, 316,
	317, 672, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 704, 705, 0, 0, 329,
	330, 673, 674, 645, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 665, 339, 0, 405, 340, 341,
	342, 406, 706, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 618, 650, 639, 640, 637,
	638, 629, 0, 616, 0, 0, 0, 0, 614, 615,
	1188, 0, 186, 187, 0, 0, 188, 625, 0, 0,
	0, 667, 632, 628, 0, 0, 189, 190, 191, 350,
	682, 352, 683, 192, 684, 685, 0, 193, 356, 357,
	194, 195, 635, 666, 686, 687, 360, 0, 196, 678,
	0, 658, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 712, 207, 208,
	209, 0, 659, 660, 662, 0, 661, 663, 210, 211,
	415, 212, 688, 213, 689, 690, 620, 214, 0, 215,
	0, 216, 0, 0, 681, 218, 0, 219, 0, 0,
	0, 623, 220, 222, 221, 223, 668, 669, 646, 713,
	0, 0, 0, 0, 0, 224, 225, 691, 692, 693,
	0, 226, 0, 227, 0, 1590, 714, 0, 228, 679,
	0, 372, 0, 0, 229, 230, 231, 232, 675, 677,
	716, 0, 375, 236, 0, 233, 0, 715, 234, 694,
	235, 695, 696, 697, 698, 699, 0, 657, 0, 717,
	237, 238, 239, 718, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 680, 719, 245, 246, 720, 0, 247,
	248, 0, 0, 249, 0, 250, 721, 251, 252, 254,
	386, 253, 722, 255, 256, 258, 257, 617, 0, 647,
	676, 259, 700, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 723, 265, 724, 670, 266, 267,
	268, 269, 270, 0, 271, 671, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 701, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 725, 294, 295, 624, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 664, 309, 297, 298, 310, 726, 311, 702, 397,
	312, 0, 0, 319, 313, 314, 299, 315, 318, 703,
	316, 317, 672, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 704, 705, 0, 0,
	329, 330, 673, 674, 645, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 665, 339, 0, 405, 340,
	341, 342, 406, 706, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 618, 0, 0, 0,
	0, 0, 0, 0, 616, 0, 0, 0, 0, 614,
	615, 0, 0, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 1636, 628, 650, 639, 640, 637, 638,
	629, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 187, 0, 0, 188, 0, 0, 0, 0,
	667, 632, 0, 0, 0, 189, 190, 191, 350, 682,
	352, 683, 192, 684, 685, 0, 193, 356, 357, 194,
	195, 635, 666, 686, 687, 360, 0, 196, 678, 0,
	658, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 712, 207, 208, 209,
	0, 659, 660, 662, 0, 661, 663, 210, 211, 415,
	212, 688, 213, 689, 690, 620, 214, 0, 215, 0,
	216, 0, 0, 681, 218, 0, 219, 0, 0, 0,
	623, 220, 222, 221, 223, 668, 669, 646, 713, 0,
	0, 0, 0, 0, 224, 225, 691, 692, 693, 0,
	226, 0, 227, 0, 0, 714, 0, 228, 679, 0,
	372, 0, 0, 229, 230, 231, 232, 675, 677, 716,
	0, 375, 236, 0, 233, 0, 715, 234, 694, 235,
	695, 696, 697, 698, 699, 0, 657, 0, 717, 237,
	238, 239, 718, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 680, 719, 245, 246, 720, 0, 247, 248,
	0, 0, 249, 0, 250, 721, 251, 252, 254, 386,
	253, 722, 255, 256, 258, 257, 617, 0, 647, 676,
	259, 700, 260, 261, 0, 262, 0, 0, 263, 0,
	0, 264, 389, 723, 265, 724, 670, 266, 267, 268,
	269, 270, 0, 271, 671, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 701, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 725, 294, 295, 624, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	664, 309, 297, 298, 310, 726, 311, 702, 397, 312,
	0, 0, 319, 313, 314, 299, 315, 318, 703, 316,
	317, 672, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 704, 705, 0, 0, 329,
	330, 673, 674, 645, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 665, 339, 0, 405, 340, 341,
	342, 406, 706, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 618, 0, 0, 0, 0,
	0, 0, 0, 616, 0, 0, 0, 0, 614, 615,
	0, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 1599, 628, 650, 639, 640, 637, 638, 629,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 187, 0, 0, 188, 0, 0, 0, 0, 667,
	632, 0, 0, 0, 189, 190, 191, 350, 682, 352,
	683, 192, 684, 685, 0, 193, 356, 357, 194, 195,
	635, 666, 686, 687, 360, 0, 196, 678, 0, 658,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 712, 207, 208, 209, 0,
	659, 660, 662, 0, 661, 663, 210, 211, 415, 212,
	688, 213, 689, 690, 620, 214, 0, 215, 0, 216,
	0, 0, 681, 218, 0, 219, 0, 0, 0, 623,
	220, 222, 221, 223, 668, 669, 646, 713, 0, 0,
	0, 0, 0, 224, 225, 691, 692, 693, 0, 226,
	0, 227, 0, 0, 714, 0, 228, 679, 0, 372,
	0, 0, 229, 230, 231, 232, 675, 677, 716, 0,
	375, 236, 0, 233, 0, 715, 234, 694, 235, 695,
	696, 697, 698, 699, 0, 657, 0, 717, 237, 238,
	239, 718, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 680, 719, 245, 246, 720, 0, 247, 248, 0,
	0, 249, 0, 250, 721, 251, 252, 254, 386, 253,
	722, 255, 256, 258, 257, 617, 0, 647, 676, 259,
	700, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 723, 265, 724, 670, 266, 267, 268, 269,
	270, 0, 271, 671, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 701, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 725, 294, 295, 624, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 664,
	309, 297, 298, 310, 726, 311, 702, 397, 312, 0,
	0, 319, 313, 314, 299, 315, 318, 703, 316, 317,
	672, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 704, 705, 0, 0, 329, 330,
	673, 674, 645, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 665, 339, 0, 405, 340, 341, 342,
	406, 706, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 618, 0, 0, 0, 0, 0,
	0, 0, 616, 0, 0, 0, 0, 614, 615, 0,
	0, 0, 0, 0, 0, 0, 625, 0, 0, 0,
	0, 1597, 628, 650, 639, 640, 637, 638, 629, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	187, 0, 0, 188, 0, 0, 0, 0, 667, 632,
	0, 0, 0, 189, 190, 191, 350, 682, 352, 683,
	192, 684, 685, 0, 193, 356, 357, 194, 195, 635,
	666, 686, 687, 360, 0, 196, 678, 0, 658, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 712, 207, 208, 209, 0, 659,
	660, 662, 0, 661, 663, 210, 211, 415, 212, 688,
	213, 689, 690, 620, 214, 0, 215, 0, 216, 0,
	0, 681, 218, 0, 219, 0, 0, 0, 623, 220,
	222, 221, 223, 668, 669, 646, 713, 0, 0, 0,
	0, 0, 224, 225, 691, 692, 693, 0, 226, 0,
	227, 0, 0, 714, 0, 228, 679, 0, 372, 0,
	0, 229, 230, 231, 232, 675, 677, 716, 0, 375,
	236, 0, 233, 0, 715, 234, 694, 235, 695, 696,
	697, 698, 699, 0, 657, 0, 717, 237, 238, 239,
	718, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	680, 719, 245, 246, 720, 0, 247, 248, 0, 0,
	249, 0, 250, 721, 251, 252, 254, 386, 253, 722,
	255, 256, 258, 257, 617, 0, 647, 676, 259, 700,
	260, 261, 0, 262, 0, 0, 263, 0, 0, 264,
	389, 723, 265, 724, 670, 266, 267, 268, 269, 270,
	0, 271, 671, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 701, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 725, 294, 295, 624, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 664, 309,
	297, 298, 310, 726, 311, 702, 397, 312, 0, 0,
	319, 313, 314, 299, 315, 318, 703, 316, 317, 672,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 704, 705, 0, 0, 329, 330, 673,
	674, 645, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 665, 339, 0, 405, 340, 341, 342, 406,
	706, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 618, 0, 0, 0, 0, 0, 0,
	0, 616, 0, 0, 0, 0, 614, 615, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	1581, 628, 650, 639, 640, 637, 638, 629, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 187,
	0, 0, 188, 0, 0, 0, 0, 667, 632, 0,
	0, 0, 189, 190, 191, 350, 682, 352, 683, 192,
	684, 685, 0, 193, 356, 357, 194, 195, 635, 666,
	686, 687, 360, 0, 196, 678, 0, 658, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 712, 207, 208, 209, 0, 659, 660,
	662, 0, 661, 663, 210, 211, 415, 212, 688, 213,
	689, 690, 620, 214, 0, 215, 0, 216, 0, 0,
	681, 218, 0, 219, 0, 0, 0, 623, 220, 222,
	221, 223, 668, 669, 646, 713, 0, 0, 0, 0,
	0, 224, 225, 691, 692, 693, 0, 226, 0, 227,
	0, 0, 714, 0, 228, 679, 0, 372, 0, 0,
	229, 230, 231, 232, 675, 677, 716, 0, 375, 236,
	0, 233, 0, 715, 234, 694, 235, 695, 696, 697,
	698, 699, 0, 657, 0, 717, 237, 238, 239, 718,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 680,
	719, 245, 246, 720, 0, 247, 248, 0, 0, 249,
	0, 250, 721, 251, 252, 254, 386, 253, 722, 255,
	256, 258, 257, 617, 0, 647, 676, 259, 700, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	723, 265, 724, 670, 266, 267, 268, 269, 270, 0,
	271, 671, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 701, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	725, 294, 295, 624, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 664, 309, 297,
	298, 310, 726, 311, 702, 397, 312, 0, 0, 319,
	313, 314, 299, 315, 318, 703, 316, 317, 672, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 704, 705, 0, 0, 329, 330, 673, 674,
	645, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 665, 339, 0, 405, 340, 341, 342, 406, 706,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 618, 0, 0, 0, 0, 0, 0, 0,
	616, 0, 0, 0, 0, 614, 615, 0, 0, 0,
	0, 0, 0, 0, 625, 0, 0, 0, 0, 1569,
	628, 650, 639, 640, 637, 638, 629, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 187, 0,
	0, 188, 0, 0, 0, 0, 667, 632, 0, 0,
	0, 189, 190, 191, 350, 682, 352, 683, 192, 684,
	685, 0, 193, 356, 357, 194, 195, 635, 666, 686,
	687, 360, 0, 196, 678, 0, 658, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 712, 207, 208, 209, 0, 659, 660, 662,
	0, 661, 663, 210, 211, 415, 212, 688, 213, 689,
	690, 620, 214, 0, 215, 0, 216, 0, 0, 681,
	218, 0, 219, 0, 0, 0, 623, 220, 222, 221,
	223, 668, 669, 646, 713, 0, 0, 0, 0, 0,
	224, 225, 691, 692, 693, 0, 226, 0, 227, 0,
	0, 714, 0, 228, 679, 0, 372, 0, 0, 229,
	230, 231, 232, 675, 677, 716, 0, 375, 236, 0,
	233, 0, 715, 234, 694, 235, 695, 696, 697, 698,
	699, 0, 657, 0, 717, 237, 238, 239, 718, 383,
	384, 240, 241, 242, 0, 244, 243, 0, 680, 719,
	245, 246, 720, 0, 247, 248, 0, 0, 249, 0,
	250, 721, 251, 252, 254, 386, 253, 722, 255, 256,
	258, 257, 617, 0, 647, 676, 259, 700, 260, 261,
	0, 262, 0, 0, 263, 0, 0, 264, 389, 723,
	265, 724, 670, 266, 267, 268, 269, 270, 0, 271,
	671, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	701, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 725,
	294, 295, 624, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 664, 309, 297, 298,
	310, 726, 311, 702, 397, 312, 0, 0, 319, 313,
	314, 299, 315, 318, 703, 316, 317, 672, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 704, 705, 0, 0, 329, 330, 673, 674, 645,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	665, 339, 0, 405, 340, 341, 342, 406, 706, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 618, 0, 0, 0, 0, 0, 0, 0, 616,
	0, 0, 0, 0, 614, 615, 0, 0, 0, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 1567, 628,
	1559, 639, 640, 637, 638, 629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 0, 0,
	188, 0, 0, 0, 0, 667, 632, 0, 0, 0,
	189, 190, 191, 350, 682, 352, 683, 192, 684, 685,
	0, 193, 356, 357, 194, 195, 635, 666, 686, 687,
	360, 0, 196, 678, 0, 658, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 712, 207, 208, 209, 0, 659, 660, 662, 0,
	661, 663, 210, 211, 415, 212, 688, 1562, 689, 690,
	620, 214, 0, 215, 0, 216, 0, 0, 681, 218,
	0, 219, 0, 0, 0, 623, 220, 222, 221, 223,
	668, 669, 646, 713, 0, 0, 0, 0, 0, 224,
	225, 691, 692, 693, 0, 226, 0, 227, 0, 0,
	714, 0, 228, 679, 0, 372, 0, 0, 229, 1563,
	231, 232, 675, 677, 716, 0, 375, 236, 0, 233,
	0, 715, 234, 694, 235, 695, 696, 697, 698, 699,
	0, 657, 0, 717, 237, 238, 239, 718, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 680, 719, 245,
	246, 720, 0, 247, 248, 0, 0, 249, 0, 250,
	721, 1564, 1561, 254, 386, 253, 722, 255, 256, 258,
	257, 617, 0, 647, 676, 259, 700, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 723, 265,
	724, 670, 266, 267, 268, 269, 270, 0, 271, 671,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 701,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 725, 294,
	295, 624, 296, 0, 300, 301, 302, 303, 1565, 0,
	306, 395, 305, 307, 308, 664, 309, 297, 298, 310,
	726, 311, 702, 397, 312, 0, 0, 319, 313, 314,
	299, 315, 318, 703, 316, 317, 672, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	704, 705, 0, 0, 329, 330, 673, 674, 645, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 665,
	339, 0, 405, 340, 341, 342, 406, 706, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 1560, 348,
	618, 0, 0, 0, 0, 0, 0, 0, 616, 0,
	0, 0, 0, 614, 615, 0, 0, 0, 0, 0,
	0, 0, 625, 0, 0, 0, 0, 1556, 628, 1559,
	639, 640, 637, 638, 629, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 187, 0, 0, 188,
	0, 0, 0, 0, 667, 632, 0, 0, 0, 189,
	190, 191, 350, 682, 352, 683, 192, 684, 685, 0,
	193, 356, 357, 194, 195, 635, 666, 686, 687, 360,
	0, 196, 678, 0, 658, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	712, 207, 208, 209, 0, 659, 660, 662, 0, 661,
	663, 210, 211, 415, 212, 688, 1562, 689, 690, 620,
	214, 0, 215, 0, 216, 0, 0, 681, 218, 0,
	219, 0, 0, 0, 623, 220, 222, 221, 223, 668,
	669, 646, 713, 0, 0, 0, 0, 0, 224, 225,
	691, 692, 693, 0, 226, 0, 227, 0, 0, 714,
	0, 228, 679, 0, 372, 0, 0, 229, 1563, 231,
	232, 675, 677, 716, 0, 375, 236, 0, 233, 0,
	715, 234, 694, 235, 695, 696, 697, 698, 699, 0,
	657, 0, 717, 237, 238, 239, 718, 383, 384, 240,
	241, 242, 0, 244, 243, 0, 680, 719, 245, 246,
	720, 0, 247, 248, 0, 0, 249, 0, 250, 721,
	1564, 1561, 254, 386, 253, 722, 255, 256, 258, 257,
	617, 0, 647, 676, 259, 700, 260, 261, 0, 262,
	0, 0, 263, 0, 0, 264, 389, 723, 265, 724,
	670, 266, 267, 268, 269, 270, 0, 271, 671, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 701, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 725, 294, 295,
	624, 296, 0, 300, 301, 302, 303, 1565, 0, 306,
	395, 305, 307, 308, 664, 309, 297, 298, 310, 726,
	311, 702, 397, 312, 0, 0, 319, 313, 314, 299,
	315, 318, 703, 316, 317, 672, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 704,
	705, 0, 0, 329, 330, 673, 674, 645, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 665, 339,
	0, 405, 340, 341, 342, 406, 706, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 1560, 348, 618,
	650, 639, 640, 637, 638, 629, 0, 616, 0, 0,
	0, 0, 614, 615, 0, 0, 186, 187, 0, 0,
	188, 625, 0, 0, 0, 667, 632, 628, 0, 0,
	189, 190, 191, 350, 682, 352, 683, 192, 684, 685,
	0, 193, 356, 357, 194, 195, 635, 666, 686, 687,
	360, 0, 196, 678, 0, 658, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 712, 207, 208, 209, 0, 659, 660, 662, 0,
	661, 663, 210, 211, 415, 212, 688, 213, 689, 690,
	620, 214, 0, 215, 0, 216, 0, 0, 681, 218,
	0, 219, 0, 0, 0, 623, 220, 222, 221, 223,
	668, 669, 646, 713, 0, 0, 0, 0, 0, 224,
	225, 691, 692, 693, 0, 226, 0, 227, 0, 0,
	714, 0, 228, 679, 0, 372, 0, 0, 229, 230,
	231, 232, 675, 677, 716, 0, 375, 236, 0, 233,
	0, 715, 234, 694, 235, 695, 696, 697, 698, 699,
	0, 657, 0, 717, 237, 238, 239, 718, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 680, 719, 245,
	246, 720, 0, 247, 248, 0, 0, 249, 0, 250,
	721, 251, 252, 254, 386, 253, 722, 255, 256, 258,
	257, 617, 0, 647, 676, 259, 700, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 723, 265,
	724, 670, 266, 267, 268, 269, 270, 0, 271, 671,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 701,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 725, 294,
	295, 624, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 664, 309, 297, 298, 310,
	726, 311, 702, 397, 312, 0, 0, 319, 313, 314,
	299, 315, 318, 703, 316, 317, 672, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	704, 705, 0, 0, 329, 330, 673, 674, 645, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 665,
	339, 0, 405, 340, 341, 342, 406, 706, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	618, 650, 639, 640, 637, 638, 629, 0, 616, 0,
	0, 0, 0, 614, 615, 0, 0, 186, 187, 1422,
	1131, 188, 625, 0, 0, 0, 667, 632, 628, 0,
	0, 189, 190, 191, 350, 682, 352, 683, 192, 684,
	685, 0, 193, 356, 357, 194, 195, 635, 666, 686,
	687, 360, 0, 196, 678, 0, 658, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 712, 207, 208, 209, 0, 659, 660, 662,
	0, 661, 663, 210, 211, 415, 212, 688, 213, 689,
	690, 620, 214, 0, 215, 0, 216, 0, 0, 681,
	218, 0, 219, 0, 0, 0, 623, 220, 222, 221,
	223, 668, 669, 646, 713, 0, 0, 0, 0, 0,
	224, 225, 691, 692, 693, 0, 226, 0, 227, 0,
	0, 714, 0, 228, 679, 0, 372, 0, 0, 229,
	230, 231, 232, 675, 677, 716, 0, 375, 236, 0,
	233, 0, 715, 234, 694, 235, 695, 696, 697, 698,
	699, 0, 657, 0, 717, 237, 238, 239, 718, 383,
	384, 240, 241, 242, 0, 244, 243, 0, 680, 719,
	245, 246, 720, 0, 247, 248, 0, 0, 249, 0,
	250, 721, 251, 252, 254, 386, 253, 722, 255, 256,
	258, 257, 617, 0, 647, 676, 259, 700, 260, 261,
	0, 262, 0, 0, 263, 0, 0, 264, 389, 723,
	265, 724, 670, 266, 267, 268, 269, 270, 0, 271,
	671, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	701, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 725,
	294, 295, 624, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 664, 309, 297, 298,
	310, 726, 311, 702, 397, 312, 0, 0, 319, 313,
	314, 299, 315, 318, 703, 316, 317, 672, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 704, 705, 0, 0, 329, 330, 673, 674, 645,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	665, 339, 0, 405, 340, 341, 342, 406, 706, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 618, 0, 0, 0, 0, 0, 0, 0, 616,
	0, 0, 0, 0, 614, 615, 0, 0, 0, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 880, 628,
	650, 639, 640, 637, 638, 629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 0, 0,
	188, 0, 0, 0, 0, 667, 632, 0, 0, 0,
	189, 190, 191, 350, 682, 352, 683, 192, 684, 685,
	0, 193, 356, 357, 194, 195, 635, 666, 686, 687,
	360, 0, 196, 678, 0, 658, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 712, 207, 208, 209, 0, 659, 660, 662, 0,
	661, 663, 210, 211, 415, 212, 688, 213, 689, 690,
	620, 214, 0, 215, 0, 216, 0, 0, 681, 218,
	0, 219, 0, 0, 0, 623, 220, 222, 221, 223,
	668, 669, 646, 713, 0, 0, 0, 0, 0, 224,
	225, 691, 692, 693, 0, 226, 0, 227, 0, 0,
	714, 0, 228, 679, 0, 372, 0, 0, 229, 230,
	231, 232, 675, 677, 716, 0, 375, 236, 0, 233,
	0, 715, 234, 694, 235, 695, 696, 697, 698, 699,
	0, 657, 0, 717, 237, 238, 239, 718, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 680, 719, 245,
	246, 720, 0, 247, 248, 0, 0, 249, 0, 250,
	721, 251, 252, 254, 386, 253, 722, 255, 256, 258,
	257, 617, 0, 647, 676, 259, 700, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 723, 265,
	724, 670, 266, 267, 268, 269, 270, 0, 271, 671,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 701,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 725, 294,
	295, 624, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 664, 309, 297, 298, 310,
	726, 311, 702, 397, 312, 0, 0, 319, 313, 314,
	299, 315, 318, 703, 316, 317, 672, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	704, 705, 0, 0, 329, 330, 673, 674, 645, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 665,
	339, 0, 405, 340, 341, 342, 406, 706, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	618, 0, 0, 0, 0, 0, 0, 0, 616, 0,
	0, 0, 0, 614, 615, 0, 0, 0, 0, 0,
	0, 0, 625, 0, 0, 0, 0, 878, 628, 650,
	639, 640, 637, 638, 629, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 187, 0, 0, 188,
	0, 0, 0, 0, 667, 632, 0, 0, 0, 189,
	190, 191, 350, 682, 352, 683, 192, 684, 685, 0,
	193, 356, 357, 194, 195, 635, 666, 686, 687, 360,
	0, 196, 678, 0, 658, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	712, 207, 208, 209, 0, 659, 660, 662, 0, 661,
	663, 210, 211, 415, 212, 688, 213, 689, 690, 620,
	214, 0, 215, 0, 216, 0, 0, 681, 218, 0,
	219, 0, 0, 0, 623, 220, 222, 221, 223, 668,
	669, 646, 713, 0, 0, 0, 0, 0, 224, 225,
	691, 692, 693, 0, 226, 0, 227, 0, 0, 714,
	0, 228, 679, 0, 372, 0, 0, 229, 230, 231,
	232, 675, 677, 716, 0, 375, 236, 0, 233, 0,
	715, 234, 694, 235, 695, 696, 697, 698, 699, 0,
	657, 0, 717, 237, 238, 239, 718, 383, 384, 240,
	241, 242, 0, 244, 243, 0, 680, 719, 245, 246,
	720, 0, 247, 248, 0, 0, 249, 0, 250, 721,
	251, 252, 254, 386, 253, 722, 255, 256, 258, 257,
	617, 0, 647, 676, 259, 700, 260, 261, 0, 262,
	0, 0, 263, 0, 0, 264, 389, 723, 265, 724,
	670, 266, 267, 268, 269, 270, 0, 271, 671, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 701, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 725, 294, 295,
	624, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 664, 309, 297, 298, 310, 726,
	311, 702, 397, 312, 0, 0, 319, 313, 314, 299,
	315, 318, 703, 316, 317, 672, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 704,
	705, 0, 0, 329, 330, 673, 674, 645, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 665, 339,
	0, 405, 340, 341, 342, 406, 706, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 618,
	650, 639, 640, 637, 638, 629, 0, 616, 0, 0,
	0, 0, 614, 615, 0, 0, 186, 187, 0, 0,
	188, 625, 0, 0, 0, 667, 632, 628, 0, 0,
	189, 190, 191, 350, 682, 352, 683, 192, 684, 685,
	0, 193, 356, 357, 194, 195, 635, 666, 686, 687,
	360, 0, 196, 678, 0, 658, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 712, 207, 208, 209, 0, 659, 660, 662, 0,
	661, 663, 210, 211, 415, 212, 688, 213, 689, 690,
	620, 214, 0, 215, 0, 216, 0, 0, 681, 218,
	0, 219, 0, 0, 0, 623, 220, 222, 221, 223,
	668, 669, 646, 713, 0, 0, 0, 0, 0, 224,
	225, 691, 692, 693, 0, 226, 0, 227, 0, 0,
	714, 0, 228, 679, 0, 372, 0, 0, 229, 230,
	231, 232, 675, 677, 716, 0, 375, 236, 0, 233,
	0, 715, 234, 694, 235, 695, 696, 697, 698, 699,
	0, 657, 0, 717, 237, 238, 239, 718, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 680, 719, 245,
	246, 720, 0, 247, 248, 0, 0, 249, 0, 250,
	2627, 251, 252, 254, 386, 253, 722, 255, 256, 258,
	257, 617, 0, 647, 676, 259, 700, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 723, 265,
	724, 670, 266, 267, 268, 269, 270, 0, 271, 671,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 701,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 725, 294,
	295, 624, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 664, 309, 297, 298, 310,
	726, 311, 702, 397, 312, 0, 0, 319, 313, 314,
	299, 315, 318, 703, 316, 317, 672, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	704, 705, 0, 0, 329, 330, 673, 674, 645, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 665,
	339, 0, 405, 340, 341, 342, 406, 706, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	618, 650, 639, 640, 637, 638, 629, 0, 616, 0,
	0, 0, 0, 614, 615, 0, 0, 186, 187, 0,
	0, 188, 625, 0, 0, 0, 667, 632, 628, 0,
	0, 189, 190, 191, 350, 682, 352, 683, 192, 684,
	685, 0, 193, 356, 357, 194, 195, 635, 666, 686,
	687, 360, 0, 196, 678, 0, 658, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 712, 207, 208, 2544, 0, 659, 660, 662,
	0, 661, 663, 210, 211, 415, 212, 688, 213, 689,
	690, 620, 214, 0, 215, 0, 216, 0, 0, 681,
	218, 0, 219, 0, 0, 0, 623, 220, 222, 221,
	223, 668, 669, 646, 713, 0, 0, 0, 0, 0,
	224, 225, 691, 692, 693, 0, 226, 0, 227, 0,
	0, 714, 0, 228, 679, 0, 372, 0, 0, 229,
	230, 231, 232, 675, 677, 716, 0, 375, 236, 0,
	233, 0, 715, 234, 694, 235, 695, 696, 697, 698,
	699, 0, 657, 0, 717, 237, 238, 239, 718, 383,
	384, 240, 241, 242, 0, 244, 243, 0, 680, 719,
	245, 246, 720, 0, 247, 248, 0, 0, 249, 0,
	250, 721, 251, 252, 254, 386, 253, 722, 255, 256,
	258, 257, 617, 0, 647, 676, 259, 700, 260, 261,
	0, 262, 0, 0, 263, 0, 0, 264, 389, 723,
	265, 724, 670, 266, 267, 268, 269, 270, 0, 271,
	671, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	701, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 725,
	294, 295, 624, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 664, 309, 297, 298,
	310, 726, 311, 702, 397, 312, 0, 0, 319, 313,
	314, 299, 315, 318, 703, 316, 317, 672, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 704, 705, 0, 0, 329, 330, 673, 674, 645,
	331, 332, 2543, 334, 0, 0, 335, 336, 337, 338,
	665, 339, 0, 405, 340, 341, 342, 406, 706, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 618, 650, 639, 640, 637, 638, 629, 0, 616,
	0, 0, 0, 0, 614, 615, 0, 0, 186, 187,
	0, 0, 188, 625, 0, 0, 0, 667, 632, 628,
	0, 0, 189, 190, 191, 350, 682, 352, 683, 192,
	684, 685, 0, 193, 356, 357, 194, 195, 635, 666,
	686, 687, 360, 0, 196, 678, 0, 658, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 712, 207, 208, 209, 0, 659, 660,
	662, 0, 661, 663, 210, 211, 415, 212, 688, 213,
	689, 690, 620, 214, 0, 215, 0, 216, 0, 0,
	681, 218, 0, 219, 0, 0, 0, 623, 220, 222,
	221, 223, 668, 669, 646, 713, 0, 0, 0, 0,
	0, 224, 225, 691, 692, 693, 0, 226, 0, 227,
	0, 0, 714, 0, 228, 679, 0, 372, 0, 0,
	229, 230, 231, 232, 675, 677, 716, 0, 375, 236,
	0, 233, 0, 715, 234, 694, 235, 695, 696, 697,
	698, 699, 0, 657, 0, 717, 237, 238, 239, 718,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 680,
	719, 245, 246, 720, 0, 247, 248, 0, 0, 249,
	0, 250, 721, 251, 252, 254, 386, 253, 722, 255,
	256, 258, 257, 617, 0, 647, 676, 259, 700, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	723, 265, 724, 670, 266, 267, 268, 269, 270, 0,
	271, 671, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 701, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	725, 294, 295, 624, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 664, 309, 297,
	298, 310, 726, 311, 702, 397, 312, 0, 0, 319,
	313, 314, 299, 315, 318, 703, 316, 317, 672, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 704, 705, 0, 0, 329, 330, 673, 674,
	645, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 665, 339, 0, 405, 340, 341, 342, 406, 706,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 618, 650, 639, 640, 637, 638, 629, 0,
	616, 0, 0, 0, 0, 614, 615, 0, 0, 186,
	187, 0, 0, 188, 625, 0, 0, 0, 667, 632,
	628, 0, 0, 189, 190, 191, 2542, 682, 352, 683,
	192, 684, 685, 0, 193, 356, 357, 194, 195, 635,
	666, 686, 687, 360, 0, 196, 678, 0, 658, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 712, 207, 208, 2544, 0, 659,
	660, 662, 0, 661, 663, 210, 211, 415, 212, 688,
	213, 689, 690, 620, 214, 0, 215, 0, 216, 0,
	0, 681, 218, 0, 219, 0, 0, 0, 623, 220,
	222, 221, 223, 668, 669, 646, 713, 0, 0, 0,
	0, 0, 224, 225, 691, 692, 693, 0, 226, 0,
	227, 0, 0, 714, 0, 228, 679, 0, 372, 0,
	0, 229, 230, 231, 232, 675, 677, 716, 0, 375,
	236, 0, 233, 0, 715, 234, 694, 235, 695, 696,
	697, 698, 699, 0, 657, 0, 717, 237, 238, 239,
	718, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	680, 719, 245, 246, 720, 0, 247, 248, 0, 0,
	249, 0, 250, 721, 251, 252, 254, 386, 253, 722,
	255, 256, 258, 257, 617, 0, 647, 676, 259, 700,
	260, 261, 0, 262, 0, 0, 263, 0, 0, 264,
	389, 723, 265, 724, 670, 266, 267, 268, 269, 270,
	0, 271, 671, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 701, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 725, 294, 295, 624, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 664, 309,
	297, 298, 310, 726, 311, 702, 397, 312, 0, 0,
	319, 313, 314, 299, 315, 318, 703, 316, 317, 672,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 704, 705, 0, 0, 329, 330, 673,
	674, 645, 331, 332, 2543, 334, 0, 0, 335, 336,
	337, 338, 665, 339, 0, 405, 340, 341, 342, 406,
	706, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 618, 650, 639, 640, 637, 638, 629,
	0, 616, 0, 0, 0, 0, 614, 615, 0, 0,
	186, 187, 0, 0, 188, 625, 0, 0, 0, 667,
	632, 628, 0, 0, 189, 190, 191, 350, 682, 352,
	683, 192, 684, 685, 0, 193, 356, 357, 194, 195,
	635, 666, 686, 687, 360, 0, 196, 678, 0, 658,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 712, 207, 208, 209, 0,
	659, 660, 662, 0, 661, 663, 210, 211, 415, 212,
	688, 213, 689, 690, 0, 214, 0, 215, 0, 216,
	0, 0, 681, 218, 0, 219, 0, 0, 0, 623,
	220, 222, 221, 223, 668, 669, 646, 713, 0, 0,
	0, 0, 0, 224, 225, 691, 692, 693, 0, 226,
	0, 227, 0, 0, 714, 0, 228, 679, 0, 372,
	0, 0, 229, 230, 231, 232, 675, 677, 716, 0,
	375, 236, 0, 233, 0, 715, 234, 694, 235, 695,
	696, 697, 698, 699, 0, 657, 0, 717, 237, 238,
	239, 718, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 680, 719, 245, 246, 720, 0, 247, 248, 0,
	0, 249, 0, 250, 721, 251, 252, 254, 386, 253,
	722, 255, 256, 258, 257, 0, 0, 647, 676, 259,
	700, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 723, 265, 724, 670, 266, 267, 268, 269,
	270, 0, 271, 671, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 701, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 725, 294, 295, 1579, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 664,
	309, 297, 298, 310, 726, 311, 702, 397, 312, 0,
	0, 319, 313, 314, 299, 315, 318, 703, 316, 317,
	672, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 704, 705, 0, 0, 329, 330,
	673, 674, 645, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 665, 339, 0, 405, 340, 341, 342,
	406, 706, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 650, 639, 640, 637, 638, 629,
	0, 0, 1577, 0, 0, 0, 0, 1575, 1576, 0,
	186, 187, 0, 0, 188, 0, 1578, 0, 0, 667,
	632, 0, 628, 0, 189, 190, 191, 0, 682, 352,
	683, 192, 684, 685, 0, 193, 356, 357, 194, 195,
	635, 666, 686, 687, 360, 0, 196, 678, 0, 658,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 712, 207, 208, 2544, 0,
	659, 660, 662, 0, 661, 663, 210, 211, 415, 212,
	688, 213, 689, 690, 620, 214, 0, 215, 0, 216,
	0, 0, 681, 218, 0, 219, 0, 0, 0, 623,
	220, 222, 221, 223, 668, 669, 646, 713, 0, 0,
	0, 0, 0, 224, 225, 691, 692, 693, 0, 226,
	0, 227, 0, 0, 714, 0, 228, 679, 0, 372,
	0, 0, 229, 230, 231, 232, 675, 677, 0, 0,
	375, 236, 0, 233, 0, 715, 234, 694, 235, 695,
	696, 697, 698, 699, 0, 657, 0, 0, 237, 238,
	239, 718, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 680, 719, 245, 246, 0, 0, 247, 248, 0,
	0, 249, 0, 250, 721, 251, 252, 254, 386, 253,
	722, 255, 256, 258, 257, 617, 0, 647, 676, 259,
	700, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 723, 265, 724, 670, 266, 267, 268, 269,
	270, 0, 271, 671, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 701, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 725, 294, 295, 624, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 664,
	309, 297, 298, 310, 0, 311, 702, 397, 312, 0,
	0, 319, 313, 314, 299, 315, 318, 703, 316, 317,
	672, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 704, 705, 0, 0, 329, 330,
	673, 674, 645, 331, 332, 2543, 334, 0, 0, 335,
	336, 337, 338, 665, 339, 0, 405, 340, 341, 342,
	406, 706, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 650, 639, 640, 637, 638, 629,
	0, 0, 0, 0, 0, 0, 0, 614, 615, 0,
	186, 187, 0, 0, 188, 0, 625, 0, 0, 667,
	632, 0, 628, 0, 189, 190, 191, 350, 682, 352,
	683, 192, 684, 685, 0, 193, 356, 357, 194, 195,
	0, 666, 686, 687, 360, 0, 196, 678, 0, 658,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 712, 207, 208, 209, 0,
	659, 660, 662, 0, 661, 663, 210, 211, 415, 212,
	688, 213, 689, 690, 0, 214, 0, 215, 0, 216,
	0, 0, 681, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 668, 669, 646, 713, 0, 0,
	0, 0, 0, 224, 225, 691, 692, 693, 0, 226,
	0, 227, 0, 0, 714, 0, 228, 679, 0, 372,
	0, 0, 229, 230, 231, 232, 675, 677, 716, 0,
	375, 236, 0, 233, 0, 715, 234, 694, 235, 695,
	696, 697, 698, 699, 0, 657, 0, 717, 237, 238,
	239, 718, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 680, 719, 245, 246, 720, 0, 247, 248, 0,
	0, 249, 0, 250, 721, 251, 252, 254, 386, 253,
	722, 255, 256, 258, 257, 0, 0, 647, 676, 259,
	700, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 723, 265, 724, 670, 266, 267, 268, 269,
	270, 0, 271, 671, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 701, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 725, 294, 295, 1579, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 664,
	309, 297, 298, 310, 726, 311, 702, 397, 312, 0,
	0, 319, 313, 314, 299, 315, 318, 703, 316, 317,
	672, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 704, 705, 0, 0, 329, 330,
	673, 674, 645, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 665, 339, 0, 405, 340, 341, 342,
	406, 706, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 650, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 187, 0, 0, 188, 0, 1578, 0, 0, 667,
	0, 0, 628, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 666, 358, 359, 360, 0, 196, 678, 0, 658,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 712, 207, 208, 209, 0,
	659, 660, 662, 0, 661, 663, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 668, 669, 0, 713, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 714, 0, 228, 679, 0, 372,
	0, 0, 229, 230, 231, 232, 675, 677, 716, 0,
	375, 236, 0, 233, 0, 715, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 717, 237, 238,
	239, 718, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 680, 719, 245, 246, 720, 0, 247, 248, 0,
	0, 249, 0, 250, 721, 251, 252, 254, 386, 253,
	722, 255, 256, 258, 257, 0, 0, 0, 676, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 723, 265, 724, 670, 266, 267, 268, 269,
	270, 0, 271, 671, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 725, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 664,
	309, 297, 298, 310, 726, 311, 396, 397, 312, 0,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	672, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	673, 674, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 665, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 0, 343, 939, 0, 897, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 187, 0, 0, 188, 0, 0,
	0, 0, 349, 0, 0, 0, 2167, 189, 190, 191,
	350, 351, 352, 353, 192, 354, 355, 0, 193, 356,
	357, 194, 195, 0, 0, 358, 359, 360, 0, 196,
	361, 0, 787, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 712, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 415, 212, 362, 213, 363, 364, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 365, 220, 222, 221, 223, 366, 367, 0,
	713, 0, 0, 0, 0, 0, 224, 225, 368, 369,
	370, 0, 226, 0, 227, 0, 0, 714, 0, 228,
	371, 0, 372, 0, 0, 229, 230, 231, 232, 373,
	374, 716, 0, 375, 236, 0, 233, 0, 715, 234,
	376, 235, 377, 378, 379, 380, 381, 0, 382, 0,
	717, 237, 238, 239, 718, 383, 384, 240, 241, 242,
	0, 244, 243, 0, 385, 719, 245, 246, 720, 0,
	247, 248, 0, 0, 249, 0, 250, 721, 251, 252,
	254, 386, 253, 722, 255, 256, 258, 257, 0, 0,
	0, 387, 259, 388, 260, 261, 0, 262, 0, 0,
	263, 0, 0, 264, 389, 723, 265, 724, 390, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 725, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 142, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 726, 311, 396,
	397, 312, 0, 0, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 0, 320, 144, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 942, 407, 0, 0, 343, 602, 0,
	183, 136, 344, 345, 346, 347, 348, 0, 137, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 0, 0,
	188, 0, 0, 0, 0, 349, 0, 0, 0, 128,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	0, 193, 356, 357, 194, 195, 0, 0, 358, 359,
	360, 0, 196, 361, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 362, 213, 363, 364,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	231, 232, 373, 374, 0, 0, 375, 236, 0, 233,
	0, 0, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 237, 238, 239, 0, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 0, 245,
	246, 0, 0, 247, 248, 0, 0, 249, 0, 250,
	0, 251, 252, 254, 386, 253, 0, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 765, 263, 0, 0, 264, 389, 0, 265,
	0, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 142,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 144,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 942, 407, 0, 0,
	343, 0, 0, 183, 136, 344, 345, 346, 347, 348,
	0, 137, 0, 0, 0, 0, 0, 0, 0, 186,
	187, 0, 0, 188, 0, 0, 0, 0, 349, 0,
	759, 0, 1210, 189, 190, 191, 350, 351, 352, 353,
	192, 354, 355, 0, 193, 356, 357, 194, 195, 0,
	0, 358, 359, 360, 0, 196, 361, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 415, 212, 362,
	213, 363, 364, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 365, 220,
	222, 221, 223, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 368, 369, 370, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 371, 0, 372, 0,
	0, 229, 230, 231, 232, 373, 374, 0, 0, 375,
	236, 0, 233, 0, 0, 234, 376, 235, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 237, 238, 239,
	0, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	385, 0, 245, 246, 0, 0, 247, 248, 0, 0,
	249, 0, 250, 0, 251, 252, 254, 386, 253, 0,
	255, 256, 258, 257, 0, 0, 0, 387, 259, 388,
	260, 261, 0, 262, 0, 765, 263, 0, 0, 264,
	389, 0, 265, 0, 390, 266, 267, 268, 269, 270,
	0, 271, 391, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 393, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 0, 294, 295, 394, 296, 0, 300, 301, 302,
	303, 304, 142, 306, 395, 305, 307, 308, 0, 309,
	297, 298, 310, 0, 311, 396, 397, 312, 0, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 144, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 942,
	407, 0, 0, 343, 602, 0, 183, 136, 344, 345,
	346, 347, 348, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 186, 187, 0, 0, 188, 0, 0, 0,
	0, 349, 0, 759, 0, 1210, 189, 190, 191, 350,
	351, 352, 353, 192, 354, 355, 0, 193, 356, 357,
	194, 195, 0, 0, 358, 359, 360, 0, 196, 361,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	415, 212, 362, 213, 363, 364, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 365, 220, 222, 221, 223, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 368, 369, 370,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 371,
	0, 372, 0, 0, 229, 230, 231, 232, 373, 374,
	0, 0, 375, 236, 0, 233, 0, 0, 234, 376,
	235, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	237, 238, 239, 0, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 385, 0, 245, 246, 0, 0, 247,
	248, 0, 0, 249, 0, 250, 0, 251, 252, 254,
	386, 253, 0, 255, 256, 258, 257, 0, 0, 0,
	387, 259, 388, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 0, 265, 0, 390, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 142, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 144, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 942, 407, 0, 0, 343, 1911, 0, 183,
	136, 344, 345, 346, 347, 348, 0, 137, 0, 0,
	0, 0, 0, 0, 0, 186, 187, 0, 0, 188,
	0, 0, 0, 0, 349, 0, 0, 0, 128, 189,
	190, 191, 350, 351, 352, 353, 192, 354, 355, 0,
	193, 356, 357, 194, 195, 0, 0, 358, 359, 360,
	0, 196, 361, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 415, 212, 362, 213, 363, 364, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 365, 220, 222, 221, 223, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	368, 369, 370, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 371, 0, 372, 0, 0, 229, 230, 231,
	232, 373, 374, 0, 0, 375, 236, 0, 233, 0,
	0, 234, 376, 235, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 237, 238, 239, 0, 383, 384, 240,
	241, 242, 0, 244, 243, 0, 385, 0, 245, 246,
	0, 0, 247, 248, 0, 0, 249, 0, 250, 0,
	251, 252, 254, 386, 253, 0, 255, 256, 258, 257,
	0, 0, 0, 387, 259, 388, 260, 261, 0, 262,
	0, 765, 263, 0, 0, 264, 389, 0, 265, 0,
	390, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 0, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 0,
	311, 396, 397, 312, 0, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 0, 343,
	758, 0, 183, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 187,
	0, 0, 188, 0, 0, 0, 0, 349, 0, 759,
	0, 764, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 231, 232, 373, 374, 0, 0, 375, 236,
	0, 233, 0, 0, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 237, 238, 239, 0,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	0, 245, 246, 0, 0, 247, 248, 0, 0, 249,
	0, 250, 0, 251, 252, 254, 386, 253, 0, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 765, 263, 0, 0, 264, 389,
	0, 265, 0, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 0, 343, 0, 0, 183, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 187, 0, 0, 188, 0, 0, 0, 0,
	349, 0, 759, 0, 764, 189, 190, 191, 350, 351,
	352, 353, 192, 354, 355, 0, 193, 356, 357, 194,
	195, 0, 0, 358, 359, 360, 0, 196, 361, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 415,
	212, 362, 213, 363, 364, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	365, 220, 222, 221, 223, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 368, 369, 370, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 371, 0,
	372, 0, 0, 229, 230, 231, 232, 373, 374, 0,
	0, 375, 236, 0, 233, 0, 0, 234, 376, 235,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 237,
	238, 239, 0, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 385, 0, 245, 246, 0, 0, 247, 248,
	0, 0, 249, 0, 250, 0, 251, 252, 254, 386,
	253, 0, 255, 256, 258, 257, 0, 0, 0, 387,
	259, 388, 260, 261, 0, 262, 0, 765, 263, 0,
	0, 264, 389, 0, 265, 0, 390, 266, 267, 268,
	269, 270, 0, 271, 391, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 393, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 0, 294, 295, 394, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	0, 309, 297, 298, 310, 0, 311, 396, 397, 312,
	0, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 0, 343, 0, 0, 183, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 0, 0, 188, 0,
	0, 0, 0, 349, 0, 759, 0, 764, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 0,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 231, 232,
	373, 374, 0, 0, 375, 236, 0, 233, 0, 0,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 237, 238, 239, 0, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 0, 245, 246, 0,
	0, 247, 248, 0, 0, 249, 0, 250, 0, 251,
	252, 254, 386, 253, 0, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 0, 265, 0, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 0, 343, 0,
	0, 0, 183, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 187,
	0, 0, 188, 0, 0, 0, 0, 349, 0, 0,
	0, 1243, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 231, 232, 373, 374, 0, 0, 375, 236,
	0, 233, 0, 0, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 237, 238, 239, 0,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	0, 245, 246, 0, 0, 247, 248, 0, 0, 249,
	0, 250, 0, 251, 252, 254, 386, 253, 0, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	0, 265, 0, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 0, 343, 0, 0, 183, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 187, 0, 0, 188, 0, 0, 0, 0,
	349, 0, 0, 0, 1722, 189, 190, 191, 350, 351,
	352, 353, 192, 354, 355, 0, 193, 356, 357, 194,
	195, 0, 0, 358, 359, 360, 0, 196, 361, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 415,
	212, 362, 213, 363, 364, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	365, 220, 222, 221, 223, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 368, 369, 370, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 371, 0,
	372, 0, 0, 229, 230, 231, 232, 373, 374, 0,
	0, 375, 236, 0, 233, 0, 0, 234, 376, 235,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 237,
	238, 239, 0, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 385, 0, 245, 246, 0, 0, 247, 248,
	0, 0, 249, 0, 250, 0, 251, 252, 254, 386,
	253, 0, 255, 256, 258, 257, 0, 0, 0, 387,
	259, 388, 260, 261, 0, 262, 0, 0, 263, 0,
	0, 264, 389, 0, 265, 0, 390, 266, 267, 268,
	269, 270, 0, 271, 391, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 393, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 0, 294, 295, 394, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	0, 309, 297, 298, 310, 0, 311, 396, 397, 312,
	0, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 0, 343, 0, 0, 183, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 0, 0, 188, 0,
	0, 0, 0, 349, 0, 0, 0, 2083, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 0,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 231, 232,
	373, 374, 0, 0, 375, 236, 0, 233, 0, 0,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 237, 238, 239, 0, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 0, 245, 246, 0,
	0, 247, 248, 0, 0, 249, 0, 250, 0, 251,
	252, 254, 386, 253, 0, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 0, 265, 0, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 650, 639,
	640, 637, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 0, 0, 188, 0,
	1213, 0, 0, 349, 0, 0, 0, 0, 189, 190,
	191, 350, 682, 352, 683, 192, 684, 685, 0, 193,
	356, 357, 194, 195, 0, 0, 686, 687, 360, 0,
	196, 361, 0, 787, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 712,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 688, 213, 689, 690, 0, 214,
	0, 215, 0, 216, 0, 0, 681, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	646, 713, 0, 0, 0, 0, 0, 224, 225, 691,
	692, 693, 0, 226, 0, 227, 0, 0, 714, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 231, 232,
	373, 374, 716, 0, 375, 236, 0, 233, 0, 715,
	234, 694, 235, 695, 696, 697, 698, 699, 0, 657,
	0, 717, 237, 238, 239, 718, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 719, 245, 246, 720,
	0, 247, 248, 0, 0, 249, 0, 250, 721, 251,
	252, 254, 386, 253, 722, 255, 256, 258, 257, 0,
	0, 647, 387, 259, 700, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 723, 265, 724, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 701, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 725, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 726, 311,
	702, 397, 312, 0, 0, 319, 313, 314, 299, 315,
	318, 703, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 704, 705,
	0, 0, 329, 330, 403, 404, 645, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 706, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 994, 0,
	897, 896, 0, 0, 0, 894, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 0, 0,
	188, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	0, 193, 356, 357, 194, 195, 0, 0, 358, 359,
	360, 0, 196, 361, 0, 787, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 712, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 362, 213, 363, 364,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 0, 713, 0, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 0, 227, 0, 0,
	714, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	231, 232, 373, 374, 716, 0, 375, 236, 0, 233,
	0, 715, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 717, 237, 238, 239, 718, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 719, 245,
	246, 720, 0, 247, 248, 0, 0, 249, 0, 250,
	721, 251, 252, 254, 386, 253, 722, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 723, 265,
	724, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 725, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	726, 311, 396, 397, 312, 0, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	934, 0, 897, 896, 0, 0, 0, 894, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 187,
	0, 0, 188, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 787, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 712, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 713, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 714, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 231, 232, 933, 374, 716, 0, 375, 236,
	0, 233, 0, 715, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 717, 237, 238, 239, 718,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	719, 245, 246, 720, 0, 247, 248, 0, 0, 249,
	0, 250, 721, 251, 252, 254, 386, 253, 722, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	723, 265, 724, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	725, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 726, 311, 396, 397, 312, 0, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 892, 0, 897, 896, 0, 0, 0, 894,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 187, 0, 0, 188, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 196, 361, 0, 787,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 712, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 713, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 714, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 231, 232, 891, 374, 716, 0,
	375, 236, 0, 233, 0, 715, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 717, 237, 238,
	239, 718, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 719, 245, 246, 720, 0, 247, 248, 0,
	0, 249, 0, 250, 721, 251, 252, 254, 386, 253,
	722, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 723, 265, 724, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 725, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 726, 311, 396, 397, 312, 0,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 496, 343, 183, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 186, 187, 0, 0, 188, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 189, 190, 191, 350, 351,
	352, 353, 192, 354, 355, 0, 193, 356, 357, 194,
	195, 0, 0, 358, 359, 360, 0, 196, 361, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 179,
	212, 362, 213, 363, 364, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	365, 220, 222, 221, 223, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 368, 369, 370, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 371, 0,
	372, 0, 0, 229, 230, 231, 232, 373, 374, 0,
	0, 375, 236, 0, 233, 0, 0, 234, 376, 235,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 237,
	238, 239, 0, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 385, 0, 245, 246, 0, 0, 247, 248,
	0, 0, 249, 0, 250, 0, 251, 252, 254, 386,
	253, 0, 255, 256, 258, 257, 0, 0, 0, 387,
	259, 388, 260, 261, 0, 262, 0, 0, 263, 0,
	0, 264, 389, 0, 265, 0, 390, 266, 267, 268,
	269, 270, 0, 271, 391, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 393, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 0, 294, 295, 394, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	0, 309, 297, 298, 310, 0, 311, 396, 397, 312,
	0, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 178, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 176, 343, 183, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 186, 187, 0, 0, 188, 0, 0, 0,
	182, 349, 0, 0, 0, 0, 189, 190, 191, 350,
	351, 352, 353, 192, 354, 355, 0, 193, 356, 357,
	194, 195, 0, 0, 358, 359, 360, 0, 196, 361,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	179, 212, 362, 213, 363, 364, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 365, 220, 222, 221, 223, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 368, 369, 370,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 371,
	0, 372, 0, 0, 229, 230, 231, 232, 373, 374,
	0, 0, 375, 236, 0, 233, 0, 0, 234, 376,
	235, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	237, 238, 239, 0, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 385, 0, 245, 246, 0, 0, 247,
	248, 0, 0, 249, 0, 250, 0, 251, 252, 254,
	386, 253, 0, 255, 256, 258, 257, 0, 0, 0,
	387, 259, 388, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 0, 265, 0, 390, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 178, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 897, 896, 343, 0, 0, 894,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	186, 187, 0, 0, 188, 0, 0, 0, 0, 349,
	0, 182, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 196, 361, 0, 787,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 712, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 713, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 714, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 231, 232, 373, 374, 716, 0,
	375, 236, 0, 233, 0, 715, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 717, 237, 238,
	239, 718, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 719, 245, 246, 720, 0, 247, 248, 0,
	0, 249, 0, 250, 721, 251, 252, 254, 386, 253,
	722, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 723, 265, 724, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 725, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 726, 311, 396, 397, 312, 0,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 183, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 186, 187,
	0, 0, 188, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 179, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 231, 232, 373, 374, 0, 0, 375, 236,
	0, 233, 0, 0, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 237, 238, 239, 0,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	0, 245, 246, 0, 0, 247, 248, 0, 0, 249,
	0, 250, 0, 251, 252, 254, 386, 253, 0, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	0, 265, 0, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 178, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	897, 896, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 186, 187, 0, 0,
	188, 0, 0, 0, 0, 349, 0, 182, 0, 0,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	0, 193, 356, 357, 194, 195, 0, 0, 358, 359,
	360, 0, 196, 361, 0, 787, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 712, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 362, 213, 363, 364,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 0, 713, 0, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 0, 227, 0, 0,
	714, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	231, 232, 373, 374, 716, 0, 375, 236, 0, 233,
	0, 715, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 717, 237, 238, 239, 718, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 719, 245,
	246, 720, 0, 247, 248, 0, 0, 249, 0, 250,
	721, 251, 252, 254, 386, 253, 722, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 723, 265,
	724, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 725, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	726, 311, 396, 397, 312, 0, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 183, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 186, 187, 0, 0, 188, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 0,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 231, 232,
	373, 374, 0, 0, 375, 236, 0, 233, 0, 0,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 237, 238, 239, 0, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 0, 245, 246, 0,
	0, 247, 248, 0, 0, 249, 0, 250, 0, 251,
	252, 254, 386, 253, 0, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 0, 265, 0, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 897, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 186, 187, 0, 0, 188, 0, 0, 0,
	0, 349, 0, 182, 0, 0, 189, 190, 191, 350,
	351, 352, 353, 192, 354, 355, 0, 193, 356, 357,
	194, 195, 0, 0, 358, 359, 360, 0, 196, 361,
	0, 787, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 712, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	415, 212, 362, 213, 363, 364, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 365, 220, 222, 221, 223, 366, 367, 0, 713,
	0, 0, 0, 0, 0, 224, 225, 368, 369, 370,
	0, 226, 0, 227, 0, 0, 714, 0, 228, 371,
	0, 372, 0, 0, 229, 230, 231, 232, 373, 374,
	716, 0, 375, 236, 0, 233, 0, 715, 234, 376,
	235, 377, 378, 379, 380, 381, 0, 382, 0, 717,
	237, 238, 239, 718, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 385, 719, 245, 246, 720, 0, 247,
	248, 0, 0, 249, 0, 250, 721, 251, 252, 254,
	386, 253, 722, 255, 256, 258, 257, 0, 0, 0,
	387, 259, 388, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 723, 265, 724, 390, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 725, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 726, 311, 396, 397,
	312, 0, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 183, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	186, 187, 0, 0, 188, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 1656, 196, 361, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 1654,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 1698, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 1659, 0, 0, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 231, 232, 373, 374, 0, 0,
	375, 236, 1696, 233, 0, 0, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 237, 238,
	239, 0, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 0, 245, 246, 0, 0, 247, 248, 0,
	0, 249, 0, 250, 0, 251, 252, 254, 386, 253,
	0, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 0, 265, 0, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 1658, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 1697, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 183, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 186, 187,
	0, 0, 188, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 1656, 196, 361, 0, 0, 1651, 197,
	198, 199, 0, 201, 202, 203, 200, 1654, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	1659, 0, 0, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 231, 232, 1650, 374, 0, 0, 375, 236,
	0, 233, 0, 0, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 237, 238, 239, 0,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	0, 245, 246, 0, 0, 247, 248, 0, 0, 249,
	0, 250, 0, 251, 252, 254, 386, 253, 0, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	0, 265, 0, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 1658, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 1657, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 916, 343, 183, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 186,
	187, 0, 0, 188, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 189, 190, 191, 350, 351, 352, 353,
	192, 354, 355, 0, 193, 356, 357, 194, 195, 0,
	0, 358, 359, 360, 0, 196, 361, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 415, 212, 362,
	213, 363, 364, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 365, 220,
	222, 221, 223, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 368, 369, 370, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 371, 0, 372, 0,
	0, 229, 230, 231, 232, 373, 374, 0, 0, 375,
	236, 0, 233, 0, 0, 234, 376, 235, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 237, 238, 239,
	0, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	385, 0, 245, 246, 0, 0, 247, 248, 0, 0,
	249, 0, 250, 0, 251, 252, 254, 386, 253, 0,
	255, 256, 258, 257, 0, 0, 0, 387, 259, 388,
	260, 261, 0, 262, 0, 765, 263, 0, 0, 264,
	389, 0, 265, 0, 390, 266, 267, 268, 269, 270,
	0, 271, 391, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 393, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 0, 294, 295, 394, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 0, 309,
	297, 298, 310, 0, 311, 396, 397, 312, 0, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 771, 343, 183, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	186, 187, 0, 0, 188, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 196, 361, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 231, 232, 773, 374, 0, 0,
	375, 236, 0, 233, 0, 0, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 237, 238,
	239, 0, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 0, 245, 246, 0, 0, 247, 248, 0,
	0, 249, 0, 250, 0, 251, 252, 254, 386, 253,
	0, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 765, 263, 0, 0,
	264, 389, 0, 265, 0, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 767, 343, 183, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 186, 187, 0, 0, 188, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 189, 190, 191, 350, 351,
	352, 353, 192, 354, 355, 0, 193, 356, 357, 194,
	195, 0, 0, 358, 359, 360, 0, 196, 361, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 415,
	212, 362, 213, 363, 364, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	365, 220, 222, 221, 223, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 368, 369, 370, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 371, 0,
	372, 0, 0, 229, 230, 231, 232, 769, 374, 0,
	0, 375, 236, 0, 233, 0, 0, 234, 376, 235,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 237,
	238, 239, 0, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 385, 0, 245, 246, 0, 0, 247, 248,
	0, 0, 249, 0, 250, 0, 251, 252, 254, 386,
	253, 0, 255, 256, 258, 257, 0, 0, 0, 387,
	259, 388, 260, 261, 0, 262, 0, 765, 263, 0,
	0, 264, 389, 0, 265, 0, 390, 266, 267, 268,
	269, 270, 0, 271, 391, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 393, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 0, 294, 295, 394, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	0, 309, 297, 298, 310, 0, 311, 396, 397, 312,
	0, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 427, 343, 183, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 186, 187, 426, 0, 188, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 189, 190, 191, 350,
	351, 352, 353, 192, 354, 355, 0, 193, 356, 357,
	194, 195, 0, 0, 358, 359, 360, 0, 196, 361,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	415, 212, 362, 213, 363, 364, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 365, 220, 222, 221, 223, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 368, 369, 370,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 371,
	0, 372, 0, 0, 229, 230, 231, 232, 373, 374,
	0, 0, 375, 236, 0, 233, 0, 0, 234, 376,
	235, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	237, 238, 239, 0, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 385, 0, 245, 246, 0, 0, 247,
	248, 0, 0, 249, 0, 250, 0, 251, 252, 254,
	386, 253, 0, 255, 256, 258, 257, 0, 0, 0,
	387, 259, 388, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 0, 265, 0, 390, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 425, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 183, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	186, 187, 0, 0, 188, 0, 0, 0, 0, 349,
	0, 1639, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 196, 361, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 231, 232, 373, 374, 0, 0,
	375, 236, 0, 233, 0, 0, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 237, 238,
	239, 0, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 0, 245, 246, 0, 0, 247, 248, 0,
	0, 249, 0, 250, 0, 251, 252, 254, 386, 253,
	0, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 0, 265, 0, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 183, 2234, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 186, 187,
	0, 0, 188, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 231, 232, 373, 374, 0, 0, 375, 236,
	0, 233, 0, 0, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 237, 238, 239, 0,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	0, 245, 246, 0, 0, 247, 248, 0, 0, 249,
	0, 250, 0, 251, 252, 254, 386, 253, 0, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	0, 265, 0, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	183, 2234, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 186, 187, 0, 0,
	188, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	0, 193, 356, 357, 194, 195, 0, 0, 358, 359,
	360, 0, 196, 361, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 362, 213, 363, 364,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	231, 232, 373, 374, 0, 0, 375, 236, 0, 233,
	0, 0, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 237, 238, 239, 0, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 0, 245,
	246, 0, 0, 247, 248, 0, 0, 249, 0, 250,
	0, 251, 252, 254, 386, 253, 0, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 0, 2231, 0, 0, 264, 389, 0, 265,
	0, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 183, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 186, 187, 0, 0, 188, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 0,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 231, 232,
	373, 374, 0, 0, 375, 236, 0, 233, 0, 0,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 237, 238, 239, 0, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 0, 245, 246, 0,
	0, 247, 248, 0, 0, 249, 0, 250, 0, 251,
	252, 254, 386, 253, 0, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	765, 263, 0, 0, 264, 389, 0, 265, 0, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 1401, 343, 183,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 186, 187, 0, 0, 188,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 189,
	190, 191, 350, 351, 352, 353, 192, 354, 355, 0,
	193, 356, 357, 194, 195, 0, 0, 358, 359, 360,
	0, 196, 361, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 415, 212, 362, 213, 363, 364, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 365, 220, 222, 221, 223, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	368, 369, 370, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 371, 0, 372, 0, 0, 229, 230, 231,
	232, 373, 374, 0, 0, 375, 236, 0, 233, 0,
	0, 234, 376, 235, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 237, 238, 239, 0, 383, 384, 240,
	241, 242, 0, 244, 243, 0, 385, 0, 245, 246,
	0, 0, 247, 248, 0, 0, 249, 0, 250, 0,
	251, 252, 254, 386, 253, 0, 255, 256, 258, 257,
	0, 0, 0, 387, 259, 388, 260, 261, 0, 262,
	0, 0, 263, 0, 0, 264, 389, 0, 265, 0,
	390, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 0, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 0,
	311, 396, 397, 312, 0, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 1399, 343,
	183, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 0, 0,
	188, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	0, 193, 356, 357, 194, 195, 0, 0, 358, 359,
	360, 0, 196, 361, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 362, 213, 363, 364,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	231, 232, 373, 374, 0, 0, 375, 236, 0, 233,
	0, 0, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 237, 238, 239, 0, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 0, 245,
	246, 0, 0, 247, 248, 0, 0, 249, 0, 250,
	0, 251, 252, 254, 386, 253, 0, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 0, 265,
	0, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 183, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 186, 187, 1381, 0, 188, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 0,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 231, 232,
	373, 374, 0, 0, 375, 236, 0, 233, 0, 0,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 237, 238, 239, 0, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 0, 245, 246, 0,
	0, 247, 248, 0, 0, 249, 0, 250, 0, 251,
	252, 254, 386, 253, 0, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 0, 265, 0, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 522, 343, 183,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 186, 187, 0, 0, 188,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 189,
	190, 191, 350, 351, 352, 353, 192, 354, 355, 0,
	193, 356, 357, 194, 195, 0, 0, 358, 359, 973,
	0, 196, 361, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 415, 212, 362, 213, 363, 364, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 365, 220, 222, 221, 223, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	368, 369, 370, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 371, 0, 372, 0, 0, 229, 230, 231,
	232, 373, 374, 0, 0, 375, 236, 0, 233, 0,
	0, 234, 376, 235, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 237, 238, 239, 0, 383, 384, 240,
	241, 242, 0, 244, 243, 0, 385, 0, 245, 246,
	0, 0, 247, 248, 0, 0, 249, 0, 250, 0,
	251, 252, 254, 386, 524, 0, 255, 256, 258, 257,
	0, 0, 0, 387, 259, 388, 260, 261, 0, 262,
	0, 0, 263, 0, 0, 264, 389, 0, 265, 0,
	390, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 0, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 0,
	311, 396, 397, 312, 0, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 519, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 1258, 343,
	183, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 0, 0,
	188, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	0, 193, 356, 357, 194, 195, 0, 0, 358, 359,
	360, 0, 196, 361, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 362, 213, 363, 364,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	231, 232, 1257, 374, 0, 0, 375, 236, 0, 233,
	0, 0, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 237, 238, 239, 0, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 0, 245,
	246, 0, 0, 247, 248, 0, 0, 249, 0, 250,
	0, 251, 252, 254, 386, 253, 0, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 0, 265,
	0, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 522,
	343, 183, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 186, 187, 0,
	0, 188, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 189, 190, 191, 350, 351, 352, 353, 192, 354,
	355, 0, 193, 356, 357, 194, 195, 0, 0, 358,
	359, 973, 0, 196, 361, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 415, 212, 362, 213, 363,
	364, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 365, 220, 222, 221,
	223, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 368, 369, 370, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 371, 0, 372, 0, 0, 229,
	230, 231, 232, 373, 374, 0, 0, 375, 236, 0,
	233, 0, 0, 234, 376, 235, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 237, 238, 239, 0, 383,
	384, 240, 241, 242, 0, 244, 243, 0, 385, 0,
	245, 246, 0, 0, 247, 248, 0, 0, 249, 0,
	250, 0, 251, 252, 254, 386, 524, 0, 255, 256,
	258, 257, 0, 0, 0, 387, 259, 388, 260, 261,
	0, 262, 0, 0, 263, 0, 0, 264, 389, 0,
	265, 0, 390, 266, 267, 268, 269, 270, 0, 271,
	391, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	393, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 0,
	294, 295, 394, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 0, 309, 297, 298,
	310, 0, 311, 396, 397, 312, 0, 0, 319, 313,
	314, 299, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	519, 401, 402, 0, 0, 329, 974, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	522, 343, 183, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 186, 187,
	0, 0, 188, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 513, 361, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 231, 232, 373, 374, 0, 0, 375, 236,
	0, 233, 0, 0, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 237, 238, 239, 0,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	0, 245, 246, 0, 0, 247, 248, 0, 0, 249,
	0, 250, 0, 251, 252, 254, 386, 524, 0, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	0, 265, 0, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 957, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 519, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 931, 343, 183, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 186,
	187, 0, 0, 188, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 189, 190, 191, 350, 351, 352, 353,
	192, 354, 355, 0, 193, 356, 357, 194, 195, 0,
	0, 358, 359, 360, 0, 196, 361, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 415, 212, 362,
	213, 363, 364, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 365, 220,
	222, 221, 223, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 368, 369, 370, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 371, 0, 372, 0,
	0, 229, 230, 231, 232, 930, 374, 0, 0, 375,
	236, 0, 233, 0, 0, 234, 376, 235, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 237, 238, 239,
	0, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	385, 0, 245, 246, 0, 0, 247, 248, 0, 0,
	249, 0, 250, 0, 251, 252, 254, 386, 253, 0,
	255, 256, 258, 257, 0, 0, 0, 387, 259, 388,
	260, 261, 0, 262, 0, 0, 263, 0, 0, 264,
	389, 0, 265, 0, 390, 266, 267, 268, 269, 270,
	0, 271, 391, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 393, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 0, 294, 295, 394, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 0, 309,
	297, 298, 310, 0, 311, 396, 397, 312, 0, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 927, 343, 183, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	186, 187, 0, 0, 188, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 196, 361, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 231, 232, 926, 374, 0, 0,
	375, 236, 0, 233, 0, 0, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 237, 238,
	239, 0, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 0, 245, 246, 0, 0, 247, 248, 0,
	0, 249, 0, 250, 0, 251, 252, 254, 386, 253,
	0, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 0, 265, 0, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 924, 343, 183, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 186, 187, 0, 0, 188, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 189, 190, 191, 350, 351,
	352, 353, 192, 354, 355, 0, 193, 356, 357, 194,
	195, 0, 0, 358, 359, 360, 0, 196, 361, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 415,
	212, 362, 213, 363, 364, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	365, 220, 222, 221, 223, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 368, 369, 370, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 371, 0,
	372, 0, 0, 229, 230, 231, 232, 923, 374, 0,
	0, 375, 236, 0, 233, 0, 0, 234, 376, 235,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 237,
	238, 239, 0, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 385, 0, 245, 246, 0, 0, 247, 248,
	0, 0, 249, 0, 250, 0, 251, 252, 254, 386,
	253, 0, 255, 256, 258, 257, 0, 0, 0, 387,
	259, 388, 260, 261, 0, 262, 0, 0, 263, 0,
	0, 264, 389, 0, 265, 0, 390, 266, 267, 268,
	269, 270, 0, 271, 391, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 393, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 0, 294, 295, 394, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	0, 309, 297, 298, 310, 0, 311, 396, 397, 312,
	0, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 920, 343, 183, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 186, 187, 0, 0, 188, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 189, 190, 191, 350,
	351, 352, 353, 192, 354, 355, 0, 193, 356, 357,
	194, 195, 0, 0, 358, 359, 360, 0, 196, 361,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	415, 212, 362, 213, 363, 364, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 365, 220, 222, 221, 223, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 368, 369, 370,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 371,
	0, 372, 0, 0, 229, 230, 231, 232, 919, 374,
	0, 0, 375, 236, 0, 233, 0, 0, 234, 376,
	235, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	237, 238, 239, 0, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 385, 0, 245, 246, 0, 0, 247,
	248, 0, 0, 249, 0, 250, 0, 251, 252, 254,
	386, 253, 0, 255, 256, 258, 257, 0, 0, 0,
	387, 259, 388, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 0, 265, 0, 390, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 183, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	186, 187, 908, 0, 188, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 196, 361, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 231, 232, 373, 374, 0, 0,
	375, 236, 0, 233, 0, 0, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 237, 238,
	239, 0, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 0, 245, 246, 0, 0, 247, 248, 0,
	0, 249, 0, 250, 0, 251, 252, 254, 386, 253,
	0, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 0, 265, 0, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 906, 343, 183, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 186, 187, 0, 0, 188, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 189, 190, 191, 350, 351,
	352, 353, 192, 354, 355, 0, 193, 356, 357, 194,
	195, 0, 0, 358, 359, 360, 0, 196, 361, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 415,
	212, 362, 213, 363, 364, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	365, 220, 222, 221, 223, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 368, 369, 370, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 371, 0,
	372, 0, 0, 229, 230, 231, 232, 905, 374, 0,
	0, 375, 236, 0, 233, 0, 0, 234, 376, 235,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 237,
	238, 239, 0, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 385, 0, 245, 246, 0, 0, 247, 248,
	0, 0, 249, 0, 250, 0, 251, 252, 254, 386,
	253, 0, 255, 256, 258, 257, 0, 0, 0, 387,
	259, 388, 260, 261, 0, 262, 0, 0, 263, 0,
	0, 264, 389, 0, 265, 0, 390, 266, 267, 268,
	269, 270, 0, 271, 391, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 393, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 0, 294, 295, 394, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	0, 309, 297, 298, 310, 0, 311, 396, 397, 312,
	0, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 902, 343, 183, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 186, 187, 0, 0, 188, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 189, 190, 191, 350,
	351, 352, 353, 192, 354, 355, 0, 193, 356, 357,
	194, 195, 0, 0, 358, 359, 360, 0, 196, 361,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	415, 212, 362, 213, 363, 364, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 365, 220, 222, 221, 223, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 368, 369, 370,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 371,
	0, 372, 0, 0, 229, 230, 231, 232, 373, 374,
	0, 0, 375, 236, 0, 233, 0, 0, 234, 376,
	235, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	237, 238, 239, 0, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 385, 0, 245, 246, 0, 0, 247,
	248, 0, 0, 249, 0, 250, 0, 251, 252, 254,
	386, 253, 0, 255, 256, 258, 257, 0, 0, 0,
	387, 259, 388, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 0, 265, 0, 390, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 887, 343, 183, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 186, 187, 0, 0, 188, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 189, 190, 191,
	350, 351, 352, 353, 192, 354, 355, 0, 193, 356,
	357, 194, 195, 0, 0, 358, 359, 360, 0, 196,
	361, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 415, 212, 362, 213, 363, 364, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 365, 220, 222, 221, 223, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 368, 369,
	370, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	371, 0, 372, 0, 0, 229, 230, 231, 232, 889,
	374, 0, 0, 375, 236, 0, 233, 0, 0, 234,
	376, 235, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 237, 238, 239, 0, 383, 384, 240, 241, 242,
	0, 244, 243, 0, 385, 0, 245, 246, 0, 0,
	247, 248, 0, 0, 249, 0, 250, 0, 251, 252,
	254, 386, 253, 0, 255, 256, 258, 257, 0, 0,
	0, 387, 259, 388, 260, 261, 0, 262, 0, 0,
	263, 0, 0, 264, 389, 0, 265, 0, 390, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 0, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 777, 343, 183, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 0, 0, 188, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 0,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 231, 232,
	779, 374, 0, 0, 375, 236, 0, 233, 0, 0,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 237, 238, 239, 0, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 0, 245, 246, 0,
	0, 247, 248, 0, 0, 249, 0, 250, 0, 251,
	252, 254, 386, 253, 0, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 0, 265, 0, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 775, 343, 183,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 186, 187, 0, 0, 188,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 189,
	190, 191, 350, 351, 352, 353, 192, 354, 355, 0,
	193, 356, 357, 194, 195, 0, 0, 358, 359, 360,
	0, 196, 361, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 415, 212, 362, 213, 363, 364, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 365, 220, 222, 221, 223, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	368, 369, 370, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 371, 0, 372, 0, 0, 229, 230, 231,
	232, 373, 374, 0, 0, 375, 236, 0, 233, 0,
	0, 234, 376, 235, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 237, 238, 239, 0, 383, 384, 240,
	241, 242, 0, 244, 243, 0, 385, 0, 245, 246,
	0, 0, 247, 248, 0, 0, 249, 0, 250, 0,
	251, 252, 254, 386, 253, 0, 255, 256, 258, 257,
	0, 0, 0, 387, 259, 388, 260, 261, 0, 262,
	0, 0, 263, 0, 0, 264, 389, 0, 265, 0,
	390, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 0, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 0,
	311, 396, 397, 312, 0, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 522, 343,
	183, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 0, 0,
	188, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	0, 193, 356, 357, 194, 195, 0, 0, 358, 359,
	360, 0, 513, 361, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 362, 213, 363, 364,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	231, 232, 373, 374, 0, 0, 375, 236, 0, 233,
	0, 0, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 237, 238, 239, 0, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 0, 245,
	246, 0, 0, 247, 512, 0, 0, 249, 0, 250,
	0, 251, 252, 254, 386, 524, 0, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 0, 265,
	0, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 514, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 515, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 519,
	401, 402, 0, 0, 329, 517, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 504,
	343, 183, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 186, 187, 0,
	0, 188, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 189, 190, 191, 350, 351, 352, 353, 192, 354,
	355, 0, 193, 356, 357, 194, 195, 0, 0, 358,
	359, 360, 0, 196, 361, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 415, 212, 362, 213, 363,
	364, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 365, 220, 222, 221,
	223, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 368, 369, 370, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 371, 0, 372, 0, 0, 229,
	230, 231, 232, 373, 374, 0, 0, 375, 236, 0,
	233, 0, 0, 234, 376, 235, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 237, 238, 239, 0, 383,
	384, 240, 241, 242, 0, 244, 243, 0, 385, 0,
	245, 246, 0, 0, 247, 248, 0, 0, 249, 0,
	250, 0, 251, 252, 254, 386, 253, 0, 255, 256,
	258, 257, 0, 0, 0, 387, 259, 388, 260, 261,
	0, 262, 0, 0, 263, 0, 0, 264, 389, 0,
	265, 0, 390, 266, 267, 268, 269, 270, 0, 271,
	391, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	393, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 0,
	294, 295, 394, 296, 0, 505, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 0, 309, 297, 298,
	310, 0, 311, 396, 397, 312, 0, 0, 319, 313,
	314, 299, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	502, 343, 183, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 186, 187,
	0, 0, 188, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 231, 232, 373, 374, 0, 0, 375, 236,
	0, 233, 0, 0, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 237, 238, 239, 0,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	0, 245, 246, 0, 0, 247, 248, 0, 0, 249,
	0, 250, 0, 251, 252, 254, 386, 253, 0, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	0, 265, 0, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 494, 343, 183, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 186,
	187, 0, 0, 188, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 189, 190, 191, 350, 351, 352, 353,
	192, 354, 355, 0, 193, 356, 357, 194, 195, 0,
	0, 358, 359, 360, 0, 196, 361, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 415, 212, 362,
	213, 363, 364, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 365, 220,
	222, 221, 223, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 368, 369, 370, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 371, 0, 372, 0,
	0, 229, 230, 231, 232, 373, 374, 0, 0, 375,
	236, 0, 233, 0, 0, 234, 376, 235, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 237, 238, 239,
	0, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	385, 0, 245, 246, 0, 0, 247, 248, 0, 0,
	249, 0, 250, 0, 251, 252, 254, 386, 253, 0,
	255, 256, 258, 257, 0, 0, 0, 387, 259, 388,
	260, 261, 0, 262, 0, 0, 263, 0, 0, 264,
	389, 0, 265, 0, 390, 266, 267, 268, 269, 270,
	0, 271, 391, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 393, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 0, 294, 295, 394, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 0, 309,
	297, 298, 310, 0, 311, 396, 397, 312, 0, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 446, 343, 183, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	186, 187, 0, 0, 188, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 196, 361, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 231, 232, 373, 374, 0, 0,
	375, 236, 0, 233, 0, 0, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 237, 238,
	239, 0, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 0, 245, 246, 0, 0, 247, 248, 0,
	0, 249, 0, 250, 0, 251, 252, 254, 386, 253,
	0, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 0, 265, 0, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 183, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 186, 187,
	0, 0, 188, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 231, 232, 373, 374, 0, 0, 375, 236,
	0, 233, 0, 0, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 237, 238, 239, 0,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	0, 245, 246, 0, 0, 247, 248, 0, 0, 249,
	0, 250, 0, 251, 252, 254, 386, 253, 0, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	0, 265, 0, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	183, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 186, 187, 0, 0,
	188, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	0, 193, 356, 357, 194, 195, 0, 0, 358, 359,
	360, 0, 196, 361, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 362, 213, 363, 364,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	231, 232, 1958, 374, 0, 0, 375, 236, 0, 233,
	0, 0, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 237, 238, 239, 0, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 0, 245,
	246, 0, 0, 247, 248, 0, 0, 249, 0, 250,
	0, 251, 252, 254, 386, 253, 0, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 0, 265,
	0, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 183, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 186, 187, 0, 0, 188, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 0,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 231, 232,
	1956, 374, 0, 0, 375, 236, 0, 233, 0, 0,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 237, 238, 239, 0, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 0, 245, 246, 0,
	0, 247, 248, 0, 0, 249, 0, 250, 0, 251,
	252, 254, 386, 253, 0, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 0, 265, 0, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 183, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 186, 187, 0, 0, 188, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 189, 190, 191, 350,
	351, 352, 353, 192, 354, 355, 0, 193, 356, 357,
	194, 195, 0, 0, 358, 359, 360, 0, 196, 361,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	415, 212, 362, 213, 363, 364, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 365, 220, 222, 221, 223, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 368, 369, 370,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 371,
	0, 372, 0, 0, 229, 230, 231, 232, 1945, 374,
	0, 0, 375, 236, 0, 233, 0, 0, 234, 376,
	235, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	237, 238, 239, 0, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 385, 0, 245, 246, 0, 0, 247,
	248, 0, 0, 249, 0, 250, 0, 251, 252, 254,
	386, 253, 0, 255, 256, 258, 257, 0, 0, 0,
	387, 259, 388, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 0, 265, 0, 390, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 183, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	186, 187, 0, 0, 188, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 196, 361, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 231, 232, 373, 374, 0, 0,
	375, 236, 0, 233, 0, 0, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 237, 238,
	239, 0, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 0, 245, 246, 0, 0, 247, 248, 0,
	0, 249, 0, 250, 0, 251, 252, 254, 386, 253,
	0, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 0, 265, 0, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 505, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 183, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 186, 187,
	0, 0, 188, 0, 0, 0, 0, 349, 0, 1268,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 231, 232, 373, 374, 0, 0, 375, 236,
	0, 233, 0, 0, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 237, 238, 239, 0,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	0, 245, 246, 0, 0, 247, 248, 0, 0, 249,
	0, 250, 0, 251, 252, 254, 386, 253, 0, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	0, 265, 0, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 0, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	183, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 186, 187, 0, 0,
	188, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	0, 193, 356, 357, 194, 195, 0, 0, 358, 359,
	360, 0, 196, 361, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 362, 213, 363, 364,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	231, 232, 373, 374, 0, 0, 375, 236, 0, 233,
	0, 0, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 237, 238, 239, 0, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 0, 245,
	246, 0, 0, 247, 248, 0, 0, 249, 0, 250,
	0, 251, 252, 254, 386, 253, 0, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 0, 265,
	0, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	742, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 183, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 186, 187, 0, 0, 188, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 0,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 231, 232,
	373, 374, 0, 0, 375, 236, 0, 233, 0, 0,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 237, 238, 239, 0, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 0, 245, 246, 0,
	0, 247, 248, 0, 0, 249, 0, 250, 0, 251,
	252, 254, 386, 253, 0, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 0, 265, 0, 390,
	266, 267, 0, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 0, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	0, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 1064, 1065,
	0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 0,
	0, 1082, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 1108, 0, 0, 0, 0,
	1852, 1853, 0, 1870, 1871, 1872, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1066, 2055, 0, 0,
	1064, 1065, 1086, 1094, 1095, 1096, 1104, 1105, 1106, 1083,
	0, 0, 0, 1082, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 1067, 0, 0, 1108, 0, 0,
	0, 0, 0, 0, 1867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 1086, 0, 0, 1089, 1090, 1091,
	1092, 1083, 0, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1858, 0,
	0, 0, 0, 0, 0, 1107, 0, 0, 0, 1089,
	1090, 1091, 1092, 0, 0, 0, 0, 0, 1072, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 1873, 1101, 1109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1098, 1107, 0, 0,
	0, 0, 1868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 0, 0, 1869, 0, 0,
	0, 0, 1093, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 1064, 1065, 0, 1094, 1095, 1096,
	1104, 1105, 1106, 0, 1102, 0, 0, 1082, 0, 0,
	1081, 1097, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 1108, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080,
	1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073,
	1074, 0, 1066, 0, 0, 0, 0, 0, 1086, 1892,
	0, 0, 0, 0, 0, 1083, 0, 1864, 1865, 1866,
	0, 0, 0, 0, 1863, 1861, 1862, 1854, 1855, 1856,
	1857, 1859, 1860, 0, 1100, 0, 0, 1078, 1079, 1085,
	1084, 1080, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 0, 0, 0, 0, 0, 0, 0,
	0, 1844, 0, 1089, 1090, 1091, 1092, 0, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 1101, 1109, 0, 0, 1082, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	1108, 1107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1099,
	0, 1066, 0, 0, 0, 0, 1087, 1086, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 1093, 0, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1109, 0, 0, 0, 0, 0, 1102, 0,
	0, 0, 1852, 1853, 1081, 1870, 1871, 1872, 0, 0,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104, 1105,
	1106, 0, 0, 0, 0, 1082, 1867, 0, 0, 1097,
	0, 1098, 0, 0, 0, 0, 1067, 0, 1100, 1108,
	0, 1078, 1079, 1085, 1084, 1080, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	1066, 2513, 0, 0, 0, 1093, 1086, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1858, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 1064, 1065, 1081, 1094, 1095, 1096, 1104, 1105, 1106,
	0, 1874, 0, 0, 1082, 0, 0, 0, 1097, 0,
	0, 1089, 1090, 1091, 1092, 1067, 0, 0, 1108, 1873,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1066,
	1101, 1109, 0, 0, 1868, 1086, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 1100, 0, 1107,
	1078, 1079, 1085, 1084, 1080, 1103, 0, 1077, 1075, 1076,
	1068, 1069, 1070, 1071, 1073, 1074, 0, 1099, 0, 0,
	2463, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 1090, 1091, 1092, 0, 0, 0, 0, 0, 1072,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 1869,
	1852, 1853, 0, 1870, 1871, 1872, 0, 0, 0, 1101,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 1087, 1867, 0, 1102, 0, 0, 0,
	1064, 1065, 1081, 1094, 1095, 1096, 1104, 1105, 1106, 0,
	0, 0, 0, 1082, 0, 0, 0, 1097, 0, 1098,
	0, 0, 0, 0, 1067, 0, 0, 1108, 0, 1864,
	1865, 1866, 0, 0, 0, 0, 1863, 1861, 1862, 1854,
	1855, 1856, 1857, 1859, 1860, 0, 0, 0, 1066, 0,
	0, 0, 0, 1093, 1086, 0, 0, 0, 1858, 0,
	0, 1083, 0, 0, 0, 0, 1100, 0, 1088, 1078,
	1079, 1085, 1084, 1080, 1103, 0, 1077, 1075, 1076, 1068,
	1069, 1070, 1071, 1073, 1074, 1102, 0, 0, 0, 2417,
	0, 1081, 0, 0, 0, 0, 0, 1873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1089,
	1090, 1091, 1092, 0, 0, 0, 0, 0, 1072, 0,
	0, 0, 1868, 0, 0, 0, 0, 0, 0, 1064,
	1065, 0, 1094, 1095, 1096, 1104, 1105, 1106, 1101, 1109,
	0, 0, 1082, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 1067, 0, 1100, 1108, 1107, 1078, 1079,
	1085, 1084, 1080, 1103, 0, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 0, 1099, 0, 1066, 2387, 0,
	0, 0, 1087, 1086, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 1869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 1090,
	1091, 1092, 1093, 0, 0, 0, 0, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 1109, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 1107, 1864, 1865, 1866,
	0, 0, 0, 0, 1863, 1861, 1862, 1854, 1855, 1856,
	1857, 1859, 1860, 0, 1099, 0, 0, 0, 0, 0,
	0, 1087, 0, 0, 0, 0, 0, 0, 1064, 1065,
	0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 0,
	0, 1082, 0, 0, 0, 1097, 0, 1098, 0, 0,
	0, 0, 1067, 0, 1100, 1108, 0, 1078, 1079, 1085,
	1084, 1080, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 0, 0, 0, 1066, 2382, 0, 0,
	0, 1093, 1086, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 1064, 1065, 1081,
	1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 0, 0,
	1082, 0, 0, 0, 1097, 0, 0, 1089, 1090, 1091,
	1092, 1067, 0, 0, 1108, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1066, 1101, 1109, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 1100, 0, 1107, 1078, 1079, 1085, 1084,
	1080, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 1099, 0, 0, 2378, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 1090, 1091, 1092,
	0, 0, 0, 0, 0, 1072, 1098, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1087,
	0, 0, 1102, 0, 0, 0, 1064, 1065, 1081, 1094,
	1095, 1096, 1104, 1105, 1106, 0, 0, 0, 0, 1082,
	0, 0, 0, 1097, 0, 1098, 0, 0, 0, 0,
	1067, 0, 0, 1108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1066, 0, 0, 0, 0, 1093,
	1086, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 1100, 0, 1088, 1078, 1079, 1085, 1084, 1080,
	1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073,
	1074, 1102, 0, 0, 0, 2313, 0, 1081, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1089, 1090, 1091, 1092, 0,
	0, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1064, 1065, 0, 1094, 1095,
	1096, 1104, 1105, 1106, 1101, 1109, 0, 0, 1082, 0,
	0, 0, 1097, 0, 0, 0, 0, 0, 0, 1067,
	0, 1100, 1108, 1107, 1078, 1079, 1085, 1084, 1080, 1103,
	0, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074,
	0, 1099, 0, 1066, 2279, 0, 0, 0, 1087, 1086,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1089, 1090, 1091, 1092, 1093, 0,
	0, 0, 0, 1072, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 1109, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 1107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 1064, 1065, 0, 1094, 1095, 1096,
	1104, 1105, 1106, 0, 0, 0, 0, 1082, 0, 0,
	0, 1097, 0, 1098, 0, 0, 0, 0, 1067, 0,
	1100, 1108, 0, 1078, 1079, 1085, 1084, 1080, 1103, 0,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0,
	0, 0, 1066, 2278, 0, 0, 0, 1093, 1086, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 1064, 1065, 1081, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 0, 0, 1082, 0, 0, 0,
	1097, 0, 0, 1089, 1090, 1091, 1092, 1067, 0, 0,
	1108, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1066, 1101, 1109, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 1100,
	0, 1107, 1078, 1079, 1085, 1084, 1080, 1103, 0, 1077,
	1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 1099,
	0, 0, 2243, 0, 0, 0, 1087, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 0, 0, 0,
	0, 1072, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1087, 0, 0, 1102, 0,
	0, 0, 1064, 1065, 1081, 1094, 1095, 1096, 1104, 1105,
	1106, 0, 0, 0, 0, 1082, 0, 0, 0, 1097,
	0, 1098, 0, 0, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1066, 0, 0, 0, 0, 1093, 1086, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 1100, 0,
	1088, 1078, 1079, 1085, 1084, 1080, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 1102, 0, 0,
	0, 2086, 0, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 1090, 1091, 1092, 0, 0, 0, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 1065, 0, 1094, 1095, 1096, 1104, 1105, 1106,
	1101, 1109, 0, 0, 1082, 0, 0, 0, 1097, 0,
	0, 0, 0, 0, 0, 1067, 0, 1100, 1108, 1107,
	1078, 1079, 1085, 1084, 1080, 1103, 0, 1077, 1075, 1076,
	1068, 1069, 1070, 1071, 1073, 1074, 0, 1099, 0, 1066,
	2062, 0, 0, 0, 1087, 1086, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 1090, 1091, 1092, 1093, 0, 0, 0, 0, 1072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1109, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 1081, 0, 0, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	1064, 1065, 0, 1094, 1095, 1096, 1104, 1105, 1106, 0,
	0, 0, 0, 1082, 0, 0, 0, 1097, 0, 1098,
	0, 0, 0, 0, 1067, 0, 1100, 1108, 0, 1078,
	1079, 1085, 1084, 1080, 1103, 0, 1077, 1075, 1076, 1068,
	1069, 1070, 1071, 1073, 1074, 0, 0, 0, 1066, 1517,
	0, 0, 0, 1093, 1086, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 0, 1064,
	1065, 1081, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0,
	0, 0, 1082, 0, 0, 0, 1097, 0, 0, 1089,
	1090, 1091, 1092, 1067, 0, 0, 1108, 0, 1072, 2576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 1101, 1109,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 1100, 0, 1107, 1078, 1079,
	1085, 1084, 1080, 1103, 0, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 0, 1099, 1814, 0, 0, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 1090,
	1091, 1092, 0, 0, 0, 0, 0, 1072, 1098, 1884,
	0, 0, 1883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2575, 0, 0, 1101, 1109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 0, 0, 0, 1107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 1087, 0, 0, 1102, 0, 0, 0, 1064, 1065,
	1081, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 0,
	0, 1082, 0, 0, 0, 1097, 0, 1098, 0, 0,
	1787, 0, 1067, 0, 0, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1066, 0, 0, 0,
	0, 1093, 1086, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 1100, 0, 1088, 1078, 1079, 1085,
	1084, 1080, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 1102, 0, 0, 1788, 0, 0, 1081,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1090, 1091,
	1092, 0, 0, 0, 0, 0, 1072, 0, 0, 0,
	0, 1615, 0, 0, 0, 0, 0, 1064, 1065, 0,
	1094, 1095, 1096, 1104, 1105, 1106, 1101, 1109, 0, 0,
	1082, 0, 0, 0, 1097, 0, 0, 0, 1614, 0,
	0, 1067, 0, 1100, 1108, 1107, 1078, 1079, 1085, 1084,
	1080, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 1099, 0, 1066, 0, 0, 0, 0,
	1087, 1086, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 1090, 1091, 1092,
	1093, 0, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1088, 1064, 1065, 0, 1094,
	1095, 1096, 1104, 1105, 1106, 1101, 1109, 0, 0, 1082,
	0, 0, 1102, 1097, 0, 0, 0, 0, 1081, 0,
	1067, 0, 0, 1108, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 1066, 0, 0, 0, 0, 1087,
	1086, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080,
	1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073,
	1074, 0, 0, 0, 0, 1089, 1090, 1091, 1092, 1093,
	0, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 1064, 1065, 0, 1094, 1095,
	1096, 1104, 1105, 1106, 1101, 1109, 0, 0, 1082, 0,
	0, 1102, 1097, 0, 0, 0, 0, 1081, 0, 1067,
	0, 0, 1108, 1107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 1066, 0, 0, 0, 0, 1087, 1086,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 599, 0, 0, 0, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1103,
	0, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074,
	0, 0, 0, 0, 1089, 1090, 1091, 1092, 1093, 0,
	0, 0, 0, 1072, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 1064, 1065, 0, 1094, 1095, 1096,
	1104, 1105, 1106, 1101, 1109, 0, 0, 1082, 0, 0,
	1102, 1097, 0, 0, 0, 0, 1081, 0, 1067, 0,
	0, 1108, 1107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 1066, 0, 0, 0, 0, 1087, 1086, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1098, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1103, 0,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0,
	0, 0, 0, 1089, 1090, 1091, 1092, 1093, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, 1890, 0, 0,
	0, 0, 1088, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 1101, 1109, 0, 0, 1082, 0, 0, 1102,
	1097, 0, 0, 0, 1885, 1081, 0, 1067, 0, 0,
	1108, 1107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2066, 0, 1099,
	0, 1066, 0, 0, 0, 0, 1087, 1086, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 1078, 1079, 1085, 1084, 1080, 1103, 0, 1077,
	1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 1093, 0, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1109, 0, 0, 0, 0, 0, 1102, 0,
	0, 0, 0, 0, 1081, 0, 0, 0, 0, 0,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104, 1105,
	1106, 0, 0, 0, 0, 1082, 0, 0, 0, 1097,
	0, 1098, 0, 0, 0, 0, 1067, 0, 1100, 1108,
	0, 1078, 1079, 1085, 1084, 1080, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	1066, 0, 0, 0, 0, 1093, 1086, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 1090, 1091, 1092, 0, 0, 0, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 1065, 0, 1094, 1095, 1096, 1104, 1105, 1106,
	1101, 1109, 0, 0, 1082, 0, 0, 0, 1097, 0,
	0, 0, 1843, 0, 0, 1067, 0, 1100, 1108, 1107,
	1078, 1079, 1085, 1084, 1080, 1103, 0, 1077, 1075, 1076,
	1068, 1069, 1070, 1071, 1073, 1074, 0, 1099, 0, 1066,
	0, 0, 0, 0, 1087, 1086, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1850, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 1090, 1091, 1092, 1093, 0, 0, 0, 0, 1072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	1064, 1065, 0, 1094, 1095, 1096, 1104, 1105, 1106, 1101,
	1109, 0, 0, 1082, 0, 0, 1102, 1097, 0, 0,
	0, 0, 1081, 0, 1067, 0, 0, 1108, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 1066, 0,
	0, 0, 0, 1087, 1086, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1078,
	1079, 1085, 1084, 1080, 1103, 0, 1077, 1075, 1076, 1068,
	1069, 1070, 1071, 1073, 1074, 0, 0, 0, 0, 1089,
	1090, 1091, 1092, 1093, 0, 0, 0, 0, 1072, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1088, 1064,
	1065, 0, 1094, 1095, 1096, 1104, 1105, 1106, 1101, 1109,
	0, 0, 1082, 0, 0, 1102, 1097, 0, 0, 0,
	0, 1081, 0, 1067, 0, 0, 1108, 1107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 1066, 0, 0,
	0, 0, 1087, 1086, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1098, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 1078, 1079,
	1085, 1084, 1080, 1103, 0, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 0, 0, 0, 0, 1089, 1090,
	1091, 1092, 1093, 0, 0, 0, 0, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 1064, 1065,
	0, 1094, 1095, 1096, 1104, 1105, 1106, 1101, 1109, 0,
	0, 1082, 0, 0, 1102, 0, 0, 0, 0, 0,
	1081, 0, 1067, 0, 0, 1108, 1107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 0, 1066, 0, 0, 0,
	0, 1087, 1086, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 1078, 1079, 1085,
	1084, 1080, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 0, 0, 0, 0, 1089, 1090, 1091,
	1092, 1093, 0, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 1064, 1065, 0,
	1094, 1095, 1096, 1104, 1105, 1106, 1101, 1109, 0, 0,
	1082, 0, 0, 1102, 0, 0, 0, 0, 0, 1081,
	0, 1067, 0, 0, 1108, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 1066, 0, 0, 0, 0,
	1087, 1086, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084,
	1080, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 1089, 1090, 1091, 1092,
	1093, 0, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 1088, 569, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1109, 0, 0, 0,
	0, 0, 1102, 0, 548, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 0, 0, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 547, 1087,
	0, 0, 0, 549, 0, 0, 0, 0, 0, 0,
	0, 555, 556, 0, 0, 0, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	570, 550, 1100, 0, 1313, 1078, 1079, 1085, 1084, 1080,
	1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073,
	1074, 0, 0, 568, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 0, 0, 0, 0, 0, 1321, 1310,
	1340, 1299, 1331, 1330, 1088, 0, 1301, 1300, 551, 0,
	0, 0, 1342, 1341, 0, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 552, 553, 0, 1081, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 0, 0, 0, 0, 554, 561, 0,
	1336, 0, 1328, 1327, 0, 0, 0, 0, 0, 0,
	558, 0, 1326, 0, 0, 0, 0, 0, 0, 0,
	0, 571, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1325, 1323, 1324, 0, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1103,
	0, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074,
	1309, 557, 0, 0, 0, 0, 0, 1314, 1312, 1315,
	1316, 1317, 1318, 1319, 0, 1339, 0, 0, 0, 0,
	1313, 0, 1303, 1302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 545,
	562, 572, 0, 0, 0, 0, 0, 0, 1305, 0,
	0, 0, 0, 0, 1321, 1310, 1340, 1299, 1331, 1330,
	1329, 0, 1301, 1300, 1311, 0, 563, 0, 1342, 1341,
	567, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	560, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 0, 0, 566, 1442, 1440, 1441,
	1444, 1443, 0, 0, 0, 0, 1336, 0, 1328, 1327,
	0, 0, 0, 0, 0, 0, 0, 0, 1326, 0,
	0, 0, 0, 0, 0, 1306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1320, 1307, 0, 0,
	0, 1325, 1323, 1324, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 0, 1337, 1338, 1309, 0, 0, 0,
	0, 0, 0, 1314, 1312, 1315, 1316, 1317, 1318, 1319,
	0, 1339, 0, 0, 0, 0, 1308, 0, 1303, 1302,
	0, 1343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	1311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1320, 1307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1304, 0, 0, 0,
	1337, 1338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1308, 0, 0, 0, 0, 1343,
}
var sqlPact = [...]int{

	4701, -1000, -17, -1000, -1000, -1000, 142, -1000, -1000, -1000,
	-1000, 141, 139, 134, -1000, 133, 132, 131, 130, 128,
	122, 120, 114, 113, 112, 109, -1000, 107, -1000, -1000,
	-1000, -1000, 104, 100, 99, 98, 96, 93, 92, -1000,
	1120, 22912, 90, 89, 1333, -1000, 35828, 87, -1000, 1113,
	26642, 971, 1497, -1000, 86, 1099, 35490, 4101, 1475, 1152,
	1690, 35149, 22571, 1680, 1354, 34808, -1000, -1000, 34467, 85,
	83, 82, 79, 78, -1000, -1000, 34126, 77, 76, 69,
	68, 57, 56, 54, 50, 49, 48, 46, 45, 43,
	39, -1000, 37, 35, 33, -1000, 42852, 32, 29, 28,
	1151, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 920, 26, 21, 20, 18,
	16, 106, 13, 12, 10, 9, -1000, 996, 482, 1548,
	8728, 1053, 1049, 1027, 1023, 1073, 37856, 35828, 8, -55,
	7, -1000, 1985, 632, 19108, 4701, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26301, 25960, 33785, 33444, 6186, 798, -1000, -21, 24264, 35828,
	-1000, 144, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 14245, 13866, 442, 144, -1000, -1000, -1000, 33103, 22230,
	32762, 1559, 32421, -1000, -1000, 32080, -1000, -1000, 1981, 1736,
	1656, 25619, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	31742, 31401, 31060, 30719, 21878, 509, -1000, -1000, -1000, 17393,
	-1000, -1000, -1000, -1000, 6, -1000, 5, -1000, 4, 3,
	2, 1, -1, -2, -1000, -3, -7, -1000, -8, -9,
	-1000, -14, -15, 1042, 1014, 30378, 893, 1331, -1000, -1000,
	-19, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35828,
	-1000, 15298, -1000, 506, -1000, 1644, -1000, 15298, -1000, 1326,
	-1000, -1000, -1000, -1000, -1000, 35828, -1000, -1000, -1000, -1000,
	-1000, -1000, 2203, 1222, 505, 30037, -1000, 1418, -1000, 616,
	784, -1000, -1000, -1000, 9430, 152, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1724, 21526, 1200, 2019, 1977,
	2199, 1510, 1964, 1962, 1933, 1931, 1848, 2198, 987, 2194,
	1776, 1032, 2192, 1793, 1262, 695, 2186, 1639, 1636, -1000,
	-1000, -1000, -1000, 952, -1000, -1000, -1000, 27994, -1000, -1000,
	831, 939, -1000, -1000, -1000, -1000, -1000, 996, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1500, 1978, 1978, 1978, 2048,
	260, 254, -1000, 106, -1000, 1766, -1000, 1210, -1000, -1000,
	-1000, 42330, -1000, -1000, 15298, 15298, 15298, 15298, 15298, 1198,
	-1000, 537, -1000, 503, 502, 7282, -1000, -1000, 2167, -1000,
	-1000, -1000, 284, -1000, -1000, 15298, 144, -1000, -1000, -1000,
	-1000, 500, 2182, -1000, 640, -1000, -1000, -1000, 622, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1670, 497,
	496, 492, -1000, 483, -1000, -1000, 481, 480, 478, 477,
	474, 471, 469, 467, 466, 464, 462, 459, 457, 456,
	453, 1097, -1000, 651, -1000, -1000, 651, 651, -1000, 432,
	432, 434, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	432, -1000, -1000, -1000, 600, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 450, 1263, -1000,
	-1000, 1263, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 792,
	37180, -24, 35828, -1000, 449, -24, -1000, -1000, 448, -1000,
	9781, 9781, -1000, -1000, -1000, 15298, -1000, 1562, -1000, 3550,
	-159, 286, 584, -1000, 18079, 20824, -1000, -1000, 1006, 1834,
	940, -1000, 1061, 1810, 547, -1000, 1196, -1000, 1205, 1744,
	-81, 1694, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 23250,
	24264, -21, -22, -1000, -1000, -1000, 5836, 42330, -1000, 42330,
	-1000, 869, 19794, 144, -1000, -1000, -1000, -1000, 447, 1382,
	626, 1379, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 289, -1000, 29696, 626, 1378, -1000, -1000, -1000, 27994,
	-1000, 35828, -1000, 35828, -1000, 930, -1000, 37518, 116, 1732,
	-1000, -1000, 116, 1730, -1000, 115, 1729, -1000, -1000, 1248,
	1727, -1000, -52, 1719, -1000, -1000, -1000, 15298, -63, -1000,
	-1000, -1000, 632, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 29355, 23588, 1324,
	558, 42330, 2085, 43106, 23250, 42330, 23588, -1000, -1000, 35828,
	-1000, 15298, -1000, 2078, 1356, -27, -1000, -1000, -1000, -1000,
	-1000, 1412, 1437, 756, 1299, 9430, 9430, 1920, -1000, 147,
	6186, -1000, -1000, -1000, -1000, 29014, -1000, -1000, -1000, 1189,
	35828, -1000, -1000, 1669, -1000, 23588, 35828, -1000, 35828, -1000,
	35828, -1000, 35828, -1000, 35828, -1000, -1000, -1000, -1000, -1000,
	3851, -1000, 1662, -1000, -1000, 35828, -1000, 1406, -1000, -1000,
	-1000, 28676, 28335, -1000, 1037, 829, -1000, -1000, 117, -1000,
	35828, 2026, 615, -1000, 1500, 1430, 1654, 689, 1334, 1524,
	13487, 1469, 15298, 106, -1000, -1000, 106, 106, 8349, -1000,
	-1000, -1000, 35828, -1000, 42940, 43106, 6186, 810, 15298, 15298,
	15298, 15298, 15298, 15298, 15298, 15298, 15298, 15298, 15298, 15298,
	15298, 15298, 15298, 15298, 15298, 15298, 15298, 15298, 15298, 15298,
	15298, 15298, 15298, 15298, 15298, 15298, 15298, 15298, 15298, 15298,
	1428, 15298, 787, 15298, 15298, 15298, 15298, 1144, 1125, 319,
	1195, -1000, 2125, 2125, 2125, 42588, 42588, 373, 537, -1000,
	15298, -1000, 58, 15298, 254, 40642, -23, 6917, -1000, -1000,
	-1000, 13136, 637, 42330, 144, 6538, -1000, 2165, 921, 1678,
	1597, 440, 544, 543, 536, 530, 15298, 15298, 12785, 12406,
	12027, 16000, 11648, 15298, 7647, 15298, 15298, 15298, 15298, 11269,
	10890, -1000, 439, -1000, -1000, -1000, -1000, 2164, -1000, -1000,
	2163, -1000, 808, 806, 2162, -1000, -27, -1000, 37180, -1000,
	35828, -24, 2076, 35828, 15298, 179, -1000, 41367, -1000, 179,
	-64, 42330, 1486, 1482, 19451, 1361, 1231, 1231, 1231, -1000,
	438, 521, 584, 5125, 10511, -1000, 26980, 1266, 181, 252,
	17736, 1562, -1000, 35828, -44, 1156, -1000, 25278, 1965, 1951,
	1949, 27994, 2062, 58, 1986, 1634, 783, 27994, 1979, 781,
	2060, 58, 1630, 760, 35828, 6186, 1972, 582, -1000, 35828,
	-1000, -1000, -1000, 1628, -70, -1000, -1000, 24940, 2075, 1717,
	-1000, 1105, -1000, 1714, 2073, 35828, 1315, 1377, -1000, -1000,
	823, 1712, 633, 216, 2072, 216, 20138, -1000, 35828, -1000,
	35828, -1000, -1000, 35828, -1000, 35828, -1000, 35828, 35828, -1000,
	35828, 23250, 23250, -73, 4455, 24602, 757, -1000, 669, 24940,
	479, -75, -1000, 878, -1000, -1000, -1000, -1000, 198, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 434, 1097, 432, 432, 432,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 600, -1000, -1000,
	651, 651, 651, -1000, -1000, -78, 1624, 607, -91, 709,
	-27, -1000, 1263, -1000, 1286, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2181, -1000,
	2137, -1000, -1000, 2161, -29, -1000, -29, -1000, 6186, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 35828, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 491, -1000, -1000, -1000, -1000,
	-1000, -1000, 35828, 35828, 35828, -1000, 27994, 628, 1661, -1000,
	1966, 1430, 1654, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 42330, -1000, 408, -1000, -1000, 42330, 977, 1530, -1000,
	1530, -30, -1000, 41238, 1471, 35828, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 611, 674, 674,
	917, 917, 917, 917, 2091, 1591, 770, 802, 332, 332,
	332, 332, 332, 332, 332, 332, 310, 429, 429, 310,
	310, 310, 310, 310, 332, 332, 332, 42588, 42459, 3023,
	15298, 15298, 746, 1123, 319, 3023, 15298, 3023, 3023, 3023,
	3023, -1000, 1236, -1000, -1000, -1000, -1000, 1623, 431, 16000,
	16000, -1000, -1000, -1000, 7282, 16700, -1000, -1000, -1000, -1000,
	427, 15298, -1000, 40771, -223, 249, -54, -1000, 15298, 520,
	-96, -1000, 888, -1000, 15298, -1000, -43, 15298, 15298, 15298,
	248, -1000, 247, -1000, 745, -1000, 744, 742, 741, -1000,
	416, 1215, 415, 414, 15298, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 42201, 38590, 243, -1000, 1622, -54, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 242, -1000, 241, -1000,
	42072, -54, 240, 39132, -1000, 16000, 16000, 16000, 7282, 413,
	238, -1000, 41049, -1000, 41883, 10132, 10132, 10132, 236, 41754,
	15298, -54, 38538, 4649, 4280, -93, -100, -1000, -101, -1000,
	2158, -106, 234, 610, 604, 233, -1000, -1000, 412, -107,
	-108, 633, 9781, 18765, 6186, -1000, 633, -1000, 15298, 19451,
	19451, 1360, 1479, 19451, -1000, -1000, -1000, -1000, 26980, 516,
	584, 26980, -1000, 2155, 1477, 232, -1000, -1000, -1000, 35828,
	410, -1000, 584, 231, 1015, 35828, 35828, 35828, -1000, -1000,
	1376, 36842, 1366, 43106, 35828, -1000, 407, 403, 1470, 1464,
	35828, 35828, 36504, 36166, 35828, 993, 58, -1000, 603, 397,
	35828, 1022, 599, 35828, 58, -1000, 396, 35828, 994, -1000,
	587, 1579, 1340, -1000, 860, 1621, 35828, 230, -109, -34,
	43106, -1000, -1000, -1000, -1000, -1000, 35828, 441, 35828, 58,
	35828, 23250, 23250, 58, 35828, 1710, 1851, 563, 35828, 1524,
	15298, 1062, -1000, 18422, 660, 35828, 998, 127, -1000, -1000,
	-1000, 574, 35828, -1000, -1000, 116, 116, -1000, 115, 1248,
	-1000, -52, -1000, -1000, -1000, 35828, 23250, -114, -1000, 677,
	672, -1000, 43106, -1000, 532, 771, -1000, 2141, 625, 35828,
	9430, 9430, -1000, 1483, -1000, -1000, 984, -1000, 1026, -1000,
	-1000, -1000, -1000, 9430, -1000, -45, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1276, 1142, -1000, -1000, -1000, 977, -1000,
	15298, 2135, -1000, -1000, -1000, 8349, -1000, -1000, -1000, 35828,
	-128, 15298, 3023, 3023, 15298, 16000, 16000, -1000, 3023, -1000,
	-1000, -1000, -1000, -1000, 1620, 394, 15298, 43106, 38570, 4729,
	-116, -1000, 15298, -36, -1000, 15298, -1000, 40453, -1000, -1000,
	523, 1739, -1000, 15298, 41625, 229, 9079, -1000, 41496, -51,
	-51, -1000, 2172, 1365, 1297, 1044, 965, 2130, -1000, 20481,
	635, 1249, 40364, 42940, 43106, -1000, 15298, -1000, -1000, 1619,
	15298, -1000, 42940, 43106, 16000, 16000, 16000, 16000, 16000, 16000,
	16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000,
	16000, 16000, 16000, 1480, 16000, 2121, 2121, 2121, -42, 15298,
	-1000, 1652, 1619, 15298, 15298, 43106, 228, 225, 221, -1000,
	15298, -54, 15298, 15298, 15298, -1000, -1000, -1000, 220, -1000,
	2126, -1000, -1000, -1000, -1000, 479, -1000, -1000, 1596, -1000,
	-150, -1000, 1562, -1000, 1596, 42330, -1000, 1360, -1000, 387,
	15298, 19451, -1000, 519, -1000, -122, -1000, 26980, -1000, 517,
	-221, -1000, 573, -1000, 584, 385, 35828, 26980, -1000, -1000,
	-1000, 740, 738, 1706, -1000, 1363, -1000, 665, -1000, 1043,
	15298, 17050, 384, 380, 1126, -1000, 1705, 1248, 1704, 1248,
	-1000, -44, 1066, -1000, 21174, 15298, -1000, 737, 21174, -1000,
	-1000, 15298, -1000, 734, 21174, 625, 1616, 843, -1000, 852,
	-1000, 1569, -1000, 24940, 378, 35828, 377, -1000, 375, -1000,
	626, -1000, 366, 35828, 1424, 563, 23926, -1000, 626, 998,
	-1000, 42330, -1000, 998, 7998, 1960, -124, -1000, -1000, -1000,
	633, 20138, 19451, 15298, -125, -1000, -1000, -1000, -1000, -45,
	1932, 1932, -1000, 2122, -1000, 515, 219, -1000, 27656, -45,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35828, 1552, 6186,
	35828, 35828, 1292, 40175, -1000, 1983, 6186, 2101, 3023, 4507,
	713, 15298, 43106, 42717, -130, 15298, 15298, -1000, 218, 15298,
	513, 42330, -1000, -1000, -1000, 42330, 15298, 2170, 15298, 213,
	212, 208, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	206, -1000, -1000, 38194, 15298, 204, -1000, 203, 199, 42330,
	1652, 42330, -1000, -1000, 531, 531, 926, 926, 926, 926,
	2121, 617, 1167, 345, 723, 723, 723, 577, 494, 494,
	723, 723, 723, 1612, 1457, 355, 39390, 15298, 193, -1000,
	-1000, 42330, 42330, 192, -1000, -1000, -1000, -54, 282, 40046,
	39857, -1000, 190, 185, 1587, 2043, -1000, 19451, 1587, -1000,
	35828, 42330, -1000, -159, -1000, 2120, -1000, -1000, 1477, -1000,
	5485, 26980, 35828, -131, -1000, 35828, 35828, 35828, 1701, -1000,
	2256, -1000, 39768, -132, -1000, 309, 2004, 15298, -1000, -1000,
	349, 17050, 35828, -1000, 1472, 1501, 699, 35828, -1000, 35828,
	-1000, 35828, 35828, 35828, -1000, 346, 144, -133, 35828, -1000,
	-138, 35828, -1000, -1000, 23250, 773, -1000, 1171, 1572, -1000,
	17050, 344, 35828, 24940, 2069, -1000, 17050, 1312, 1455, 563,
	23926, -1000, 823, -1000, -1000, -46, -1000, 353, 58, 998,
	-1000, -47, 42330, 572, 1909, -1000, 1906, 512, -1000, -1000,
	-48, 343, -1000, 567, 566, -1000, -49, -1000, 472, -1000,
	-1000, -1000, -1000, -1000, -1000, 1983, 15298, 15298, 42717, -139,
	-1000, 3023, 3023, -1000, 39579, -1000, 42330, -1000, 41496, -1000,
	-1000, -1000, -1000, 1168, -1000, 39450, -1000, -1000, -1000, -1000,
	16000, 1607, 342, 43106, 39261, -1000, -1000, 15298, -1000, -1000,
	-1000, -1000, 630, 15298, 15298, 1562, 630, -140, 584, -1000,
	-1000, -1000, 2114, -1000, -141, -1000, -1000, -1000, -1000, 35828,
	-1000, 35828, -1000, 6186, 35828, 1605, 1357, -1000, -1000, 1461,
	330, 16000, 35828, -1000, 1089, 17050, 1983, 144, 6186, 1983,
	39172, 6538, -147, -149, 1348, -1000, 1347, 15298, -1000, 43106,
	1248, 1248, -1000, 726, 724, 15298, 719, -1000, 715, -1000,
	-52, 21174, -1000, -1000, 2041, 1226, -152, 17050, -155, 184,
	58, -157, 35828, -1000, 563, 23926, -1000, 1851, 1852, 35828,
	1945, -1000, -1000, 319, 317, 316, -1000, 27318, 27318, 23250,
	23250, 1552, -1000, 35828, -1000, 3023, 3023, -1000, -1000, 182,
	1249, 2037, -1000, 4769, 16000, 43106, -160, -1000, 38983, -1000,
	35828, 42330, -54, -1000, -1000, 26980, 511, -1000, -1000, 1283,
	-1000, -1000, 35828, 1362, -1000, -1000, 15298, 39390, 315, 1569,
	314, -1000, -1000, -1000, -1000, -1000, -1000, 2004, -43, -1000,
	1083, -1000, -1000, 42330, 1996, -1000, -1000, 35828, 35828, -51,
	312, 307, -1000, 1257, 35828, 1089, -162, -1000, 1569, -1000,
	1089, 296, 23926, -1000, 1424, 814, -163, 35828, -1000, 23250,
	23250, -1000, -165, -1000, -1000, -1000, -170, -1000, 997, 15298,
	4769, -173, -1000, -1000, -53, -1000, 2068, -1000, -1000, -1000,
	-1000, 1698, 38854, 1396, 35828, -1000, 35828, 1983, 178, 35828,
	668, 6186, -1000, -1000, 171, 15298, 15298, 295, 293, 292,
	1569, 1089, -1000, 1569, 17050, -1000, 1455, 912, -1000, 633,
	-1000, -176, -178, -1000, -1000, 167, 15649, 15649, -54, -1000,
	35828, 290, 1686, -1000, 1298, 1190, 163, -183, -1000, -1000,
	289, -1000, 15298, -1000, 2170, -184, -185, 35828, 35828, 35828,
	-1000, 1569, -1000, -186, -1000, 20138, -1000, 625, 625, -1000,
	-1000, -1000, 16350, 1233, 980, 40960, -1000, -1000, -1000, 35828,
	-1000, 1308, 1306, 925, -1000, -1000, -1000, -1000, -1000, 1396,
	42330, -1000, -1000, -191, -192, -193, -1000, 1089, -179, -1000,
	-1000, 2090, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1895,
	-1000, 688, 1305, 1305, 1298, 288, 285, 1212, 1569, -1000,
	14947, -1000, 2102, -1000, -1000, 1465, -1000, -1000, 1166, 1150,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 158, 6186,
	118, 6186, -1000, 659, -1000, 657, 281, 1417, -58, 14596,
	817, 257, -56, -1000, -194, -1000, 42330, -1000, 280, -1000,
	14596, 1166, -1000, 14596, 14596, -199, -1000, -1000, -200, -1000,
	-59, 1150, -66, -1000, -1000, 1150, -1000,
}
var sqlPgo = [...]int{

	0, 2606, 2604, 1765, 2089, 2603, 2602, 2601, 2599, 2598,
	2596, 2590, 2586, 2582, 2580, 2578, 2577, 2576, 2575, 2569,
	2568, 2562, 2561, 2560, 2051, 2559, 2035, 2558, 2555, 2547,
	2546, 2542, 32, 2541, 2539, 2527, 2030, 2517, 2515, 2512,
	2508, 2009, 2505, 2004, 2499, 2497, 2001, 2495, 2494, 2492,
	1974, 2491, 1972, 2490, 82, 115, 1969, 2489, 2488, 1924,
	1912, 1909, 2487, 1903, 2486, 2485, 1834, 1832, 2484, 64,
	2483, 2481, 2476, 1830, 1796, 2474, 2473, 2471, 154, 2470,
	1793, 2468, 2467, 2466, 2465, 2464, 2459, 2458, 2452, 2447,
	2444, 2442, 2441, 2437, 2433, 2432, 2431, 2430, 2427, 2424,
	161, 2421, 2419, 1774, 1759, 2418, 2416, 43, 36, 13,
	54, 104, 142, 2572, 140, 2414, 2413, 2400, 2398, 2393,
	2392, 23, 98, 100, 2390, 437, 2389, 2386, 53, 41,
	24, 35, 74, 97, 2384, 2383, 2077, 33, 2382, 2376,
	133, 2375, 92, 31, 2709, 153, 152, 113, 122, 2366,
	2365, 2364, 49, 123, 16, 5, 4, 3, 1, 2361,
	2, 7, 2359, 2358, 17, 85, 26, 2357, 40, 86,
	2352, 2351, 130, 2349, 61, 94, 1619, 110, 121, 1599,
	88, 2347, 68, 18, 71, 2344, 2337, 158, 45, 76,
	143, 114, 2336, 56, 159, 127, 81, 131, 134, 2334,
	2333, 2332, 102, 2329, 119, 95, 2328, 2327, 80, 2326,
	99, 136, 2324, 141, 112, 2323, 2322, 117, 2320, 124,
	2317, 2316, 157, 149, 116, 21, 48, 75, 22, 1607,
	1605, 135, 91, 46, 59, 2315, 793, 1148, 1364, 52,
	106, 84, 70, 37, 60, 87, 148, 34, 2310, 2309,
	139, 2307, 2306, 2301, 2298, 2297, 103, 2296, 2292, 2291,
	78, 27, 50, 108, 38, 55, 126, 111, 155, 105,
	2290, 79, 128, 2288, 417, 2284, 2282, 1758, 120, 2281,
	2279, 2273, 1715, 1708, 1617, 852, 2272, 2268, 1592, 1221,
	2267, 2265, 101, 2260, 118, 109, 96, 144, 150, 58,
	2258, 129, 29, 2255, 39, 28, 0, 1059, 83, 2254,
	125, 72, 2252, 2246, 2245, 2244, 25, 10, 9, 8,
	14, 11, 30, 19, 2243, 2242, 132, 89, 73, 2238,
	156, 2236, 2233, 2232, 44, 2230, 20, 2229, 12, 2228,
	2224, 15, 6, 2221, 2219, 146, 2218, 93, 2217, 2048,
	2216, 151, 2213, 2210, 1781, 2207, 67, 107,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 123, 123, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 120, 120, 125, 125, 125, 127, 127,
	124, 124, 119, 119, 24, 24, 67, 67, 110, 60,
	60, 60, 304, 304, 305, 305, 106, 106, 107, 107,
	107, 107, 108, 108, 109, 109, 109, 34, 34, 34,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 43, 43, 44, 44, 44, 44,
	44, 44, 45, 45, 45, 45, 46, 46, 46, 46,
	46, 46, 46, 46, 51, 51, 51, 49, 49, 49,
	48, 48, 48, 47, 47, 47, 50, 50, 50, 178,
	178, 177, 177, 181, 181, 52, 52, 52, 52, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 55,
	55, 55, 55, 55, 55, 55, 273, 273, 272, 53,
	53, 248, 248, 56, 56, 203, 203, 57, 57, 57,
	57, 57, 58, 58, 68, 68, 345, 345, 345, 349,
	349, 350, 350, 351, 351, 351, 351, 351, 351, 351,
	347, 347, 63, 63, 63, 63, 64, 64, 64, 65,
	65, 105, 105, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 29, 30, 30, 31, 31, 32, 32, 74,
	74, 74, 76, 73, 73, 73, 75, 75, 75, 75,
	77, 77, 78, 78, 78, 78, 78, 79, 79, 298,
	296, 296, 297, 297, 150, 150, 150, 150, 150, 151,
	151, 151, 303, 303, 303, 303, 303, 303, 302, 302,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 92, 92, 92,
	100, 100, 100, 100, 100, 100, 100, 81, 81, 86,
	86, 86, 86, 86, 82, 82, 87, 87, 88, 88,
	89, 89, 89, 89, 89, 89, 83, 83, 83, 83,
	91, 91, 91, 91, 90, 90, 96, 96, 96, 96,
	96, 96, 93, 93, 93, 93, 94, 94, 94, 97,
	97, 97, 97, 84, 84, 85, 85, 98, 98, 99,
	99, 99, 99, 99, 95, 95, 95, 346, 346, 348,
	348, 61, 61, 39, 39, 40, 40, 152, 152, 153,
	153, 227, 227, 227, 227, 154, 154, 126, 126, 126,
	155, 155, 156, 156, 157, 157, 157, 159, 159, 160,
	160, 161, 161, 158, 158, 158, 226, 314, 314, 315,
	315, 315, 315, 315, 315, 316, 316, 316, 316, 316,
	316, 316, 312, 312, 313, 310, 310, 311, 311, 311,
	311, 352, 352, 225, 225, 164, 164, 317, 317, 317,
	317, 318, 318, 318, 318, 318, 321, 320, 319, 319,
	319, 319, 319, 259, 259, 259, 102, 102, 41, 41,
	41, 132, 132, 42, 42, 38, 38, 38, 207, 207,
	168, 168, 264, 264, 264, 143, 143, 121, 121, 121,
	17, 13, 13, 13, 13, 13, 13, 23, 23, 21,
	21, 208, 208, 209, 209, 62, 62, 66, 66, 71,
	71, 101, 101, 101, 101, 101, 101, 25, 25, 25,
	25, 33, 33, 33, 33, 70, 70, 354, 354, 139,
	139, 139, 139, 140, 140, 222, 222, 223, 223, 355,
	355, 224, 224, 224, 134, 133, 135, 135, 37, 37,
	37, 128, 128, 129, 129, 130, 130, 131, 131, 356,
	356, 59, 59, 59, 104, 104, 146, 146, 219, 219,
	219, 221, 221, 220, 220, 220, 193, 193, 193, 103,
	103, 173, 173, 183, 183, 184, 184, 270, 185, 69,
	69, 113, 113, 111, 111, 111, 111, 111, 111, 111,
	111, 112, 112, 112, 114, 114, 114, 114, 114, 114,
	114, 117, 117, 117, 118, 118, 118, 116, 116, 327,
	327, 327, 330, 330, 326, 328, 328, 329, 329, 353,
	353, 194, 194, 194, 163, 162, 162, 166, 166, 165,
	167, 167, 263, 263, 263, 191, 191, 190, 190, 190,
	190, 212, 212, 210, 210, 211, 211, 215, 215, 216,
	216, 216, 217, 217, 218, 218, 189, 189, 244, 244,
	214, 214, 213, 115, 115, 115, 172, 172, 172, 174,
	174, 234, 234, 234, 235, 235, 233, 233, 233, 233,
	265, 265, 265, 265, 265, 265, 265, 265, 343, 343,
	343, 344, 344, 262, 262, 266, 266, 266, 266, 266,
	266, 260, 260, 260, 260, 261, 261, 271, 271, 197,
	197, 197, 197, 195, 195, 196, 196, 267, 267, 267,
	267, 192, 192, 268, 268, 268, 228, 228, 274, 274,
	274, 292, 292, 171, 171, 171, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 276, 276, 276,
	276, 278, 278, 278, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 291, 291, 291, 291, 291, 279, 279, 286,
	286, 287, 287, 288, 289, 280, 280, 281, 281, 282,
	283, 290, 290, 290, 290, 294, 294, 284, 284, 284,
	284, 284, 285, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 205, 205, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 238, 238, 238, 238, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 322, 322, 322,
	322, 322, 322, 322, 322, 324, 324, 325, 325, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 331,
	331, 332, 332, 334, 334, 335, 335, 336, 337, 337,
	337, 338, 339, 339, 333, 333, 340, 340, 340, 341,
	341, 342, 342, 342, 342, 342, 250, 250, 251, 252,
	258, 258, 258, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 141,
	141, 141, 141, 141, 180, 180, 179, 179, 247, 247,
	245, 245, 249, 249, 198, 198, 293, 293, 293, 293,
	293, 293, 293, 199, 199, 199, 206, 200, 200, 201,
	201, 201, 201, 201, 241, 242, 202, 202, 202, 243,
	243, 253, 257, 257, 256, 255, 255, 254, 254, 231,
	231, 232, 232, 230, 229, 188, 188, 187, 187, 186,
	186, 357, 357, 182, 182, 269, 269, 269, 269, 175,
	175, 148, 148, 176, 176, 144, 144, 147, 147, 145,
	145, 145, 145, 169, 169, 170, 170, 142, 142, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	295, 295, 295, 246, 136, 136, 136, 137, 137, 138,
	138, 300, 300, 300, 301, 301, 301, 301, 299, 299,
	299, 299, 299, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 2, 7, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 2, 1, 1, 3, 1, 5,
	2, 3, 0, 3, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 2, 6, 2, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 1, 4, 7, 1, 3, 2, 4, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 4, 3, 5, 3,
	4, 5, 2, 3, 3, 3, 4, 2, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 2, 3, 7,
	7, 7, 4, 5, 5, 5, 5, 2, 0, 2,
	0, 3, 2, 8, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	1, 0, 9, 9, 6, 7, 5, 3, 5, 1,
	3, 1, 1, 10, 11, 9, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 7,
	3, 3, 0, 6, 3, 11, 14, 4, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	3, 2, 0, 1, 3, 1, 1, 3, 5, 1,
	1, 3, 3, 1, 2, 4, 4, 2, 3, 5,
	5, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 1, 0, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	1, 0, 2, 4, 2, 5, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	8, 4, 6, 3, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 3, 3, 1, 3, 3, 1, 3, 3, 1,
	1, 3, 3, 1, 1, 6, 6, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 5, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 379, -4, -24, -26, -29, -34,
	-35, -57, -43, -44, -45, -56, -52, -58, -59, -60,
	-61, -53, -67, -66, -68, -71, -69, -62, -63, -72,
	-80, -101, -102, -103, -104, -5, -6, -7, -8, -9,
	24, 35, -27, -28, 48, -30, 72, -41, -36, 74,
	95, -329, 99, -46, -50, 103, 110, 113, 135, 144,
	230, 236, 257, 259, 261, 268, -111, -113, 255, -64,
	-65, -73, -74, -75, -76, -105, 280, -81, -82, -83,
	-84, -85, -86, -87, -88, -89, -90, -91, -92, -93,
	-94, -95, -96, -97, -98, -99, 283, -25, -33, -70,
	323, -11, -12, -15, -14, -16, -13, -20, -22, -19,
	-21, -23, -17, -18, -10, 112, -37, -38, -39, -40,
	-42, -327, -47, -48, -49, -51, -114, -112, 376, 256,
	332, 36, 293, 62, 106, 263, 348, 355, -117, -115,
	-116, -118, 273, 340, 303, 380, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 2,
	303, 343, 88, 152, 241, -345, 2, -176, 303, 88,
	-145, -136, 369, 4, -306, -308, 20, 21, 24, 34,
	35, 36, 41, 45, 48, 49, 56, 61, 62, 63,
	68, 65, 66, 67, 70, 72, 73, 76, 77, 78,
	86, 87, 89, 91, 95, 97, 99, 102, 103, 105,
	110, 112, 111, 113, 123, 124, 129, 131, 136, 142,
	143, 144, 145, 153, 156, 158, 151, 168, 169, 170,
	174, 175, 176, 179, 178, 183, 184, 187, 188, 191,
	193, 195, 196, 199, 197, 201, 202, 204, 203, 209,
	211, 212, 214, 217, 220, 223, 226, 227, 228, 229,
	230, 232, 234, 236, 238, 239, 240, 241, 242, 244,
	245, 247, 248, 249, 250, 251, 255, 253, 254, 256,
	257, 258, 259, 261, 263, 264, 266, 281, 282, 294,
	268, 269, 270, 271, 272, 276, 274, 277, 278, 280,
	283, 285, 288, 292, 293, 295, 298, 299, 296, 291,
	302, 304, 305, 306, 307, 308, 309, 310, 311, 318,
	319, 323, 324, 325, 326, 329, 330, 331, 332, 334,
	337, 338, 339, 344, 349, 350, 351, 352, 353, 29,
	37, 38, 39, 40, 42, 43, 46, 47, 52, 53,
	54, 57, 90, 92, 93, 109, 114, 115, 125, 126,
	127, 137, 139, 146, 147, 150, 157, 159, 160, 161,
	162, 163, 165, 172, 173, 181, 198, 208, 210, 221,
	225, 233, 235, 243, 265, 275, 286, 287, 297, 300,
	313, 314, 315, 320, 321, 336, 340, 341, 379, 379,
	2, 169, 240, -144, -136, 88, 379, 2, 303, 333,
	343, -207, 88, 328, -136, 236, 22, 2, 97, 156,
	331, 330, 22, 232, 274, 305, 307, 2, 379, 2,
	343, 303, 152, 88, 333, -136, 2, -55, 2, 376,
	-54, -4, -36, -46, -56, -52, -24, -26, -41, -43,
	-50, -60, -59, -61, -63, -67, -66, -69, -73, -74,
	-80, -103, -104, 74, 103, 280, 112, -349, 2, 22,
	-350, -351, 74, 103, 135, 273, 156, 97, 330, 303,
	2, 169, 2, -136, 2, -345, 2, 169, 2, -349,
	2, -136, 2, -140, 2, 268, -136, 379, 379, 379,
	379, 379, 188, 56, 265, 277, -78, 319, -77, 313,
	-298, -79, 2, -177, 199, -136, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 2, -100, 277, 35, 56, 22, 61,
	89, 136, 152, 153, 175, 69, 70, 239, 188, 170,
	318, 176, 278, 304, 319, 74, 334, 308, 111, 4,
	88, 199, 279, 313, 379, 379, 379, -353, 2, 303,
	270, 283, 379, 379, 379, 379, 379, -112, -114, -113,
	379, 379, 379, 379, -165, -166, 327, 164, 108, 219,
	-111, -113, 2, -327, -100, 277, 2, 56, 22, -296,
	2, -236, 215, -238, 367, 368, 362, 205, 354, -250,
	94, -240, -253, 109, 265, 376, -144, -239, 382, 9,
	-324, -113, 30, -251, -252, 50, -136, 7, 8, 5,
	6, -142, -276, -246, -285, 322, 116, 207, -322, -323,
	4, -306, -300, -277, -287, -281, -284, 165, 59, 80,
	81, 84, 82, 85, 279, 333, 51, 29, 114, 115,
	225, 233, 300, 320, 321, 146, 208, 147, 57, 137,
	181, 102, 38, 40, 42, 43, 52, 53, 90, 92,
	93, 125, 126, 127, 157, 159, 160, 161, 162, 163,
	210, 243, 286, 297, 314, 315, 341, -307, -288, -289,
	-282, -283, 75, 117, 134, 155, 148, 167, 171, 182,
	185, 194, 200, 222, 224, 262, 284, -290, -354, 2,
	319, 319, 2, -354, 2, -354, 2, -139, 2, 319,
	316, -330, 244, -326, -136, -330, 379, 379, 381, 379,
	-162, -163, 2, 22, 100, 376, 2, -265, 2, 374,
	-267, -144, -113, -266, 376, 216, -3, 2, -267, 146,
	-144, 2, -267, 146, -144, 2, -136, 2, -147, 146,
	-144, -299, 4, -306, -308, -307, -309, 59, 22, 25,
	26, 27, 28, 30, 31, 32, 33, 44, 50, 51,
	55, 58, 60, 69, 74, 79, 80, 82, 81, 83,
	84, 85, 94, 96, 98, 100, 101, 104, 106, 108,
	116, 118, 130, 132, 133, 135, 138, 140, 149, 152,
	154, 164, 166, 177, 180, 186, 189, 190, 205, 206,
	207, 213, 215, 216, 218, 219, 231, 237, 246, 260,
	273, 279, 289, 301, 303, 312, 316, 317, 322, 327,
	328, 333, 335, 342, 343, 345, 346, 347, 348, 316,
	381, -176, -169, -136, -230, -229, 378, -236, 2, -236,
	2, 133, 376, -187, -188, -229, -230, 2, -177, 146,
	-304, 146, 2, -302, 9, -301, 5, 4, -306, -308,
	-307, -177, 2, 152, -136, 146, 2, -136, 22, 133,
	2, 166, 2, 166, 2, -268, 2, -267, -178, 146,
	2, -177, -178, 146, 2, -148, 146, 2, -147, -136,
	146, 2, -305, 146, 2, -304, -203, 376, -273, 2,
	-272, -301, 340, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 277, 215, 381,
	-177, -236, -248, 376, 133, -236, 215, -136, 2, 281,
	2, 376, -78, 54, 319, -223, 2, -224, -133, -134,
	-135, 168, 238, 242, 353, 316, 359, 133, -296, -181,
	378, -100, 2, -304, 2, 281, 2, 239, 278, 56,
	133, 2, 2, -346, 2, 215, 133, 2, 133, 2,
	133, 2, 133, 2, 133, 2, 2, 239, 278, 2,
	130, 2, 318, 2, 2, 133, 2, 168, 238, 294,
	2, 303, 343, 2, 133, 133, 353, 2, -192, -267,
	303, 353, 22, -165, -166, -213, -190, 130, -210, -211,
	186, 118, 213, -194, 22, 100, -194, -194, 45, 377,
	377, -100, 281, 2, 10, 11, 58, 34, 367, 368,
	369, 370, 128, 371, 372, 365, 366, 364, 357, 358,
	361, 290, 23, 71, 360, 359, 64, 192, 267, 119,
	120, 121, 122, 252, 13, 14, 15, 27, 218, 185,
	354, 148, 284, 362, 16, 17, 18, 167, 37, 149,
	-141, -149, -236, -236, -236, -236, -236, 224, -186, -231,
	374, -113, 376, 376, -113, -236, -179, 376, 7, -113,
	-245, 374, -254, -236, -187, 376, 5, 376, 5, -331,
	349, 130, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 235, -294, 344, -294, -294, -278, 376, -278, -279,
	376, -278, 350, 355, 376, -222, -223, -222, 316, -140,
	381, -330, -170, 376, 376, -182, -269, -236, 369, -182,
	-179, -236, 75, -197, 171, 200, 134, 182, 262, 155,
	7, -55, -233, 382, 376, 369, -262, 355, -113, -266,
	376, -265, -144, 376, -123, 253, -122, 21, 24, 103,
	338, 109, 291, 309, 112, 269, 253, 109, 112, 253,
	291, 309, 269, 253, 109, 382, 112, -304, -145, 381,
	-299, 369, 295, 377, -175, -144, -188, 376, -164, 205,
	-132, -328, 348, 205, -164, 376, -137, 146, 2, -136,
	-328, 205, -268, -146, -144, -146, 280, -136, 31, -125,
	381, 49, 258, 109, -125, 109, -125, 381, 109, -125,
	109, 381, 109, -179, 377, 381, -345, -351, 74, 376,
	31, -247, -274, -275, -277, -286, -280, -284, -285, 41,
	47, 46, 173, 172, 310, 198, 275, 287, 336, 150,
	39, 214, 158, 4, 157, 159, 160, 161, 162, 163,
	286, 38, 243, 126, 127, 125, 102, 93, 92, 210,
	43, 42, -288, -289, -282, -283, 90, 314, 315, 165,
	40, 53, 52, 341, 297, -305, -345, -298, -179, 31,
	-223, 2, -355, 381, 184, -151, 191, 204, 142, 216,
	351, -303, 5, 4, -246, -259, 94, 188, -285, 8,
	368, -295, 7, 367, -297, -296, -297, 78, 378, -299,
	-177, 22, 282, 2, -298, -348, 130, -345, -298, -298,
	-298, -298, -298, 277, -55, 130, -136, 184, -298, 2,
	-298, 2, 303, 152, 303, -125, 381, -144, 65, 66,
	353, -213, -190, -191, -190, -214, -213, 330, -211, -210,
	-215, -236, 22, -218, 124, 201, -236, -238, -112, -112,
	-112, -167, -263, -236, 237, 152, -298, -292, -274, -291,
	248, 249, 247, 251, 250, -274, -299, 313, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	185, 148, 284, 37, 149, -236, 316, -236, -236, -236,
	-236, 197, 205, 207, 322, 116, 329, 100, 211, -357,
	301, 33, -243, -113, 376, -258, 28, 289, 22, -250,
	265, 376, -231, -236, -232, -180, -179, 377, 381, -180,
	-249, -245, -257, -256, 345, 377, -179, 342, 22, 100,
	369, 2, 7, -204, 352, 196, 91, 143, 195, -205,
	272, -332, 123, 138, 376, 377, 2, 377, 2, 377,
	2, 377, 2, -236, -236, -198, 2, -293, -179, 4,
	352, 196, 91, 143, 195, 272, -198, 2, -199, 2,
	-236, -179, -200, -237, -238, 367, 368, 362, 376, 265,
	-201, 2, -236, -180, -236, 44, 180, 317, -202, -236,
	133, -179, -236, -236, -236, -179, -179, 2, -179, 2,
	376, 7, 7, 313, 313, 7, -140, -326, 31, -169,
	-179, -172, 381, 133, 31, 4, -172, 377, 381, 171,
	171, -265, -197, 171, -195, 222, -195, -195, -343, 376,
	375, -262, -299, 374, 383, -180, 2, -261, -260, 31,
	-136, 220, 377, -144, 381, 316, -208, 69, 60, -226,
	146, 60, -310, -136, 69, -311, 55, 328, 237, 132,
	-208, 69, -208, 69, 69, -267, 34, -69, 67, 133,
	316, -267, 67, 316, 34, -69, 133, 316, -147, -299,
	67, -271, 356, -136, 133, 377, 381, -152, -169, -153,
	-136, -227, -226, -312, -313, -310, 152, 328, 117, 31,
	109, 229, 109, 31, 215, 205, -128, 306, 109, -228,
	346, -219, -69, 376, 94, 31, -219, -183, -184, -270,
	-185, -144, 376, -136, -177, -178, -178, -147, -148, -136,
	-304, -305, 377, -55, -272, 316, 335, -153, -54, 74,
	103, 377, 381, -171, 30, 374, -204, 376, -271, 133,
	359, 316, 377, 319, -224, -150, 242, 288, 254, 276,
	8, 7, 7, 381, -299, -347, -136, 277, -55, -144,
	-147, -144, -267, 348, 130, 66, -191, -214, -216, -295,
	376, 368, -217, 265, 266, 381, -121, 32, 98, 174,
	-144, 353, -236, -236, 316, -357, 301, -243, -236, 197,
	207, 322, 116, 329, 100, 211, 133, 376, -237, -237,
	-179, -240, 376, -179, 375, 385, 377, -236, 375, 375,
	381, -255, -256, 104, -236, -166, 381, -165, -236, -179,
	-179, 377, 377, 316, 316, 316, 316, 376, -337, 223,
	376, 376, -236, 31, 381, 377, 133, 377, 377, -206,
	231, 377, 10, 11, 367, 368, 369, 370, 128, 371,
	372, 365, 366, 364, 357, 358, 359, 64, 192, 267,
	13, 14, 15, 167, 149, -237, -237, -237, -179, 376,
	377, -241, -242, 133, 130, 31, -202, -202, -202, 377,
	133, -179, 381, 381, 381, 377, 377, 377, 7, 377,
	381, 377, 353, 353, 377, 376, 377, 377, -228, -269,
	-174, 2, -265, -299, -228, -236, -265, -265, -196, 335,
	215, 171, -265, -260, 377, -344, 7, -262, -261, 7,
	-235, -234, 131, 203, 377, -136, 376, -262, 377, -122,
	-144, -136, -136, 205, -226, 146, -127, 205, -274, -136,
	376, 376, 174, 174, -136, -136, 146, -136, 146, -136,
	-136, -123, 253, -69, 353, 376, -144, 253, 353, -136,
	-69, 376, -136, 253, 353, -106, 145, 211, 295, 133,
	-144, 377, 377, 381, -137, 152, -137, -69, -177, -304,
	-304, -69, -144, 109, -129, 105, -356, 359, -136, -212,
	-210, -236, -193, -221, 260, 215, -175, 340, -136, -193,
	-173, 381, 133, 359, -175, -125, -125, -125, -125, -347,
	-304, 377, -274, 374, 375, 7, 7, -109, 348, -347,
	-296, -296, -133, 326, 63, 242, -296, 381, 217, 241,
	88, 303, -217, -236, -263, -144, 382, -236, -236, -237,
	-237, 133, 376, -236, -247, 27, 27, 377, -180, 381,
	-232, -236, 377, -245, 106, -236, 312, 377, 342, -166,
	-166, -166, 5, 196, 143, 195, -205, 195, -205, -205,
	7, -338, -136, 376, 346, -165, 377, -292, -274, -236,
	-241, -236, -292, -274, -237, -237, -237, -237, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, -237, -237,
	-237, -237, -237, 100, 205, 211, -237, 381, -180, -242,
	-241, -236, -236, -274, 377, 377, 377, -179, -236, -236,
	-236, 377, 7, -54, -189, 138, -271, 381, -189, -196,
	376, -236, -265, 375, 377, 381, -261, 375, 381, 384,
	359, -262, 376, -169, -260, 316, 316, 109, 205, 337,
	-314, -311, -236, -168, -264, -136, -325, 376, -322, -323,
	-142, 376, 376, -120, 103, 280, -209, 109, -125, 109,
	-125, 316, -208, 69, -239, -142, -136, -179, 316, -239,
	-179, 316, -239, -109, 133, 302, 295, -154, 151, -227,
	376, -137, 376, 376, -164, -132, 376, -136, -130, 179,
	-356, -302, -328, -193, -193, -182, 206, 68, 377, -228,
	-184, -174, -236, 377, -110, 76, -110, 7, 375, 377,
	-108, 217, -107, -136, 5, -136, -31, -32, 152, -299,
	-136, -144, 216, 377, -121, -299, 27, 27, -236, -247,
	377, -236, -236, 377, -236, 375, -236, 5, -236, 377,
	377, 377, 377, -339, -136, -236, 377, 377, 377, -242,
	133, 100, 211, 376, -236, 377, 377, 381, 377, 377,
	377, 377, -244, 140, 45, -265, -244, -169, -233, 7,
	-234, -299, 374, -261, -169, 377, -136, -136, -226, 109,
	-315, 69, -316, 58, 117, 74, 205, 207, 328, 237,
	55, 94, 246, 377, 377, 381, -143, -187, 58, -143,
	-236, 376, -168, -169, 205, 94, 205, 94, 87, 324,
	-136, -136, -144, -136, -136, 376, 377, -144, 377, -136,
	-305, 313, -155, -156, 228, 149, -168, 376, -169, -152,
	31, -168, 215, -131, 178, -356, -302, -128, -220, 376,
	215, -69, -193, 359, 87, 87, 375, 381, 376, 359,
	359, 381, 22, 376, -121, -236, -236, 377, 377, -166,
	-333, 228, 377, -237, 133, 376, -247, 377, -236, -334,
	347, -236, -179, -334, 377, -262, 7, 377, -226, -136,
	-299, -136, 117, 146, 207, 174, 376, -237, -144, -225,
	-352, 73, 299, -264, -121, -299, -121, 377, -179, 377,
	377, 207, 207, -236, -274, -125, -125, 316, 316, -179,
	316, 316, -239, 45, 226, 377, -168, 377, 377, -69,
	377, -144, -356, -302, -129, 101, -169, 69, -243, 376,
	376, -107, -108, -304, -304, -32, -169, 377, -166, 45,
	-237, -247, 377, 377, -335, -336, -136, -261, 375, -316,
	-137, 205, -236, -138, 376, -154, 376, -143, -166, 246,
	-124, 58, -136, -136, -166, 376, 376, 187, 241, -144,
	-225, 377, -154, -225, 376, -302, -130, 330, 206, 377,
	-136, -305, -305, 377, 377, -340, 241, 266, -179, 377,
	381, 31, 109, 377, -317, 193, -136, -169, -121, 377,
	-144, -119, 335, -299, 377, -179, -179, 376, 376, 376,
	-154, -225, -154, -168, -131, 280, -228, 377, 377, 377,
	-341, -342, 37, 325, 78, -236, -341, -336, -338, 117,
	-318, -321, -320, 215, 134, 227, 285, 377, 377, -164,
	-236, 377, 377, -169, -169, -169, -154, 377, -183, -109,
	-109, -342, 234, 129, 265, 234, 129, -136, -320, 215,
	-321, 215, 330, 97, -317, 377, 377, 377, -225, -228,
	27, -319, 202, 258, 49, 280, -319, -318, 376, 376,
	-126, 49, 258, -154, -342, 20, 207, 94, -157, 228,
	-158, 228, 377, -299, 377, -299, 340, 340, -159, 376,
	183, 381, -156, -155, -160, -161, -236, 194, 311, -157,
	376, 381, 377, 381, 376, -160, -157, -161, -160, 377,
	377, 381, -156, -155, -158, 381, -158,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 312, 0, 159, 161, -2,
	0, 0, 0, 182, 183, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 679, -2, 0, 292,
	294, 303, 305, 307, 309, 310, 0, 360, 362, 364,
	366, 368, 370, 372, 374, 376, 378, 380, 382, 384,
	386, 388, 389, 391, 393, 395, 0, 601, 603, 605,
	-2, 65, 66, 67, 68, 69, 70, 78, 79, 80,
	81, 72, 74, 75, 77, 0, 163, 165, 167, 169,
	172, 717, 186, 188, 190, 192, -2, 728, 0, 0,
	0, -2, 0, -2, -2, -2, 0, 0, 694, 696,
	698, 700, -2, 0, 0, -2, 7, 13, 15, 17,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
	40, 43, 49, 51, 53, 56, 58, 60, 62, 64,
	0, 0, 0, 0, 0, 0, 125, 276, 0, 1299,
	1223, 1229, 1230, 1254, 1255, 1256, 1273, 1274, 1275, 1276,
	1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
	1297, 1298, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
	1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
	1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
	1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
	1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
	1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
	1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417,
	1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427,
	1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
	1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
	1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 151, 153,
	154, 0, 0, 0, 1225, 1299, 160, 162, 0, 0,
	0, 0, 0, 568, 267, 1361, 269, 271, 0, 0,
	0, 0, 176, 177, 178, 179, 180, 181, 184, 185,
	0, 0, 0, 0, 0, 266, 264, 215, 216, 0,
	249, 250, 251, 252, 253, 255, 219, 221, 222, 224,
	226, 228, 230, 232, 234, 235, 237, 239, 240, 242,
	244, 245, 247, 569, 0, 0, 0, 0, 273, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 0,
	131, 0, 472, 262, 260, 0, 127, 0, 598, 0,
	275, 599, 600, 595, 596, 1388, 624, 293, 295, 304,
	306, 308, -2, -2, 1482, -2, 324, -2, 332, 1488,
	0, 335, 336, 339, -2, 211, 361, 363, 365, 367,
	369, 371, 373, 375, 377, 379, 381, 383, 385, 387,
	390, 392, 394, 396, 397, 0, 0, 0, 401, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, 0, -2, -2, 0, 0, -2, 0, 0, 400,
	402, 403, 404, 0, 602, 604, 606, 0, 557, 719,
	0, 0, 164, 166, 168, 170, 173, -2, 692, 693,
	187, 189, 191, 193, -2, 0, 723, 723, 723, 0,
	0, 693, 691, 0, 296, 0, 298, 0, 401, 301,
	302, 340, 341, 929, 0, 0, 0, 0, 0, 0,
	1002, 1032, 1034, 1453, 1482, 0, 1036, 1037, 0, 1039,
	1041, 1042, 0, 1045, 1046, 1198, 1225, 1239, 1240, 1241,
	1242, 0, 0, 1245, 0, 1247, 1248, 1249, 1100, 1056,
	-2, -2, 1237, 857, 858, 859, 860, -2, 1496, 1060,
	1063, 1066, 1069, 1070, 1073, 1074, 0, 1437, 1454, 1455,
	1478, 1479, 1487, 1491, 1492, 1461, 1475, 1462, 1449, 1459,
	1473, 1305, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1263, 891, 892,
	897, 898, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 900, 626, 608,
	617, 626, 610, 611, 612, 613, 614, 615, 616, 619,
	0, 709, 1367, 712, 1236, 710, 695, 697, 0, 699,
	0, 0, 703, 725, 724, 0, 764, 707, 708, 718,
	779, 817, 794, 785, 0, 0, 2, 71, 0, 1461,
	817, 73, 0, 1461, 817, 76, 0, 82, 0, 1461,
	1228, 0, 1268, 1269, 1270, 1271, 1272, 1496, 1512, 1513,
	1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523,
	1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
	1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
	1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
	1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
	1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
	1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 0,
	0, 277, 278, 1233, 1231, 1232, 0, 155, 156, 157,
	158, 0, 0, 1226, 1207, 1205, 1206, 171, 536, 1461,
	-2, 1461, 560, 132, 133, 358, 359, 1264, 1265, 1266,
	1267, 536, 564, -2, 716, 1461, 640, 268, 270, 0,
	175, 0, 653, 0, 655, 0, 670, 823, 117, 1461,
	196, 209, 117, 1461, 199, 117, 1461, 202, 1221, 117,
	1461, 205, 206, 1461, 208, 134, 263, 0, 0, -2,
	256, 258, -2, 254, 220, 223, 225, 227, 229, 231,
	233, 236, 238, 241, 243, 246, 248, -2, 0, 0,
	0, 471, 0, 0, 0, 597, 0, 623, 311, 0,
	321, 0, 323, 1448, -2, -2, 327, 627, 631, 632,
	633, 0, 0, 0, 0, 0, 0, 0, 337, 212,
	0, 398, 399, 407, 408, 0, 411, 432, 444, 0,
	0, 415, 417, 470, 419, 0, 0, 421, 0, 423,
	0, 425, 0, 427, 0, 429, 431, 433, 445, 435,
	718, 437, 0, 439, 443, 0, 448, 0, 450, 451,
	452, 0, 0, 458, 0, 0, 405, 406, 117, 821,
	0, 0, 0, -2, 0, 736, 761, 0, 739, 740,
	0, 0, 0, 0, 721, 722, 0, 0, 0, 681,
	682, 297, 0, 300, 0, 0, 0, 0, 1133, 1134,
	1135, 1136, 1137, 1138, 1141, 1142, 1139, 1140, 1143, 1144,
	0, 0, 0, 0, 0, 1145, 0, 0, 0, 0,
	0, 0, 0, 0, 1146, 1147, 1148, 0, 0, 1150,
	0, 1152, 0, 0, 0, 0, 0, 0, 1212, 0,
	0, 1149, 934, 935, 936, 968, 969, 0, 1033, 1209,
	1202, 1035, 0, 1155, -2, 1156, 0, 0, 1038, 1043,
	1044, 1155, 0, 1197, -2, 0, 1244, 0, 926, 1102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1178, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 894, 905, 902, 901, 878, 0, 877, 875,
	0, 879, 0, 0, 0, 607, -2, 609, 0, 621,
	0, 711, 0, 0, 0, 768, 1213, 1217, 1218, 768,
	0, 1156, 0, 0, 0, 0, 814, 814, 814, 812,
	788, 0, 794, 0, -2, 818, 806, 0, -2, 785,
	0, 0, 819, 0, 83, 592, 96, 0, 592, 592,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 808, 1224, 0,
	1203, 1204, 147, 0, 0, 1219, 1208, 478, 0, 0,
	558, 0, 715, 0, 0, 0, 0, 1461, 567, 1257,
	642, 0, 827, 0, 656, 0, 0, 824, 0, 194,
	0, 115, 116, 0, 197, 0, 200, 0, 0, 203,
	0, 0, 0, 0, 718, 0, 0, 282, 0, 0,
	718, 0, 1158, 835, 836, 837, 838, 839, 926, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 888, 0, 863, 863, 863,
	880, 881, 889, 890, 895, 896, 907, 908, 910, 912,
	906, 906, 906, 903, 904, 808, 0, 0, 0, 0,
	-2, 329, 0, 629, 0, 634, 349, 350, 351, 636,
	637, 333, 352, 353, 354, 355, 356, 357, 0, 553,
	0, 555, 1250, 0, 330, 342, 331, 334, 0, 213,
	409, 410, 412, 413, 414, 418, 0, 467, 420, 422,
	424, 426, 428, 436, 440, 718, 446, 449, 453, 454,
	455, 456, 0, 0, 0, 556, 0, 313, 0, 462,
	0, 736, 761, 685, 735, 686, 760, 762, 737, 738,
	743, 747, 748, 751, 754, 755, 745, 929, 704, 705,
	706, 729, 730, 579, 0, 0, 299, 930, 831, 832,
	882, 883, 884, 885, 886, 931, 932, 0, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, -2, -2,
	-2, -2, -2, -2, -2, -2, 955, 956, 957, 958,
	959, 960, 961, 962, -2, -2, -2, 966, 967, -2,
	1151, 1153, 0, 1212, 0, -2, 0, -2, -2, -2,
	-2, 980, 0, 982, 985, 987, 989, 0, 0, 0,
	0, 1211, 999, 1189, 0, 0, 1130, 1131, 1132, 984,
	0, 0, 1210, 1201, 0, 0, 1154, 1040, 0, 0,
	0, 1162, 1196, 1192, 0, 1047, 728, 0, 0, 0,
	0, 1054, 0, 1253, 913, 914, 915, 916, 917, 918,
	927, 1110, 0, 0, 0, 1061, 1062, 1064, 1065, 1067,
	1068, 1071, 1072, 0, 0, 0, 1078, 0, 1165, -2,
	-2, -2, -2, -2, -2, -2, 0, 1080, 0, 1082,
	1156, 1175, 0, 0, 1003, 0, 0, 0, 0, 1482,
	0, 1085, 1156, 1183, 0, 0, 0, 0, 0, 1156,
	0, 1188, 0, 0, 0, 0, 0, 1096, 0, 1098,
	0, 0, 0, 0, 0, 0, 620, 713, 0, 0,
	0, 827, 0, 0, 0, 1216, 827, 763, 0, 0,
	0, 0, 0, 0, 809, 813, 810, 811, 0, 0,
	794, 806, 776, 0, 0, 0, 783, 784, 805, 0,
	804, 793, -2, 0, 0, 0, 0, 0, 591, 98,
	1461, 0, 119, 0, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 1227,
	0, 137, 0, 1234, 0, 0, 0, 0, 0, 477,
	1233, 479, 481, 482, 483, 484, 1258, 0, 1258, 0,
	0, 0, 0, 0, 0, 0, 644, 650, 0, 742,
	0, 668, 658, 0, 0, 0, 668, 672, 673, 675,
	676, 0, 0, 825, 210, 117, 117, 1222, 117, 117,
	135, 207, 265, 217, 257, 0, 0, 0, 259, 0,
	0, 261, 0, 828, 830, 0, 840, 0, 146, 0,
	0, 0, 322, 0, 628, 635, 0, 346, 0, 348,
	554, 1252, 1251, 0, 214, 469, 290, 438, 441, 464,
	465, 466, 822, 0, 0, 463, 689, 690, 0, 749,
	0, 0, 746, 752, 753, 0, 732, 577, 578, 0,
	0, 0, -2, -2, 0, 0, 0, 1000, -2, 981,
	983, 986, 988, 990, 0, 0, 0, 0, 0, 0,
	0, 1001, 1155, 0, 1199, 1202, -2, 1157, 1160, 1161,
	0, 0, 1193, 0, 0, 0, 0, 727, 728, 728,
	728, 1053, 0, 0, 0, 0, 0, 0, 1055, 0,
	0, 0, 0, 0, 0, 1077, 0, 1079, 1081, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1006, 1007, 1008, 0, 1155,
	1084, 1181, 1182, 0, 0, 0, 0, 0, 0, 1090,
	0, 1187, 0, 0, 0, 1094, 1095, 1097, 0, 861,
	0, 887, 909, 911, 899, 718, 1235, 765, 757, 1214,
	808, 767, 769, 1215, 757, 1157, 796, 0, 798, 0,
	0, 0, 800, 0, 789, 0, 791, 806, 781, 0,
	0, 774, 0, 773, 794, 802, 0, 0, 820, 97,
	581, 0, 0, 0, 100, 1461, 108, 0, 508, 0,
	0, 0, 0, 0, 594, 109, 1461, 117, 1461, 117,
	110, 84, 592, 85, 0, 0, 587, 0, 0, 580,
	86, 0, 589, 0, 0, 146, 0, 0, 148, 0,
	1220, 486, 535, 0, 0, 1258, 0, 475, 536, 561,
	-2, 563, 0, 0, 646, 650, 0, 649, 716, 668,
	741, 826, 651, 668, 0, 0, 0, 660, 657, 654,
	827, 0, 0, 0, 0, 195, 198, 201, 204, 272,
	0, 0, 1159, 0, 833, 0, 0, 126, 0, 274,
	319, 320, 325, 344, 345, 347, 343, 0, 0, 0,
	0, 0, 0, 0, 731, 579, 0, 933, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 1190, 0, 0,
	0, 1201, -2, 1163, 1191, 1195, 0, 1048, 0, 0,
	0, 0, 1246, 919, 920, 921, 922, 923, 924, 925,
	0, 1108, 1109, 1113, 0, 0, 1059, 0, 0, 1164,
	1174, 1176, 1004, 1005, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, -2, -2, -2, 1022, 1023, 1024,
	-2, -2, -2, 0, 0, 0, 1177, 0, 0, 1179,
	1180, 1184, 1185, 0, 1087, 1088, 1089, 1186, 0, 0,
	0, 893, 0, 0, 759, 0, 766, 0, 759, 797,
	0, 816, 799, 779, 790, 0, 787, 777, 0, 778,
	0, 806, 0, 0, 786, 0, 0, 0, 0, 118,
	506, 525, 0, 0, 570, 576, 576, 0, 1057, 1058,
	0, 0, 0, 102, 0, 0, 0, 0, 106, 0,
	112, 0, 0, 0, 91, 0, 0, 0, 0, 90,
	0, 0, 89, 124, 0, 0, 149, 491, 0, 480,
	0, 0, 0, 478, 0, 559, 0, 0, 648, 650,
	0, 641, 642, 174, 652, 666, 667, 665, 0, 668,
	674, 671, 677, 0, 0, 128, 0, 0, 834, 841,
	144, 1351, 142, 139, 141, 291, 314, 315, 0, 459,
	460, 461, 744, 750, 733, 579, 0, 0, -2, 0,
	993, -2, -2, 1126, 1157, 1200, 1194, 1243, 728, 1049,
	1051, 1052, 928, 1115, 1112, 0, 1099, 1075, 1076, 1173,
	0, 0, 0, 0, 1157, 1128, 1086, 0, 1092, 1093,
	862, 714, 1104, 0, 0, 770, 1104, 0, 794, 792,
	775, 771, 0, 782, 0, 803, 583, 585, 99, 0,
	507, 0, 510, 0, 0, 0, 0, 516, 517, 0,
	0, 0, 0, 527, 534, 0, 579, 1238, 0, 579,
	0, 0, 0, 0, 0, 114, 0, 0, 593, 0,
	117, 117, 582, 0, 0, 0, 0, 588, 0, 590,
	136, 0, 473, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 638, 650, 0, 643, 644, 0, 0,
	0, 659, 669, 0, 0, 0, 829, 0, 0, 0,
	0, 0, 317, 0, 734, -2, -2, 994, 1127, 0,
	728, 0, 1101, -2, 0, 0, 0, 1129, 0, 701,
	0, 758, 756, 702, 815, 806, 0, 801, 101, 0,
	511, 512, 1258, 0, 515, 518, 0, 520, 1260, 486,
	0, 531, 532, 571, 572, 575, 573, 576, 728, 529,
	0, 103, 104, 113, 121, 105, 111, 0, 0, 728,
	0, 0, 807, 0, 0, 534, 0, 524, 486, 476,
	534, 0, 0, 645, 646, 0, 0, 0, 678, 0,
	0, 143, 0, 138, 140, 316, 0, 1050, 1118, 0,
	-2, 0, 1030, 1091, 1103, 1105, 0, 780, 772, 509,
	513, 0, 0, 540, 0, 528, 0, 579, 0, 0,
	123, 0, 584, 586, 0, 0, 0, 0, 0, 0,
	486, 534, 474, 486, 0, 647, 648, 0, 662, 827,
	664, 0, 0, 145, 318, 0, 0, 0, 1114, 1031,
	0, 0, 0, 519, 545, 0, 0, 0, 574, 1048,
	536, 107, 0, 120, 0, 0, 0, 0, 0, 0,
	522, 486, 565, 0, 639, 0, 663, 146, 146, 1111,
	1116, 1119, -2, 1421, 1296, 0, 1117, 1106, 1107, 0,
	521, 541, 542, 0, 537, 538, 539, 1259, 533, 540,
	122, 93, 95, 0, 0, 0, 523, 534, 827, 129,
	130, 0, 1121, 1122, 1123, 1124, 1125, 514, 543, 0,
	544, 0, 0, 0, 545, 0, 0, 489, 486, 661,
	0, 546, 0, 549, 550, 0, 547, 530, 0, 0,
	485, 487, 488, 566, 1120, 548, 551, 552, 0, 0,
	0, 0, 492, 0, 493, 0, 0, 0, 491, 0,
	0, 0, 490, 496, 0, 499, 501, -2, 0, 494,
	0, 0, 497, 0, 0, 0, 495, 500, 0, 498,
	491, 0, 490, 505, 503, 0, 504,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 365, 3, 371, 366, 3,
	376, 377, 369, 367, 381, 368, 378, 370, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 385, 380,
	357, 359, 358, 361, 382, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 374, 3, 375, 372, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 383, 364, 384, 362,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 360,
	57700, 363, 57701, 373, 57702, 379, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:908
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:914
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:920
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:977
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1013
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1085
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1091
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1097
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1106
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1115
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1184
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1207
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1217
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1280
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1283
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1284
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1311
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1337
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1444
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return helpWith(sqllex, "CREATE")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1503
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1526
		{
			return helpWith(sqllex, "DELETE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1537
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			return helpWith(sqllex, "DROP")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1552
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1553
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1554
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1569
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1584
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1607
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1630
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1645
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1696
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			return helpWith(sqllex, "DELETE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			return helpWith(sqllex, "INSERT")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1734
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1735
		{ /* SKIP DOC */
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1763
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1822
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1842
		{
			return helpWith(sqllex, "GRANT")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1884
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1940
		{
			return helpWith(sqllex, "RESET")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1941
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1956
		{
			return helpWith(sqllex, "RESET")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1981
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1982
		{ /* SKIP DOC */
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1983
		{ /* SKIP DOC */
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1984
		{
			return unimplemented(sqllex, "set local")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2043
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2093
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2115
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2118
		{
			return unimplemented(sqllex, "set from current")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2120
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2126
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2130
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = Low
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = Normal
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = High
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2231
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2241
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2242
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			return helpWith(sqllex, "SHOW")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2257
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.str = "client_encoding"
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2272
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2283
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2300
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2305
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2327
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2359
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2370
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2375
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2386
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2441
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2472
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2476
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2480
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2483
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2494
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2505
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2516
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2520
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2524
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2528
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2532
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2536
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2542
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2546
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2550
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2556
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2584
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2691
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2695
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = DropDefault
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 495:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 504:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2805
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3012
		{
			return unimplemented(sqllex, "match full")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3013
		{
			return unimplemented(sqllex, "match partial")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			return unimplemented(sqllex, "match simple")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3015
		{
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = NoAction
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = Restrict
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = Cascade
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = SetNull
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = SetDefault
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3101
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3116
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = nil
		}
	case 563:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3141
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3181
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = true
		}
	case 569:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = false
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3212
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3215
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3216
		{
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = Ascending
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = Descending
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3256
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3258
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = true
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = false
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3291
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3292
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3303
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3314
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3329
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3330
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3331
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3354
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3367
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3387
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3390
		{
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3391
		{
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.str = ""
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.str = ""
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3437
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3450
		{
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3452
		{
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = ReadOnly
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = ReadWrite
		}
	case 638:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3516
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.str = ""
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.str = ""
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.str = ""
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.str = ""
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3559
		{
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3560
		{
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3584
		{
			return helpWith(sqllex, "INSERT")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3601
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3643
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3647
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3655
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 669:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3678
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3682
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3683
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3810
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3845
		{
			return helpWith(sqllex, "SELECT")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3846
		{
			return helpWith(sqllex, "VALUES")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			return helpWith(sqllex, "TABLE")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			return helpWith(sqllex, "SELECT")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3938
		{
			return helpWith(sqllex, "TABLE")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3949
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3950
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3954
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3958
		{
			return unimplemented(sqllex, "cte")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3961
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3962
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3965
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3966
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3969
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3970
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = true
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = false
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = false
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = true
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3994
		{
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4048
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4072
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4124
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4125
		{
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4128
		{
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4129
		{
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = false
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = true
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4200
		{
			return helpWith(sqllex, "VALUES")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4202
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4217
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &From{}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4239
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4257
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4284
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4321
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4346
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = nil
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4387
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4393
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = true
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = false
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.str = astFullJoin
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.str = astLeftJoin
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.str = astRightJoin
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.str = astInnerJoin
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4504
		{
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4505
		{
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4591
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4605
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4613
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4637
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4648
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = jsonbColType
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = jsonColType
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4706
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4737
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4746
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = nil
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4811
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4907
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 899:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4939
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4978
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4979
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 911:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = year
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = month
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = day
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = hour
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = minute
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = month
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = hour
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = minute
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = minute
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = nil
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = second
		}
	case 928:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5074
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5109
		{
			return unimplemented(sqllex, "at tz")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5383
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5455
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5459
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5463
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5467
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5471
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5475
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5479
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5483
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5487
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5491
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5495
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5515
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5519
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5523
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5560
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5573
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5610
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5613
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5614
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5627
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5638
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5645
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5654
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5655
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5659
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5668
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5677
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5686
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5687
		{
			return unimplemented(sqllex, "current role")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5696
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5698
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5702
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5706
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5710
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5714
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5717
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5722
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5727
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5736
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5737
		{
			return unimplemented(sqllex, "treat")
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5743
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5747
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5751
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5755
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5759
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5763
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5771
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5774
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5779
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5783
		{
			return unimplemented(sqllex, "within group")
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5784
		{
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5803
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5819
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5831
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5861
		{
			sqlVAL.str = ""
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5867
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5871
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5881
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5882
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5883
		{
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5886
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5887
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5893
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5894
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5895
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5896
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5897
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = Any
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5934
		{
			sqlVAL.union.val = Some
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = All
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = Plus
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = Minus
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = Mult
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = Div
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = Mod
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = Bitand
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = Bitor
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = Pow
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = Bitxor
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = LT
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5954
		{
			sqlVAL.union.val = GT
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = EQ
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = LE
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = GE
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = NE
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = Like
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = NotLike
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5964
		{
			sqlVAL.union.val = ILike
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = NotILike
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5977
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6063
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6091
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6095
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6099
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6103
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6107
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6119
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6125
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6133
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6139
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6143
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6161
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6165
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6171
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6177
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6181
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6188
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6194
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6198
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6205
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6211
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6217
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6223
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6227
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6233
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6237
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6243
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6247
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6252
		{
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6253
		{
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6257
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6261
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6267
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6276
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6280
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6284
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6292
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6296
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6302
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6306
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6312
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6316
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6327
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6331
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6337
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6341
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6354
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6358
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6362
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6366
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6372
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6376
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6382
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6385
		{
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6395
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6399
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6406
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6410
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6414
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6418
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6421
		{
			return unimplemented(sqllex, "func const")
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6423
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6427
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6430
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6432
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6436
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6440
		{
			sqlVAL.union.val = DNull
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6447
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6451
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6457
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6492
		{
			sqlVAL.str = ""
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6498
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6502
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
