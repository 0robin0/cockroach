// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:490
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALL_EXISTENCE = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const IMPORT = 57486
const INCREMENTAL = 57487
const IF = 57488
const IFNULL = 57489
const ILIKE = 57490
const IN = 57491
const INET = 57492
const INTERLEAVE = 57493
const INDEX = 57494
const INDEXES = 57495
const INITIALLY = 57496
const INNER = 57497
const INSERT = 57498
const INT = 57499
const INT2VECTOR = 57500
const INT2 = 57501
const INT4 = 57502
const INT8 = 57503
const INT64 = 57504
const INTEGER = 57505
const INTERSECT = 57506
const INTERVAL = 57507
const INTO = 57508
const IS = 57509
const ISOLATION = 57510
const JOB = 57511
const JOBS = 57512
const JOIN = 57513
const JSON = 57514
const JSONB = 57515
const KEY = 57516
const KEYS = 57517
const KV = 57518
const LATERAL = 57519
const LC_CTYPE = 57520
const LC_COLLATE = 57521
const LEADING = 57522
const LEAST = 57523
const LEFT = 57524
const LESS = 57525
const LEVEL = 57526
const LIKE = 57527
const LIMIT = 57528
const LIST = 57529
const LOCAL = 57530
const LOCALTIME = 57531
const LOCALTIMESTAMP = 57532
const LOW = 57533
const LSHIFT = 57534
const MATCH = 57535
const MAXVALUE = 57536
const MINUTE = 57537
const MONTH = 57538
const NAN = 57539
const NAME = 57540
const NAMES = 57541
const NATURAL = 57542
const NEXT = 57543
const NO = 57544
const NO_INDEX_JOIN = 57545
const NORMAL = 57546
const NOT = 57547
const NOTHING = 57548
const NULL = 57549
const NULLIF = 57550
const NULLS = 57551
const NUMERIC = 57552
const OF = 57553
const OFF = 57554
const OFFSET = 57555
const OID = 57556
const ON = 57557
const ONLY = 57558
const OPTIONS = 57559
const OR = 57560
const ORDER = 57561
const ORDINALITY = 57562
const OUT = 57563
const OUTER = 57564
const OVER = 57565
const OVERLAPS = 57566
const OVERLAY = 57567
const PARENT = 57568
const PARTIAL = 57569
const PARTITION = 57570
const PASSWORD = 57571
const PAUSE = 57572
const PLACING = 57573
const PLANS = 57574
const POSITION = 57575
const PRECEDING = 57576
const PRECISION = 57577
const PREPARE = 57578
const PRIMARY = 57579
const PRIORITY = 57580
const QUERIES = 57581
const QUERY = 57582
const RANGE = 57583
const READ = 57584
const REAL = 57585
const RECURSIVE = 57586
const REF = 57587
const REFERENCES = 57588
const REGCLASS = 57589
const REGPROC = 57590
const REGPROCEDURE = 57591
const REGNAMESPACE = 57592
const REGTYPE = 57593
const REMOVE_PATH = 57594
const RENAME = 57595
const REPEATABLE = 57596
const RELEASE = 57597
const RESET = 57598
const RESTORE = 57599
const RESTRICT = 57600
const RESUME = 57601
const RETURNING = 57602
const REVOKE = 57603
const RIGHT = 57604
const ROLLBACK = 57605
const ROLLUP = 57606
const ROW = 57607
const ROWS = 57608
const RSHIFT = 57609
const SAVEPOINT = 57610
const SCATTER = 57611
const SCRUB = 57612
const SEARCH = 57613
const SECOND = 57614
const SELECT = 57615
const SEQUENCES = 57616
const SERIAL = 57617
const SERIALIZABLE = 57618
const SESSION = 57619
const SESSIONS = 57620
const SESSION_USER = 57621
const SET = 57622
const SETTING = 57623
const SETTINGS = 57624
const SHOW = 57625
const SIMILAR = 57626
const SIMPLE = 57627
const SMALLINT = 57628
const SMALLSERIAL = 57629
const SNAPSHOT = 57630
const SOME = 57631
const SOME_EXISTENCE = 57632
const SPLIT = 57633
const SQL = 57634
const START = 57635
const STATUS = 57636
const STDIN = 57637
const STRICT = 57638
const STRING = 57639
const STORE = 57640
const STORING = 57641
const SUBSTRING = 57642
const SYMMETRIC = 57643
const SYSTEM = 57644
const TABLE = 57645
const TABLES = 57646
const TEMP = 57647
const TEMPLATE = 57648
const TEMPORARY = 57649
const TESTING_RANGES = 57650
const TESTING_RELOCATE = 57651
const TEXT = 57652
const THAN = 57653
const THEN = 57654
const TIME = 57655
const TIMESTAMP = 57656
const TIMESTAMPTZ = 57657
const TO = 57658
const TRAILING = 57659
const TRACE = 57660
const TRANSACTION = 57661
const TREAT = 57662
const TRIM = 57663
const TRUE = 57664
const TRUNCATE = 57665
const TYPE = 57666
const UNBOUNDED = 57667
const UNCOMMITTED = 57668
const UNION = 57669
const UNIQUE = 57670
const UNKNOWN = 57671
const UPDATE = 57672
const UPSERT = 57673
const USE = 57674
const USER = 57675
const USERS = 57676
const USING = 57677
const UUID = 57678
const VALID = 57679
const VALIDATE = 57680
const VALUE = 57681
const VALUES = 57682
const VARCHAR = 57683
const VARIADIC = 57684
const VIEW = 57685
const VARYING = 57686
const WHEN = 57687
const WHERE = 57688
const WINDOW = 57689
const WITH = 57690
const WITHIN = 57691
const WITHOUT = 57692
const WRITE = 57693
const YEAR = 57694
const ZONE = 57695
const NOT_LA = 57696
const WITH_LA = 57697
const AS_LA = 57698
const CONTAINED_BY = 57699
const POSTFIXOP = 57700
const UMINUS = 57701
const HELPTOKEN = 57702

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6877

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	380, 54,
	-2, 712,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	152, 563,
	-2, 0,
	-1, 64,
	97, 712,
	156, 712,
	330, 712,
	331, 712,
	-2, 0,
	-1, 74,
	1, 674,
	215, 674,
	260, 674,
	375, 674,
	377, 674,
	379, 674,
	380, 674,
	-2, 687,
	-1, 107,
	4, 714,
	20, 714,
	21, 714,
	24, 714,
	29, 714,
	34, 714,
	35, 714,
	36, 714,
	37, 714,
	38, 714,
	39, 714,
	40, 714,
	41, 714,
	42, 714,
	43, 714,
	45, 714,
	46, 714,
	47, 714,
	48, 714,
	49, 714,
	52, 714,
	53, 714,
	54, 714,
	56, 714,
	57, 714,
	61, 714,
	62, 714,
	63, 714,
	65, 714,
	66, 714,
	67, 714,
	68, 714,
	70, 714,
	72, 714,
	73, 714,
	76, 714,
	77, 714,
	78, 714,
	86, 714,
	87, 714,
	88, 714,
	89, 714,
	90, 714,
	91, 714,
	92, 714,
	93, 714,
	95, 714,
	97, 714,
	99, 714,
	102, 714,
	103, 714,
	105, 714,
	109, 714,
	110, 714,
	111, 714,
	112, 714,
	113, 714,
	114, 714,
	115, 714,
	123, 714,
	124, 714,
	125, 714,
	126, 714,
	127, 714,
	129, 714,
	131, 714,
	136, 714,
	137, 714,
	139, 714,
	142, 714,
	143, 714,
	144, 714,
	145, 714,
	146, 714,
	147, 714,
	150, 714,
	151, 714,
	153, 714,
	156, 714,
	157, 714,
	158, 714,
	159, 714,
	160, 714,
	161, 714,
	162, 714,
	163, 714,
	165, 714,
	168, 714,
	169, 714,
	170, 714,
	172, 714,
	173, 714,
	174, 714,
	175, 714,
	176, 714,
	178, 714,
	179, 714,
	181, 714,
	183, 714,
	184, 714,
	187, 714,
	188, 714,
	191, 714,
	193, 714,
	195, 714,
	196, 714,
	197, 714,
	198, 714,
	199, 714,
	201, 714,
	202, 714,
	203, 714,
	204, 714,
	208, 714,
	209, 714,
	210, 714,
	211, 714,
	212, 714,
	214, 714,
	216, 714,
	217, 714,
	220, 714,
	221, 714,
	223, 714,
	225, 714,
	226, 714,
	227, 714,
	228, 714,
	229, 714,
	230, 714,
	232, 714,
	233, 714,
	234, 714,
	235, 714,
	236, 714,
	238, 714,
	239, 714,
	240, 714,
	241, 714,
	242, 714,
	243, 714,
	244, 714,
	245, 714,
	247, 714,
	248, 714,
	249, 714,
	250, 714,
	251, 714,
	253, 714,
	254, 714,
	255, 714,
	256, 714,
	257, 714,
	258, 714,
	259, 714,
	261, 714,
	263, 714,
	264, 714,
	265, 714,
	266, 714,
	268, 714,
	269, 714,
	270, 714,
	271, 714,
	272, 714,
	274, 714,
	275, 714,
	276, 714,
	277, 714,
	278, 714,
	280, 714,
	281, 714,
	282, 714,
	283, 714,
	285, 714,
	286, 714,
	287, 714,
	288, 714,
	291, 714,
	292, 714,
	293, 714,
	294, 714,
	295, 714,
	296, 714,
	297, 714,
	298, 714,
	299, 714,
	300, 714,
	302, 714,
	304, 714,
	305, 714,
	306, 714,
	307, 714,
	308, 714,
	309, 714,
	310, 714,
	311, 714,
	313, 714,
	314, 714,
	315, 714,
	318, 714,
	319, 714,
	320, 714,
	321, 714,
	323, 714,
	324, 714,
	325, 714,
	326, 714,
	329, 714,
	330, 714,
	331, 714,
	332, 714,
	334, 714,
	336, 714,
	337, 714,
	338, 714,
	339, 714,
	340, 714,
	341, 714,
	344, 714,
	349, 714,
	350, 714,
	351, 714,
	352, 714,
	353, 714,
	-2, 0,
	-1, 124,
	1, 677,
	215, 677,
	260, 677,
	375, 677,
	377, 677,
	379, 677,
	380, 677,
	-2, 686,
	-1, 129,
	1, 612,
	168, 612,
	238, 612,
	242, 612,
	379, 612,
	380, 612,
	-2, 0,
	-1, 131,
	1, 612,
	379, 612,
	380, 612,
	-2, 0,
	-1, 132,
	1, 612,
	379, 612,
	380, 612,
	-2, 0,
	-1, 133,
	1, 616,
	379, 616,
	380, 616,
	-2, 0,
	-1, 140,
	4, 720,
	5, 720,
	6, 720,
	7, 720,
	8, 720,
	9, 720,
	20, 720,
	21, 720,
	24, 720,
	29, 720,
	30, 720,
	34, 720,
	35, 720,
	36, 720,
	37, 720,
	38, 720,
	39, 720,
	40, 720,
	41, 720,
	42, 720,
	43, 720,
	45, 720,
	46, 720,
	47, 720,
	48, 720,
	49, 720,
	50, 720,
	51, 720,
	52, 720,
	53, 720,
	54, 720,
	56, 720,
	57, 720,
	59, 720,
	61, 720,
	62, 720,
	63, 720,
	65, 720,
	66, 720,
	67, 720,
	68, 720,
	70, 720,
	72, 720,
	73, 720,
	75, 720,
	76, 720,
	77, 720,
	78, 720,
	80, 720,
	81, 720,
	82, 720,
	84, 720,
	85, 720,
	86, 720,
	87, 720,
	88, 720,
	89, 720,
	90, 720,
	91, 720,
	92, 720,
	93, 720,
	94, 720,
	95, 720,
	97, 720,
	99, 720,
	102, 720,
	103, 720,
	105, 720,
	109, 720,
	110, 720,
	111, 720,
	112, 720,
	113, 720,
	114, 720,
	115, 720,
	116, 720,
	117, 720,
	123, 720,
	124, 720,
	125, 720,
	126, 720,
	127, 720,
	129, 720,
	131, 720,
	134, 720,
	136, 720,
	137, 720,
	139, 720,
	142, 720,
	143, 720,
	144, 720,
	145, 720,
	146, 720,
	147, 720,
	148, 720,
	150, 720,
	151, 720,
	153, 720,
	155, 720,
	156, 720,
	157, 720,
	158, 720,
	159, 720,
	160, 720,
	161, 720,
	162, 720,
	163, 720,
	165, 720,
	167, 720,
	168, 720,
	169, 720,
	170, 720,
	171, 720,
	172, 720,
	173, 720,
	174, 720,
	175, 720,
	176, 720,
	178, 720,
	179, 720,
	181, 720,
	182, 720,
	183, 720,
	184, 720,
	185, 720,
	187, 720,
	188, 720,
	191, 720,
	193, 720,
	194, 720,
	195, 720,
	196, 720,
	197, 720,
	198, 720,
	199, 720,
	200, 720,
	201, 720,
	202, 720,
	203, 720,
	204, 720,
	205, 720,
	207, 720,
	208, 720,
	209, 720,
	210, 720,
	211, 720,
	212, 720,
	214, 720,
	217, 720,
	220, 720,
	221, 720,
	222, 720,
	223, 720,
	224, 720,
	225, 720,
	226, 720,
	227, 720,
	228, 720,
	229, 720,
	230, 720,
	232, 720,
	233, 720,
	234, 720,
	235, 720,
	236, 720,
	238, 720,
	239, 720,
	240, 720,
	241, 720,
	242, 720,
	243, 720,
	244, 720,
	245, 720,
	247, 720,
	248, 720,
	249, 720,
	250, 720,
	251, 720,
	253, 720,
	254, 720,
	255, 720,
	256, 720,
	257, 720,
	258, 720,
	259, 720,
	261, 720,
	262, 720,
	263, 720,
	264, 720,
	265, 720,
	266, 720,
	268, 720,
	269, 720,
	270, 720,
	271, 720,
	272, 720,
	274, 720,
	275, 720,
	276, 720,
	277, 720,
	278, 720,
	279, 720,
	280, 720,
	281, 720,
	282, 720,
	283, 720,
	284, 720,
	285, 720,
	286, 720,
	287, 720,
	288, 720,
	291, 720,
	292, 720,
	293, 720,
	294, 720,
	295, 720,
	296, 720,
	297, 720,
	298, 720,
	299, 720,
	300, 720,
	302, 720,
	304, 720,
	305, 720,
	306, 720,
	307, 720,
	308, 720,
	309, 720,
	310, 720,
	311, 720,
	313, 720,
	314, 720,
	315, 720,
	318, 720,
	319, 720,
	320, 720,
	321, 720,
	322, 720,
	323, 720,
	324, 720,
	325, 720,
	326, 720,
	329, 720,
	330, 720,
	331, 720,
	332, 720,
	333, 720,
	334, 720,
	336, 720,
	337, 720,
	338, 720,
	339, 720,
	340, 720,
	341, 720,
	344, 720,
	349, 720,
	350, 720,
	351, 720,
	352, 720,
	353, 720,
	354, 720,
	362, 720,
	367, 720,
	368, 720,
	369, 720,
	376, 720,
	382, 720,
	-2, 0,
	-1, 143,
	1, 54,
	380, 54,
	-2, 712,
	-1, 515,
	133, 1330,
	316, 1330,
	359, 1330,
	378, 1330,
	-2, 0,
	-1, 516,
	133, 1277,
	316, 1277,
	359, 1277,
	378, 1277,
	-2, 0,
	-1, 518,
	133, 1389,
	316, 1389,
	359, 1389,
	378, 1389,
	-2, 0,
	-1, 520,
	133, 1412,
	316, 1412,
	359, 1412,
	378, 1412,
	-2, 0,
	-1, 527,
	133, 1335,
	316, 1335,
	359, 1335,
	378, 1335,
	-2, 332,
	-1, 553,
	1, 410,
	375, 410,
	377, 410,
	379, 410,
	380, 410,
	-2, 0,
	-1, 554,
	1, 462,
	130, 462,
	375, 462,
	377, 462,
	379, 462,
	380, 462,
	-2, 0,
	-1, 560,
	1, 424,
	375, 424,
	377, 424,
	379, 424,
	380, 424,
	-2, 0,
	-1, 562,
	1, 428,
	375, 428,
	377, 428,
	379, 428,
	380, 428,
	-2, 0,
	-1, 565,
	1, 436,
	375, 436,
	377, 436,
	379, 436,
	380, 436,
	-2, 0,
	-1, 566,
	1, 441,
	375, 441,
	377, 441,
	379, 441,
	380, 441,
	-2, 0,
	-1, 569,
	1, 451,
	375, 451,
	377, 451,
	379, 451,
	380, 451,
	-2, 0,
	-1, 585,
	118, 722,
	130, 722,
	186, 722,
	213, 722,
	-2, 681,
	-1, 588,
	118, 721,
	130, 721,
	186, 721,
	213, 721,
	-2, 678,
	-1, 644,
	376, 1255,
	-2, 1248,
	-1, 645,
	376, 1256,
	-2, 1249,
	-1, 651,
	5, 906,
	376, 906,
	-2, 1464,
	-1, 676,
	5, 865,
	-2, 1433,
	-1, 677,
	5, 900,
	376, 900,
	-2, 1435,
	-1, 678,
	5, 875,
	-2, 1436,
	-1, 679,
	5, 874,
	-2, 1437,
	-1, 680,
	5, 900,
	376, 900,
	-2, 1440,
	-1, 681,
	5, 900,
	376, 900,
	-2, 1441,
	-1, 682,
	5, 901,
	-2, 1444,
	-1, 683,
	5, 857,
	-2, 1445,
	-1, 684,
	5, 857,
	-2, 1446,
	-1, 685,
	5, 882,
	-2, 1450,
	-1, 686,
	5, 867,
	-2, 1451,
	-1, 687,
	5, 868,
	-2, 1452,
	-1, 688,
	5, 858,
	-2, 1458,
	-1, 689,
	5, 859,
	-2, 1459,
	-1, 690,
	5, 860,
	-2, 1460,
	-1, 691,
	5, 861,
	-2, 1461,
	-1, 692,
	5, 862,
	-2, 1462,
	-1, 693,
	5, 863,
	-2, 1463,
	-1, 694,
	5, 857,
	-2, 1470,
	-1, 695,
	5, 866,
	-2, 1475,
	-1, 696,
	5, 864,
	-2, 1478,
	-1, 697,
	5, 898,
	376, 898,
	-2, 1480,
	-1, 698,
	5, 902,
	-2, 1483,
	-1, 699,
	5, 904,
	-2, 1484,
	-1, 700,
	5, 897,
	376, 897,
	-2, 1489,
	-1, 884,
	229, 710,
	-2, 556,
	-1, 889,
	215, 1252,
	-2, 0,
	-1, 924,
	1, 216,
	375, 216,
	377, 216,
	379, 216,
	380, 216,
	-2, 685,
	-1, 931,
	4, 1488,
	10, 1488,
	11, 1488,
	13, 1488,
	14, 1488,
	15, 1488,
	16, 1488,
	17, 1488,
	18, 1488,
	20, 1488,
	21, 1488,
	23, 1488,
	24, 1488,
	27, 1488,
	29, 1488,
	31, 1488,
	34, 1488,
	35, 1488,
	36, 1488,
	37, 1488,
	38, 1488,
	39, 1488,
	40, 1488,
	41, 1488,
	42, 1488,
	43, 1488,
	45, 1488,
	46, 1488,
	47, 1488,
	48, 1488,
	49, 1488,
	52, 1488,
	53, 1488,
	54, 1488,
	56, 1488,
	57, 1488,
	58, 1488,
	61, 1488,
	62, 1488,
	63, 1488,
	64, 1488,
	65, 1488,
	66, 1488,
	67, 1488,
	68, 1488,
	70, 1488,
	71, 1488,
	72, 1488,
	73, 1488,
	75, 1488,
	76, 1488,
	77, 1488,
	78, 1488,
	86, 1488,
	87, 1488,
	88, 1488,
	89, 1488,
	90, 1488,
	91, 1488,
	92, 1488,
	93, 1488,
	95, 1488,
	97, 1488,
	99, 1488,
	102, 1488,
	103, 1488,
	105, 1488,
	109, 1488,
	110, 1488,
	111, 1488,
	112, 1488,
	113, 1488,
	114, 1488,
	115, 1488,
	119, 1488,
	120, 1488,
	121, 1488,
	122, 1488,
	123, 1488,
	124, 1488,
	125, 1488,
	126, 1488,
	127, 1488,
	128, 1488,
	129, 1488,
	131, 1488,
	134, 1488,
	136, 1488,
	137, 1488,
	139, 1488,
	142, 1488,
	143, 1488,
	144, 1488,
	145, 1488,
	146, 1488,
	147, 1488,
	148, 1488,
	149, 1488,
	150, 1488,
	151, 1488,
	153, 1488,
	155, 1488,
	156, 1488,
	157, 1488,
	158, 1488,
	159, 1488,
	160, 1488,
	161, 1488,
	162, 1488,
	163, 1488,
	165, 1488,
	167, 1488,
	168, 1488,
	169, 1488,
	170, 1488,
	171, 1488,
	172, 1488,
	173, 1488,
	174, 1488,
	175, 1488,
	176, 1488,
	178, 1488,
	179, 1488,
	181, 1488,
	182, 1488,
	183, 1488,
	184, 1488,
	185, 1488,
	187, 1488,
	188, 1488,
	191, 1488,
	192, 1488,
	193, 1488,
	195, 1488,
	196, 1488,
	197, 1488,
	198, 1488,
	199, 1488,
	200, 1488,
	201, 1488,
	202, 1488,
	203, 1488,
	204, 1488,
	208, 1488,
	209, 1488,
	210, 1488,
	211, 1488,
	212, 1488,
	214, 1488,
	217, 1488,
	218, 1488,
	220, 1488,
	221, 1488,
	223, 1488,
	225, 1488,
	226, 1488,
	227, 1488,
	228, 1488,
	229, 1488,
	230, 1488,
	232, 1488,
	233, 1488,
	234, 1488,
	235, 1488,
	236, 1488,
	238, 1488,
	239, 1488,
	240, 1488,
	241, 1488,
	242, 1488,
	243, 1488,
	244, 1488,
	245, 1488,
	247, 1488,
	248, 1488,
	249, 1488,
	250, 1488,
	251, 1488,
	252, 1488,
	253, 1488,
	254, 1488,
	255, 1488,
	256, 1488,
	257, 1488,
	258, 1488,
	259, 1488,
	261, 1488,
	262, 1488,
	263, 1488,
	264, 1488,
	265, 1488,
	266, 1488,
	267, 1488,
	268, 1488,
	269, 1488,
	270, 1488,
	271, 1488,
	272, 1488,
	274, 1488,
	275, 1488,
	276, 1488,
	277, 1488,
	278, 1488,
	280, 1488,
	281, 1488,
	282, 1488,
	283, 1488,
	284, 1488,
	285, 1488,
	286, 1488,
	287, 1488,
	288, 1488,
	290, 1488,
	291, 1488,
	292, 1488,
	293, 1488,
	294, 1488,
	295, 1488,
	296, 1488,
	297, 1488,
	298, 1488,
	299, 1488,
	300, 1488,
	302, 1488,
	304, 1488,
	305, 1488,
	306, 1488,
	307, 1488,
	308, 1488,
	309, 1488,
	310, 1488,
	311, 1488,
	313, 1488,
	314, 1488,
	315, 1488,
	318, 1488,
	319, 1488,
	320, 1488,
	321, 1488,
	323, 1488,
	324, 1488,
	325, 1488,
	326, 1488,
	329, 1488,
	330, 1488,
	331, 1488,
	332, 1488,
	334, 1488,
	336, 1488,
	337, 1488,
	338, 1488,
	339, 1488,
	340, 1488,
	341, 1488,
	344, 1488,
	349, 1488,
	350, 1488,
	351, 1488,
	352, 1488,
	353, 1488,
	354, 1488,
	355, 1488,
	357, 1488,
	358, 1488,
	359, 1488,
	360, 1488,
	361, 1488,
	362, 1488,
	364, 1488,
	365, 1488,
	366, 1488,
	367, 1488,
	368, 1488,
	369, 1488,
	370, 1488,
	371, 1488,
	372, 1488,
	374, 1488,
	377, 1488,
	378, 1488,
	381, 1488,
	382, 1488,
	-2, 0,
	-1, 944,
	133, 1389,
	316, 1389,
	359, 1389,
	378, 1389,
	-2, 0,
	-1, 961,
	133, 1412,
	316, 1412,
	359, 1412,
	378, 1412,
	-2, 0,
	-1, 962,
	168, 624,
	238, 624,
	242, 624,
	-2, 320,
	-1, 1034,
	118, 721,
	130, 721,
	186, 721,
	213, 721,
	-2, 682,
	-1, 1115,
	108, 687,
	118, 687,
	130, 687,
	164, 687,
	186, 687,
	213, 687,
	219, 687,
	327, 687,
	-2, 1036,
	-1, 1125,
	376, 1232,
	-2, 1220,
	-1, 1143,
	377, 1149,
	-2, 0,
	-1, 1167,
	168, 624,
	238, 624,
	242, 624,
	-2, 619,
	-1, 1195,
	377, 1149,
	-2, 0,
	-1, 1199,
	108, 687,
	118, 687,
	130, 687,
	164, 687,
	186, 687,
	213, 687,
	219, 687,
	327, 687,
	-2, 788,
	-1, 1341,
	168, 624,
	238, 624,
	242, 624,
	-2, 322,
	-1, 1449,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 941,
	-1, 1450,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 942,
	-1, 1451,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 943,
	-1, 1452,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 944,
	-1, 1453,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 945,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 946,
	-1, 1455,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 947,
	-1, 1456,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 948,
	-1, 1465,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 957,
	-1, 1466,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 958,
	-1, 1467,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 959,
	-1, 1470,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 964,
	-1, 1476,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 966,
	-1, 1478,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 970,
	-1, 1479,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 971,
	-1, 1480,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 972,
	-1, 1481,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 973,
	-1, 1550,
	133, 1160,
	376, 1255,
	-2, 1248,
	-1, 1551,
	133, 1161,
	-2, 1429,
	-1, 1552,
	133, 1162,
	-2, 1334,
	-1, 1553,
	133, 1163,
	-2, 1295,
	-1, 1554,
	133, 1164,
	-2, 1312,
	-1, 1555,
	133, 1165,
	-2, 1333,
	-1, 1556,
	133, 1166,
	-2, 1386,
	-1, 1633,
	1, 789,
	75, 789,
	108, 789,
	118, 789,
	130, 789,
	134, 789,
	138, 789,
	140, 789,
	155, 789,
	164, 789,
	171, 789,
	182, 789,
	186, 789,
	200, 789,
	213, 789,
	215, 789,
	219, 789,
	260, 789,
	262, 789,
	327, 789,
	335, 789,
	346, 789,
	347, 789,
	356, 789,
	375, 789,
	377, 789,
	379, 789,
	380, 789,
	381, 789,
	-2, 788,
	-1, 1781,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 965,
	-1, 1782,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 967,
	-1, 1787,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 968,
	-1, 1805,
	224, 1120,
	-2, 1122,
	-1, 1979,
	229, 710,
	-2, 556,
	-1, 2038,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 969,
	-1, 2043,
	167, 0,
	-2, 985,
	-1, 2052,
	224, 1121,
	-2, 1123,
	-1, 2094,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1013,
	-1, 2095,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1014,
	-1, 2096,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1015,
	-1, 2100,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1019,
	-1, 2101,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1020,
	-1, 2102,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1021,
	-1, 2238,
	167, 0,
	-2, 986,
	-1, 2241,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 989,
	-1, 2242,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 991,
	-1, 2365,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 990,
	-1, 2366,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 992,
	-1, 2373,
	167, 0,
	-2, 1022,
	-1, 2450,
	167, 0,
	-2, 1023,
	-1, 2532,
	37, 0,
	148, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 1432,
	-1, 2617,
	376, 1500,
	-2, 496,
}

const sqlPrivate = 57344

const sqlLast = 43434

var sqlAct = [...]int{

	645, 2600, 2614, 2598, 2333, 2615, 2540, 2332, 2531, 2581,
	2541, 2504, 2542, 1700, 2016, 2071, 2187, 1239, 1708, 2343,
	2455, 1775, 1335, 2306, 2530, 982, 2399, 2153, 1336, 2198,
	643, 1493, 2292, 2227, 1247, 1281, 2222, 2220, 1985, 2154,
	621, 878, 182, 1193, 1628, 2379, 1697, 182, 1197, 642,
	1983, 1678, 1991, 2214, 2272, 182, 1899, 1176, 775, 1920,
	1709, 1646, 1242, 1682, 182, 1629, 1683, 1241, 1672, 182,
	182, 1428, 1637, 182, 1907, 1871, 182, 1870, 2124, 1679,
	1121, 1816, 1771, 1205, 182, 635, 1366, 965, 1235, 1754,
	597, 123, 457, 472, 26, 1505, 73, 1506, 1039, 526,
	1207, 615, 1177, 1514, 1490, 1530, 1362, 754, 1202, 1406,
	964, 1404, 454, 914, 1157, 183, 1153, 1680, 911, 904,
	1423, 1524, 1702, 984, 1579, 925, 1686, 757, 1615, 737,
	1602, 523, 1184, 506, 1110, 182, 182, 1546, 1040, 613,
	637, 1407, 124, 182, 125, 1365, 1405, 1167, 484, 1254,
	173, 901, 519, 178, 735, 123, 1166, 2307, 589, 1044,
	2138, 547, 1804, 2139, 2630, 2334, 2334, 1262, 2623, 182,
	182, 182, 182, 777, 1262, 2629, 1262, 182, 182, 2623,
	2622, 1701, 2577, 2576, 2623, 2575, 1230, 1230, 2557, 1230,
	2552, 2551, 2305, 2548, 1609, 1609, 2528, 1230, 2001, 2527,
	1737, 2499, 1260, 1737, 2494, 1730, 2493, 588, 1230, 2489,
	2357, 1604, 1194, 1230, 2481, 603, 2000, 593, 2305, 2635,
	498, 2036, 593, 594, 2452, 1055, 1056, 2430, 1730, 2427,
	1226, 2305, 2621, 1230, 123, 2425, 40, 26, 2410, 2305,
	2409, 1609, 1230, 1282, 2305, 1055, 1056, 41, 2387, 1058,
	2384, 751, 1230, 1673, 1230, 2367, 2500, 866, 2328, 1730,
	44, 2326, 1609, 1055, 1056, 1609, 586, 2304, 585, 1058,
	2285, 2305, 1737, 1057, 1230, 1808, 762, 766, 2127, 1841,
	1842, 1809, 1859, 1860, 1861, 772, 51, 1058, 778, 598,
	739, 2240, 2361, 1057, 2213, 1730, 2237, 2208, 1677, 1055,
	1056, 1677, 1085, 1086, 1087, 1095, 1096, 1097, 2357, 2134,
	2047, 1057, 1073, 2135, 1609, 62, 1088, 1077, 2631, 2611,
	2127, 1603, 63, 1058, 479, 64, 1099, 2010, 1507, 1673,
	1971, 1972, 1896, 1856, 1230, 1895, 1609, 1888, 1886, 1230,
	1885, 1889, 1609, 1063, 1609, 1884, 1741, 1057, 1729, 1609,
	1609, 1722, 1730, 1077, 1737, 1609, 66, 1676, 2027, 1635,
	1074, 1677, 638, 1063, 1608, 1274, 2107, 2049, 1609, 1275,
	1230, 1972, 1080, 1081, 1082, 1083, 1263, 1774, 741, 1609,
	742, 1063, 1752, 1263, 1815, 1263, 1344, 1171, 1509, 864,
	946, 143, 2308, 140, 943, 942, 1363, 1847, 941, 940,
	939, 938, 937, 936, 935, 934, 933, 1078, 1080, 1081,
	1082, 1083, 1527, 932, 743, 740, 579, 1063, 578, 182,
	577, 182, 182, 142, 182, 545, 544, 1078, 543, 182,
	542, 541, 540, 1841, 1842, 182, 1862, 1092, 1100, 539,
	538, 537, 67, 536, 870, 1078, 2000, 535, 182, 182,
	182, 182, 182, 534, 533, 532, 1098, 928, 531, 1603,
	141, 1857, 530, 529, 1528, 514, 513, 512, 127, 69,
	511, 70, 510, 1705, 1090, 445, 444, 1055, 1056, 182,
	443, 1078, 1079, 442, 441, 140, 426, 425, 417, 1756,
	1055, 1056, 478, 182, 140, 103, 126, 1915, 416, 1268,
	41, 1058, 1079, 415, 1543, 1084, 1261, 1089, 1397, 182,
	414, 407, 406, 44, 1058, 142, 1529, 1526, 882, 182,
	1079, 887, 166, 165, 142, 1057, 164, 163, 162, 161,
	160, 918, 159, 158, 157, 156, 1858, 155, 1057, 154,
	153, 1084, 903, 152, 151, 150, 149, 907, 907, 148,
	928, 1847, 141, 594, 147, 146, 1079, 145, 144, 1541,
	134, 141, 1369, 1539, 1537, 977, 2604, 135, 908, 134,
	877, 2602, 929, 1093, 1198, 2599, 135, 479, 980, 1072,
	926, 182, 1059, 1060, 1061, 1062, 1064, 1065, 126, 2362,
	2547, 2529, 947, 1531, 2514, 1063, 1051, 126, 596, 1068,
	1066, 1067, 1059, 1060, 1061, 1062, 1064, 1065, 1063, 66,
	2509, 2447, 1278, 2428, 975, 1857, 2271, 1068, 1066, 1067,
	1059, 1060, 1061, 1062, 1064, 1065, 1853, 1854, 1855, 2270,
	1974, 2266, 2265, 1852, 1850, 1851, 1843, 1844, 1845, 1846,
	1848, 1849, 2258, 1091, 2257, 2350, 1069, 1070, 1076, 1075,
	1071, 1094, 140, 1068, 1066, 1067, 1059, 1060, 1061, 1062,
	1064, 1065, 2256, 2252, 2251, 929, 1129, 1034, 962, 2250,
	2267, 959, 1078, 1525, 2249, 2243, 2219, 2121, 2116, 2115,
	2114, 2057, 142, 1970, 1927, 1923, 1893, 1890, 1030, 1878,
	1858, 40, 1869, 1840, 1837, 67, 1836, 1735, 875, 1834,
	1821, 1820, 41, 129, 1841, 1842, 1805, 1633, 1051, 750,
	978, 1196, 870, 1841, 1842, 44, 594, 1501, 1195, 141,
	1050, 127, 69, 2620, 70, 2624, 1122, 134, 1113, 131,
	2609, 1036, 2589, 2588, 135, 182, 1037, 182, 140, 46,
	586, 51, 585, 1246, 1035, 478, 2073, 1079, 103, 2519,
	2518, 1047, 1048, 2517, 2484, 1704, 1364, 1770, 2476, 182,
	182, 1052, 54, 2475, 701, 1769, 56, 2466, 142, 2464,
	62, 2440, 2439, 132, 1495, 2396, 2375, 63, 2358, 122,
	64, 2337, 2325, 1841, 1842, 2311, 2263, 2196, 1125, 1851,
	1843, 1844, 1845, 1846, 1848, 1849, 1182, 1155, 1156, 1159,
	2193, 2192, 65, 1180, 2190, 141, 2349, 2162, 2161, 1162,
	2142, 66, 2130, 134, 2042, 2014, 1960, 1954, 1940, 1939,
	135, 1925, 1847, 1894, 1868, 1830, 1829, 1826, 1502, 1801,
	1796, 1847, 1055, 1056, 1059, 1060, 1061, 1062, 1064, 1065,
	1158, 126, 1161, 2458, 123, 1066, 1067, 1059, 1060, 1061,
	1062, 1064, 1065, 1620, 1940, 594, 1058, 1591, 1535, 1238,
	1175, 1174, 1165, 1151, 928, 182, 1192, 1913, 1170, 140,
	1150, 777, 1354, 1353, 1149, 1363, 1360, 182, 2356, 1542,
	1057, 1148, 1168, 1147, 1146, 1145, 1200, 1144, 1143, 1142,
	182, 1172, 1228, 1141, 1140, 1139, 182, 67, 182, 142,
	182, 1847, 1138, 68, 182, 1245, 1137, 1136, 1135, 1134,
	1133, 1126, 1114, 1113, 1279, 958, 950, 922, 2245, 1237,
	2218, 2137, 75, 127, 69, 605, 70, 2133, 71, 1231,
	133, 1807, 1122, 1732, 1540, 72, 141, 779, 1538, 1536,
	140, 876, 2012, 2363, 134, 182, 182, 83, 1117, 1621,
	103, 135, 928, 1251, 182, 1111, 1196, 182, 1740, 1986,
	130, 2360, 1357, 1841, 1842, 1857, 2359, 2353, 2140, 2002,
	142, 1215, 126, 1673, 974, 1163, 1198, 703, 777, 929,
	1164, 1033, 1028, 1963, 1957, 1953, 778, 182, 1892, 1891,
	107, 1780, 182, 1401, 971, 1350, 1131, 182, 182, 128,
	182, 1739, 182, 903, 182, 2017, 182, 141, 1243, 1701,
	1762, 2380, 2074, 1515, 446, 134, 1812, 182, 1229, 1154,
	1022, 2607, 135, 182, 182, 2606, 1208, 1996, 2149, 1209,
	2512, 419, 182, 1329, 1726, 2573, 1370, 1128, 2488, 1208,
	1858, 2572, 1209, 126, 1408, 592, 4, 1253, 2319, 1256,
	1742, 2421, 1208, 2420, 182, 1209, 1358, 2418, 777, 730,
	1023, 1843, 1844, 1845, 1846, 1848, 1849, 929, 2417, 702,
	2181, 2178, 1845, 1846, 1848, 1849, 1014, 607, 1181, 2146,
	1639, 1841, 1842, 749, 2145, 728, 1371, 1825, 1338, 2173,
	2024, 1824, 1823, 778, 431, 1277, 1276, 959, 726, 1822,
	450, 591, 123, 1783, 1337, 723, 732, 1527, 1210, 1341,
	1725, 1265, 1355, 1668, 1267, 1664, 1437, 423, 1270, 1367,
	1647, 1210, 1661, 1375, 1385, 1477, 1169, 1639, 1216, 1379,
	1351, 1380, 863, 1381, 1210, 1382, 1638, 1383, 2331, 1410,
	1843, 1844, 1845, 1846, 1848, 1849, 650, 1378, 1595, 1594,
	1213, 1438, 1698, 432, 1389, 1391, 593, 972, 1224, 1528,
	2618, 1395, 2487, 581, 449, 493, 1031, 1237, 1214, 2185,
	182, 2186, 182, 778, 1223, 182, 705, 1402, 1409, 1967,
	1394, 1233, 1403, 2013, 440, 1427, 182, 586, 583, 1419,
	586, 586, 1420, 1421, 1065, 777, 1221, 1650, 182, 1847,
	973, 584, 182, 1512, 435, 182, 871, 873, 584, 182,
	594, 1529, 1526, 182, 1222, 594, 1492, 1054, 2067, 182,
	1510, 930, 1492, 1021, 2401, 2525, 182, 777, 1196, 1841,
	1842, 182, 1396, 1531, 1257, 1364, 1361, 1772, 1773, 182,
	1564, 1574, 1622, 957, 1503, 1993, 1374, 182, 1500, 1499,
	1008, 1273, 2564, 1623, 1600, 1497, 572, 1515, 182, 1219,
	182, 1962, 182, 1857, 590, 182, 2591, 182, 2572, 182,
	182, 1951, 182, 182, 602, 1640, 928, 1733, 1557, 1956,
	182, 167, 1651, 1653, 1206, 1670, 1262, 1339, 1531, 1009,
	987, 948, 2064, 1626, 1612, 1531, 2164, 952, 594, 1429,
	1436, 1598, 1649, 1597, 2030, 1217, 1793, 2469, 1658, 1994,
	778, 1607, 1032, 1288, 930, 448, 1666, 1617, 1618, 1613,
	1656, 2496, 1791, 2477, 605, 1849, 1662, 434, 433, 1200,
	2584, 1393, 418, 1027, 1359, 1643, 2171, 2025, 1858, 1669,
	573, 1152, 778, 1211, 2065, 451, 2497, 1847, 1703, 1692,
	1703, 485, 1721, 2023, 1993, 447, 1211, 424, 2563, 2601,
	2599, 1715, 420, 408, 907, 123, 907, 170, 1525, 1211,
	777, 123, 421, 1728, 490, 1828, 724, 2478, 182, 1707,
	486, 2371, 1718, 1636, 1716, 1183, 1717, 1723, 1719, 1018,
	2334, 929, 1013, 1648, 182, 182, 182, 1727, 182, 926,
	1220, 1724, 724, 1788, 1736, 1103, 1104, 1105, 1106, 1107,
	1734, 1857, 487, 1789, 436, 725, 1116, 1794, 1288, 1288,
	734, 1531, 724, 733, 2424, 1108, 1124, 182, 1753, 704,
	2544, 171, 1159, 489, 1162, 1852, 1850, 1851, 1843, 1844,
	1845, 1846, 1848, 1849, 1187, 1616, 1488, 1117, 1156, 1155,
	2402, 574, 1055, 1056, 1743, 1517, 437, 2029, 2300, 1019,
	1745, 593, 1486, 2562, 582, 1190, 492, 1632, 1549, 1549,
	1562, 2028, 1747, 2165, 1582, 2592, 1058, 123, 1586, 1587,
	1589, 1185, 2232, 2582, 1785, 778, 1858, 438, 1474, 439,
	1491, 995, 1188, 1342, 1748, 1263, 1053, 2301, 2300, 1757,
	1057, 2293, 2543, 1043, 1601, 1761, 1746, 1786, 1759, 2571,
	1186, 1966, 2291, 1766, 1765, 1020, 1498, 2295, 647, 2031,
	172, 1768, 956, 2545, 2569, 1909, 1373, 988, 1790, 2342,
	409, 575, 963, 1695, 953, 1792, 945, 2301, 2412, 2583,
	2261, 1178, 1178, 1482, 979, 2411, 572, 2597, 2394, 2461,
	488, 1483, 2103, 1484, 2148, 968, 1187, 1489, 1936, 1932,
	2294, 2585, 2315, 1696, 602, 576, 989, 1252, 2318, 986,
	1063, 1244, 1189, 1240, 2063, 2317, 1042, 1190, 2505, 1784,
	1388, 2546, 168, 1345, 1850, 1851, 1843, 1844, 1845, 1846,
	1848, 1849, 594, 1614, 1055, 1056, 2610, 880, 1800, 1472,
	1475, 410, 1921, 879, 1188, 182, 777, 491, 2296, 2199,
	2297, 182, 182, 2344, 501, 182, 1897, 1811, 1058, 1042,
	182, 1903, 169, 182, 2395, 969, 175, 1910, 930, 970,
	573, 182, 1611, 1415, 1942, 779, 1471, 182, 182, 182,
	2299, 1941, 1057, 182, 1041, 1908, 182, 1778, 2296, 2302,
	2297, 2262, 182, 182, 182, 182, 182, 2104, 1610, 968,
	2596, 968, 182, 2105, 1902, 182, 594, 1917, 1485, 182,
	1916, 1043, 900, 2314, 1922, 1487, 1814, 495, 182, 1042,
	2299, 1349, 1926, 898, 1189, 1912, 2316, 1041, 182, 2302,
	182, 1038, 182, 591, 182, 2228, 182, 889, 968, 2188,
	182, 1875, 1876, 1877, 996, 182, 1898, 182, 2335, 1933,
	1416, 1965, 1063, 1901, 182, 2392, 930, 2273, 2125, 1905,
	1906, 778, 1973, 1911, 1975, 1534, 182, 928, 2374, 969,
	1347, 2298, 2260, 970, 2184, 1473, 1928, 1872, 928, 182,
	1950, 574, 779, 1348, 2393, 1533, 2041, 1041, 1968, 1835,
	1795, 1952, 477, 34, 1738, 2009, 1675, 476, 33, 1959,
	1998, 1667, 1660, 1026, 1025, 3, 2018, 951, 969, 605,
	605, 2298, 970, 1873, 1043, 1012, 1078, 868, 1038, 182,
	1763, 500, 1386, 869, 1976, 1377, 1132, 1017, 1980, 475,
	30, 1977, 1227, 1995, 2539, 474, 79, 2502, 2289, 1989,
	2169, 594, 2003, 865, 473, 78, 2167, 2147, 1982, 1699,
	1693, 1061, 1062, 1064, 1065, 2008, 470, 22, 471, 23,
	1691, 575, 779, 1272, 1799, 1271, 2020, 2021, 2019, 182,
	2022, 1802, 2044, 1269, 1006, 1266, 899, 1264, 1412, 2026,
	1417, 1225, 929, 1218, 494, 1212, 1424, 897, 1818, 1819,
	2032, 1079, 2054, 929, 1984, 576, 1439, 1440, 1441, 1442,
	1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452,
	1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
	1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1937, 1476,
	2053, 1478, 1479, 1480, 1481, 2034, 34, 2435, 1867, 2048,
	2050, 33, 2573, 1011, 2077, 1582, 1582, 1582, 1504, 760,
	1880, 182, 2075, 2082, 2355, 1116, 2080, 182, 1016, 2004,
	2005, 1004, 2006, 2007, 1002, 1937, 182, 182, 1323, 2066,
	2068, 2069, 2354, 30, 1544, 1545, 469, 28, 1561, 79,
	1573, 1575, 1580, 1583, 1584, 1585, 2109, 1045, 78, 2110,
	1067, 1059, 1060, 1061, 1062, 1064, 1065, 1368, 1000, 779,
	22, 2136, 23, 468, 20, 1005, 2108, 998, 2126, 466,
	19, 2159, 2141, 182, 2011, 182, 2059, 2060, 2061, 2183,
	992, 2129, 2128, 182, 896, 123, 928, 2123, 2215, 2437,
	2158, 779, 2144, 1655, 2174, 2194, 467, 18, 2179, 1776,
	2151, 182, 182, 480, 2182, 2143, 722, 1288, 2207, 2191,
	1183, 2201, 1671, 2209, 461, 15, 462, 16, 182, 2132,
	1322, 460, 14, 2200, 2172, 1046, 2160, 1663, 182, 1639,
	777, 182, 182, 1323, 1323, 1659, 2189, 777, 1654, 2175,
	930, 2203, 1764, 2175, 1288, 2204, 600, 2195, 572, 2175,
	2202, 2205, 1003, 1399, 1400, 1001, 2471, 2234, 2211, 746,
	2308, 2210, 465, 12, 2216, 1777, 602, 990, 2449, 1187,
	2423, 459, 10, 2274, 182, 502, 1429, 2078, 2239, 747,
	28, 464, 7, 1049, 1665, 1429, 2083, 1639, 2229, 999,
	1190, 463, 6, 1288, 1657, 2235, 1652, 1287, 997, 2501,
	601, 929, 1055, 1056, 458, 5, 1185, 20, 2340, 1706,
	1901, 991, 1694, 19, 1690, 895, 1599, 1188, 2113, 1340,
	1280, 1418, 2580, 2595, 2386, 1322, 1322, 1325, 182, 1841,
	1842, 182, 573, 2247, 779, 1186, 1055, 1056, 727, 729,
	18, 777, 182, 182, 2279, 778, 182, 182, 182, 2168,
	1057, 2170, 778, 1750, 1749, 2217, 2259, 748, 15, 1288,
	16, 2122, 2070, 182, 1750, 14, 2015, 1918, 182, 1887,
	182, 1751, 182, 182, 182, 1596, 1593, 2278, 1592, 182,
	2309, 1523, 182, 2276, 1119, 928, 2283, 2062, 1978, 2312,
	1129, 1127, 2159, 182, 182, 1288, 1288, 1189, 2280, 2281,
	1024, 928, 1287, 1287, 1288, 1288, 12, 2330, 2117, 1015,
	2277, 2158, 1010, 1007, 2288, 10, 993, 955, 2336, 1343,
	1565, 2159, 2284, 580, 2341, 7, 2346, 2159, 2400, 1055,
	1056, 483, 1325, 1325, 1376, 6, 2275, 1288, 2345, 994,
	2158, 1914, 2313, 574, 1619, 2339, 2158, 2160, 5, 2347,
	2495, 2253, 1827, 1058, 2454, 2370, 778, 2364, 1532, 1130,
	55, 2156, 2352, 624, 2290, 2150, 1685, 1684, 1781, 1782,
	780, 1352, 2338, 646, 1787, 1548, 2160, 1057, 630, 1430,
	721, 648, 2160, 2177, 1285, 649, 1286, 1160, 636, 2180,
	182, 1283, 182, 923, 777, 182, 1710, 1356, 1496, 2376,
	929, 1513, 2351, 182, 1810, 1123, 1806, 616, 628, 777,
	627, 1511, 1813, 949, 1919, 1817, 929, 1992, 2348, 1414,
	179, 599, 2383, 575, 1767, 412, 1411, 2385, 2404, 1988,
	2166, 2406, 1831, 427, 422, 1838, 2159, 921, 1571, 1563,
	1559, 1029, 452, 182, 1109, 2403, 928, 496, 179, 1237,
	182, 504, 2390, 1711, 509, 2158, 2388, 576, 182, 182,
	928, 928, 528, 976, 182, 2426, 1116, 2405, 2159, 1999,
	779, 2433, 2422, 1580, 1580, 1580, 1731, 1173, 1422, 745,
	1324, 182, 744, 2432, 2608, 2438, 182, 2158, 2443, 2444,
	620, 2160, 1346, 182, 2441, 2445, 2442, 1744, 2434, 1102,
	1178, 1101, 731, 2463, 967, 1288, 1904, 2369, 966, 778,
	1935, 2451, 2590, 738, 738, 2470, 2465, 2175, 182, 182,
	2163, 412, 2459, 2160, 778, 182, 2511, 2460, 139, 2436,
	2457, 2467, 136, 928, 2429, 138, 137, 411, 182, 1964,
	928, 928, 82, 2446, 32, 2482, 31, 412, 412, 770,
	412, 102, 2480, 101, 100, 179, 867, 2483, 2485, 99,
	98, 929, 2491, 2492, 2486, 182, 97, 182, 96, 1284,
	182, 95, 777, 94, 93, 929, 929, 92, 91, 90,
	89, 88, 87, 86, 85, 1324, 1324, 84, 524, 2508,
	521, 930, 81, 80, 29, 25, 106, 2520, 1990, 24,
	2522, 182, 930, 2526, 77, 76, 2524, 27, 2521, 17,
	11, 21, 2523, 60, 61, 2159, 59, 2538, 182, 182,
	182, 2537, 2536, 2415, 2416, 58, 182, 57, 2549, 2448,
	2513, 13, 53, 755, 2158, 52, 605, 605, 2556, 50,
	182, 2561, 2559, 2560, 2558, 49, 2507, 48, 929, 605,
	47, 9, 105, 2570, 2568, 929, 929, 2226, 45, 764,
	768, 2574, 774, 2414, 8, 43, 2033, 2468, 1565, 1565,
	2160, 1424, 2579, 42, 1284, 1284, 104, 2037, 2474, 118,
	2038, 2587, 115, 2586, 2578, 117, 114, 778, 116, 2594,
	503, 120, 2043, 119, 112, 2593, 110, 2553, 2554, 2555,
	777, 2051, 777, 2382, 111, 113, 109, 108, 121, 2055,
	482, 39, 1904, 2612, 38, 2619, 2613, 37, 36, 35,
	2, 1, 1323, 2625, 0, 2626, 1288, 2628, 0, 2627,
	0, 0, 2079, 2634, 0, 2632, 2081, 2636, 2633, 0,
	2408, 1841, 1842, 0, 1565, 1565, 1565, 0, 481, 0,
	0, 0, 0, 0, 2419, 0, 0, 0, 2603, 1323,
	2605, 0, 485, 0, 0, 0, 0, 0, 482, 2111,
	2112, 0, 0, 0, 0, 0, 0, 0, 2118, 2119,
	2120, 0, 1288, 0, 0, 490, 0, 0, 0, 0,
	0, 486, 0, 0, 0, 1856, 0, 528, 0, 884,
	528, 0, 890, 0, 0, 0, 2131, 893, 1323, 0,
	0, 0, 0, 412, 1322, 778, 0, 778, 0, 0,
	485, 0, 0, 487, 0, 0, 528, 528, 412, 915,
	867, 1797, 1798, 0, 0, 0, 2152, 0, 1288, 0,
	0, 0, 0, 490, 489, 0, 0, 0, 0, 486,
	930, 1322, 0, 0, 0, 0, 0, 528, 0, 1847,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 528, 0, 0, 1323, 0, 0, 0, 2498, 0,
	0, 487, 0, 0, 0, 0, 0, 954, 0, 0,
	1178, 1287, 0, 0, 779, 0, 0, 528, 0, 2212,
	1322, 779, 489, 0, 2515, 2516, 0, 1864, 1865, 1866,
	1323, 1323, 0, 0, 0, 0, 0, 0, 0, 1323,
	1323, 1325, 0, 1857, 0, 768, 0, 0, 1287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2238, 0,
	774, 0, 2241, 2242, 0, 0, 2244, 0, 0, 0,
	0, 0, 1323, 2246, 0, 2248, 0, 0, 1325, 412,
	0, 488, 1565, 1565, 0, 0, 1322, 0, 0, 0,
	0, 2255, 0, 0, 0, 0, 0, 1287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1841, 1842, 1858, 1859,
	1860, 1861, 1322, 1322, 2264, 779, 0, 1325, 0, 0,
	0, 1322, 1322, 2236, 0, 0, 0, 0, 491, 488,
	0, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
	1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
	0, 1565, 0, 1287, 1322, 0, 0, 0, 0, 930,
	1856, 0, 0, 0, 2310, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 930, 0, 0, 0, 0,
	0, 768, 0, 1325, 0, 0, 491, 0, 0, 1287,
	1287, 0, 0, 0, 0, 0, 0, 0, 1287, 1287,
	0, 0, 0, 0, 0, 1852, 1850, 1851, 1843, 1844,
	1845, 1846, 1848, 1849, 0, 0, 0, 0, 0, 1325,
	1325, 0, 0, 509, 1847, 738, 0, 0, 1325, 1325,
	1323, 1287, 0, 0, 0, 2039, 2040, 0, 0, 0,
	0, 0, 0, 2365, 2366, 0, 0, 412, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 1862, 0, 0, 0, 0, 779, 0,
	0, 0, 0, 0, 2378, 0, 0, 0, 0, 0,
	2381, 0, 0, 779, 1324, 0, 0, 0, 1857, 0,
	0, 0, 0, 0, 2084, 2085, 2086, 2087, 2088, 2089,
	2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099,
	2100, 2101, 2102, 0, 2106, 0, 0, 0, 0, 0,
	930, 1324, 1322, 0, 2413, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 930, 930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 0, 0, 0, 755,
	1203, 0, 0, 1858, 0, 412, 0, 0, 0, 0,
	1324, 0, 0, 1284, 0, 0, 0, 0, 1250, 0,
	0, 0, 0, 0, 412, 0, 412, 0, 412, 0,
	0, 0, 1258, 0, 0, 0, 0, 0, 0, 1287,
	0, 0, 0, 2462, 0, 0, 0, 930, 0, 0,
	1284, 0, 0, 0, 930, 930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 528, 179, 0, 1324, 0, 0, 0,
	0, 0, 179, 0, 0, 528, 779, 0, 0, 0,
	0, 1323, 0, 1853, 1854, 1855, 0, 0, 0, 1284,
	1852, 1850, 1851, 1843, 1844, 1845, 1846, 1848, 1849, 625,
	74, 0, 1324, 1324, 0, 528, 0, 1236, 0, 0,
	528, 1324, 1324, 0, 0, 179, 528, 0, 528, 0,
	528, 0, 528, 0, 528, 0, 768, 0, 1255, 0,
	1255, 0, 0, 2535, 2535, 1387, 0, 1323, 0, 0,
	0, 528, 528, 0, 1324, 0, 0, 0, 0, 2550,
	412, 0, 0, 0, 0, 1284, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 2535,
	0, 0, 528, 1322, 0, 0, 0, 0, 1565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1284, 1284, 1323, 0, 0, 0, 0, 0, 0,
	1284, 1284, 0, 0, 779, 0, 779, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2535, 0, 1565,
	0, 0, 0, 587, 0, 0, 595, 0, 0, 1322,
	0, 0, 0, 1284, 0, 0, 0, 0, 0, 0,
	0, 0, 756, 74, 0, 0, 2616, 0, 1841, 1842,
	1287, 1859, 1860, 1861, 0, 0, 0, 2616, 0, 0,
	2616, 2616, 1398, 0, 0, 2046, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 1322, 0, 0, 509, 0,
	738, 0, 1565, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 1856, 0, 412, 0, 1287, 0, 0, 0,
	0, 0, 1324, 0, 0, 0, 1631, 0, 0, 0,
	412, 0, 0, 412, 0, 0, 0, 1644, 0, 0,
	0, 412, 0, 0, 40, 0, 1325, 412, 0, 0,
	0, 2373, 0, 0, 412, 41, 0, 0, 0, 1674,
	0, 0, 0, 0, 0, 0, 0, 1681, 44, 0,
	0, 0, 1287, 0, 0, 867, 1847, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 412, 0, 1714, 0,
	528, 0, 2397, 528, 51, 528, 0, 412, 412, 0,
	1720, 867, 1325, 0, 0, 0, 0, 0, 1644, 0,
	0, 1284, 0, 0, 0, 1862, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 755, 0, 0, 0,
	63, 0, 479, 64, 0, 0, 0, 0, 0, 0,
	1857, 0, 755, 0, 0, 1634, 0, 0, 0, 0,
	0, 0, 0, 768, 0, 0, 0, 0, 0, 768,
	0, 0, 0, 0, 66, 2450, 774, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1712, 0,
	0, 0, 0, 0, 0, 0, 1755, 0, 0, 774,
	774, 0, 0, 0, 0, 1858, 0, 0, 0, 0,
	0, 0, 412, 412, 412, 0, 412, 0, 0, 0,
	0, 0, 0, 0, 1055, 1056, 0, 1085, 1086, 1087,
	1095, 1096, 1097, 1324, 0, 0, 0, 1073, 0, 0,
	67, 1088, 0, 0, 0, 412, 0, 0, 1058, 0,
	0, 1099, 0, 0, 0, 0, 595, 0, 1841, 1842,
	0, 1859, 1860, 1861, 0, 0, 127, 69, 0, 70,
	0, 0, 1057, 0, 0, 2045, 0, 0, 1077, 0,
	0, 0, 0, 140, 0, 1074, 0, 1384, 0, 1324,
	478, 0, 0, 103, 0, 1853, 1854, 1855, 0, 0,
	0, 0, 1852, 1850, 1851, 1843, 1844, 1845, 1846, 1848,
	1849, 0, 1856, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 1284, 0, 1758, 774, 1760, 0, 768, 0,
	0, 0, 0, 1080, 1081, 1082, 1083, 0, 0, 0,
	0, 0, 1063, 0, 0, 1324, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 1779, 134, 0,
	0, 0, 1092, 1100, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1847, 0, 1284, 1191,
	0, 1098, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 40, 587, 0, 1090,
	0, 0, 0, 0, 0, 0, 1078, 41, 0, 0,
	0, 0, 0, 0, 0, 1862, 0, 1112, 0, 1115,
	44, 0, 0, 412, 0, 0, 1120, 0, 0, 412,
	412, 0, 1089, 412, 1284, 0, 0, 0, 1631, 0,
	1857, 1631, 0, 0, 0, 0, 51, 0, 0, 1924,
	0, 0, 0, 0, 0, 412, 1930, 1931, 0, 0,
	0, 1644, 0, 0, 1938, 0, 1084, 0, 0, 0,
	1943, 1944, 1946, 1948, 1949, 62, 0, 0, 0, 0,
	412, 1079, 63, 1958, 479, 64, 0, 1961, 0, 0,
	0, 0, 0, 0, 0, 0, 412, 0, 1093, 0,
	0, 0, 0, 0, 1072, 0, 1250, 0, 1250, 0,
	528, 0, 1979, 0, 412, 1858, 66, 0, 1987, 0,
	0, 0, 0, 412, 0, 1997, 0, 0, 0, 0,
	0, 0, 412, 0, 0, 755, 0, 0, 0, 0,
	0, 755, 755, 0, 1755, 755, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 1755, 1199, 0,
	0, 0, 0, 0, 0, 0, 0, 1929, 1091, 0,
	0, 1069, 1070, 1076, 1075, 1071, 1094, 0, 1068, 1066,
	1067, 1059, 1060, 1061, 1062, 1064, 1065, 0, 0, 0,
	0, 0, 1955, 0, 0, 1883, 0, 412, 0, 0,
	0, 0, 67, 0, 0, 1853, 1854, 1855, 1969, 0,
	0, 0, 1852, 1850, 1851, 1843, 1844, 1845, 1846, 1848,
	1849, 0, 0, 0, 0, 0, 1981, 0, 127, 69,
	0, 70, 0, 0, 0, 1236, 0, 0, 0, 0,
	0, 0, 0, 0, 1236, 140, 0, 2072, 0, 0,
	0, 0, 478, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 455, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 1055, 1056, 0,
	1085, 1086, 1087, 1095, 1096, 1097, 0, 0, 0, 40,
	1073, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	41, 1058, 0, 0, 1099, 0, 0, 0, 0, 2035,
	0, 0, 141, 44, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 1057, 0, 135, 0, 412,
	0, 1077, 0, 0, 0, 1631, 0, 0, 1074, 51,
	0, 0, 0, 0, 867, 1631, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2155,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 0, 2176, 0, 0, 63, 2176, 479, 64, 0,
	0, 0, 2176, 0, 0, 0, 1080, 1081, 1082, 1083,
	0, 1644, 0, 1250, 0, 1063, 0, 0, 0, 0,
	0, 2197, 0, 0, 0, 0, 0, 0, 0, 66,
	0, 74, 0, 0, 0, 1092, 1100, 0, 0, 412,
	412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 2223, 0, 0, 0,
	0, 755, 0, 0, 587, 0, 2225, 587, 587, 2230,
	412, 0, 1090, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 2254, 0, 0, 67, 0, 0, 0, 0,
	1494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 595, 0, 0, 0, 0, 1115, 1084,
	0, 127, 69, 0, 70, 0, 0, 0, 0, 0,
	0, 1712, 755, 0, 1079, 0, 0, 0, 140, 0,
	0, 0, 0, 0, 0, 478, 412, 0, 103, 867,
	0, 1093, 0, 0, 0, 0, 0, 1072, 0, 0,
	1631, 867, 2231, 0, 2286, 2287, 1644, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2155, 867, 0, 0, 0, 756, 2320, 0, 2321, 0,
	412, 2323, 2324, 0, 0, 0, 0, 412, 0, 40,
	2329, 1199, 0, 0, 0, 141, 0, 0, 0, 2155,
	41, 867, 1681, 134, 74, 2155, 0, 0, 0, 0,
	135, 1091, 74, 44, 1069, 1070, 1076, 1075, 1071, 1094,
	0, 1068, 1066, 1067, 1059, 1060, 1061, 1062, 1064, 1065,
	0, 456, 0, 0, 0, 0, 0, 0, 1882, 51,
	0, 0, 0, 0, 74, 0, 74, 0, 755, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1055,
	1056, 0, 0, 0, 74, 1095, 1096, 1097, 62, 0,
	74, 0, 0, 0, 0, 63, 0, 479, 64, 0,
	0, 0, 0, 1058, 0, 0, 1099, 0, 0, 0,
	0, 0, 2322, 0, 0, 0, 0, 0, 1644, 2327,
	2389, 0, 0, 2391, 0, 0, 0, 1057, 0, 66,
	0, 412, 0, 1077, 2155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2176, 0, 0, 0, 0, 0, 2155, 0, 0, 0,
	0, 412, 0, 0, 0, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 0, 0, 2223, 2223, 1080, 1081,
	1082, 1083, 867, 0, 0, 0, 74, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2456,
	0, 0, 0, 0, 1631, 67, 0, 1092, 1100, 0,
	0, 1250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 69, 2398, 70, 0, 2472, 2473, 0, 0,
	0, 0, 0, 412, 1090, 0, 0, 0, 140, 0,
	0, 1078, 0, 0, 0, 478, 2490, 0, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2431, 0, 1494, 0, 0, 142, 0,
	0, 0, 0, 2506, 0, 867, 0, 0, 412, 0,
	0, 0, 0, 0, 0, 1115, 0, 0, 0, 0,
	0, 0, 0, 2155, 0, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 141, 0, 0, 0, 2456,
	0, 0, 0, 134, 0, 0, 1079, 0, 0, 0,
	135, 0, 0, 0, 0, 0, 867, 867, 867, 0,
	0, 0, 0, 1093, 412, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 2479, 0, 0, 2567, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2510, 0, 0, 0, 756, 0, 0, 0, 0, 0,
	756, 756, 0, 1091, 756, 0, 0, 0, 0, 0,
	0, 1094, 0, 1068, 1066, 1067, 1059, 1060, 1061, 1062,
	1064, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1712, 74, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 74, 0, 0, 0, 0, 184,
	185, 0, 0, 186, 595, 0, 0, 0, 661, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	660, 356, 357, 358, 0, 194, 672, 0, 652, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 706, 205, 206, 207, 0, 653,
	654, 656, 0, 655, 657, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 662, 663, 0, 707, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 708, 0, 226, 673, 0, 370, 0,
	0, 227, 228, 229, 230, 669, 671, 710, 0, 373,
	234, 0, 231, 0, 709, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 711, 235, 236, 237,
	712, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	674, 713, 243, 244, 714, 0, 245, 246, 0, 0,
	247, 0, 248, 715, 249, 250, 252, 384, 251, 716,
	253, 254, 256, 255, 0, 0, 0, 670, 257, 386,
	258, 259, 0, 260, 74, 0, 261, 0, 0, 262,
	387, 717, 263, 718, 664, 264, 265, 266, 267, 268,
	756, 269, 665, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 719, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 658, 307,
	295, 296, 308, 720, 309, 394, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 666,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 667,
	668, 756, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 659, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 756, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 776, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 782, 0, 186, 783, 784, 785,
	786, 347, 787, 788, 789, 790, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 791, 191, 354, 355,
	192, 193, 792, 793, 356, 357, 358, 794, 194, 359,
	795, 781, 796, 195, 196, 197, 0, 199, 200, 201,
	198, 797, 202, 0, 203, 204, 798, 706, 205, 206,
	207, 799, 800, 802, 801, 803, 804, 805, 208, 209,
	413, 210, 360, 211, 361, 362, 806, 212, 807, 213,
	808, 214, 809, 810, 215, 216, 811, 217, 812, 0,
	813, 363, 218, 220, 219, 221, 364, 365, 814, 707,
	815, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	74, 224, 816, 225, 817, 818, 708, 819, 226, 369,
	820, 370, 821, 1494, 227, 228, 229, 230, 371, 372,
	710, 822, 373, 234, 823, 231, 824, 709, 232, 374,
	233, 375, 376, 377, 378, 379, 825, 380, 826, 711,
	235, 236, 237, 712, 381, 382, 238, 239, 240, 827,
	242, 241, 828, 383, 713, 243, 244, 714, 829, 245,
	246, 830, 831, 247, 0, 248, 715, 249, 250, 252,
	384, 251, 716, 253, 254, 256, 255, 832, 833, 834,
	385, 257, 386, 258, 259, 835, 260, 836, 837, 261,
	838, 839, 262, 387, 717, 263, 718, 388, 264, 265,
	266, 267, 268, 840, 269, 389, 270, 390, 271, 841,
	272, 273, 274, 275, 276, 391, 277, 278, 842, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 843, 291, 719, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 844, 304, 393, 303, 305,
	306, 845, 307, 295, 296, 308, 720, 309, 394, 395,
	310, 846, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 847, 318, 848, 319, 320, 321, 322,
	323, 324, 325, 326, 849, 398, 399, 400, 850, 851,
	327, 328, 401, 402, 852, 329, 330, 331, 332, 853,
	854, 333, 334, 335, 336, 855, 337, 856, 403, 338,
	339, 340, 404, 405, 857, 858, 341, 859, 860, 861,
	862, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 776, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1624, 0, 0, 0,
	0, 0, 184, 185, 782, 1625, 186, 783, 784, 785,
	786, 347, 787, 788, 789, 790, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 791, 191, 354, 355,
	192, 193, 792, 793, 356, 357, 358, 794, 194, 359,
	795, 781, 796, 195, 196, 197, 0, 199, 200, 201,
	198, 797, 202, 0, 203, 204, 798, 706, 205, 206,
	207, 799, 800, 802, 801, 803, 804, 805, 208, 209,
	413, 210, 360, 211, 361, 362, 806, 212, 807, 213,
	808, 214, 809, 810, 215, 216, 811, 217, 812, 0,
	813, 363, 218, 220, 219, 221, 364, 365, 814, 707,
	815, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 816, 225, 817, 818, 708, 819, 226, 369,
	820, 370, 821, 0, 227, 228, 229, 230, 371, 372,
	710, 822, 373, 234, 823, 231, 824, 709, 232, 374,
	233, 375, 376, 377, 378, 379, 825, 380, 826, 711,
	235, 236, 237, 712, 381, 382, 238, 239, 240, 827,
	242, 241, 828, 383, 713, 243, 244, 714, 829, 245,
	246, 830, 831, 247, 0, 248, 715, 249, 250, 252,
	384, 251, 716, 253, 254, 256, 255, 832, 833, 834,
	385, 257, 386, 258, 259, 835, 260, 836, 837, 261,
	838, 839, 262, 387, 717, 263, 718, 388, 264, 265,
	266, 267, 268, 840, 269, 389, 270, 390, 271, 841,
	272, 273, 274, 275, 276, 391, 277, 278, 842, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 843, 291, 719, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 844, 304, 393, 303, 305,
	306, 845, 307, 295, 296, 308, 720, 309, 394, 395,
	310, 846, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 847, 318, 848, 319, 320, 321, 322,
	323, 324, 325, 326, 849, 398, 399, 400, 850, 851,
	327, 328, 401, 402, 852, 329, 330, 331, 332, 853,
	854, 333, 334, 335, 336, 855, 337, 856, 403, 338,
	339, 340, 404, 405, 857, 858, 341, 859, 860, 861,
	862, 342, 343, 344, 345, 346, 0, 776, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 782, 2282, 186, 783, 784,
	785, 786, 347, 787, 788, 789, 790, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 791, 191, 354,
	355, 192, 193, 792, 793, 356, 357, 358, 794, 194,
	359, 795, 781, 796, 195, 196, 197, 0, 199, 200,
	201, 198, 797, 202, 0, 203, 204, 798, 706, 205,
	206, 207, 799, 800, 802, 801, 803, 804, 805, 208,
	209, 413, 210, 360, 211, 361, 362, 806, 212, 807,
	213, 808, 214, 809, 810, 215, 216, 811, 217, 812,
	0, 813, 363, 218, 220, 219, 221, 364, 365, 814,
	707, 815, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 816, 225, 817, 818, 708, 819, 226,
	369, 820, 370, 821, 0, 227, 228, 229, 230, 371,
	372, 710, 822, 373, 234, 823, 231, 824, 709, 232,
	374, 233, 375, 376, 377, 378, 379, 825, 380, 826,
	711, 235, 236, 237, 712, 381, 382, 238, 239, 240,
	827, 242, 241, 828, 383, 713, 243, 244, 714, 829,
	245, 246, 830, 831, 247, 0, 248, 715, 249, 250,
	252, 384, 251, 716, 253, 254, 256, 255, 832, 833,
	834, 385, 257, 386, 258, 259, 835, 260, 836, 837,
	261, 838, 839, 262, 387, 717, 263, 718, 388, 264,
	265, 266, 267, 268, 840, 269, 389, 270, 390, 271,
	841, 272, 273, 274, 275, 276, 391, 277, 278, 842,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 843, 291, 719, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 844, 304, 393, 303,
	305, 306, 845, 307, 295, 296, 308, 720, 309, 394,
	395, 310, 846, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 847, 318, 848, 319, 320, 321,
	322, 323, 324, 325, 326, 849, 398, 399, 400, 850,
	851, 327, 328, 401, 402, 852, 329, 330, 331, 332,
	853, 854, 333, 334, 335, 336, 855, 337, 856, 403,
	338, 339, 340, 404, 405, 857, 858, 341, 859, 860,
	861, 862, 342, 343, 344, 345, 346, 776, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1232, 184, 185, 782, 0, 186, 783, 784,
	785, 786, 347, 787, 788, 789, 790, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 791, 191, 354,
	355, 192, 193, 792, 793, 356, 357, 358, 794, 194,
	359, 795, 781, 796, 195, 196, 197, 0, 199, 200,
	201, 198, 797, 202, 0, 203, 204, 798, 706, 205,
	206, 207, 799, 800, 802, 801, 803, 804, 805, 208,
	209, 413, 210, 360, 211, 361, 362, 806, 212, 807,
	213, 808, 214, 809, 810, 215, 216, 811, 217, 812,
	0, 813, 363, 218, 220, 219, 221, 364, 365, 814,
	707, 815, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 816, 225, 817, 818, 708, 819, 226,
	369, 820, 370, 821, 0, 227, 228, 229, 230, 371,
	372, 710, 822, 373, 234, 823, 231, 824, 709, 232,
	374, 233, 375, 376, 377, 378, 379, 825, 380, 826,
	711, 235, 236, 237, 712, 381, 382, 238, 239, 240,
	827, 242, 241, 828, 383, 713, 243, 244, 714, 829,
	245, 246, 830, 831, 247, 0, 248, 715, 249, 250,
	252, 384, 251, 716, 253, 254, 256, 255, 832, 833,
	834, 385, 257, 386, 258, 259, 835, 260, 836, 837,
	261, 838, 839, 262, 387, 717, 263, 718, 388, 264,
	265, 266, 267, 268, 840, 269, 389, 270, 390, 271,
	841, 272, 273, 274, 275, 276, 391, 277, 278, 842,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 843, 291, 719, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 844, 304, 393, 303,
	305, 306, 845, 307, 295, 296, 308, 720, 309, 394,
	395, 310, 846, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 847, 318, 848, 319, 320, 321,
	322, 323, 324, 325, 326, 849, 398, 399, 400, 850,
	851, 327, 328, 401, 402, 852, 329, 330, 331, 332,
	853, 854, 333, 334, 335, 336, 855, 337, 856, 403,
	338, 339, 340, 404, 405, 857, 858, 341, 859, 860,
	861, 862, 342, 343, 344, 345, 346, 1522, 0, 644,
	633, 634, 631, 632, 623, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 1519, 0, 186,
	0, 0, 0, 0, 661, 626, 0, 0, 0, 187,
	188, 189, 348, 676, 350, 677, 190, 678, 679, 0,
	191, 354, 355, 192, 193, 629, 660, 680, 681, 358,
	0, 194, 672, 0, 652, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	706, 205, 206, 207, 0, 653, 654, 656, 0, 655,
	657, 208, 209, 413, 210, 682, 211, 683, 684, 614,
	212, 0, 213, 0, 214, 1520, 0, 675, 216, 0,
	217, 0, 0, 0, 617, 218, 220, 219, 221, 662,
	663, 640, 707, 0, 0, 0, 0, 0, 222, 223,
	685, 686, 687, 0, 224, 0, 225, 0, 0, 708,
	0, 226, 673, 0, 370, 0, 0, 227, 228, 229,
	230, 669, 671, 710, 0, 373, 234, 0, 231, 0,
	709, 232, 688, 233, 689, 690, 691, 692, 693, 0,
	651, 0, 711, 235, 236, 237, 712, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 674, 713, 243, 244,
	714, 0, 245, 246, 0, 0, 247, 0, 248, 715,
	249, 250, 252, 384, 251, 716, 253, 254, 256, 255,
	611, 0, 641, 670, 257, 694, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 717, 263, 718,
	664, 264, 265, 266, 267, 268, 0, 269, 665, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 695, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 719, 292, 293,
	618, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 658, 307, 295, 296, 308, 720,
	309, 696, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 697, 314, 315, 666, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 698,
	699, 0, 0, 327, 328, 667, 668, 639, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 659, 337,
	0, 403, 338, 339, 340, 404, 700, 1518, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 612,
	0, 0, 0, 0, 0, 0, 0, 610, 0, 0,
	0, 0, 608, 609, 1521, 0, 0, 0, 0, 0,
	0, 619, 1516, 0, 0, 0, 596, 622, 644, 633,
	634, 631, 632, 623, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 661, 626, 0, 0, 0, 187, 188,
	189, 348, 676, 350, 677, 190, 678, 679, 0, 191,
	354, 355, 192, 193, 629, 660, 680, 681, 358, 0,
	194, 672, 0, 652, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 706,
	205, 206, 207, 0, 653, 654, 656, 0, 655, 657,
	208, 209, 413, 210, 682, 211, 683, 684, 614, 212,
	0, 213, 0, 214, 0, 0, 675, 216, 0, 217,
	0, 0, 0, 617, 218, 220, 219, 221, 662, 663,
	640, 707, 0, 0, 0, 0, 0, 222, 223, 685,
	686, 687, 0, 224, 0, 225, 0, 0, 708, 0,
	226, 673, 0, 370, 0, 0, 227, 228, 229, 230,
	669, 671, 710, 0, 373, 234, 0, 231, 0, 709,
	232, 688, 233, 689, 690, 691, 692, 693, 0, 651,
	0, 711, 235, 236, 237, 712, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 674, 713, 243, 244, 714,
	0, 245, 246, 0, 0, 247, 0, 248, 715, 249,
	250, 252, 384, 251, 716, 253, 254, 256, 255, 611,
	0, 641, 670, 257, 694, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 717, 263, 718, 664,
	264, 265, 266, 267, 268, 0, 269, 665, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 695, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 719, 292, 293, 618,
	294, 0, 298, 299, 300, 301, 302, 140, 304, 393,
	303, 305, 306, 658, 307, 295, 296, 308, 720, 309,
	696, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 697, 314, 315, 666, 0, 318, 142, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 698, 699,
	0, 0, 327, 328, 667, 668, 639, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 659, 337, 0,
	403, 338, 339, 340, 931, 700, 0, 0, 341, 0,
	0, 0, 134, 342, 343, 344, 345, 346, 612, 135,
	0, 0, 0, 0, 0, 0, 610, 0, 0, 0,
	0, 608, 609, 644, 633, 634, 631, 632, 623, 0,
	1118, 0, 0, 0, 0, 0, 622, 0, 0, 184,
	185, 0, 0, 186, 0, 0, 0, 0, 661, 626,
	0, 0, 0, 187, 188, 189, 348, 676, 350, 677,
	190, 678, 679, 0, 191, 354, 355, 192, 193, 629,
	660, 680, 681, 358, 0, 194, 672, 0, 652, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 706, 205, 206, 207, 0, 653,
	654, 656, 0, 655, 657, 208, 209, 413, 210, 682,
	211, 683, 684, 614, 212, 0, 213, 0, 214, 0,
	0, 675, 216, 0, 217, 0, 0, 0, 617, 218,
	220, 219, 221, 662, 663, 640, 707, 0, 0, 0,
	0, 0, 222, 223, 685, 686, 687, 0, 224, 0,
	225, 0, 0, 708, 0, 226, 673, 0, 370, 0,
	0, 227, 228, 229, 230, 669, 671, 710, 0, 373,
	234, 0, 231, 0, 709, 232, 688, 233, 689, 690,
	691, 692, 693, 0, 651, 0, 711, 235, 236, 237,
	712, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	674, 713, 243, 244, 714, 0, 245, 246, 0, 0,
	247, 0, 248, 715, 249, 250, 252, 384, 251, 716,
	253, 254, 256, 255, 611, 0, 641, 670, 257, 694,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 717, 263, 718, 664, 264, 265, 266, 267, 268,
	0, 269, 665, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 695, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 719, 292, 293, 618, 294, 0, 298, 299, 300,
	301, 302, 140, 304, 393, 303, 305, 306, 658, 307,
	295, 296, 308, 720, 309, 696, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 697, 314, 315, 666,
	0, 318, 142, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 698, 699, 0, 0, 327, 328, 667,
	668, 639, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 659, 337, 0, 403, 338, 339, 340, 931,
	700, 0, 0, 341, 0, 0, 0, 134, 342, 343,
	344, 345, 346, 612, 135, 0, 0, 0, 0, 0,
	0, 610, 0, 0, 0, 0, 608, 609, 644, 633,
	634, 631, 632, 623, 0, 1118, 0, 0, 0, 0,
	0, 622, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 661, 626, 0, 0, 0, 187, 188,
	189, 348, 676, 350, 677, 190, 678, 679, 1576, 191,
	354, 355, 192, 193, 629, 660, 680, 681, 358, 0,
	194, 672, 0, 652, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 706,
	205, 206, 207, 0, 653, 654, 656, 0, 655, 657,
	208, 209, 413, 210, 682, 211, 683, 684, 614, 212,
	0, 213, 0, 214, 0, 0, 675, 216, 0, 217,
	0, 0, 0, 617, 218, 220, 219, 221, 662, 663,
	640, 707, 0, 0, 0, 0, 0, 222, 223, 685,
	686, 687, 0, 224, 0, 225, 0, 1581, 708, 0,
	226, 673, 0, 370, 0, 0, 227, 228, 229, 230,
	669, 671, 710, 0, 373, 234, 0, 231, 0, 709,
	232, 688, 233, 689, 690, 691, 692, 693, 0, 651,
	0, 711, 235, 236, 237, 712, 381, 382, 238, 239,
	240, 0, 242, 241, 1577, 674, 713, 243, 244, 714,
	0, 245, 246, 0, 0, 247, 0, 248, 715, 249,
	250, 252, 384, 251, 716, 253, 254, 256, 255, 611,
	0, 641, 670, 257, 694, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 717, 263, 718, 664,
	264, 265, 266, 267, 268, 0, 269, 665, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 695, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 719, 292, 293, 618,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 658, 307, 295, 296, 308, 720, 309,
	696, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 697, 314, 315, 666, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 698, 699,
	0, 1578, 327, 328, 667, 668, 639, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 659, 337, 0,
	403, 338, 339, 340, 404, 700, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 612, 644,
	633, 634, 631, 632, 623, 0, 610, 0, 0, 0,
	0, 608, 609, 0, 0, 184, 185, 0, 0, 186,
	619, 0, 0, 0, 661, 626, 622, 0, 0, 187,
	188, 189, 348, 676, 350, 677, 190, 678, 679, 0,
	191, 354, 355, 192, 193, 629, 660, 680, 681, 358,
	0, 194, 672, 0, 652, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	706, 205, 206, 207, 0, 653, 654, 656, 0, 655,
	657, 208, 209, 413, 210, 682, 211, 683, 684, 614,
	212, 0, 213, 0, 214, 0, 0, 675, 216, 0,
	217, 0, 0, 0, 617, 218, 220, 219, 221, 662,
	663, 640, 707, 0, 0, 0, 0, 0, 222, 223,
	685, 686, 687, 0, 224, 0, 225, 0, 0, 708,
	0, 226, 673, 0, 370, 0, 0, 227, 228, 229,
	230, 669, 671, 710, 0, 373, 234, 0, 231, 0,
	709, 232, 688, 233, 689, 690, 691, 692, 693, 0,
	651, 0, 711, 235, 236, 237, 712, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 674, 713, 243, 244,
	714, 0, 245, 246, 0, 0, 247, 0, 248, 715,
	249, 250, 252, 384, 251, 716, 253, 254, 256, 255,
	611, 2206, 641, 670, 257, 694, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 717, 263, 718,
	664, 264, 265, 266, 267, 268, 0, 269, 665, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 695, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 719, 292, 293,
	618, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 658, 307, 295, 296, 308, 720,
	309, 696, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 697, 314, 315, 666, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 698,
	699, 0, 0, 327, 328, 667, 668, 639, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 659, 337,
	0, 403, 338, 339, 340, 404, 700, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 612,
	644, 633, 634, 631, 632, 623, 0, 610, 0, 0,
	0, 0, 608, 609, 1179, 0, 184, 185, 0, 0,
	186, 619, 0, 0, 0, 661, 626, 622, 0, 0,
	187, 188, 189, 348, 676, 350, 677, 190, 678, 679,
	0, 191, 354, 355, 192, 193, 629, 660, 680, 681,
	358, 0, 194, 672, 0, 652, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 706, 205, 206, 207, 0, 653, 654, 656, 0,
	655, 657, 208, 209, 413, 210, 682, 211, 683, 684,
	614, 212, 0, 213, 0, 214, 0, 0, 675, 216,
	0, 217, 0, 0, 0, 617, 218, 220, 219, 221,
	662, 663, 640, 707, 0, 0, 0, 0, 0, 222,
	223, 685, 686, 687, 0, 224, 0, 225, 0, 0,
	708, 0, 226, 673, 0, 370, 0, 0, 227, 228,
	229, 230, 669, 671, 710, 0, 373, 234, 1426, 231,
	0, 709, 232, 688, 233, 689, 690, 691, 692, 693,
	0, 651, 0, 711, 235, 236, 237, 712, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 674, 713, 243,
	244, 714, 0, 245, 246, 0, 0, 247, 0, 248,
	715, 249, 250, 252, 384, 251, 716, 253, 254, 256,
	255, 611, 0, 641, 670, 257, 694, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 717, 263,
	718, 664, 264, 265, 266, 267, 268, 0, 269, 665,
	270, 390, 271, 1425, 272, 273, 274, 275, 276, 695,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 719, 292,
	293, 618, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 658, 307, 295, 296, 308,
	720, 309, 696, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 697, 314, 315, 666, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	698, 699, 0, 0, 327, 328, 667, 668, 639, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 659,
	337, 0, 403, 338, 339, 340, 404, 700, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	612, 0, 0, 0, 0, 0, 0, 0, 610, 0,
	0, 0, 0, 608, 609, 0, 0, 0, 0, 0,
	0, 0, 619, 0, 0, 0, 0, 604, 622, 644,
	633, 634, 631, 632, 623, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 0, 186,
	0, 0, 0, 0, 661, 626, 0, 0, 0, 187,
	188, 189, 348, 676, 350, 677, 190, 678, 679, 0,
	191, 354, 355, 192, 193, 629, 660, 680, 681, 358,
	0, 194, 672, 0, 652, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	706, 205, 206, 207, 0, 653, 654, 656, 0, 655,
	657, 208, 209, 413, 210, 682, 211, 683, 684, 614,
	212, 0, 213, 0, 214, 0, 0, 675, 216, 0,
	217, 0, 0, 0, 617, 218, 220, 219, 221, 662,
	663, 640, 707, 0, 0, 0, 0, 0, 222, 223,
	685, 686, 687, 0, 224, 0, 225, 0, 0, 708,
	0, 226, 673, 0, 370, 0, 0, 227, 228, 229,
	230, 669, 671, 710, 0, 373, 234, 0, 231, 0,
	709, 232, 688, 233, 689, 690, 691, 692, 693, 0,
	651, 0, 711, 235, 236, 237, 712, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 674, 713, 243, 244,
	714, 0, 245, 246, 0, 0, 247, 0, 248, 715,
	249, 250, 252, 384, 251, 716, 253, 254, 256, 255,
	611, 0, 641, 670, 257, 694, 258, 259, 0, 260,
	606, 0, 261, 0, 0, 262, 387, 717, 263, 718,
	664, 264, 265, 266, 267, 268, 0, 269, 665, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 695, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 719, 292, 293,
	618, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 658, 307, 295, 296, 308, 720,
	309, 696, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 697, 314, 315, 666, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 698,
	699, 0, 0, 327, 328, 667, 668, 639, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 659, 337,
	0, 403, 338, 339, 340, 404, 700, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 612,
	644, 633, 634, 631, 632, 623, 0, 610, 0, 0,
	0, 0, 608, 609, 0, 0, 184, 185, 0, 0,
	186, 619, 0, 0, 0, 661, 626, 622, 0, 0,
	187, 188, 189, 348, 676, 350, 677, 190, 678, 679,
	0, 191, 354, 355, 192, 193, 629, 660, 680, 681,
	358, 0, 194, 672, 0, 652, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 706, 205, 206, 207, 0, 653, 654, 656, 0,
	655, 657, 208, 209, 413, 210, 682, 211, 683, 684,
	614, 212, 0, 213, 0, 214, 0, 0, 675, 216,
	0, 217, 0, 0, 0, 617, 218, 220, 219, 221,
	662, 663, 640, 707, 0, 0, 0, 0, 0, 222,
	223, 685, 686, 687, 0, 224, 0, 225, 0, 0,
	708, 0, 226, 673, 0, 370, 0, 0, 227, 228,
	229, 230, 669, 671, 710, 0, 373, 234, 0, 231,
	0, 709, 232, 688, 233, 689, 690, 691, 692, 693,
	0, 651, 0, 711, 235, 236, 237, 712, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 674, 713, 243,
	244, 714, 0, 245, 246, 0, 0, 247, 0, 248,
	715, 249, 250, 252, 384, 251, 716, 253, 254, 256,
	255, 611, 0, 641, 670, 257, 694, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 717, 263,
	718, 664, 264, 265, 266, 267, 268, 0, 269, 665,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 695,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 719, 292,
	293, 618, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 658, 307, 295, 296, 308,
	720, 309, 696, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 697, 314, 315, 666, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	698, 699, 0, 0, 327, 328, 667, 668, 639, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 659,
	337, 0, 403, 338, 339, 340, 404, 700, 2058, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	612, 644, 633, 634, 631, 632, 623, 0, 610, 0,
	0, 0, 0, 608, 609, 0, 0, 184, 185, 0,
	0, 186, 619, 0, 0, 0, 661, 626, 622, 0,
	0, 187, 188, 189, 348, 676, 350, 677, 190, 678,
	679, 0, 191, 354, 355, 192, 193, 629, 660, 680,
	681, 358, 0, 194, 672, 0, 652, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 706, 205, 206, 207, 0, 653, 654, 656,
	0, 655, 657, 208, 209, 413, 210, 682, 211, 683,
	684, 614, 212, 0, 213, 0, 214, 0, 0, 675,
	216, 0, 217, 0, 0, 0, 617, 218, 220, 219,
	221, 662, 663, 640, 707, 0, 0, 0, 0, 0,
	222, 223, 685, 686, 687, 0, 224, 0, 225, 0,
	0, 708, 0, 226, 673, 0, 370, 0, 0, 227,
	228, 229, 230, 669, 671, 710, 0, 373, 234, 0,
	231, 0, 709, 232, 688, 233, 689, 690, 691, 692,
	693, 0, 651, 0, 711, 235, 236, 237, 712, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 674, 713,
	243, 244, 714, 0, 245, 246, 0, 0, 247, 0,
	248, 715, 249, 250, 252, 384, 251, 716, 253, 254,
	256, 255, 611, 0, 641, 670, 257, 694, 258, 259,
	0, 260, 606, 0, 261, 0, 0, 262, 387, 717,
	263, 718, 664, 264, 265, 266, 267, 268, 0, 269,
	665, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	695, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 719,
	292, 293, 618, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 658, 307, 295, 296,
	308, 720, 309, 696, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 697, 314, 315, 666, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 698, 699, 0, 0, 327, 328, 667, 668, 639,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	659, 337, 0, 403, 338, 339, 340, 404, 700, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 612, 644, 633, 634, 631, 632, 623, 0, 610,
	0, 0, 0, 0, 608, 609, 0, 0, 184, 185,
	0, 0, 186, 619, 0, 0, 0, 661, 626, 622,
	0, 0, 187, 188, 189, 348, 676, 350, 677, 190,
	678, 679, 0, 191, 354, 355, 192, 193, 629, 660,
	680, 681, 358, 0, 194, 672, 0, 652, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 706, 205, 206, 207, 0, 653, 654,
	656, 0, 655, 657, 208, 209, 413, 210, 682, 211,
	683, 684, 614, 212, 0, 213, 0, 214, 0, 0,
	675, 216, 0, 217, 0, 0, 0, 617, 218, 220,
	219, 221, 662, 663, 640, 707, 0, 0, 0, 0,
	0, 222, 223, 685, 686, 687, 0, 224, 0, 225,
	0, 0, 708, 0, 226, 673, 0, 370, 0, 0,
	227, 228, 229, 230, 669, 671, 710, 0, 373, 234,
	0, 231, 0, 709, 232, 688, 233, 689, 690, 691,
	692, 693, 0, 651, 0, 711, 235, 236, 237, 712,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 674,
	713, 243, 244, 714, 0, 245, 246, 0, 0, 247,
	0, 248, 715, 249, 250, 252, 384, 251, 716, 253,
	254, 256, 255, 611, 0, 641, 670, 257, 694, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	717, 263, 718, 664, 264, 265, 266, 267, 268, 0,
	269, 665, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 695, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	719, 292, 293, 618, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 658, 307, 295,
	296, 308, 720, 309, 696, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 697, 314, 315, 666, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 698, 699, 0, 0, 327, 328, 667, 668,
	639, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 659, 337, 0, 403, 338, 339, 340, 404, 700,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 612, 644, 633, 634, 631, 632, 623, 0,
	610, 0, 0, 0, 0, 608, 609, 1179, 0, 184,
	185, 0, 0, 186, 619, 0, 0, 0, 661, 626,
	622, 0, 0, 187, 188, 189, 348, 676, 350, 677,
	190, 678, 679, 0, 191, 354, 355, 192, 193, 629,
	660, 680, 681, 358, 0, 194, 672, 0, 652, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 706, 205, 206, 207, 0, 653,
	654, 656, 0, 655, 657, 208, 209, 413, 210, 682,
	211, 683, 684, 614, 212, 0, 213, 0, 214, 0,
	0, 675, 216, 0, 217, 0, 0, 0, 617, 218,
	220, 219, 221, 662, 663, 640, 707, 0, 0, 0,
	0, 0, 222, 223, 685, 686, 687, 0, 224, 0,
	225, 0, 1581, 708, 0, 226, 673, 0, 370, 0,
	0, 227, 228, 229, 230, 669, 671, 710, 0, 373,
	234, 0, 231, 0, 709, 232, 688, 233, 689, 690,
	691, 692, 693, 0, 651, 0, 711, 235, 236, 237,
	712, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	674, 713, 243, 244, 714, 0, 245, 246, 0, 0,
	247, 0, 248, 715, 249, 250, 252, 384, 251, 716,
	253, 254, 256, 255, 611, 0, 641, 670, 257, 694,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 717, 263, 718, 664, 264, 265, 266, 267, 268,
	0, 269, 665, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 695, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 719, 292, 293, 618, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 658, 307,
	295, 296, 308, 720, 309, 696, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 697, 314, 315, 666,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 698, 699, 0, 0, 327, 328, 667,
	668, 639, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 659, 337, 0, 403, 338, 339, 340, 404,
	700, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 612, 0, 0, 0, 0, 0, 0,
	0, 610, 0, 0, 0, 0, 608, 609, 0, 0,
	0, 0, 0, 0, 0, 619, 0, 0, 0, 0,
	1627, 622, 644, 633, 634, 631, 632, 623, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 0, 186, 0, 0, 0, 0, 661, 626, 0,
	0, 0, 187, 188, 189, 348, 676, 350, 677, 190,
	678, 679, 0, 191, 354, 355, 192, 193, 629, 660,
	680, 681, 358, 0, 194, 672, 0, 652, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 706, 205, 206, 207, 0, 653, 654,
	656, 0, 655, 657, 208, 209, 413, 210, 682, 211,
	683, 684, 614, 212, 0, 213, 0, 214, 0, 0,
	675, 216, 0, 217, 0, 0, 0, 617, 218, 220,
	219, 221, 662, 663, 640, 707, 0, 0, 0, 0,
	0, 222, 223, 685, 686, 687, 0, 224, 0, 225,
	0, 0, 708, 0, 226, 673, 0, 370, 0, 0,
	227, 228, 229, 230, 669, 671, 710, 0, 373, 234,
	0, 231, 0, 709, 232, 688, 233, 689, 690, 691,
	692, 693, 0, 651, 0, 711, 235, 236, 237, 712,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 674,
	713, 243, 244, 714, 0, 245, 246, 0, 0, 247,
	0, 248, 715, 249, 250, 252, 384, 251, 716, 253,
	254, 256, 255, 611, 0, 641, 670, 257, 694, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	717, 263, 718, 664, 264, 265, 266, 267, 268, 0,
	269, 665, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 695, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	719, 292, 293, 618, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 658, 307, 295,
	296, 308, 720, 309, 696, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 697, 314, 315, 666, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 698, 699, 0, 0, 327, 328, 667, 668,
	639, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 659, 337, 0, 403, 338, 339, 340, 404, 700,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 612, 0, 0, 0, 0, 0, 0, 0,
	610, 0, 0, 0, 0, 608, 609, 0, 0, 0,
	0, 0, 0, 0, 619, 0, 0, 0, 0, 1590,
	622, 644, 633, 634, 631, 632, 623, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	0, 186, 0, 0, 0, 0, 661, 626, 0, 0,
	0, 187, 188, 189, 348, 676, 350, 677, 190, 678,
	679, 0, 191, 354, 355, 192, 193, 629, 660, 680,
	681, 358, 0, 194, 672, 0, 652, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 706, 205, 206, 207, 0, 653, 654, 656,
	0, 655, 657, 208, 209, 413, 210, 682, 211, 683,
	684, 614, 212, 0, 213, 0, 214, 0, 0, 675,
	216, 0, 217, 0, 0, 0, 617, 218, 220, 219,
	221, 662, 663, 640, 707, 0, 0, 0, 0, 0,
	222, 223, 685, 686, 687, 0, 224, 0, 225, 0,
	0, 708, 0, 226, 673, 0, 370, 0, 0, 227,
	228, 229, 230, 669, 671, 710, 0, 373, 234, 0,
	231, 0, 709, 232, 688, 233, 689, 690, 691, 692,
	693, 0, 651, 0, 711, 235, 236, 237, 712, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 674, 713,
	243, 244, 714, 0, 245, 246, 0, 0, 247, 0,
	248, 715, 249, 250, 252, 384, 251, 716, 253, 254,
	256, 255, 611, 0, 641, 670, 257, 694, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 717,
	263, 718, 664, 264, 265, 266, 267, 268, 0, 269,
	665, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	695, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 719,
	292, 293, 618, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 658, 307, 295, 296,
	308, 720, 309, 696, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 697, 314, 315, 666, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 698, 699, 0, 0, 327, 328, 667, 668, 639,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	659, 337, 0, 403, 338, 339, 340, 404, 700, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 612, 0, 0, 0, 0, 0, 0, 0, 610,
	0, 0, 0, 0, 608, 609, 0, 0, 0, 0,
	0, 0, 0, 619, 0, 0, 0, 0, 1588, 622,
	644, 633, 634, 631, 632, 623, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 0, 661, 626, 0, 0, 0,
	187, 188, 189, 348, 676, 350, 677, 190, 678, 679,
	0, 191, 354, 355, 192, 193, 629, 660, 680, 681,
	358, 0, 194, 672, 0, 652, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 706, 205, 206, 207, 0, 653, 654, 656, 0,
	655, 657, 208, 209, 413, 210, 682, 211, 683, 684,
	614, 212, 0, 213, 0, 214, 0, 0, 675, 216,
	0, 217, 0, 0, 0, 617, 218, 220, 219, 221,
	662, 663, 640, 707, 0, 0, 0, 0, 0, 222,
	223, 685, 686, 687, 0, 224, 0, 225, 0, 0,
	708, 0, 226, 673, 0, 370, 0, 0, 227, 228,
	229, 230, 669, 671, 710, 0, 373, 234, 0, 231,
	0, 709, 232, 688, 233, 689, 690, 691, 692, 693,
	0, 651, 0, 711, 235, 236, 237, 712, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 674, 713, 243,
	244, 714, 0, 245, 246, 0, 0, 247, 0, 248,
	715, 249, 250, 252, 384, 251, 716, 253, 254, 256,
	255, 611, 0, 641, 670, 257, 694, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 717, 263,
	718, 664, 264, 265, 266, 267, 268, 0, 269, 665,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 695,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 719, 292,
	293, 618, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 658, 307, 295, 296, 308,
	720, 309, 696, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 697, 314, 315, 666, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	698, 699, 0, 0, 327, 328, 667, 668, 639, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 659,
	337, 0, 403, 338, 339, 340, 404, 700, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	612, 0, 0, 0, 0, 0, 0, 0, 610, 0,
	0, 0, 0, 608, 609, 0, 0, 0, 0, 0,
	0, 0, 619, 0, 0, 0, 0, 1572, 622, 644,
	633, 634, 631, 632, 623, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 0, 186,
	0, 0, 0, 0, 661, 626, 0, 0, 0, 187,
	188, 189, 348, 676, 350, 677, 190, 678, 679, 0,
	191, 354, 355, 192, 193, 629, 660, 680, 681, 358,
	0, 194, 672, 0, 652, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	706, 205, 206, 207, 0, 653, 654, 656, 0, 655,
	657, 208, 209, 413, 210, 682, 211, 683, 684, 614,
	212, 0, 213, 0, 214, 0, 0, 675, 216, 0,
	217, 0, 0, 0, 617, 218, 220, 219, 221, 662,
	663, 640, 707, 0, 0, 0, 0, 0, 222, 223,
	685, 686, 687, 0, 224, 0, 225, 0, 0, 708,
	0, 226, 673, 0, 370, 0, 0, 227, 228, 229,
	230, 669, 671, 710, 0, 373, 234, 0, 231, 0,
	709, 232, 688, 233, 689, 690, 691, 692, 693, 0,
	651, 0, 711, 235, 236, 237, 712, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 674, 713, 243, 244,
	714, 0, 245, 246, 0, 0, 247, 0, 248, 715,
	249, 250, 252, 384, 251, 716, 253, 254, 256, 255,
	611, 0, 641, 670, 257, 694, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 717, 263, 718,
	664, 264, 265, 266, 267, 268, 0, 269, 665, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 695, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 719, 292, 293,
	618, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 658, 307, 295, 296, 308, 720,
	309, 696, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 697, 314, 315, 666, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 698,
	699, 0, 0, 327, 328, 667, 668, 639, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 659, 337,
	0, 403, 338, 339, 340, 404, 700, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 612,
	0, 0, 0, 0, 0, 0, 0, 610, 0, 0,
	0, 0, 608, 609, 0, 0, 0, 0, 0, 0,
	0, 619, 0, 0, 0, 0, 1560, 622, 644, 633,
	634, 631, 632, 623, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 661, 626, 0, 0, 0, 187, 188,
	189, 348, 676, 350, 677, 190, 678, 679, 0, 191,
	354, 355, 192, 193, 629, 660, 680, 681, 358, 0,
	194, 672, 0, 652, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 706,
	205, 206, 207, 0, 653, 654, 656, 0, 655, 657,
	208, 209, 413, 210, 682, 211, 683, 684, 614, 212,
	0, 213, 0, 214, 0, 0, 675, 216, 0, 217,
	0, 0, 0, 617, 218, 220, 219, 221, 662, 663,
	640, 707, 0, 0, 0, 0, 0, 222, 223, 685,
	686, 687, 0, 224, 0, 225, 0, 0, 708, 0,
	226, 673, 0, 370, 0, 0, 227, 228, 229, 230,
	669, 671, 710, 0, 373, 234, 0, 231, 0, 709,
	232, 688, 233, 689, 690, 691, 692, 693, 0, 651,
	0, 711, 235, 236, 237, 712, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 674, 713, 243, 244, 714,
	0, 245, 246, 0, 0, 247, 0, 248, 715, 249,
	250, 252, 384, 251, 716, 253, 254, 256, 255, 611,
	0, 641, 670, 257, 694, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 717, 263, 718, 664,
	264, 265, 266, 267, 268, 0, 269, 665, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 695, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 719, 292, 293, 618,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 658, 307, 295, 296, 308, 720, 309,
	696, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 697, 314, 315, 666, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 698, 699,
	0, 0, 327, 328, 667, 668, 639, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 659, 337, 0,
	403, 338, 339, 340, 404, 700, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 612, 0,
	0, 0, 0, 0, 0, 0, 610, 0, 0, 0,
	0, 608, 609, 0, 0, 0, 0, 0, 0, 0,
	619, 0, 0, 0, 0, 1558, 622, 1550, 633, 634,
	631, 632, 623, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 661, 626, 0, 0, 0, 187, 188, 189,
	348, 676, 350, 677, 190, 678, 679, 0, 191, 354,
	355, 192, 193, 629, 660, 680, 681, 358, 0, 194,
	672, 0, 652, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 706, 205,
	206, 207, 0, 653, 654, 656, 0, 655, 657, 208,
	209, 413, 210, 682, 1553, 683, 684, 614, 212, 0,
	213, 0, 214, 0, 0, 675, 216, 0, 217, 0,
	0, 0, 617, 218, 220, 219, 221, 662, 663, 640,
	707, 0, 0, 0, 0, 0, 222, 223, 685, 686,
	687, 0, 224, 0, 225, 0, 0, 708, 0, 226,
	673, 0, 370, 0, 0, 227, 1554, 229, 230, 669,
	671, 710, 0, 373, 234, 0, 231, 0, 709, 232,
	688, 233, 689, 690, 691, 692, 693, 0, 651, 0,
	711, 235, 236, 237, 712, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 674, 713, 243, 244, 714, 0,
	245, 246, 0, 0, 247, 0, 248, 715, 1555, 1552,
	252, 384, 251, 716, 253, 254, 256, 255, 611, 0,
	641, 670, 257, 694, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 717, 263, 718, 664, 264,
	265, 266, 267, 268, 0, 269, 665, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 695, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 719, 292, 293, 618, 294,
	0, 298, 299, 300, 301, 1556, 0, 304, 393, 303,
	305, 306, 658, 307, 295, 296, 308, 720, 309, 696,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	697, 314, 315, 666, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 698, 699, 0,
	0, 327, 328, 667, 668, 639, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 659, 337, 0, 403,
	338, 339, 340, 404, 700, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 1551, 346, 612, 0, 0,
	0, 0, 0, 0, 0, 610, 0, 0, 0, 0,
	608, 609, 0, 0, 0, 0, 0, 0, 0, 619,
	0, 0, 0, 0, 1547, 622, 1550, 633, 634, 631,
	632, 623, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 661, 626, 0, 0, 0, 187, 188, 189, 348,
	676, 350, 677, 190, 678, 679, 0, 191, 354, 355,
	192, 193, 629, 660, 680, 681, 358, 0, 194, 672,
	0, 652, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 706, 205, 206,
	207, 0, 653, 654, 656, 0, 655, 657, 208, 209,
	413, 210, 682, 1553, 683, 684, 614, 212, 0, 213,
	0, 214, 0, 0, 675, 216, 0, 217, 0, 0,
	0, 617, 218, 220, 219, 221, 662, 663, 640, 707,
	0, 0, 0, 0, 0, 222, 223, 685, 686, 687,
	0, 224, 0, 225, 0, 0, 708, 0, 226, 673,
	0, 370, 0, 0, 227, 1554, 229, 230, 669, 671,
	710, 0, 373, 234, 0, 231, 0, 709, 232, 688,
	233, 689, 690, 691, 692, 693, 0, 651, 0, 711,
	235, 236, 237, 712, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 674, 713, 243, 244, 714, 0, 245,
	246, 0, 0, 247, 0, 248, 715, 1555, 1552, 252,
	384, 251, 716, 253, 254, 256, 255, 611, 0, 641,
	670, 257, 694, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 717, 263, 718, 664, 264, 265,
	266, 267, 268, 0, 269, 665, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 695, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 719, 292, 293, 618, 294, 0,
	298, 299, 300, 301, 1556, 0, 304, 393, 303, 305,
	306, 658, 307, 295, 296, 308, 720, 309, 696, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 697,
	314, 315, 666, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 698, 699, 0, 0,
	327, 328, 667, 668, 639, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 659, 337, 0, 403, 338,
	339, 340, 404, 700, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 1551, 346, 612, 644, 633, 634,
	631, 632, 623, 0, 610, 0, 0, 0, 0, 608,
	609, 0, 0, 184, 185, 0, 0, 186, 619, 0,
	0, 0, 661, 626, 622, 0, 0, 187, 188, 189,
	348, 676, 350, 677, 190, 678, 679, 0, 191, 354,
	355, 192, 193, 629, 660, 680, 681, 358, 0, 194,
	672, 0, 652, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 706, 205,
	206, 207, 0, 653, 654, 656, 0, 655, 657, 208,
	209, 413, 210, 682, 211, 683, 684, 614, 212, 0,
	213, 0, 214, 0, 0, 675, 216, 0, 217, 0,
	0, 0, 617, 218, 220, 219, 221, 662, 663, 640,
	707, 0, 0, 0, 0, 0, 222, 223, 685, 686,
	687, 0, 224, 0, 225, 0, 0, 708, 0, 226,
	673, 0, 370, 0, 0, 227, 228, 229, 230, 669,
	671, 710, 0, 373, 234, 0, 231, 0, 709, 232,
	688, 233, 689, 690, 691, 692, 693, 0, 651, 0,
	711, 235, 236, 237, 712, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 674, 713, 243, 244, 714, 0,
	245, 246, 0, 0, 247, 0, 248, 715, 249, 250,
	252, 384, 251, 716, 253, 254, 256, 255, 611, 0,
	641, 670, 257, 694, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 717, 263, 718, 664, 264,
	265, 266, 267, 268, 0, 269, 665, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 695, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 719, 292, 293, 618, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 658, 307, 295, 296, 308, 720, 309, 696,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	697, 314, 315, 666, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 698, 699, 0,
	0, 327, 328, 667, 668, 639, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 659, 337, 0, 403,
	338, 339, 340, 404, 700, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 612, 644, 633,
	634, 631, 632, 623, 0, 610, 0, 0, 0, 0,
	608, 609, 0, 0, 184, 185, 1413, 1122, 186, 619,
	0, 0, 0, 661, 626, 622, 0, 0, 187, 188,
	189, 348, 676, 350, 677, 190, 678, 679, 0, 191,
	354, 355, 192, 193, 629, 660, 680, 681, 358, 0,
	194, 672, 0, 652, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 706,
	205, 206, 207, 0, 653, 654, 656, 0, 655, 657,
	208, 209, 413, 210, 682, 211, 683, 684, 614, 212,
	0, 213, 0, 214, 0, 0, 675, 216, 0, 217,
	0, 0, 0, 617, 218, 220, 219, 221, 662, 663,
	640, 707, 0, 0, 0, 0, 0, 222, 223, 685,
	686, 687, 0, 224, 0, 225, 0, 0, 708, 0,
	226, 673, 0, 370, 0, 0, 227, 228, 229, 230,
	669, 671, 710, 0, 373, 234, 0, 231, 0, 709,
	232, 688, 233, 689, 690, 691, 692, 693, 0, 651,
	0, 711, 235, 236, 237, 712, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 674, 713, 243, 244, 714,
	0, 245, 246, 0, 0, 247, 0, 248, 715, 249,
	250, 252, 384, 251, 716, 253, 254, 256, 255, 611,
	0, 641, 670, 257, 694, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 717, 263, 718, 664,
	264, 265, 266, 267, 268, 0, 269, 665, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 695, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 719, 292, 293, 618,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 658, 307, 295, 296, 308, 720, 309,
	696, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 697, 314, 315, 666, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 698, 699,
	0, 0, 327, 328, 667, 668, 639, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 659, 337, 0,
	403, 338, 339, 340, 404, 700, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 612, 0,
	0, 0, 0, 0, 0, 0, 610, 0, 0, 0,
	0, 608, 609, 0, 0, 0, 0, 0, 0, 0,
	619, 0, 0, 0, 0, 874, 622, 644, 633, 634,
	631, 632, 623, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 661, 626, 0, 0, 0, 187, 188, 189,
	348, 676, 350, 677, 190, 678, 679, 0, 191, 354,
	355, 192, 193, 629, 660, 680, 681, 358, 0, 194,
	672, 0, 652, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 706, 205,
	206, 207, 0, 653, 654, 656, 0, 655, 657, 208,
	209, 413, 210, 682, 211, 683, 684, 614, 212, 0,
	213, 0, 214, 0, 0, 675, 216, 0, 217, 0,
	0, 0, 617, 218, 220, 219, 221, 662, 663, 640,
	707, 0, 0, 0, 0, 0, 222, 223, 685, 686,
	687, 0, 224, 0, 225, 0, 0, 708, 0, 226,
	673, 0, 370, 0, 0, 227, 228, 229, 230, 669,
	671, 710, 0, 373, 234, 0, 231, 0, 709, 232,
	688, 233, 689, 690, 691, 692, 693, 0, 651, 0,
	711, 235, 236, 237, 712, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 674, 713, 243, 244, 714, 0,
	245, 246, 0, 0, 247, 0, 248, 715, 249, 250,
	252, 384, 251, 716, 253, 254, 256, 255, 611, 0,
	641, 670, 257, 694, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 717, 263, 718, 664, 264,
	265, 266, 267, 268, 0, 269, 665, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 695, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 719, 292, 293, 618, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 658, 307, 295, 296, 308, 720, 309, 696,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	697, 314, 315, 666, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 698, 699, 0,
	0, 327, 328, 667, 668, 639, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 659, 337, 0, 403,
	338, 339, 340, 404, 700, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 612, 0, 0,
	0, 0, 0, 0, 0, 610, 0, 0, 0, 0,
	608, 609, 0, 0, 0, 0, 0, 0, 0, 619,
	0, 0, 0, 0, 872, 622, 644, 633, 634, 631,
	632, 623, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 661, 626, 0, 0, 0, 187, 188, 189, 348,
	676, 350, 677, 190, 678, 679, 0, 191, 354, 355,
	192, 193, 629, 660, 680, 681, 358, 0, 194, 672,
	0, 652, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 706, 205, 206,
	207, 0, 653, 654, 656, 0, 655, 657, 208, 209,
	413, 210, 682, 211, 683, 684, 614, 212, 0, 213,
	0, 214, 0, 0, 675, 216, 0, 217, 0, 0,
	0, 617, 218, 220, 219, 221, 662, 663, 640, 707,
	0, 0, 0, 0, 0, 222, 223, 685, 686, 687,
	0, 224, 0, 225, 0, 0, 708, 0, 226, 673,
	0, 370, 0, 0, 227, 228, 229, 230, 669, 671,
	710, 0, 373, 234, 0, 231, 0, 709, 232, 688,
	233, 689, 690, 691, 692, 693, 0, 651, 0, 711,
	235, 236, 237, 712, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 674, 713, 243, 244, 714, 0, 245,
	246, 0, 0, 247, 0, 248, 715, 249, 250, 252,
	384, 251, 716, 253, 254, 256, 255, 611, 0, 641,
	670, 257, 694, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 717, 263, 718, 664, 264, 265,
	266, 267, 268, 0, 269, 665, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 695, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 719, 292, 293, 618, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 658, 307, 295, 296, 308, 720, 309, 696, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 697,
	314, 315, 666, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 698, 699, 0, 0,
	327, 328, 667, 668, 639, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 659, 337, 0, 403, 338,
	339, 340, 404, 700, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 612, 644, 633, 634,
	631, 632, 623, 0, 610, 0, 0, 0, 0, 608,
	609, 0, 0, 184, 185, 0, 0, 186, 619, 0,
	0, 0, 661, 626, 622, 0, 0, 187, 188, 189,
	348, 676, 350, 677, 190, 678, 679, 0, 191, 354,
	355, 192, 193, 629, 660, 680, 681, 358, 0, 194,
	672, 0, 652, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 706, 205,
	206, 207, 0, 653, 654, 656, 0, 655, 657, 208,
	209, 413, 210, 682, 211, 683, 684, 614, 212, 0,
	213, 0, 214, 0, 0, 675, 216, 0, 217, 0,
	0, 0, 617, 218, 220, 219, 221, 662, 663, 640,
	707, 0, 0, 0, 0, 0, 222, 223, 685, 686,
	687, 0, 224, 0, 225, 0, 0, 708, 0, 226,
	673, 0, 370, 0, 0, 227, 228, 229, 230, 669,
	671, 710, 0, 373, 234, 0, 231, 0, 709, 232,
	688, 233, 689, 690, 691, 692, 693, 0, 651, 0,
	711, 235, 236, 237, 712, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 674, 713, 243, 244, 714, 0,
	245, 246, 0, 0, 247, 0, 248, 2617, 249, 250,
	252, 384, 251, 716, 253, 254, 256, 255, 611, 0,
	641, 670, 257, 694, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 717, 263, 718, 664, 264,
	265, 266, 267, 268, 0, 269, 665, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 695, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 719, 292, 293, 618, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 658, 307, 295, 296, 308, 720, 309, 696,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	697, 314, 315, 666, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 698, 699, 0,
	0, 327, 328, 667, 668, 639, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 659, 337, 0, 403,
	338, 339, 340, 404, 700, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 612, 644, 633,
	634, 631, 632, 623, 0, 610, 0, 0, 0, 0,
	608, 609, 0, 0, 184, 185, 0, 0, 186, 619,
	0, 0, 0, 661, 626, 622, 0, 0, 187, 188,
	189, 348, 676, 350, 677, 190, 678, 679, 0, 191,
	354, 355, 192, 193, 629, 660, 680, 681, 358, 0,
	194, 672, 0, 652, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 706,
	205, 206, 2534, 0, 653, 654, 656, 0, 655, 657,
	208, 209, 413, 210, 682, 211, 683, 684, 614, 212,
	0, 213, 0, 214, 0, 0, 675, 216, 0, 217,
	0, 0, 0, 617, 218, 220, 219, 221, 662, 663,
	640, 707, 0, 0, 0, 0, 0, 222, 223, 685,
	686, 687, 0, 224, 0, 225, 0, 0, 708, 0,
	226, 673, 0, 370, 0, 0, 227, 228, 229, 230,
	669, 671, 710, 0, 373, 234, 0, 231, 0, 709,
	232, 688, 233, 689, 690, 691, 692, 693, 0, 651,
	0, 711, 235, 236, 237, 712, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 674, 713, 243, 244, 714,
	0, 245, 246, 0, 0, 247, 0, 248, 715, 249,
	250, 252, 384, 251, 716, 253, 254, 256, 255, 611,
	0, 641, 670, 257, 694, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 717, 263, 718, 664,
	264, 265, 266, 267, 268, 0, 269, 665, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 695, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 719, 292, 293, 618,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 658, 307, 295, 296, 308, 720, 309,
	696, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 697, 314, 315, 666, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 698, 699,
	0, 0, 327, 328, 667, 668, 639, 329, 330, 2533,
	332, 0, 0, 333, 334, 335, 336, 659, 337, 0,
	403, 338, 339, 340, 404, 700, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 612, 644,
	633, 634, 631, 632, 623, 0, 610, 0, 0, 0,
	0, 608, 609, 0, 0, 184, 185, 0, 0, 186,
	619, 0, 0, 0, 661, 626, 622, 0, 0, 187,
	188, 189, 348, 676, 350, 677, 190, 678, 679, 0,
	191, 354, 355, 192, 193, 629, 660, 680, 681, 358,
	0, 194, 672, 0, 652, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	706, 205, 206, 207, 0, 653, 654, 656, 0, 655,
	657, 208, 209, 413, 210, 682, 211, 683, 684, 614,
	212, 0, 213, 0, 214, 0, 0, 675, 216, 0,
	217, 0, 0, 0, 617, 218, 220, 219, 221, 662,
	663, 640, 707, 0, 0, 0, 0, 0, 222, 223,
	685, 686, 687, 0, 224, 0, 225, 0, 0, 708,
	0, 226, 673, 0, 370, 0, 0, 227, 228, 229,
	230, 669, 671, 710, 0, 373, 234, 0, 231, 0,
	709, 232, 688, 233, 689, 690, 691, 692, 693, 0,
	651, 0, 711, 235, 236, 237, 712, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 674, 713, 243, 244,
	714, 0, 245, 246, 0, 0, 247, 0, 248, 715,
	249, 250, 252, 384, 251, 716, 253, 254, 256, 255,
	611, 0, 641, 670, 257, 694, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 717, 263, 718,
	664, 264, 265, 266, 267, 268, 0, 269, 665, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 695, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 719, 292, 293,
	618, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 658, 307, 295, 296, 308, 720,
	309, 696, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 697, 314, 315, 666, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 698,
	699, 0, 0, 327, 328, 667, 668, 639, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 659, 337,
	0, 403, 338, 339, 340, 404, 700, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 612,
	644, 633, 634, 631, 632, 623, 0, 610, 0, 0,
	0, 0, 608, 609, 0, 0, 184, 185, 0, 0,
	186, 619, 0, 0, 0, 661, 626, 622, 0, 0,
	187, 188, 189, 2532, 676, 350, 677, 190, 678, 679,
	0, 191, 354, 355, 192, 193, 629, 660, 680, 681,
	358, 0, 194, 672, 0, 652, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 706, 205, 206, 2534, 0, 653, 654, 656, 0,
	655, 657, 208, 209, 413, 210, 682, 211, 683, 684,
	614, 212, 0, 213, 0, 214, 0, 0, 675, 216,
	0, 217, 0, 0, 0, 617, 218, 220, 219, 221,
	662, 663, 640, 707, 0, 0, 0, 0, 0, 222,
	223, 685, 686, 687, 0, 224, 0, 225, 0, 0,
	708, 0, 226, 673, 0, 370, 0, 0, 227, 228,
	229, 230, 669, 671, 710, 0, 373, 234, 0, 231,
	0, 709, 232, 688, 233, 689, 690, 691, 692, 693,
	0, 651, 0, 711, 235, 236, 237, 712, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 674, 713, 243,
	244, 714, 0, 245, 246, 0, 0, 247, 0, 248,
	715, 249, 250, 252, 384, 251, 716, 253, 254, 256,
	255, 611, 0, 641, 670, 257, 694, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 717, 263,
	718, 664, 264, 265, 266, 267, 268, 0, 269, 665,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 695,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 719, 292,
	293, 618, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 658, 307, 295, 296, 308,
	720, 309, 696, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 697, 314, 315, 666, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	698, 699, 0, 0, 327, 328, 667, 668, 639, 329,
	330, 2533, 332, 0, 0, 333, 334, 335, 336, 659,
	337, 0, 403, 338, 339, 340, 404, 700, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	612, 644, 633, 634, 631, 632, 623, 0, 610, 0,
	0, 0, 0, 608, 609, 0, 0, 184, 185, 0,
	0, 186, 619, 0, 0, 0, 661, 626, 622, 0,
	0, 187, 188, 189, 348, 676, 350, 677, 190, 678,
	679, 0, 191, 354, 355, 192, 193, 629, 660, 680,
	681, 358, 0, 194, 672, 0, 652, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 706, 205, 206, 207, 0, 653, 654, 656,
	0, 655, 657, 208, 209, 413, 210, 682, 211, 683,
	684, 0, 212, 0, 213, 0, 214, 0, 0, 675,
	216, 0, 217, 0, 0, 0, 617, 218, 220, 219,
	221, 662, 663, 640, 707, 0, 0, 0, 0, 0,
	222, 223, 685, 686, 687, 0, 224, 0, 225, 0,
	0, 708, 0, 226, 673, 0, 370, 0, 0, 227,
	228, 229, 230, 669, 671, 710, 0, 373, 234, 0,
	231, 0, 709, 232, 688, 233, 689, 690, 691, 692,
	693, 0, 651, 0, 711, 235, 236, 237, 712, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 674, 713,
	243, 244, 714, 0, 245, 246, 0, 0, 247, 0,
	248, 715, 249, 250, 252, 384, 251, 716, 253, 254,
	256, 255, 0, 0, 641, 670, 257, 694, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 717,
	263, 718, 664, 264, 265, 266, 267, 268, 0, 269,
	665, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	695, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 719,
	292, 293, 1570, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 658, 307, 295, 296,
	308, 720, 309, 696, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 697, 314, 315, 666, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 698, 699, 0, 0, 327, 328, 667, 668, 639,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	659, 337, 0, 403, 338, 339, 340, 404, 700, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 644, 633, 634, 631, 632, 623, 0, 0, 1568,
	0, 0, 0, 0, 1566, 1567, 0, 184, 185, 0,
	0, 186, 0, 1569, 0, 0, 661, 626, 0, 622,
	0, 187, 188, 189, 0, 676, 350, 677, 190, 678,
	679, 0, 191, 354, 355, 192, 193, 629, 660, 680,
	681, 358, 0, 194, 672, 0, 652, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 706, 205, 206, 2534, 0, 653, 654, 656,
	0, 655, 657, 208, 209, 413, 210, 682, 211, 683,
	684, 614, 212, 0, 213, 0, 214, 0, 0, 675,
	216, 0, 217, 0, 0, 0, 617, 218, 220, 219,
	221, 662, 663, 640, 707, 0, 0, 0, 0, 0,
	222, 223, 685, 686, 687, 0, 224, 0, 225, 0,
	0, 708, 0, 226, 673, 0, 370, 0, 0, 227,
	228, 229, 230, 669, 671, 0, 0, 373, 234, 0,
	231, 0, 709, 232, 688, 233, 689, 690, 691, 692,
	693, 0, 651, 0, 0, 235, 236, 237, 712, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 674, 713,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 715, 249, 250, 252, 384, 251, 716, 253, 254,
	256, 255, 611, 0, 641, 670, 257, 694, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 717,
	263, 718, 664, 264, 265, 266, 267, 268, 0, 269,
	665, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	695, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 719,
	292, 293, 618, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 658, 307, 295, 296,
	308, 0, 309, 696, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 697, 314, 315, 666, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 698, 699, 0, 0, 327, 328, 667, 668, 639,
	329, 330, 2533, 332, 0, 0, 333, 334, 335, 336,
	659, 337, 0, 403, 338, 339, 340, 404, 700, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 644, 633, 634, 631, 632, 623, 0, 0, 0,
	0, 0, 0, 0, 608, 609, 0, 184, 185, 0,
	0, 186, 0, 619, 0, 0, 661, 626, 0, 622,
	0, 187, 188, 189, 348, 676, 350, 677, 190, 678,
	679, 0, 191, 354, 355, 192, 193, 0, 660, 680,
	681, 358, 0, 194, 672, 0, 652, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 706, 205, 206, 207, 0, 653, 654, 656,
	0, 655, 657, 208, 209, 413, 210, 682, 211, 683,
	684, 0, 212, 0, 213, 0, 214, 0, 0, 675,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 662, 663, 640, 707, 0, 0, 0, 0, 0,
	222, 223, 685, 686, 687, 0, 224, 0, 225, 0,
	0, 708, 0, 226, 673, 0, 370, 0, 0, 227,
	228, 229, 230, 669, 671, 710, 0, 373, 234, 0,
	231, 0, 709, 232, 688, 233, 689, 690, 691, 692,
	693, 0, 651, 0, 711, 235, 236, 237, 712, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 674, 713,
	243, 244, 714, 0, 245, 246, 0, 0, 247, 0,
	248, 715, 249, 250, 252, 384, 251, 716, 253, 254,
	256, 255, 0, 0, 641, 670, 257, 694, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 717,
	263, 718, 664, 264, 265, 266, 267, 268, 0, 269,
	665, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	695, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 719,
	292, 293, 1570, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 658, 307, 295, 296,
	308, 720, 309, 696, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 697, 314, 315, 666, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 698, 699, 0, 0, 327, 328, 667, 668, 639,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	659, 337, 0, 403, 338, 339, 340, 404, 700, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 924, 0, 927, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 1569, 0, 186, 0, 0, 0, 622,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	781, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 706, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 707, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 708, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 229, 230, 371, 372, 710,
	0, 373, 234, 0, 231, 0, 709, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 711, 235,
	236, 237, 712, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 713, 243, 244, 714, 0, 245, 246,
	0, 0, 247, 0, 248, 715, 249, 250, 252, 384,
	251, 716, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 717, 263, 718, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 719, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 140, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 720, 309, 394, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 142, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 931, 405, 0, 0, 341, 596, 0, 181, 134,
	342, 343, 344, 345, 346, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 126, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	759, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 140, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 142, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 931, 405, 0, 0, 341, 0,
	0, 181, 134, 342, 343, 344, 345, 346, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	0, 186, 0, 0, 0, 0, 347, 0, 753, 0,
	1201, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 759, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	140, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	142, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 931, 405, 0,
	0, 341, 596, 0, 181, 134, 342, 343, 344, 345,
	346, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 0, 186, 0, 0, 0, 0, 347,
	0, 753, 0, 1201, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 140, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 142, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	931, 405, 0, 0, 341, 1900, 0, 181, 134, 342,
	343, 344, 345, 346, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 126, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 759,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 0, 341, 752, 0,
	181, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 0, 347, 0, 753, 0, 758,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 759, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 0,
	341, 0, 0, 181, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 0, 186, 0, 0, 0, 0, 347, 0,
	753, 0, 758, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 759, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 0, 341, 0, 0, 181, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 347, 0, 753, 0, 758, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 0, 341, 0, 0, 0,
	181, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 1234,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 0,
	341, 0, 0, 181, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 1713, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 0, 341, 0, 0, 181, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 2073, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 644, 633, 634, 631,
	632, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 1204, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	676, 350, 677, 190, 678, 679, 0, 191, 354, 355,
	192, 193, 0, 0, 680, 681, 358, 0, 194, 359,
	0, 781, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 706, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 682, 211, 683, 684, 0, 212, 0, 213,
	0, 214, 0, 0, 675, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 640, 707,
	0, 0, 0, 0, 0, 222, 223, 685, 686, 687,
	0, 224, 0, 225, 0, 0, 708, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 229, 230, 371, 372,
	710, 0, 373, 234, 0, 231, 0, 709, 232, 688,
	233, 689, 690, 691, 692, 693, 0, 651, 0, 711,
	235, 236, 237, 712, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 713, 243, 244, 714, 0, 245,
	246, 0, 0, 247, 0, 248, 715, 249, 250, 252,
	384, 251, 716, 253, 254, 256, 255, 0, 0, 641,
	385, 257, 694, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 717, 263, 718, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 695, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 719, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 720, 309, 696, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 697,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 698, 699, 0, 0,
	327, 328, 401, 402, 639, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 700, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 981, 0, 927, 985,
	0, 0, 0, 983, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 781, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 706,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 707, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 708, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 229, 230,
	371, 372, 710, 0, 373, 234, 0, 231, 0, 709,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 711, 235, 236, 237, 712, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 713, 243, 244, 714,
	0, 245, 246, 0, 0, 247, 0, 248, 715, 249,
	250, 252, 384, 251, 716, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 717, 263, 718, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 719, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 720, 309,
	394, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 499, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 177, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 176, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 174, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 180, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 177, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 176,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 927, 985,
	341, 0, 0, 983, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 347, 0, 180, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 781, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 706,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 707, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 708, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 229, 230,
	371, 372, 710, 0, 373, 234, 0, 231, 0, 709,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 711, 235, 236, 237, 712, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 713, 243, 244, 714,
	0, 245, 246, 0, 0, 247, 0, 248, 715, 249,
	250, 252, 384, 251, 716, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 717, 263, 718, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 719, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 720, 309,
	394, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 181, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	177, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 176, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 927, 985, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	184, 185, 0, 0, 186, 0, 0, 0, 0, 347,
	0, 180, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 781,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 706, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 707, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 708, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 229, 230, 371, 372, 710, 0,
	373, 234, 0, 231, 0, 709, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 711, 235, 236,
	237, 712, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 713, 243, 244, 714, 0, 245, 246, 0,
	0, 247, 0, 248, 715, 249, 250, 252, 384, 251,
	716, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 717, 263, 718, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 719, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 720, 309, 394, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 181, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 184, 185,
	0, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	927, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 0, 347, 0, 180, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 781, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 706, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 707, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	708, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	229, 230, 371, 372, 710, 0, 373, 234, 0, 231,
	0, 709, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 711, 235, 236, 237, 712, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 713, 243,
	244, 714, 0, 245, 246, 0, 0, 247, 0, 248,
	715, 249, 250, 252, 384, 251, 716, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 717, 263,
	718, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 719, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	720, 309, 394, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 181, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 1647,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 1645, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 1689, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 1650, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 229, 230,
	371, 372, 0, 0, 373, 234, 1687, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 1649, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 1688, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 181, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 1647, 194, 359,
	0, 0, 1642, 195, 196, 197, 0, 199, 200, 201,
	198, 1645, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 1650, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 229, 230, 1641, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 1649,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	1648, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 902, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 759,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 765, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 229, 230,
	767, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	759, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 761, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 229,
	230, 763, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 759, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 430, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 429, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 428, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 181, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 347, 0, 1630, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 181, 2224, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 181, 2224, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	184, 185, 0, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 2221, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 181, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 184, 185,
	0, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 759, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 1392, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 1390, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 181, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 184, 185,
	1372, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 525, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 960, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 527, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 522, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 1249, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 229, 230, 1248, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 525, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 960, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	527, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 522, 399, 400, 0, 0, 327,
	961, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 525, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 516, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 527, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 944,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 522, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 920, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 229, 230, 919,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 917, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 229, 230,
	916, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 913, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 229,
	230, 912, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 910, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	229, 230, 909, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 906,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 229, 230, 905, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 894, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 892, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	229, 230, 891, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 888,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	886, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 229, 230, 885, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 881, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 229, 230, 883, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 771, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 229, 230, 773, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 769, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 525, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 516, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	515, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 527, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 517, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 518,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 522, 399, 400, 0, 0,
	327, 520, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 507, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 508, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 505, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 497, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 453, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 181, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 181, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 229, 230, 1947, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 181, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	184, 185, 0, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 229, 230, 1945, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 181, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 184, 185,
	0, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 229, 230, 1934, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	181, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 508, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 181, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 347, 0, 1259, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 0, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 181, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 736, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 181, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	184, 185, 0, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 0, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 0, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 0, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 1055, 1056, 0, 1085, 1086, 1087,
	1095, 1096, 1097, 0, 0, 0, 0, 1073, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 1058, 0,
	0, 1099, 0, 0, 0, 0, 1841, 1842, 0, 1859,
	1860, 1861, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1057, 0, 0, 0, 1055, 1056, 1077, 1085,
	1086, 1087, 1095, 1096, 1097, 1074, 0, 0, 0, 1073,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	1058, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1856, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1057, 0, 0, 0, 0, 0,
	1077, 0, 0, 1080, 1081, 1082, 1083, 1074, 0, 0,
	0, 0, 1063, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1847, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 1080, 1081, 1082, 1083, 0,
	0, 0, 0, 0, 1063, 1863, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 1078, 1841, 1842, 0,
	1859, 1860, 1861, 1862, 1092, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1098, 0, 0, 0, 0, 1857, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 1856, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 1858, 0, 0, 0, 0, 1084, 0,
	0, 0, 0, 0, 0, 1847, 0, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	1055, 1056, 0, 1085, 1086, 1087, 1095, 1096, 1097, 0,
	1093, 0, 0, 1073, 0, 0, 1072, 1088, 0, 0,
	0, 0, 0, 0, 1058, 0, 0, 1099, 1091, 0,
	0, 1069, 1070, 1076, 1075, 1071, 1094, 0, 1068, 1066,
	1067, 1059, 1060, 1061, 1062, 1064, 1065, 0, 1057, 1857,
	0, 0, 0, 0, 1077, 1881, 0, 0, 0, 0,
	0, 1074, 0, 1853, 1854, 1855, 0, 0, 0, 0,
	1852, 1850, 1851, 1843, 1844, 1845, 1846, 1848, 1849, 0,
	1091, 0, 0, 1069, 1070, 1076, 1075, 1071, 1094, 0,
	1068, 1066, 1067, 1059, 1060, 1061, 1062, 1064, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 1833, 0, 1080,
	1081, 1082, 1083, 0, 0, 0, 0, 0, 1063, 0,
	0, 0, 0, 0, 1858, 0, 0, 0, 0, 1055,
	1056, 0, 1085, 1086, 1087, 1095, 1096, 1097, 1092, 1100,
	0, 0, 1073, 0, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 1058, 0, 0, 1099, 1098, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 1057, 0, 0,
	0, 0, 1078, 1077, 0, 0, 0, 0, 0, 0,
	1074, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 1853, 1854, 1855, 0, 0, 0,
	0, 1852, 1850, 1851, 1843, 1844, 1845, 1846, 1848, 1849,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 1081,
	1082, 1083, 1084, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1092, 1100, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 1841, 1842,
	1072, 1859, 1860, 1861, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 1055, 1056,
	0, 1085, 1086, 1087, 1095, 1096, 1097, 0, 0, 0,
	0, 1073, 1856, 0, 0, 1088, 0, 1089, 0, 0,
	0, 0, 1058, 0, 1091, 1099, 0, 1069, 1070, 1076,
	1075, 1071, 1094, 0, 1068, 1066, 1067, 1059, 1060, 1061,
	1062, 1064, 1065, 0, 0, 0, 1057, 2503, 0, 0,
	0, 1084, 1077, 0, 0, 0, 0, 0, 0, 1074,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1847, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 1055, 1056, 1072,
	1085, 1086, 1087, 1095, 1096, 1097, 0, 0, 0, 0,
	1073, 0, 0, 0, 1088, 0, 0, 1080, 1081, 1082,
	1083, 1058, 0, 0, 1099, 1862, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1057, 1092, 1100, 0, 0,
	1857, 1077, 0, 0, 0, 0, 0, 0, 1074, 0,
	0, 0, 0, 1091, 0, 1098, 1069, 1070, 1076, 1075,
	1071, 1094, 0, 1068, 1066, 1067, 1059, 1060, 1061, 1062,
	1064, 1065, 0, 1090, 0, 0, 2453, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 1081, 1082, 1083,
	0, 0, 0, 0, 0, 1063, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 1858, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 1093, 0, 0, 0, 1055, 1056, 1072, 1085,
	1086, 1087, 1095, 1096, 1097, 0, 0, 0, 0, 1073,
	0, 0, 0, 1088, 0, 1089, 0, 0, 0, 0,
	1058, 0, 0, 1099, 0, 1853, 1854, 1855, 0, 0,
	0, 0, 1852, 1850, 1851, 1843, 1844, 1845, 1846, 1848,
	1849, 0, 0, 0, 1057, 0, 0, 0, 0, 1084,
	1077, 0, 0, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 1091, 0, 1079, 1069, 1070, 1076, 1075, 1071,
	1094, 0, 1068, 1066, 1067, 1059, 1060, 1061, 1062, 1064,
	1065, 1093, 0, 0, 0, 2407, 0, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 1081, 1082, 1083, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1055, 1056, 0, 1085, 1086,
	1087, 1095, 1096, 1097, 1092, 1100, 0, 0, 1073, 0,
	0, 0, 1088, 0, 0, 0, 0, 0, 0, 1058,
	0, 1091, 1099, 1098, 1069, 1070, 1076, 1075, 1071, 1094,
	0, 1068, 1066, 1067, 1059, 1060, 1061, 1062, 1064, 1065,
	0, 1090, 0, 1057, 2377, 0, 0, 0, 1078, 1077,
	0, 0, 0, 0, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 1081, 1082, 1083, 1084, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 1100, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 1055, 1056, 0, 1085, 1086, 1087,
	1095, 1096, 1097, 0, 0, 0, 0, 1073, 0, 0,
	0, 1088, 0, 1089, 0, 0, 0, 0, 1058, 0,
	1091, 1099, 0, 1069, 1070, 1076, 1075, 1071, 1094, 0,
	1068, 1066, 1067, 1059, 1060, 1061, 1062, 1064, 1065, 0,
	0, 0, 1057, 2372, 0, 0, 0, 1084, 1077, 0,
	0, 0, 0, 0, 0, 1074, 0, 0, 0, 0,
	0, 0, 1079, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 1055, 1056, 1072, 1085, 1086, 1087, 1095,
	1096, 1097, 0, 0, 0, 0, 1073, 0, 0, 0,
	1088, 0, 0, 1080, 1081, 1082, 1083, 1058, 0, 0,
	1099, 0, 1063, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1057, 1092, 1100, 0, 0, 0, 1077, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 0, 0, 1091,
	0, 1098, 1069, 1070, 1076, 1075, 1071, 1094, 0, 1068,
	1066, 1067, 1059, 1060, 1061, 1062, 1064, 1065, 0, 1090,
	0, 0, 2368, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 1081, 1082, 1083, 0, 0, 0, 0,
	0, 1063, 1089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1092, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 1093, 0,
	0, 0, 1055, 1056, 1072, 1085, 1086, 1087, 1095, 1096,
	1097, 0, 0, 0, 0, 1073, 0, 0, 0, 1088,
	0, 1089, 0, 0, 0, 0, 1058, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1057, 0, 0, 0, 0, 1084, 1077, 0, 0, 0,
	0, 0, 0, 1074, 0, 0, 0, 0, 1091, 0,
	1079, 1069, 1070, 1076, 1075, 1071, 1094, 0, 1068, 1066,
	1067, 1059, 1060, 1061, 1062, 1064, 1065, 1093, 0, 0,
	0, 2303, 0, 1072, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1080, 1081, 1082, 1083, 0, 0, 0, 0, 0,
	1063, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1055, 1056, 0, 1085, 1086, 1087, 1095, 1096, 1097,
	1092, 1100, 0, 0, 1073, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 1058, 0, 1091, 1099, 1098,
	1069, 1070, 1076, 1075, 1071, 1094, 0, 1068, 1066, 1067,
	1059, 1060, 1061, 1062, 1064, 1065, 0, 1090, 0, 1057,
	2269, 0, 0, 0, 1078, 1077, 0, 0, 0, 0,
	0, 0, 1074, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 1081, 1082, 1083, 1084, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	1100, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, 0, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 1078, 0, 0, 0, 0, 0, 0,
	1055, 1056, 0, 1085, 1086, 1087, 1095, 1096, 1097, 0,
	0, 0, 0, 1073, 0, 0, 0, 1088, 0, 1089,
	0, 0, 0, 0, 1058, 0, 1091, 1099, 0, 1069,
	1070, 1076, 1075, 1071, 1094, 0, 1068, 1066, 1067, 1059,
	1060, 1061, 1062, 1064, 1065, 0, 0, 0, 1057, 2268,
	0, 0, 0, 1084, 1077, 0, 0, 0, 0, 0,
	0, 1074, 0, 0, 0, 0, 0, 0, 1079, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1093, 0, 0, 0, 1055,
	1056, 1072, 1085, 1086, 1087, 1095, 1096, 1097, 0, 0,
	0, 0, 1073, 0, 0, 0, 1088, 0, 0, 1080,
	1081, 1082, 1083, 1058, 0, 0, 1099, 0, 1063, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1057, 1092, 1100,
	0, 0, 0, 1077, 0, 0, 0, 0, 0, 0,
	1074, 0, 0, 0, 0, 1091, 0, 1098, 1069, 1070,
	1076, 1075, 1071, 1094, 0, 1068, 1066, 1067, 1059, 1060,
	1061, 1062, 1064, 1065, 0, 1090, 0, 0, 2233, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 1081,
	1082, 1083, 0, 0, 0, 0, 0, 1063, 1089, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1092, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 0, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 1093, 0, 0, 0, 1055, 1056,
	1072, 1085, 1086, 1087, 1095, 1096, 1097, 0, 0, 0,
	0, 1073, 0, 0, 0, 1088, 0, 1089, 0, 0,
	0, 0, 1058, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1057, 0, 0, 0,
	0, 1084, 1077, 0, 0, 0, 0, 0, 0, 1074,
	0, 0, 0, 0, 1091, 0, 1079, 1069, 1070, 1076,
	1075, 1071, 1094, 0, 1068, 1066, 1067, 1059, 1060, 1061,
	1062, 1064, 1065, 1093, 0, 0, 0, 2076, 0, 1072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 1081, 1082,
	1083, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1055, 1056, 0,
	1085, 1086, 1087, 1095, 1096, 1097, 1092, 1100, 0, 0,
	1073, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 1058, 0, 1091, 1099, 1098, 1069, 1070, 1076, 1075,
	1071, 1094, 0, 1068, 1066, 1067, 1059, 1060, 1061, 1062,
	1064, 1065, 0, 1090, 0, 1057, 2052, 0, 0, 0,
	1078, 1077, 0, 0, 0, 0, 0, 0, 1074, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 1081, 1082, 1083,
	1084, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 1100, 0, 0, 0,
	0, 0, 1093, 0, 0, 0, 0, 0, 1072, 0,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 1055, 1056, 0, 1085,
	1086, 1087, 1095, 1096, 1097, 0, 0, 0, 0, 1073,
	0, 0, 0, 1088, 0, 1089, 0, 0, 0, 0,
	1058, 0, 1091, 1099, 0, 1069, 1070, 1076, 1075, 1071,
	1094, 0, 1068, 1066, 1067, 1059, 1060, 1061, 1062, 1064,
	1065, 0, 0, 0, 1057, 1508, 0, 0, 0, 1084,
	1077, 0, 0, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 1055, 1056, 1072, 1085, 1086,
	1087, 1095, 1096, 1097, 0, 0, 0, 0, 1073, 0,
	0, 0, 1088, 0, 0, 1080, 1081, 1082, 1083, 1058,
	0, 0, 1099, 0, 1063, 2566, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1057, 1092, 1100, 0, 0, 0, 1077,
	0, 0, 0, 0, 0, 0, 1074, 0, 0, 0,
	0, 1091, 0, 1098, 1069, 1070, 1076, 1075, 1071, 1094,
	0, 1068, 1066, 1067, 1059, 1060, 1061, 1062, 1064, 1065,
	0, 1090, 1803, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 1081, 1082, 1083, 0, 0,
	0, 0, 0, 1063, 1089, 1873, 0, 0, 1872, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2565, 0, 0, 1092, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	1093, 0, 0, 0, 1055, 1056, 1072, 1085, 1086, 1087,
	1095, 1096, 1097, 0, 0, 0, 0, 1073, 0, 0,
	0, 1088, 0, 1089, 0, 0, 1776, 0, 1058, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1057, 0, 0, 0, 0, 1084, 1077, 0,
	0, 0, 0, 0, 0, 1074, 0, 0, 0, 0,
	1091, 0, 1079, 1069, 1070, 1076, 1075, 1071, 1094, 0,
	1068, 1066, 1067, 1059, 1060, 1061, 1062, 1064, 1065, 1093,
	0, 0, 1777, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 1081, 1082, 1083, 0, 0, 0,
	0, 0, 1063, 0, 0, 0, 0, 1606, 0, 0,
	0, 0, 0, 1055, 1056, 0, 1085, 1086, 1087, 1095,
	1096, 1097, 1092, 1100, 0, 0, 1073, 0, 0, 0,
	1088, 0, 0, 0, 1605, 0, 0, 1058, 0, 1091,
	1099, 1098, 1069, 1070, 1076, 1075, 1071, 1094, 0, 1068,
	1066, 1067, 1059, 1060, 1061, 1062, 1064, 1065, 0, 1090,
	0, 1057, 0, 0, 0, 0, 1078, 1077, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 1081, 1082, 1083, 1084, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 1055, 1056, 0, 1085, 1086, 1087, 1095, 1096,
	1097, 1092, 1100, 0, 0, 1073, 0, 0, 1093, 1088,
	0, 0, 0, 0, 1072, 0, 1058, 0, 0, 1099,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 0,
	1057, 0, 0, 0, 0, 1078, 1077, 0, 0, 0,
	0, 0, 0, 1074, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 1091, 0,
	0, 1069, 1070, 1076, 1075, 1071, 1094, 0, 1068, 1066,
	1067, 1059, 1060, 1061, 1062, 1064, 1065, 0, 0, 0,
	0, 1080, 1081, 1082, 1083, 1084, 0, 0, 0, 0,
	1063, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 1055, 1056, 0, 1085, 1086, 1087, 1095, 1096, 1097,
	1092, 1100, 0, 0, 1073, 0, 0, 1093, 1088, 0,
	0, 0, 0, 1072, 0, 1058, 0, 0, 1099, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 1057,
	0, 0, 0, 0, 1078, 1077, 0, 0, 0, 0,
	0, 0, 1074, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 593, 0, 0, 0, 0, 0, 1091, 0, 0,
	1069, 1070, 1076, 1075, 1071, 1094, 0, 1068, 1066, 1067,
	1059, 1060, 1061, 1062, 1064, 1065, 0, 0, 0, 0,
	1080, 1081, 1082, 1083, 1084, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	1055, 1056, 0, 1085, 1086, 1087, 1095, 1096, 1097, 1092,
	1100, 0, 0, 1073, 0, 0, 1093, 1088, 0, 0,
	0, 0, 1072, 0, 1058, 0, 0, 1099, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 1057, 0,
	0, 0, 0, 1078, 1077, 0, 0, 0, 0, 0,
	0, 1074, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 1091, 0, 0, 1069,
	1070, 1076, 1075, 1071, 1094, 0, 1068, 1066, 1067, 1059,
	1060, 1061, 1062, 1064, 1065, 0, 0, 0, 0, 1080,
	1081, 1082, 1083, 1084, 0, 0, 0, 0, 1063, 0,
	0, 0, 0, 1879, 0, 0, 0, 0, 1079, 1055,
	1056, 0, 1085, 1086, 1087, 1095, 1096, 1097, 1092, 1100,
	0, 0, 1073, 0, 0, 1093, 1088, 0, 0, 0,
	1874, 1072, 0, 1058, 0, 0, 1099, 1098, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2056, 0, 1090, 0, 1057, 0, 0,
	0, 0, 1078, 1077, 0, 0, 0, 0, 0, 0,
	1074, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 1091, 0, 0, 1069, 1070,
	1076, 1075, 1071, 1094, 0, 1068, 1066, 1067, 1059, 1060,
	1061, 1062, 1064, 1065, 0, 0, 0, 0, 1080, 1081,
	1082, 1083, 1084, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1092, 1100, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 0, 0,
	1072, 0, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 1055, 1056,
	0, 1085, 1086, 1087, 1095, 1096, 1097, 0, 0, 0,
	0, 1073, 0, 0, 0, 1088, 0, 1089, 0, 0,
	0, 0, 1058, 0, 1091, 1099, 0, 1069, 1070, 1076,
	1075, 1071, 1094, 0, 1068, 1066, 1067, 1059, 1060, 1061,
	1062, 1064, 1065, 0, 0, 0, 1057, 0, 0, 0,
	0, 1084, 1077, 0, 0, 0, 0, 0, 0, 1074,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 0, 0, 1072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 1081, 1082,
	1083, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1055, 1056, 0,
	1085, 1086, 1087, 1095, 1096, 1097, 1092, 1100, 0, 0,
	1073, 0, 0, 0, 1088, 0, 0, 0, 1832, 0,
	0, 1058, 0, 1091, 1099, 1098, 1069, 1070, 1076, 1075,
	1071, 1094, 0, 1068, 1066, 1067, 1059, 1060, 1061, 1062,
	1064, 1065, 0, 1090, 0, 1057, 0, 0, 0, 0,
	1078, 1077, 0, 0, 0, 0, 0, 0, 1074, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1839,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 1081, 1082, 1083,
	1084, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 1055, 1056, 0, 1085,
	1086, 1087, 1095, 1096, 1097, 1092, 1100, 0, 0, 1073,
	0, 0, 1093, 1088, 0, 0, 0, 0, 1072, 0,
	1058, 0, 0, 1099, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 1057, 0, 0, 0, 0, 1078,
	1077, 0, 0, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 1091, 0, 0, 1069, 1070, 1076, 1075, 1071,
	1094, 0, 1068, 1066, 1067, 1059, 1060, 1061, 1062, 1064,
	1065, 0, 0, 0, 0, 1080, 1081, 1082, 1083, 1084,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 1055, 1056, 0, 1085, 1086,
	1087, 1095, 1096, 1097, 1092, 1100, 0, 0, 1073, 0,
	0, 1093, 1088, 0, 0, 0, 0, 1072, 0, 1058,
	0, 0, 1099, 1098, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 1057, 0, 0, 0, 0, 1078, 1077,
	0, 0, 0, 0, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 1069, 1070, 1076, 1075, 1071, 1094,
	0, 1068, 1066, 1067, 1059, 1060, 1061, 1062, 1064, 1065,
	0, 0, 0, 0, 1080, 1081, 1082, 1083, 1084, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 1055, 1056, 0, 1085, 1086, 1087,
	1095, 1096, 1097, 1092, 1100, 0, 0, 1073, 0, 0,
	1093, 0, 0, 0, 0, 0, 1072, 0, 1058, 0,
	0, 1099, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 1057, 0, 0, 0, 0, 1078, 1077, 0,
	0, 0, 0, 0, 0, 1074, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1091, 0, 0, 1069, 1070, 1076, 1075, 1071, 1094, 0,
	1068, 1066, 1067, 1059, 1060, 1061, 1062, 1064, 1065, 0,
	0, 0, 0, 1080, 1081, 1082, 1083, 1084, 0, 0,
	0, 0, 1063, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 1055, 1056, 0, 1085, 1086, 1087, 1095,
	1096, 1097, 1092, 1100, 0, 0, 1073, 0, 0, 1093,
	0, 0, 0, 0, 0, 1072, 0, 1058, 0, 0,
	1099, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 1057, 0, 0, 0, 0, 1078, 1077, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1091,
	0, 0, 1069, 1070, 1076, 1075, 1071, 1094, 0, 1068,
	1066, 1067, 1059, 1060, 1061, 1062, 1064, 1065, 0, 0,
	0, 0, 1080, 1081, 1082, 1083, 1084, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	546, 1079, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 1092, 1100, 0, 0, 0, 0, 0, 1093, 0,
	551, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 0, 0, 0, 550, 1078, 0, 0, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 558, 559, 0,
	0, 0, 568, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 573, 553, 1091, 0,
	1303, 1069, 1070, 1076, 1075, 1071, 1094, 0, 1068, 1066,
	1067, 1059, 1060, 1061, 1062, 1064, 1065, 0, 0, 571,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 1311, 1300, 1330, 1289, 1321, 1320,
	1079, 0, 1291, 1290, 554, 0, 0, 0, 1332, 1331,
	0, 0, 0, 0, 0, 0, 0, 1093, 0, 0,
	555, 556, 0, 1072, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 0,
	0, 0, 0, 557, 564, 0, 1326, 0, 1318, 1317,
	0, 0, 0, 0, 0, 0, 561, 0, 1316, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1315, 1313, 1314, 0, 0, 0, 1091, 0, 0,
	1069, 1070, 1076, 1075, 1071, 1094, 0, 1068, 1066, 1067,
	1059, 1060, 1061, 1062, 1064, 1065, 1299, 560, 0, 0,
	0, 0, 0, 1304, 1302, 1305, 1306, 1307, 1308, 1309,
	0, 1329, 0, 0, 0, 0, 1303, 0, 1293, 1292,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 565, 575, 0, 0,
	0, 0, 0, 0, 1295, 0, 0, 0, 0, 0,
	1311, 1300, 1330, 1289, 1321, 1320, 1319, 0, 1291, 1290,
	1301, 0, 566, 0, 1332, 1331, 570, 0, 0, 0,
	0, 576, 0, 0, 0, 0, 563, 567, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 0, 569, 1433, 1431, 1432, 1435, 1434, 0, 0,
	0, 0, 1326, 0, 1318, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1310, 1297, 0, 0, 0, 1315, 1313, 1314,
	0, 0, 0, 1334, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1294, 0, 0, 0,
	1327, 1328, 1299, 0, 0, 0, 0, 0, 0, 1304,
	1302, 1305, 1306, 1307, 1308, 1309, 0, 1329, 0, 0,
	0, 0, 1298, 0, 1293, 1292, 0, 1333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 0, 1301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1310, 1297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1334,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 1327, 1328, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1298, 0,
	0, 0, 0, 1333,
}
var sqlPact = [...]int{

	667, -1000, 11, -1000, -1000, -1000, 179, -1000, -1000, -1000,
	-1000, 178, 176, 175, -1000, 170, 167, 166, 165, 164,
	161, 160, 158, 156, 155, 154, -1000, 153, -1000, -1000,
	-1000, -1000, 151, 150, 149, 148, 147, 144, 143, -1000,
	1279, 22216, 133, 132, 1361, -1000, 35814, 131, 124, 119,
	109, 1029, 108, 107, 25946, 997, 1182, 105, 104, 101,
	97, 96, 1012, 35476, 4125, 2646, 1163, 1675, 35135, 21875,
	1612, 2588, 34794, -1000, -1000, 34453, 93, 91, 88, 87,
	86, -1000, -1000, 34112, 84, 83, 79, 76, 75, 74,
	68, 64, 62, 61, 60, 53, 52, 51, -1000, 49,
	47, 46, -1000, 42838, 41, 39, 37, 1161, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 918, 120, -1000, 937, 596, 2044, 9075, 1103,
	1096, 1083, 1057, 1104, 37842, 35814, 36, -1, 35, -1000,
	2057, 707, 19116, 667, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25605, 25264,
	33771, 33430, 6533, 816, -1000, 8, 23568, 35814, -1000, 66,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14592,
	14213, 565, 66, -1000, -1000, -1000, -1000, -1000, 33089, -1000,
	32748, 32407, 1545, 32066, -1000, -1000, -1000, -1000, 31725, -1000,
	-1000, 1982, 1681, 1670, 24923, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 31387, 31046, 30705,
	30364, 30023, 541, -1000, -1000, -1000, 17401, -1000, -1000, -1000,
	-1000, 34, -1000, 27, -1000, 26, 25, 24, 23, -1000,
	22, 21, -1000, 20, 19, -1000, 16, 15, 29682, 925,
	1321, -1000, -1000, 9, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35814, -1000, 15645, -1000, 540, -1000, 1634, -1000,
	15645, -1000, 1319, -1000, -1000, -1000, -1000, -1000, 35814, -1000,
	-1000, -1000, -1000, -1000, -1000, 2215, 1241, 539, 29341, -1000,
	1530, -1000, 641, 841, -1000, -1000, -1000, 9777, 187, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1542, 21534,
	1288, 2011, 1978, 2214, 1489, 1965, 1956, 1922, 1919, 1832,
	2211, 1011, 2210, 1773, 1074, 2207, 1785, 1221, 717, 2198,
	1631, 1630, -1000, -1000, -1000, -1000, 980, -1000, -1000, -1000,
	27298, -1000, -1000, 863, 959, 937, -1000, -1000, -1000, 1561,
	1925, 1925, 1925, 2038, 343, 331, -1000, 120, -1000, 1252,
	-1000, 1215, -1000, -1000, -1000, 42316, -1000, -1000, 15645, 15645,
	15645, 15645, 15645, 1201, -1000, 581, -1000, 537, 536, 7629,
	-1000, -1000, 2177, -1000, -1000, -1000, 352, -1000, -1000, 15645,
	66, -1000, -1000, -1000, -1000, 535, 2186, -1000, 661, -1000,
	-1000, -1000, 647, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1656, 534, 533, 532, -1000, 531, -1000, -1000,
	530, 526, 519, 518, 517, 513, 512, 511, 509, 508,
	507, 505, 498, 494, 487, 1106, -1000, 675, -1000, -1000,
	675, 675, -1000, 464, 464, 466, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 464, -1000, -1000, -1000, 625, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 486, 1387, -1000, -1000, 1387, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 810, 37166, 6, 35814, -1000, 485, 6,
	-1000, -1000, 484, -1000, 10128, 10128, -1000, -1000, -1000, 15645,
	-1000, 1935, -1000, 3832, -170, 342, 621, -1000, 18087, 20832,
	-1000, -1000, 1031, 1736, 859, -1000, 1052, 1734, 587, -1000,
	1147, -1000, 905, 1732, -152, 1680, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 22554, 23568, 8, -11, -1000, -1000, -1000,
	6183, 42316, -1000, 42316, -1000, 886, 19802, 66, -1000, -1000,
	-1000, -1000, 483, 1368, 660, 1366, -1000, 367, -1000, 29000,
	660, 1362, -1000, -1000, -1000, 27298, -1000, 35814, -1000, 35814,
	-1000, 954, -1000, 37504, 125, 1728, -1000, -1000, 125, 1726,
	-1000, 118, 1724, -1000, -1000, 1237, 1716, -1000, -11, 1714,
	-1000, -1000, 15645, -12, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 707, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 28659, 22892, 1277, 538, 42316, 2089,
	43092, 22554, 42316, 22892, -1000, -1000, 35814, -1000, 15645, -1000,
	2088, 1491, 5, -1000, -1000, -1000, -1000, -1000, 1399, 1539,
	779, 868, 9777, 9777, 1879, -1000, 184, 6533, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 28318, -1000, -1000, -1000,
	1244, 35814, -1000, -1000, 1655, -1000, 22892, 35814, -1000, 35814,
	-1000, 35814, -1000, 35814, -1000, 35814, -1000, -1000, -1000, -1000,
	-1000, 3470, -1000, 1652, -1000, -1000, 35814, -1000, 1396, -1000,
	-1000, -1000, 27980, 27639, -1000, 1028, 858, -1000, -1000, 127,
	-1000, 35814, 1988, 640, -1000, 1561, 1458, 1648, 714, 1290,
	1501, 13834, 1509, 15645, 120, -1000, -1000, 120, 120, 8696,
	-1000, -1000, -1000, 35814, -1000, 42926, 43092, 6533, 838, 15645,
	15645, 15645, 15645, 15645, 15645, 15645, 15645, 15645, 15645, 15645,
	15645, 15645, 15645, 15645, 15645, 15645, 15645, 15645, 15645, 15645,
	15645, 15645, 15645, 15645, 15645, 15645, 15645, 15645, 15645, 15645,
	15645, 1451, 15645, 809, 15645, 15645, 15645, 15645, 1346, 1189,
	398, 1227, -1000, 2126, 2126, 2126, 42574, 42574, 452, 581,
	-1000, 15645, -1000, 221, 15645, 331, 40628, 7, 7264, -1000,
	-1000, -1000, 13483, 668, 42316, 66, 6885, -1000, 2174, 1016,
	1622, 1587, 482, 562, 561, 557, 502, 15645, 15645, 13132,
	12753, 12374, 16347, 11995, 15645, 7994, 15645, 15645, 15645, 15645,
	11616, 11237, -1000, 481, -1000, -1000, -1000, -1000, 2171, -1000,
	-1000, 2169, -1000, 836, 835, 2168, -1000, 5, -1000, 37166,
	-1000, 35814, 6, 2085, 35814, 15645, 78, -1000, 41353, -1000,
	78, -13, 42316, 1487, 1461, 19459, 1422, 1223, 1223, 1223,
	-1000, 477, 574, 621, 5472, 10858, -1000, 26284, 1247, 219,
	330, 17744, 1935, -1000, 35814, -22, 1067, -1000, 24582, 2027,
	1969, 1924, 27298, 2060, 221, 1968, 1629, 806, 27298, 1960,
	799, 2050, 221, 1628, 797, 35814, 6533, 1945, 617, -1000,
	35814, -1000, -1000, -1000, 1623, -20, -1000, -1000, 24244, 2083,
	1711, -1000, 1120, -1000, 1701, 2081, 35814, 1318, 1358, -1000,
	-1000, 846, 1700, 663, 379, 2078, 379, 20146, -1000, 35814,
	-1000, 35814, -1000, -1000, 35814, -1000, 35814, -1000, 35814, 35814,
	-1000, 35814, 35814, -26, 4435, 23906, 794, -1000, 699, 24244,
	465, -29, -1000, 903, -1000, -1000, -1000, -1000, 321, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 466, 1106, 464, 464, 464,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 625, -1000, -1000,
	675, 675, 675, -1000, -1000, -27, -1000, 1621, 642, -31,
	731, 5, -1000, 1387, -1000, 1218, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2185,
	-1000, 2146, -1000, -1000, 2164, 1, -1000, 1, -1000, 6533,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35814, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 212, -1000, -1000, -1000,
	-1000, -1000, -1000, 35814, 35814, 35814, -1000, 27298, 662, 1650,
	-1000, 1976, 1458, 1648, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 42316, -1000, 389, -1000, -1000, 42316, 972, 1529,
	-1000, 1529, -4, -1000, 41224, 1473, 35814, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 638, 1442,
	1442, 822, 822, 822, 822, 2219, 1584, 215, 480, 4519,
	4519, 4519, 4519, 4519, 4519, 4519, 4519, 235, 467, 467,
	235, 235, 235, 235, 235, 4519, 4519, 4519, 42574, 42445,
	253, 15645, 15645, 787, 1183, 398, 253, 15645, 253, 253,
	253, 253, -1000, 1206, -1000, -1000, -1000, -1000, 1617, 454,
	16347, 16347, -1000, -1000, -1000, 7629, 17047, -1000, -1000, -1000,
	-1000, 453, 15645, -1000, 40757, -223, 329, -140, -1000, 15645,
	556, -100, -1000, 912, -1000, 15645, -1000, 3, 15645, 15645,
	15645, 324, -1000, 323, -1000, 783, -1000, 776, 775, 771,
	-1000, 451, 1152, 450, 449, 15645, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 42187, 38576, 322, -1000, 1616, -140,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 319, -1000, 317,
	-1000, 42058, -140, 316, 38556, -1000, 16347, 16347, 16347, 7629,
	448, 315, -1000, 41035, -1000, 41869, 10479, 10479, 10479, 312,
	41740, 15645, -140, 38524, 4127, 3674, -32, -37, -1000, -39,
	-1000, 2162, -40, 310, 636, 635, 309, -1000, -1000, 447,
	-42, -45, 663, 10128, 18773, 6533, -1000, 663, -1000, 15645,
	19459, 19459, 1310, 1456, 19459, -1000, -1000, -1000, -1000, 26284,
	490, 621, 26284, -1000, 2160, 1471, 308, -1000, -1000, -1000,
	35814, 445, -1000, 621, 307, 1005, 35814, 35814, 35814, -1000,
	-1000, 1354, 36828, 1353, 43092, 35814, -1000, 443, 442, 1467,
	1460, 35814, 35814, 36490, 36152, 35814, 1018, 221, -1000, 632,
	441, 35814, 1026, 631, 35814, 221, -1000, 440, 35814, 1008,
	-1000, 630, 1566, 1300, -1000, 884, 1615, 35814, 306, -47,
	-10, 43092, -1000, -1000, -1000, -1000, -1000, 35814, 478, 35814,
	221, 35814, 2183, 35814, 221, 35814, 1699, 1749, 600, 35814,
	1501, 15645, 1094, -1000, 18430, 687, 35814, 985, 65, -1000,
	-1000, -1000, 610, 35814, -1000, -1000, 125, 125, -1000, 118,
	1237, -11, -1000, -1000, -1000, 35814, 22554, -50, -1000, -1000,
	43092, -1000, 568, 808, -1000, 2159, 657, 22554, 35814, 9777,
	9777, -1000, 1493, -1000, -1000, 1027, -1000, 1095, -1000, -1000,
	-1000, -1000, 9777, -1000, -23, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1254, 1216, -1000, -1000, -1000, 972, -1000, 15645,
	2157, -1000, -1000, -1000, 8696, -1000, -1000, -1000, 35814, -161,
	15645, 253, 253, 15645, 16347, 16347, -1000, 253, -1000, -1000,
	-1000, -1000, -1000, 1613, 438, 15645, 43092, 3708, 3398, -67,
	-1000, 15645, -14, -1000, 15645, -1000, 40439, -1000, -1000, 558,
	1746, -1000, 15645, 41611, 304, 9426, -1000, 41482, -2, -2,
	-1000, 2182, 1378, 1149, 1023, 961, 2155, -1000, 20489, 666,
	1242, 40350, 42926, 43092, -1000, 15645, -1000, -1000, 1604, 15645,
	-1000, 42926, 43092, 16347, 16347, 16347, 16347, 16347, 16347, 16347,
	16347, 16347, 16347, 16347, 16347, 16347, 16347, 16347, 16347, 16347,
	16347, 16347, 1452, 16347, 2119, 2119, 2119, -15, 15645, -1000,
	1643, 1604, 15645, 15645, 43092, 303, 302, 301, -1000, 15645,
	-140, 15645, 15645, 15645, -1000, -1000, -1000, 300, -1000, 2154,
	-1000, -1000, -1000, -1000, 465, -1000, -1000, 1580, -1000, -103,
	-1000, 1935, -1000, 1580, 42316, -1000, 1310, -1000, 436, 15645,
	19459, -1000, 552, -1000, -68, -1000, 26284, -1000, 546, -221,
	-1000, 609, -1000, 621, 434, 35814, 26284, -1000, -1000, -1000,
	768, 763, 1698, -1000, 1349, -1000, 691, -1000, 1065, 15645,
	4939, 432, 431, 1193, -1000, 1697, 1237, 1691, 1237, -1000,
	-22, 1020, -1000, 21182, 15645, -1000, 755, 21182, -1000, -1000,
	15645, -1000, 754, 21182, 657, 1601, 867, -1000, 876, -1000,
	1548, -1000, 24244, 428, 35814, 425, -1000, 424, -1000, 660,
	-1000, 411, 35814, 1430, 600, 23230, -1000, 660, 985, -1000,
	42316, -1000, 985, 8345, 1940, -80, -1000, -1000, -1000, 663,
	20146, 19459, 15645, -83, -1000, -1000, -1000, -1000, -23, 1912,
	1912, -1000, 2148, -1000, 545, 299, -1000, 26960, -1000, -23,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35814, 1543, 6533,
	35814, 35814, 1266, 40161, -1000, 1967, 6533, 2092, 253, 2886,
	269, 15645, 43092, 42703, -86, 15645, 15645, -1000, 298, 15645,
	543, 42316, -1000, -1000, -1000, 42316, 15645, 2128, 15645, 297,
	292, 287, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	286, -1000, -1000, 38180, 15645, 285, -1000, 267, 265, 42316,
	1643, 42316, -1000, -1000, 703, 703, 953, 953, 953, 953,
	2119, 423, 773, 1219, 2631, 2631, 2631, 1071, 694, 694,
	2631, 2631, 2631, 1599, 1440, 410, 39118, 15645, 255, -1000,
	-1000, 42316, 42316, 254, -1000, -1000, -1000, -140, 289, 40032,
	39843, -1000, 252, 239, 1577, 2028, -1000, 19459, 1577, -1000,
	35814, 42316, -1000, -170, -1000, 2137, -1000, -1000, 1471, -1000,
	5832, 26284, 35814, -107, -1000, 35814, 35814, 35814, 1689, -1000,
	1443, -1000, 39754, -110, -1000, 334, 2002, 15645, -1000, -1000,
	409, 4939, 35814, -1000, 1468, 1481, 724, 35814, -1000, 35814,
	-1000, 35814, 35814, 35814, -1000, 406, 66, -116, 35814, -1000,
	-119, 35814, -1000, -1000, 22554, 825, -1000, 1162, 1559, -1000,
	4939, 405, 35814, 24244, 2077, -1000, 4939, 1314, 1435, 600,
	23230, -1000, 846, -1000, -1000, -60, -1000, 430, 221, 985,
	-1000, -61, 42316, 608, 1845, -1000, 1827, 503, -1000, -1000,
	-73, 402, -1000, 607, 602, -1000, -89, -1000, 567, -1000,
	-1000, -1000, -1000, -1000, -1000, 1967, 15645, 15645, 42703, -122,
	-1000, 253, 253, -1000, 39565, -1000, 42316, -1000, 41482, -1000,
	-1000, -1000, -1000, 1153, -1000, 39436, -1000, -1000, -1000, -1000,
	16347, 1595, 400, 43092, 39247, -1000, -1000, 15645, -1000, -1000,
	-1000, -1000, 664, 15645, 15645, 1935, 664, -127, 621, -1000,
	-1000, -1000, 2117, -1000, -129, -1000, -1000, -1000, -1000, 35814,
	-1000, 35814, -1000, 6533, 35814, 1598, 1341, -1000, -1000, 1450,
	399, 16347, 35814, -1000, 1151, 4939, 1967, 66, 6533, 1967,
	39158, 6885, -137, -139, 1338, -1000, 1331, 15645, -1000, 43092,
	1237, 1237, -1000, 752, 741, 15645, 737, -1000, 735, -1000,
	-109, 21182, -1000, -1000, 2025, 1198, -142, 4939, -148, 236,
	221, -150, 35814, -1000, 600, 23230, -1000, 1749, 1796, 35814,
	1920, -1000, -1000, 398, 396, 395, -1000, 26622, 26622, 22554,
	22554, 1543, -1000, 35814, -1000, 253, 253, -1000, -1000, 234,
	1242, 2023, -1000, 38707, 16347, 43092, -153, -1000, 38969, -1000,
	35814, 42316, -140, -1000, -1000, 26284, 468, -1000, -1000, 1403,
	-1000, -1000, 35814, 1344, -1000, -1000, 15645, 39118, 393, 1548,
	391, -1000, -1000, -1000, -1000, -1000, -1000, 2002, 3, -1000,
	1061, -1000, -1000, 42316, 1998, -1000, -1000, 35814, 35814, -2,
	387, 382, -1000, 1136, 35814, 1151, -163, -1000, 1548, -1000,
	1151, 378, 23230, -1000, 1430, 832, -168, 35814, -1000, 22554,
	22554, -1000, -171, -1000, -1000, -1000, -173, -1000, 1080, 15645,
	38707, -176, -1000, -1000, -125, -1000, 2068, -1000, -1000, -1000,
	-1000, 1688, 38840, 1385, 35814, -1000, 35814, 1967, 233, 35814,
	695, 6533, -1000, -1000, 217, 15645, 15645, 377, 374, 373,
	1548, 1151, -1000, 1548, 4939, -1000, 1435, 945, -1000, 663,
	-1000, -178, -181, -1000, -1000, 214, 15996, 15996, -140, -1000,
	35814, 370, 1677, -1000, 1287, 1296, 213, -184, -1000, -1000,
	367, -1000, 15645, -1000, 2128, -186, -187, 35814, 35814, 35814,
	-1000, 1548, -1000, -189, -1000, 20146, -1000, 657, 657, -1000,
	-1000, -1000, 16697, 1229, 987, 40946, -1000, -1000, -1000, 35814,
	-1000, 1309, 1294, 938, -1000, -1000, -1000, -1000, -1000, 1385,
	42316, -1000, -1000, -192, -194, -195, -1000, 1151, -165, -1000,
	-1000, 2095, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1805,
	-1000, 711, 1281, 1281, 1287, 357, 356, 1217, 1548, -1000,
	15294, -1000, 2103, -1000, -1000, 1453, -1000, -1000, 1132, 1131,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 194, 6533,
	189, 6533, -1000, 685, -1000, 681, 354, 1413, -62, 14943,
	849, 347, -149, -1000, -197, -1000, 42316, -1000, 349, -1000,
	14943, 1132, -1000, 14943, 14943, -202, -1000, -1000, -213, -1000,
	-63, 1131, -162, -1000, -1000, 1131, -1000,
}
var sqlPgo = [...]int{

	0, 2621, 2620, 1765, 2104, 2619, 2618, 2617, 2614, 2611,
	2608, 2607, 2606, 2605, 2604, 2596, 2594, 2593, 2591, 2588,
	2586, 2585, 2582, 2579, 2091, 2576, 2081, 2573, 2565, 2564,
	2558, 2557, 33, 2552, 2551, 2071, 2550, 2547, 2545, 2539,
	2535, 2532, 2062, 2531, 2021, 2527, 2525, 2516, 2514, 2513,
	2016, 2511, 92, 112, 2014, 2510, 2509, 1996, 1969, 1963,
	2507, 1936, 2505, 2504, 1818, 1816, 2499, 93, 2496, 2495,
	2494, 1804, 1795, 2493, 2492, 2490, 152, 2488, 1789, 2487,
	2484, 2483, 2482, 2481, 2480, 2479, 2478, 2477, 2474, 2473,
	2471, 2468, 2466, 2460, 2459, 2454, 2453, 2451, 161, 2446,
	2444, 1757, 1752, 2442, 2439, 36, 37, 14, 53, 96,
	144, 3259, 142, 2436, 2435, 2432, 2428, 2426, 2420, 21,
	100, 83, 2415, 202, 2412, 2410, 46, 50, 29, 19,
	67, 87, 2408, 2404, 2278, 34, 2403, 2402, 133, 2401,
	85, 23, 2390, 153, 149, 113, 118, 2399, 2397, 2392,
	51, 117, 16, 7, 4, 3, 1, 2384, 2, 5,
	2382, 2379, 17, 81, 158, 2378, 27, 79, 2377, 2376,
	130, 2369, 56, 88, 1626, 99, 119, 328, 97, 2363,
	57, 18, 60, 2353, 2344, 157, 41, 78, 146, 111,
	2341, 52, 159, 128, 74, 132, 137, 2340, 2339, 2338,
	124, 2337, 121, 105, 2335, 2334, 72, 2330, 98, 138,
	2329, 141, 109, 2326, 2324, 82, 2319, 122, 2318, 2317,
	156, 147, 110, 26, 66, 63, 13, 1603, 1597, 134,
	95, 43, 59, 2314, 796, 1240, 1077, 40, 101, 77,
	75, 31, 54, 80, 140, 35, 2313, 2311, 139, 2310,
	2308, 2307, 2305, 2304, 103, 2301, 2298, 2297, 65, 44,
	48, 120, 39, 108, 127, 107, 151, 102, 2296, 68,
	125, 2293, 243, 2291, 2288, 1518, 114, 2287, 2286, 2285,
	1429, 1176, 1146, 362, 2284, 2281, 1069, 977, 2280, 2279,
	71, 2275, 116, 106, 86, 145, 131, 58, 2273, 123,
	25, 2271, 28, 22, 0, 764, 115, 2270, 126, 61,
	2267, 2266, 2265, 2264, 32, 11, 6, 9, 12, 10,
	49, 30, 2263, 2261, 129, 90, 62, 2260, 154, 2259,
	2258, 2255, 45, 2254, 20, 2252, 15, 2251, 2250, 24,
	8, 2244, 2241, 150, 2239, 89, 2234, 2003, 2231, 148,
	2228, 2223, 2006, 2219, 38, 104,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 121, 121, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 118, 118, 123, 123, 123, 125, 125,
	122, 122, 117, 117, 24, 24, 65, 65, 108, 58,
	58, 58, 302, 302, 303, 303, 104, 104, 105, 105,
	105, 105, 106, 106, 107, 107, 107, 34, 34, 34,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 42, 42, 43, 43, 43, 43, 43,
	43, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 49, 49, 49, 47, 47, 47, 46, 46,
	46, 45, 45, 45, 48, 48, 48, 176, 176, 175,
	175, 179, 179, 50, 50, 50, 50, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 53, 53, 53, 53, 53, 53, 53,
	271, 271, 270, 51, 51, 246, 246, 54, 54, 201,
	201, 55, 55, 55, 55, 55, 56, 56, 66, 66,
	343, 343, 343, 347, 347, 348, 348, 349, 349, 349,
	349, 349, 349, 349, 345, 345, 61, 61, 61, 61,
	62, 62, 62, 63, 63, 103, 103, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 29, 30, 30, 31,
	31, 32, 32, 72, 72, 72, 74, 71, 71, 71,
	73, 73, 73, 73, 75, 75, 76, 76, 76, 76,
	76, 77, 77, 296, 294, 294, 295, 295, 148, 148,
	148, 148, 148, 149, 149, 149, 301, 301, 301, 301,
	301, 301, 300, 300, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 90, 90, 90, 98, 98, 98, 98, 98, 98,
	98, 79, 79, 84, 84, 84, 84, 84, 80, 80,
	85, 85, 86, 86, 87, 87, 87, 87, 87, 87,
	81, 81, 81, 81, 89, 89, 89, 89, 88, 88,
	94, 94, 94, 94, 94, 94, 91, 91, 91, 91,
	92, 92, 92, 95, 95, 95, 95, 82, 82, 83,
	83, 96, 96, 97, 97, 97, 97, 97, 93, 93,
	93, 344, 344, 346, 346, 59, 59, 38, 38, 39,
	39, 150, 150, 151, 151, 225, 225, 225, 225, 152,
	152, 124, 124, 124, 153, 153, 154, 154, 155, 155,
	155, 157, 157, 158, 158, 159, 159, 156, 156, 156,
	224, 312, 312, 313, 313, 313, 313, 313, 313, 314,
	314, 314, 314, 314, 314, 314, 310, 310, 311, 308,
	308, 309, 309, 309, 309, 350, 350, 223, 223, 162,
	162, 315, 315, 315, 315, 316, 316, 316, 316, 316,
	319, 318, 317, 317, 317, 317, 317, 257, 257, 257,
	100, 100, 40, 40, 40, 130, 130, 41, 41, 37,
	37, 37, 205, 205, 166, 166, 262, 262, 262, 141,
	141, 119, 119, 119, 17, 13, 13, 13, 13, 13,
	13, 23, 23, 21, 21, 206, 206, 207, 207, 60,
	60, 64, 64, 69, 69, 99, 99, 99, 99, 99,
	99, 25, 25, 25, 25, 33, 33, 33, 33, 68,
	68, 352, 352, 137, 137, 137, 137, 138, 138, 220,
	220, 221, 221, 353, 353, 222, 222, 222, 132, 131,
	133, 133, 36, 36, 36, 126, 126, 127, 127, 128,
	128, 129, 129, 354, 354, 57, 57, 57, 102, 102,
	144, 144, 217, 217, 217, 219, 219, 218, 218, 218,
	191, 191, 191, 101, 101, 171, 171, 181, 181, 182,
	182, 268, 183, 67, 67, 111, 111, 109, 109, 109,
	109, 109, 109, 109, 109, 110, 110, 110, 112, 112,
	112, 112, 112, 112, 112, 115, 115, 115, 116, 116,
	116, 114, 114, 325, 325, 325, 328, 328, 324, 326,
	326, 327, 327, 351, 351, 192, 192, 192, 161, 160,
	160, 164, 164, 163, 165, 165, 261, 261, 261, 189,
	189, 188, 188, 188, 188, 210, 210, 208, 208, 209,
	209, 213, 213, 214, 214, 214, 215, 215, 216, 216,
	187, 187, 242, 242, 212, 212, 211, 113, 113, 113,
	170, 170, 170, 172, 172, 232, 232, 232, 233, 233,
	231, 231, 231, 231, 263, 263, 263, 263, 263, 263,
	263, 263, 341, 341, 341, 342, 342, 260, 260, 264,
	264, 264, 264, 264, 264, 258, 258, 258, 258, 259,
	259, 269, 269, 195, 195, 195, 195, 193, 193, 194,
	194, 265, 265, 265, 265, 190, 190, 266, 266, 266,
	226, 226, 272, 272, 272, 290, 290, 169, 169, 169,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 274, 274, 274, 274, 276, 276, 276, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 289, 289, 289, 289,
	289, 277, 277, 284, 284, 285, 285, 286, 287, 278,
	278, 279, 279, 280, 281, 288, 288, 288, 288, 292,
	292, 282, 282, 282, 282, 282, 283, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 203, 203, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 236, 236, 236, 236,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 320, 320, 320, 320, 320, 320, 320, 320, 322,
	322, 323, 323, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 329, 329, 330, 330, 332, 332, 333,
	333, 334, 335, 335, 335, 336, 337, 337, 331, 331,
	338, 338, 338, 339, 339, 340, 340, 340, 340, 340,
	248, 248, 249, 250, 256, 256, 256, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 139, 139, 139, 139, 139, 178, 178,
	177, 177, 245, 245, 243, 243, 247, 247, 196, 196,
	291, 291, 291, 291, 291, 291, 291, 197, 197, 197,
	204, 198, 198, 199, 199, 199, 199, 199, 239, 240,
	200, 200, 200, 241, 241, 251, 255, 255, 254, 253,
	253, 252, 252, 229, 229, 230, 230, 228, 227, 186,
	186, 185, 185, 184, 184, 355, 355, 180, 180, 267,
	267, 267, 267, 173, 173, 146, 146, 174, 174, 142,
	142, 145, 145, 143, 143, 143, 143, 167, 167, 168,
	168, 140, 140, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 293, 293, 293, 244, 134, 134,
	134, 135, 135, 136, 136, 298, 298, 298, 299, 299,
	299, 299, 297, 297, 297, 297, 297, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 1, 3, 1,
	2, 2, 3, 2, 2, 5, 3, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 3, 1, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 1, 4, 7, 1,
	3, 2, 4, 6, 6, 3, 5, 3, 2, 6,
	3, 3, 4, 4, 3, 3, 1, 3, 3, 1,
	1, 2, 1, 1, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 3, 3, 4, 4, 3, 4, 4, 4, 3,
	2, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 2, 3, 3, 3, 2, 3,
	4, 3, 5, 3, 4, 5, 2, 3, 3, 3,
	4, 2, 3, 4, 3, 3, 3, 4, 4, 4,
	4, 2, 3, 7, 7, 7, 4, 5, 5, 5,
	5, 2, 0, 2, 0, 3, 2, 8, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 1, 0, 9, 9, 6, 7,
	5, 3, 5, 1, 3, 1, 1, 10, 11, 9,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 2, 4, 7, 3, 3, 0, 6, 3, 11,
	14, 4, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 2, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 0, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 3, 2, 0, 1, 3, 1,
	1, 3, 5, 1, 1, 3, 3, 1, 2, 4,
	4, 2, 3, 5, 5, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 1,
	0, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 1, 0, 2, 4, 2, 5,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 6, 3, 3, 1,
	5, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 3, 3, 1, 3, 3,
	1, 3, 3, 1, 1, 3, 3, 1, 1, 6,
	6, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 5, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 1, 1, 2, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 379, -4, -24, -26, -29, -34,
	-35, -55, -42, -43, -44, -54, -50, -56, -57, -58,
	-59, -51, -65, -64, -66, -69, -67, -60, -61, -70,
	-78, -99, -100, -101, -102, -5, -6, -7, -8, -9,
	24, 35, -27, -28, 48, -30, 72, -36, -37, -38,
	-39, 74, -40, -41, 95, -327, 99, -45, -46, -47,
	-49, -48, 103, 110, 113, 135, 144, 230, 236, 257,
	259, 261, 268, -109, -111, 255, -62, -63, -71, -72,
	-73, -74, -103, 280, -79, -80, -81, -82, -83, -84,
	-85, -86, -87, -88, -89, -90, -91, -92, -93, -94,
	-95, -96, -97, 283, -25, -33, -68, 323, -11, -12,
	-15, -14, -16, -13, -20, -22, -19, -21, -23, -17,
	-18, -10, 112, -325, -112, -110, 376, 256, 332, 36,
	293, 62, 106, 263, 348, 355, -115, -113, -114, -116,
	273, 340, 303, 380, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 2, 303, 343,
	88, 152, 241, -343, 2, -174, 303, 88, -143, -134,
	369, 4, -304, -306, 20, 21, 24, 34, 35, 36,
	41, 45, 48, 49, 56, 61, 62, 63, 68, 65,
	66, 67, 70, 72, 73, 76, 77, 78, 86, 87,
	89, 91, 95, 97, 99, 102, 103, 105, 110, 112,
	111, 113, 123, 124, 129, 131, 136, 142, 143, 144,
	145, 153, 156, 158, 151, 168, 169, 170, 174, 175,
	176, 179, 178, 183, 184, 187, 188, 191, 193, 195,
	196, 199, 197, 201, 202, 204, 203, 209, 211, 212,
	214, 217, 220, 223, 226, 227, 228, 229, 230, 232,
	234, 236, 238, 239, 240, 241, 242, 244, 245, 247,
	248, 249, 250, 251, 255, 253, 254, 256, 257, 258,
	259, 261, 263, 264, 266, 281, 282, 294, 268, 269,
	270, 271, 272, 276, 274, 277, 278, 280, 283, 285,
	288, 292, 293, 295, 298, 299, 296, 291, 302, 304,
	305, 306, 307, 308, 309, 310, 311, 318, 319, 323,
	324, 325, 326, 329, 330, 331, 332, 334, 337, 338,
	339, 344, 349, 350, 351, 352, 353, 29, 37, 38,
	39, 40, 42, 43, 46, 47, 52, 53, 54, 57,
	90, 92, 93, 109, 114, 115, 125, 126, 127, 137,
	139, 146, 147, 150, 157, 159, 160, 161, 162, 163,
	165, 172, 173, 181, 198, 208, 210, 221, 225, 233,
	235, 243, 265, 275, 286, 287, 297, 300, 313, 314,
	315, 320, 321, 336, 340, 341, 379, 379, 2, 169,
	240, -142, -134, 88, 379, 379, 379, 379, 303, 2,
	333, 343, -205, 88, 328, 379, 379, -134, 236, 22,
	2, 97, 156, 331, 330, 22, 232, 274, 305, 307,
	2, 379, 379, 379, 379, 379, 2, 343, 303, 152,
	88, 333, -134, 2, -53, 2, 376, -52, -4, -35,
	-44, -54, -50, -24, -26, -42, -58, -57, -59, -61,
	-65, -64, -67, -71, -72, -78, -101, -102, 280, 112,
	-347, 2, 22, -348, -349, 74, 103, 135, 273, 156,
	97, 330, 303, 2, 169, 2, -134, 2, -343, 2,
	169, 2, -347, 2, -134, 2, -138, 2, 268, -134,
	379, 379, 379, 379, 379, 188, 56, 265, 277, -76,
	319, -75, 313, -296, -77, 2, -175, 199, -134, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 2, -98, 277, 35,
	56, 22, 61, 89, 136, 152, 153, 175, 69, 70,
	239, 188, 170, 318, 176, 278, 304, 319, 74, 334,
	308, 111, 4, 88, 199, 279, 313, 379, 379, 379,
	-351, 2, 303, 270, 283, -110, -112, -111, -163, -164,
	327, 164, 108, 219, -109, -111, 2, -325, -98, 277,
	2, 56, 22, -294, 2, -234, 215, -236, 367, 368,
	362, 205, 354, -248, 94, -238, -251, 109, 265, 376,
	-142, -237, 382, 9, -322, -111, 30, -249, -250, 50,
	-134, 7, 8, 5, 6, -140, -274, -244, -283, 322,
	116, 207, -320, -321, 4, -304, -298, -275, -285, -279,
	-282, 165, 59, 80, 81, 84, 82, 85, 279, 333,
	51, 29, 114, 115, 225, 233, 300, 320, 321, 146,
	208, 147, 57, 137, 181, 102, 38, 40, 42, 43,
	52, 53, 90, 92, 93, 125, 126, 127, 157, 159,
	160, 161, 162, 163, 210, 243, 286, 297, 314, 315,
	341, -305, -286, -287, -280, -281, 75, 117, 134, 155,
	148, 167, 171, 182, 185, 194, 200, 222, 224, 262,
	284, -288, -352, 2, 319, 319, 2, -352, 2, -352,
	2, -137, 2, 319, 316, -328, 244, -324, -134, -328,
	379, 379, 381, 379, -160, -161, 2, 22, 100, 376,
	2, -263, 2, 374, -265, -142, -111, -264, 376, 216,
	-3, 2, -265, 146, -142, 2, -265, 146, -142, 2,
	-134, 2, -145, 146, -142, -297, 4, -304, -306, -305,
	-307, 59, 22, 25, 26, 27, 28, 30, 31, 32,
	33, 44, 50, 51, 55, 58, 60, 69, 74, 79,
	80, 82, 81, 83, 84, 85, 94, 96, 98, 100,
	101, 104, 106, 108, 116, 118, 130, 132, 133, 135,
	138, 140, 149, 152, 154, 164, 166, 177, 180, 186,
	189, 190, 205, 206, 207, 213, 215, 216, 218, 219,
	231, 237, 246, 260, 273, 279, 289, 301, 303, 312,
	316, 317, 322, 327, 328, 333, 335, 342, 343, 345,
	346, 347, 348, 316, 381, -174, -167, -134, -228, -227,
	378, -234, 2, -234, 2, 133, 376, -185, -186, -227,
	-228, 2, -175, 146, -134, 146, 2, -175, 2, 152,
	-134, 146, 2, -134, 22, 133, 2, 166, 2, 166,
	2, -266, 2, -265, -176, 146, 2, -175, -176, 146,
	2, -146, 146, 2, -145, -134, 146, 2, -167, 146,
	2, -201, 376, -271, 2, -270, -299, 4, -304, -306,
	-305, 340, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 277, 215, 381, -175, -234, -246,
	376, 133, -234, 215, -134, 2, 281, 2, 376, -76,
	54, 319, -221, 2, -222, -131, -132, -133, 168, 238,
	242, 353, 316, 359, 133, -294, -179, 378, -98, 2,
	-302, 2, -300, 9, -299, 5, 281, 2, 239, 278,
	56, 133, 2, 2, -344, 2, 215, 133, 2, 133,
	2, 133, 2, 133, 2, 133, 2, 2, 239, 278,
	2, 130, 2, 318, 2, 2, 133, 2, 168, 238,
	294, 2, 303, 343, 2, 133, 133, 353, 2, -190,
	-265, 303, 353, 22, -163, -164, -211, -188, 130, -208,
	-209, 186, 118, 213, -192, 22, 100, -192, -192, 45,
	377, 377, -98, 281, 2, 10, 11, 58, 34, 367,
	368, 369, 370, 128, 371, 372, 365, 366, 364, 357,
	358, 361, 290, 23, 71, 360, 359, 64, 192, 267,
	119, 120, 121, 122, 252, 13, 14, 15, 27, 218,
	185, 354, 148, 284, 362, 16, 17, 18, 167, 37,
	149, -139, -147, -234, -234, -234, -234, -234, 224, -184,
	-229, 374, -111, 376, 376, -111, -234, -177, 376, 7,
	-111, -243, 374, -252, -234, -185, 376, 5, 376, 5,
	-329, 349, 130, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 235, -292, 344, -292, -292, -276, 376, -276,
	-277, 376, -276, 350, 355, 376, -220, -221, -220, 316,
	-138, 381, -328, -168, 376, 376, -180, -267, -234, 369,
	-180, -177, -234, 75, -195, 171, 200, 134, 182, 262,
	155, 7, -53, -231, 382, 376, 369, -260, 355, -111,
	-264, 376, -263, -142, 376, -121, 253, -120, 21, 24,
	103, 338, 109, 291, 309, 112, 269, 253, 109, 112,
	253, 291, 309, 269, 253, 109, 382, 112, -302, -143,
	381, -297, 369, 295, 377, -173, -142, -186, 376, -162,
	205, -130, -326, 348, 205, -162, 376, -135, 146, 2,
	-134, -326, 205, -266, -144, -142, -144, 280, -134, 31,
	-123, 381, 49, 258, 109, -123, 109, -123, 381, 109,
	-123, 109, 109, -177, 377, 381, -343, -349, 74, 376,
	31, -245, -272, -273, -275, -284, -278, -282, -283, 41,
	47, 46, 173, 172, 310, 198, 275, 287, 336, 150,
	39, 214, 158, 4, 157, 159, 160, 161, 162, 163,
	286, 38, 243, 126, 127, 125, 102, 93, 92, 210,
	43, 42, -286, -287, -280, -281, 90, 314, 315, 165,
	40, 53, 52, 341, 297, -303, -302, -343, -296, -177,
	31, -221, 2, -353, 381, 184, -149, 191, 204, 142,
	216, 351, -301, 5, 4, -244, -257, 94, 188, -283,
	8, 368, -293, 7, 367, -295, -294, -295, 78, 378,
	-297, -175, 22, 282, 2, -296, -346, 130, -343, -296,
	-296, -296, -296, -296, 277, -53, 130, -134, 184, -296,
	2, -296, 2, 303, 152, 303, -123, 381, -142, 65,
	66, 353, -211, -188, -189, -188, -212, -211, 330, -209,
	-208, -213, -234, 22, -216, 124, 201, -234, -236, -110,
	-110, -110, -165, -261, -234, 237, 152, -296, -290, -272,
	-289, 248, 249, 247, 251, 250, -272, -297, 313, -234,
	-234, -234, -234, -234, -234, -234, -234, -234, -234, -234,
	-234, -234, -234, -234, -234, -234, -234, -234, -234, -234,
	-234, -234, -234, -234, -234, -234, -234, -234, -234, -234,
	-234, 185, 148, 284, 37, 149, -234, 316, -234, -234,
	-234, -234, 197, 205, 207, 322, 116, 329, 100, 211,
	-355, 301, 33, -241, -111, 376, -256, 28, 289, 22,
	-248, 265, 376, -229, -234, -230, -178, -177, 377, 381,
	-178, -247, -243, -255, -254, 345, 377, -177, 342, 22,
	100, 369, 2, 7, -202, 352, 196, 91, 143, 195,
	-203, 272, -330, 123, 138, 376, 377, 2, 377, 2,
	377, 2, 377, 2, -234, -234, -196, 2, -291, -177,
	4, 352, 196, 91, 143, 195, 272, -196, 2, -197,
	2, -234, -177, -198, -235, -236, 367, 368, 362, 376,
	265, -199, 2, -234, -178, -234, 44, 180, 317, -200,
	-234, 133, -177, -234, -234, -234, -177, -177, 2, -177,
	2, 376, 7, 7, 313, 313, 7, -138, -324, 31,
	-167, -177, -170, 381, 133, 31, 4, -170, 377, 381,
	171, 171, -263, -195, 171, -193, 222, -193, -193, -341,
	376, 375, -260, -297, 374, 383, -178, 2, -259, -258,
	31, -134, 220, 377, -142, 381, 316, -206, 69, 60,
	-224, 146, 60, -308, -134, 69, -309, 55, 328, 237,
	132, -206, 69, -206, 69, 69, -265, 34, -67, 67,
	133, 316, -265, 67, 316, 34, -67, 133, 316, -145,
	-297, 67, -269, 356, -134, 133, 377, 381, -150, -167,
	-151, -134, -225, -224, -310, -311, -308, 152, 328, 117,
	31, 109, 229, 109, 31, 215, 205, -126, 306, 109,
	-226, 346, -217, -67, 376, 94, 31, -217, -181, -182,
	-268, -183, -142, 376, -134, -175, -176, -176, -145, -146,
	-134, -167, 377, -53, -270, 316, 335, -151, -52, 377,
	381, -169, 30, 374, -202, 376, -269, 381, 133, 359,
	316, 377, 319, -222, -148, 242, 288, 254, 276, 8,
	7, 7, 381, -297, -345, -134, 277, -53, -142, -145,
	-142, -265, 348, 130, 66, -189, -212, -214, -293, 376,
	368, -215, 265, 266, 381, -119, 32, 98, 174, -142,
	353, -234, -234, 316, -355, 301, -241, -234, 197, 207,
	322, 116, 329, 100, 211, 133, 376, -235, -235, -177,
	-238, 376, -177, 375, 385, 377, -234, 375, 375, 381,
	-253, -254, 104, -234, -164, 381, -163, -234, -177, -177,
	377, 377, 316, 316, 316, 316, 376, -335, 223, 376,
	376, -234, 31, 381, 377, 133, 377, 377, -204, 231,
	377, 10, 11, 367, 368, 369, 370, 128, 371, 372,
	365, 366, 364, 357, 358, 359, 64, 192, 267, 13,
	14, 15, 167, 149, -235, -235, -235, -177, 376, 377,
	-239, -240, 133, 130, 31, -200, -200, -200, 377, 133,
	-177, 381, 381, 381, 377, 377, 377, 7, 377, 381,
	377, 353, 353, 377, 376, 377, 377, -226, -267, -172,
	2, -263, -297, -226, -234, -263, -263, -194, 335, 215,
	171, -263, -258, 377, -342, 7, -260, -259, 7, -233,
	-232, 131, 203, 377, -134, 376, -260, 377, -120, -142,
	-134, -134, 205, -224, 146, -125, 205, -272, -134, 376,
	376, 174, 174, -134, -134, 146, -134, 146, -134, -134,
	-121, 253, -67, 353, 376, -142, 253, 353, -134, -67,
	376, -134, 253, 353, -104, 145, 211, 295, 133, -142,
	377, 377, 381, -135, 152, -135, -67, -175, 5, -134,
	-67, -142, 109, -127, 105, -354, 359, -134, -210, -208,
	-234, -191, -219, 260, 215, -173, 340, -134, -191, -171,
	381, 133, 359, -173, -123, -123, -123, -123, -345, -302,
	377, -272, 374, 375, 7, 7, -107, 348, -302, -345,
	-294, -294, -131, 326, 63, 242, -294, 381, 217, 241,
	88, 303, -215, -234, -261, -142, 382, -234, -234, -235,
	-235, 133, 376, -234, -245, 27, 27, 377, -178, 381,
	-230, -234, 377, -243, 106, -234, 312, 377, 342, -164,
	-164, -164, 5, 196, 143, 195, -203, 195, -203, -203,
	7, -336, -134, 376, 346, -163, 377, -290, -272, -234,
	-239, -234, -290, -272, -235, -235, -235, -235, -235, -235,
	-235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
	-235, -235, -235, 100, 205, 211, -235, 381, -178, -240,
	-239, -234, -234, -272, 377, 377, 377, -177, -234, -234,
	-234, 377, 7, -52, -187, 138, -269, 381, -187, -194,
	376, -234, -263, 375, 377, 381, -259, 375, 381, 384,
	359, -260, 376, -167, -258, 316, 316, 109, 205, 337,
	-312, -309, -234, -166, -262, -134, -323, 376, -320, -321,
	-140, 376, 376, -118, 103, 280, -207, 109, -123, 109,
	-123, 316, -206, 69, -237, -140, -134, -177, 316, -237,
	-177, 316, -237, -107, 133, 302, 295, -152, 151, -225,
	376, -135, 376, 376, -162, -130, 376, -134, -128, 179,
	-354, -300, -326, -191, -191, -180, 206, 68, 377, -226,
	-182, -172, -234, 377, -108, 76, -108, 7, 375, 377,
	-106, 217, -105, -134, 5, -134, -31, -32, 152, -297,
	-134, -142, 216, 377, -119, -297, 27, 27, -234, -245,
	377, -234, -234, 377, -234, 375, -234, 5, -234, 377,
	377, 377, 377, -337, -134, -234, 377, 377, 377, -240,
	133, 100, 211, 376, -234, 377, 377, 381, 377, 377,
	377, 377, -242, 140, 45, -263, -242, -167, -231, 7,
	-232, -297, 374, -259, -167, 377, -134, -134, -224, 109,
	-313, 69, -314, 58, 117, 74, 205, 207, 328, 237,
	55, 94, 246, 377, 377, 381, -141, -185, 58, -141,
	-234, 376, -166, -167, 205, 94, 205, 94, 87, 324,
	-134, -134, -142, -134, -134, 376, 377, -142, 377, -134,
	-303, 313, -153, -154, 228, 149, -166, 376, -167, -150,
	31, -166, 215, -129, 178, -354, -300, -126, -218, 376,
	215, -67, -191, 359, 87, 87, 375, 381, 376, 359,
	359, 381, 22, 376, -119, -234, -234, 377, 377, -164,
	-331, 228, 377, -235, 133, 376, -245, 377, -234, -332,
	347, -234, -177, -332, 377, -260, 7, 377, -224, -134,
	-297, -134, 117, 146, 207, 174, 376, -235, -142, -223,
	-350, 73, 299, -262, -119, -297, -119, 377, -177, 377,
	377, 207, 207, -234, -272, -123, -123, 316, 316, -177,
	316, 316, -237, 45, 226, 377, -166, 377, 377, -67,
	377, -142, -354, -300, -127, 101, -167, 69, -241, 376,
	376, -105, -106, -302, -302, -32, -167, 377, -164, 45,
	-235, -245, 377, 377, -333, -334, -134, -259, 375, -314,
	-135, 205, -234, -136, 376, -152, 376, -141, -164, 246,
	-122, 58, -134, -134, -164, 376, 376, 187, 241, -142,
	-223, 377, -152, -223, 376, -300, -128, 330, 206, 377,
	-134, -303, -303, 377, 377, -338, 241, 266, -177, 377,
	381, 31, 109, 377, -315, 193, -134, -167, -119, 377,
	-142, -117, 335, -297, 377, -177, -177, 376, 376, 376,
	-152, -223, -152, -166, -129, 280, -226, 377, 377, 377,
	-339, -340, 37, 325, 78, -234, -339, -334, -336, 117,
	-316, -319, -318, 215, 134, 227, 285, 377, 377, -162,
	-234, 377, 377, -167, -167, -167, -152, 377, -181, -107,
	-107, -340, 234, 129, 265, 234, 129, -134, -318, 215,
	-319, 215, 330, 97, -315, 377, 377, 377, -223, -226,
	27, -317, 202, 258, 49, 280, -317, -316, 376, 376,
	-124, 49, 258, -152, -340, 20, 207, 94, -155, 228,
	-156, 228, 377, -297, 377, -297, 340, 340, -157, 376,
	183, 381, -154, -153, -158, -159, -234, 194, 311, -155,
	376, 381, 377, 381, 376, -158, -155, -159, -158, 377,
	377, 381, -154, -153, -156, 381, -156,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 306, 0, 159, 161, 163,
	165, -2, 168, 170, 0, 0, 0, 181, 183, 185,
	187, 189, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 673, -2, 0, 286, 288, 297, 299,
	301, 303, 304, 0, 354, 356, 358, 360, 362, 364,
	366, 368, 370, 372, 374, 376, 378, 380, 382, 383,
	385, 387, 389, 0, 595, 597, 599, -2, 65, 66,
	67, 68, 69, 70, 78, 79, 80, 81, 72, 74,
	75, 77, 0, 711, -2, 722, 0, 0, 0, -2,
	0, -2, -2, -2, 0, 0, 688, 690, 692, 694,
	-2, 0, 0, -2, 7, 13, 15, 17, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 40, 43,
	49, 51, 53, 56, 58, 60, 62, 64, 0, 0,
	0, 0, 0, 0, 125, 270, 0, 1293, 1217, 1223,
	1224, 1248, 1249, 1250, 1267, 1268, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
	1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
	1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
	1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1489, 151, 153, 154, 0,
	0, 0, 1219, 1293, 160, 162, 164, 166, 0, 172,
	0, 0, 0, 0, 562, 169, 171, 261, 1355, 263,
	265, 0, 0, 0, 0, 175, 176, 177, 178, 179,
	180, 182, 184, 186, 188, 190, 191, 0, 0, 0,
	0, 0, 260, 258, 213, 214, 0, 243, 244, 245,
	246, 247, 249, 217, 219, 220, 222, 224, 226, 228,
	229, 231, 233, 234, 236, 238, 239, 241, 0, 0,
	0, 267, 273, 274, 275, 277, 278, 279, 280, 281,
	282, 283, 0, 131, 0, 466, 256, 254, 0, 127,
	0, 592, 0, 269, 593, 594, 589, 590, 1382, 618,
	287, 289, 298, 300, 302, -2, -2, 1476, -2, 318,
	-2, 326, 1482, 0, 329, 330, 333, -2, 209, 355,
	357, 359, 361, 363, 365, 367, 369, 371, 373, 375,
	377, 379, 381, 384, 386, 388, 390, 391, 0, 0,
	0, 395, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 394, 396, 397, 398, 0, 596, 598, 600,
	0, 551, 713, 0, 0, -2, 686, 687, -2, 0,
	717, 717, 717, 0, 0, 687, 685, 0, 290, 0,
	292, 0, 395, 295, 296, 334, 335, 923, 0, 0,
	0, 0, 0, 0, 996, 1026, 1028, 1447, 1476, 0,
	1030, 1031, 0, 1033, 1035, 1036, 0, 1039, 1040, 1192,
	1219, 1233, 1234, 1235, 1236, 0, 0, 1239, 0, 1241,
	1242, 1243, 1094, 1050, -2, -2, 1231, 851, 852, 853,
	854, -2, 1490, 1054, 1057, 1060, 1063, 1064, 1067, 1068,
	0, 1431, 1448, 1449, 1472, 1473, 1481, 1485, 1486, 1455,
	1469, 1456, 1443, 1453, 1467, 1299, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1257, 885, 886, 891, 892, 1491, 1492, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 894, 620, 602, 611, 620, 604, 605, 606, 607,
	608, 609, 610, 613, 0, 703, 1361, 706, 1230, 704,
	689, 691, 0, 693, 0, 0, 697, 719, 718, 0,
	758, 701, 702, 712, 773, 811, 788, 779, 0, 0,
	2, 71, 0, 1455, 811, 73, 0, 1455, 811, 76,
	0, 82, 0, 1455, 1222, 0, 1262, 1263, 1264, 1265,
	1266, 1490, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
	1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523,
	1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
	1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
	1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
	1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
	1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
	1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 0, 0, 271, 272, 1227, 1225, 1226,
	0, 155, 156, 157, 158, 0, 0, 1220, 1201, 1199,
	1200, 167, 530, 1455, -2, 1455, 554, 530, 558, -2,
	710, 1455, 634, 262, 264, 0, 174, 0, 647, 0,
	649, 0, 664, 817, 117, 1455, 194, 207, 117, 1455,
	197, 117, 1455, 200, 1215, 117, 1455, 203, 204, 1455,
	206, 257, 0, 0, -2, 250, 252, 1258, 1259, 1260,
	1261, -2, 248, 218, 221, 223, 225, 227, 230, 232,
	235, 237, 240, 242, -2, 0, 0, 0, 465, 0,
	0, 0, 591, 0, 617, 305, 0, 315, 0, 317,
	1442, -2, -2, 321, 621, 625, 626, 627, 0, 0,
	0, 0, 0, 0, 0, 331, 210, 0, 392, 393,
	401, 402, 132, 133, 352, 353, 0, 405, 426, 438,
	0, 0, 409, 411, 464, 413, 0, 0, 415, 0,
	417, 0, 419, 0, 421, 0, 423, 425, 427, 439,
	429, 712, 431, 0, 433, 437, 0, 442, 0, 444,
	445, 446, 0, 0, 452, 0, 0, 399, 400, 117,
	815, 0, 0, 0, -2, 0, 730, 755, 0, 733,
	734, 0, 0, 0, 0, 715, 716, 0, 0, 0,
	675, 676, 291, 0, 294, 0, 0, 0, 0, 1127,
	1128, 1129, 1130, 1131, 1132, 1135, 1136, 1133, 1134, 1137,
	1138, 0, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 0, 0, 0, 0, 1140, 1141, 1142, 0, 0,
	1144, 0, 1146, 0, 0, 0, 0, 0, 0, 1206,
	0, 0, 1143, 928, 929, 930, 962, 963, 0, 1027,
	1203, 1196, 1029, 0, 1149, -2, 1150, 0, 0, 1032,
	1037, 1038, 1149, 0, 1191, -2, 0, 1238, 0, 920,
	1096, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1172, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 870, 888, 899, 896, 895, 872, 0, 871,
	869, 0, 873, 0, 0, 0, 601, -2, 603, 0,
	615, 0, 705, 0, 0, 0, 762, 1207, 1211, 1212,
	762, 0, 1150, 0, 0, 0, 0, 808, 808, 808,
	806, 782, 0, 788, 0, -2, 812, 800, 0, -2,
	779, 0, 0, 813, 0, 83, 586, 96, 0, 586,
	586, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 802, 1218,
	0, 1197, 1198, 147, 0, 0, 1213, 1202, 472, 0,
	0, 552, 0, 709, 0, 0, 0, 0, 1455, 561,
	1251, 636, 0, 821, 0, 650, 0, 0, 818, 0,
	192, 0, 115, 116, 0, 195, 0, 198, 0, 0,
	201, 0, 0, 0, 712, 0, 0, 276, 0, 0,
	712, 0, 1152, 829, 830, 831, 832, 833, 920, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 882, 0, 857, 857, 857,
	874, 875, 883, 884, 889, 890, 901, 902, 904, 906,
	900, 900, 900, 897, 898, 802, 134, 0, 0, 0,
	0, -2, 323, 0, 623, 0, 628, 343, 344, 345,
	630, 631, 327, 346, 347, 348, 349, 350, 351, 0,
	547, 0, 549, 1244, 0, 324, 336, 325, 328, 0,
	211, 403, 404, 406, 407, 408, 412, 0, 461, 414,
	416, 418, 420, 422, 430, 434, 712, 440, 443, 447,
	448, 449, 450, 0, 0, 0, 550, 0, 307, 0,
	456, 0, 730, 755, 679, 729, 680, 754, 756, 731,
	732, 737, 741, 742, 745, 748, 749, 739, 923, 698,
	699, 700, 723, 724, 573, 0, 0, 293, 924, 825,
	826, 876, 877, 878, 879, 880, 925, 926, 0, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, -2,
	-2, -2, -2, -2, -2, -2, -2, 949, 950, 951,
	952, 953, 954, 955, 956, -2, -2, -2, 960, 961,
	-2, 1145, 1147, 0, 1206, 0, -2, 0, -2, -2,
	-2, -2, 974, 0, 976, 979, 981, 983, 0, 0,
	0, 0, 1205, 993, 1183, 0, 0, 1124, 1125, 1126,
	978, 0, 0, 1204, 1195, 0, 0, 1148, 1034, 0,
	0, 0, 1156, 1190, 1186, 0, 1041, 722, 0, 0,
	0, 0, 1048, 0, 1247, 907, 908, 909, 910, 911,
	912, 921, 1104, 0, 0, 0, 1055, 1056, 1058, 1059,
	1061, 1062, 1065, 1066, 0, 0, 0, 1072, 0, 1159,
	-2, -2, -2, -2, -2, -2, -2, 0, 1074, 0,
	1076, 1150, 1169, 0, 0, 997, 0, 0, 0, 0,
	1476, 0, 1079, 1150, 1177, 0, 0, 0, 0, 0,
	1150, 0, 1182, 0, 0, 0, 0, 0, 1090, 0,
	1092, 0, 0, 0, 0, 0, 0, 614, 707, 0,
	0, 0, 821, 0, 0, 0, 1210, 821, 757, 0,
	0, 0, 0, 0, 0, 803, 807, 804, 805, 0,
	0, 788, 800, 770, 0, 0, 0, 777, 778, 799,
	0, 798, 787, -2, 0, 0, 0, 0, 0, 585,
	98, 1455, 0, 119, 0, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	1221, 0, 137, 0, 1228, 0, 0, 0, 0, 0,
	471, 1227, 473, 475, 476, 477, 478, 1252, 0, 1252,
	0, 0, 0, 0, 0, 0, 0, 638, 644, 0,
	736, 0, 662, 652, 0, 0, 0, 662, 666, 667,
	669, 670, 0, 0, 819, 208, 117, 117, 1216, 117,
	117, 205, 259, 215, 251, 0, 0, 0, 253, 255,
	0, 822, 824, 0, 834, 0, 146, 0, 0, 0,
	0, 316, 0, 622, 629, 0, 340, 0, 342, 548,
	1246, 1245, 0, 212, 463, 284, 432, 435, 458, 459,
	460, 816, 0, 0, 457, 683, 684, 0, 743, 0,
	0, 740, 746, 747, 0, 726, 571, 572, 0, 0,
	0, -2, -2, 0, 0, 0, 994, -2, 975, 977,
	980, 982, 984, 0, 0, 0, 0, 0, 0, 0,
	995, 1149, 0, 1193, 1196, -2, 1151, 1154, 1155, 0,
	0, 1187, 0, 0, 0, 0, 721, 722, 722, 722,
	1047, 0, 0, 0, 0, 0, 0, 1049, 0, 0,
	0, 0, 0, 0, 1071, 0, 1073, 1075, 0, 0,
	1077, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1000, 1001, 1002, 0, 1149, 1078,
	1175, 1176, 0, 0, 0, 0, 0, 0, 1084, 0,
	1181, 0, 0, 0, 1088, 1089, 1091, 0, 855, 0,
	881, 903, 905, 893, 712, 1229, 759, 751, 1208, 802,
	761, 763, 1209, 751, 1151, 790, 0, 792, 0, 0,
	0, 794, 0, 783, 0, 785, 800, 775, 0, 0,
	768, 0, 767, 788, 796, 0, 0, 814, 97, 575,
	0, 0, 0, 100, 1455, 108, 0, 502, 0, 0,
	0, 0, 0, 588, 109, 1455, 117, 1455, 117, 110,
	84, 586, 85, 0, 0, 581, 0, 0, 574, 86,
	0, 583, 0, 0, 146, 0, 0, 148, 0, 1214,
	480, 529, 0, 0, 1252, 0, 469, 530, 555, -2,
	557, 0, 0, 640, 644, 0, 643, 710, 662, 735,
	820, 645, 662, 0, 0, 0, 654, 651, 648, 821,
	0, 0, 0, 0, 193, 196, 199, 202, 266, 0,
	0, 1153, 0, 827, 0, 0, 126, 0, 135, 268,
	313, 314, 319, 338, 339, 341, 337, 0, 0, 0,
	0, 0, 0, 0, 725, 573, 0, 927, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 1184, 0, 0,
	0, 1195, -2, 1157, 1185, 1189, 0, 1042, 0, 0,
	0, 0, 1240, 913, 914, 915, 916, 917, 918, 919,
	0, 1102, 1103, 1107, 0, 0, 1053, 0, 0, 1158,
	1168, 1170, 998, 999, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, -2, -2, -2, 1016, 1017, 1018,
	-2, -2, -2, 0, 0, 0, 1171, 0, 0, 1173,
	1174, 1178, 1179, 0, 1081, 1082, 1083, 1180, 0, 0,
	0, 887, 0, 0, 753, 0, 760, 0, 753, 791,
	0, 810, 793, 773, 784, 0, 781, 771, 0, 772,
	0, 800, 0, 0, 780, 0, 0, 0, 0, 118,
	500, 519, 0, 0, 564, 570, 570, 0, 1051, 1052,
	0, 0, 0, 102, 0, 0, 0, 0, 106, 0,
	112, 0, 0, 0, 91, 0, 0, 0, 0, 90,
	0, 0, 89, 124, 0, 0, 149, 485, 0, 474,
	0, 0, 0, 472, 0, 553, 0, 0, 642, 644,
	0, 635, 636, 173, 646, 660, 661, 659, 0, 662,
	668, 665, 671, 0, 0, 128, 0, 0, 828, 835,
	144, 1345, 142, 139, 141, 285, 308, 309, 0, 453,
	454, 455, 738, 744, 727, 573, 0, 0, -2, 0,
	987, -2, -2, 1120, 1151, 1194, 1188, 1237, 722, 1043,
	1045, 1046, 922, 1109, 1106, 0, 1093, 1069, 1070, 1167,
	0, 0, 0, 0, 1151, 1122, 1080, 0, 1086, 1087,
	856, 708, 1098, 0, 0, 764, 1098, 0, 788, 786,
	769, 765, 0, 776, 0, 797, 577, 579, 99, 0,
	501, 0, 504, 0, 0, 0, 0, 510, 511, 0,
	0, 0, 0, 521, 528, 0, 573, 1232, 0, 573,
	0, 0, 0, 0, 0, 114, 0, 0, 587, 0,
	117, 117, 576, 0, 0, 0, 0, 582, 0, 584,
	136, 0, 467, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 632, 644, 0, 637, 638, 0, 0,
	0, 653, 663, 0, 0, 0, 823, 0, 0, 0,
	0, 0, 311, 0, 728, -2, -2, 988, 1121, 0,
	722, 0, 1095, -2, 0, 0, 0, 1123, 0, 695,
	0, 752, 750, 696, 809, 800, 0, 795, 101, 0,
	505, 506, 1252, 0, 509, 512, 0, 514, 1254, 480,
	0, 525, 526, 565, 566, 569, 567, 570, 722, 523,
	0, 103, 104, 113, 121, 105, 111, 0, 0, 722,
	0, 0, 801, 0, 0, 528, 0, 518, 480, 470,
	528, 0, 0, 639, 640, 0, 0, 0, 672, 0,
	0, 143, 0, 138, 140, 310, 0, 1044, 1112, 0,
	-2, 0, 1024, 1085, 1097, 1099, 0, 774, 766, 503,
	507, 0, 0, 534, 0, 522, 0, 573, 0, 0,
	123, 0, 578, 580, 0, 0, 0, 0, 0, 0,
	480, 528, 468, 480, 0, 641, 642, 0, 656, 821,
	658, 0, 0, 145, 312, 0, 0, 0, 1108, 1025,
	0, 0, 0, 513, 539, 0, 0, 0, 568, 1042,
	530, 107, 0, 120, 0, 0, 0, 0, 0, 0,
	516, 480, 559, 0, 633, 0, 657, 146, 146, 1105,
	1110, 1113, -2, 1415, 1290, 0, 1111, 1100, 1101, 0,
	515, 535, 536, 0, 531, 532, 533, 1253, 527, 534,
	122, 93, 95, 0, 0, 0, 517, 528, 821, 129,
	130, 0, 1115, 1116, 1117, 1118, 1119, 508, 537, 0,
	538, 0, 0, 0, 539, 0, 0, 483, 480, 655,
	0, 540, 0, 543, 544, 0, 541, 524, 0, 0,
	479, 481, 482, 560, 1114, 542, 545, 546, 0, 0,
	0, 0, 486, 0, 487, 0, 0, 0, 485, 0,
	0, 0, 484, 490, 0, 493, 495, -2, 0, 488,
	0, 0, 491, 0, 0, 0, 489, 494, 0, 492,
	485, 0, 484, 499, 497, 0, 498,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 365, 3, 371, 366, 3,
	376, 377, 369, 367, 381, 368, 378, 370, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 385, 380,
	357, 359, 358, 361, 382, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 374, 3, 375, 372, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 383, 364, 384, 362,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 360,
	57700, 363, 57701, 373, 57702, 379, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:906
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:912
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:918
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:970
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1011
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1057
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1083
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1089
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1095
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1104
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1113
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1182
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1205
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1215
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1277
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1278
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1281
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1282
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1309
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1335
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1373
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1442
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1486
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "CREATE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1520
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1541
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1575
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1598
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1621
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1687
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1699
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "DELETE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "INSERT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1724
		{ /* SKIP DOC */
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1811
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1831
		{
			return helpWith(sqllex, "GRANT")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1873
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			return helpWith(sqllex, "RESET")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1930
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1945
		{
			return helpWith(sqllex, "RESET")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1956
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1964
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1968
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1969
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1971
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1972
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1973
		{
			return unimplemented(sqllex, "set local")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2032
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2082
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2087
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2104
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			return unimplemented(sqllex, "set from current")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2119
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = Low
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = Normal
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = High
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2220
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2221
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2222
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2224
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2231
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			return helpWith(sqllex, "SHOW")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.str = "client_encoding"
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2272
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2294
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2327
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2343
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2359
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2364
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2375
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2412
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2461
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2469
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2472
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2483
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2494
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2505
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2509
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2513
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2517
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2521
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2525
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2531
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2535
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2539
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2680
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2684
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = DropDefault
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 499:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2794
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			return unimplemented(sqllex, "match full")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3002
		{
			return unimplemented(sqllex, "match partial")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3003
		{
			return unimplemented(sqllex, "match simple")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3004
		{
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = NoAction
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = Restrict
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = Cascade
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = SetNull
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = SetDefault
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[6].str), Password: sqlDollar[7].union.strPtr(), IfNotExists: true}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3130
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3170
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = true
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = false
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3200
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3201
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3204
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3205
		{
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = Ascending
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = Descending
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3245
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3247
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = true
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = false
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3280
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3281
		{
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3303
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3314
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3318
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3319
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3320
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3338
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3343
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3356
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3361
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3369
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3376
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3380
		{
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.str = ""
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.str = ""
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3439
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3441
		{
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = ReadOnly
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = ReadWrite
		}
	case 632:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3505
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.str = ""
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.str = ""
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.str = ""
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.str = ""
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3548
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3549
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3573
		{
			return helpWith(sqllex, "INSERT")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3632
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3636
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3644
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 663:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3667
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3671
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3672
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3799
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3834
		{
			return helpWith(sqllex, "SELECT")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3835
		{
			return helpWith(sqllex, "VALUES")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3836
		{
			return helpWith(sqllex, "TABLE")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3883
		{
			return helpWith(sqllex, "SELECT")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3927
		{
			return helpWith(sqllex, "TABLE")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3938
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3939
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3940
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3943
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3944
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3947
		{
			return unimplemented(sqllex, "cte")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3950
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3951
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3954
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3955
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3958
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3959
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = true
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = false
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = false
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = true
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3982
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3983
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4037
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4061
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4113
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4114
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4117
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4118
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = false
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = true
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4189
		{
			return helpWith(sqllex, "VALUES")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4191
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4206
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &From{}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4228
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4246
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4273
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4310
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4335
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = nil
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4376
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4382
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = true
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = false
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.str = astFullJoin
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.str = astLeftJoin
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.str = astRightJoin
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.str = astInnerJoin
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4493
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4494
		{
		}
	case 809:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4580
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4594
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4602
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4626
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4637
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = jsonbColType
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = jsonColType
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4726
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4735
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = nil
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4800
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4896
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 893:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4928
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4967
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4968
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 903:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = year
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = month
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = day
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = hour
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = minute
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = month
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = hour
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = minute
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = minute
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = nil
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = second
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5063
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5098
		{
			return unimplemented(sqllex, "at tz")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5306
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5372
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5525
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5549
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5602
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5603
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5609
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5616
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5627
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5643
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5644
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5648
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5650
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5657
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5666
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5675
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5676
		{
			return unimplemented(sqllex, "current role")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5685
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5706
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5711
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5713
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5716
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5722
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5725
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5726
		{
			return unimplemented(sqllex, "treat")
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5748
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5760
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5763
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5768
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5772
		{
			return unimplemented(sqllex, "within group")
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5773
		{
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5777
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5781
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5808
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5831
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.str = ""
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5870
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5871
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5872
		{
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5875
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5876
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5882
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5883
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5884
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5885
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5886
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = Any
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = Some
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = All
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = Plus
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5933
		{
			sqlVAL.union.val = Minus
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5934
		{
			sqlVAL.union.val = Mult
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5935
		{
			sqlVAL.union.val = Div
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5937
		{
			sqlVAL.union.val = Mod
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = Bitand
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = Bitor
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = Pow
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5941
		{
			sqlVAL.union.val = Bitxor
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = LT
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = GT
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = EQ
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = LE
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = GE
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = NE
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = Like
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = NotLike
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = ILike
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5954
		{
			sqlVAL.union.val = NotILike
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5976
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6063
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6080
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6084
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6088
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6108
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6132
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6143
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6160
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6170
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6177
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6187
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6194
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6200
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6212
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6216
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6222
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6226
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6232
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6236
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6241
		{
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6242
		{
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6246
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6250
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6256
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6265
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6269
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6273
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6281
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6285
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6291
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6295
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6301
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6305
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6316
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6320
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6326
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6330
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6343
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6355
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6361
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6365
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6371
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6374
		{
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6384
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6388
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6395
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6399
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6403
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6407
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6410
		{
			return unimplemented(sqllex, "func const")
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6412
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6416
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6419
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6421
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6425
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6429
		{
			sqlVAL.union.val = DNull
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6436
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6440
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6446
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6481
		{
			sqlVAL.str = ""
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6487
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6491
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
