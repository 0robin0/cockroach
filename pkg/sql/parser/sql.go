// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:464
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const KEY = 57515
const KEYS = 57516
const KV = 57517
const LATERAL = 57518
const LC_CTYPE = 57519
const LC_COLLATE = 57520
const LEADING = 57521
const LEAST = 57522
const LEFT = 57523
const LEVEL = 57524
const LIKE = 57525
const LIMIT = 57526
const LOCAL = 57527
const LOCALTIME = 57528
const LOCALTIMESTAMP = 57529
const LOW = 57530
const LSHIFT = 57531
const MATCH = 57532
const MINUTE = 57533
const MONTH = 57534
const NAN = 57535
const NAME = 57536
const NAMES = 57537
const NATURAL = 57538
const NEXT = 57539
const NO = 57540
const NO_INDEX_JOIN = 57541
const NORMAL = 57542
const NOT = 57543
const NOTHING = 57544
const NULL = 57545
const NULLIF = 57546
const NULLS = 57547
const NUMERIC = 57548
const OF = 57549
const OFF = 57550
const OFFSET = 57551
const OID = 57552
const ON = 57553
const ONLY = 57554
const OPTIONS = 57555
const OR = 57556
const ORDER = 57557
const ORDINALITY = 57558
const OUT = 57559
const OUTER = 57560
const OVER = 57561
const OVERLAPS = 57562
const OVERLAY = 57563
const PARENT = 57564
const PARTIAL = 57565
const PARTITION = 57566
const PASSWORD = 57567
const PAUSE = 57568
const PLACING = 57569
const PLANS = 57570
const POSITION = 57571
const PRECEDING = 57572
const PRECISION = 57573
const PREPARE = 57574
const PRIMARY = 57575
const PRIORITY = 57576
const QUERIES = 57577
const QUERY = 57578
const RANGE = 57579
const READ = 57580
const REAL = 57581
const RECURSIVE = 57582
const REF = 57583
const REFERENCES = 57584
const REGCLASS = 57585
const REGPROC = 57586
const REGPROCEDURE = 57587
const REGNAMESPACE = 57588
const REGTYPE = 57589
const REMOVE_PATH = 57590
const RENAME = 57591
const REPEATABLE = 57592
const RELEASE = 57593
const RESET = 57594
const RESTORE = 57595
const RESTRICT = 57596
const RESUME = 57597
const RETURNING = 57598
const REVOKE = 57599
const RIGHT = 57600
const ROLLBACK = 57601
const ROLLUP = 57602
const ROW = 57603
const ROWS = 57604
const RSHIFT = 57605
const SAVEPOINT = 57606
const SCATTER = 57607
const SCRUB = 57608
const SEARCH = 57609
const SECOND = 57610
const SELECT = 57611
const SEQUENCES = 57612
const SERIAL = 57613
const SERIALIZABLE = 57614
const SESSION = 57615
const SESSIONS = 57616
const SESSION_USER = 57617
const SET = 57618
const SETTING = 57619
const SETTINGS = 57620
const SHOW = 57621
const SIMILAR = 57622
const SIMPLE = 57623
const SMALLINT = 57624
const SMALLSERIAL = 57625
const SNAPSHOT = 57626
const SOME = 57627
const SPLIT = 57628
const SQL = 57629
const START = 57630
const STATUS = 57631
const STDIN = 57632
const STRICT = 57633
const STRING = 57634
const STORE = 57635
const STORING = 57636
const SUBSTRING = 57637
const SYMMETRIC = 57638
const SYSTEM = 57639
const TABLE = 57640
const TABLES = 57641
const TEMP = 57642
const TEMPLATE = 57643
const TEMPORARY = 57644
const TESTING_RANGES = 57645
const TESTING_RELOCATE = 57646
const TEXT = 57647
const THEN = 57648
const TIME = 57649
const TIMESTAMP = 57650
const TIMESTAMPTZ = 57651
const TO = 57652
const TRAILING = 57653
const TRACE = 57654
const TRANSACTION = 57655
const TREAT = 57656
const TRIM = 57657
const TRUE = 57658
const TRUNCATE = 57659
const TYPE = 57660
const UNBOUNDED = 57661
const UNCOMMITTED = 57662
const UNION = 57663
const UNIQUE = 57664
const UNKNOWN = 57665
const UPDATE = 57666
const UPSERT = 57667
const USE = 57668
const USER = 57669
const USERS = 57670
const USING = 57671
const UUID = 57672
const VALID = 57673
const VALIDATE = 57674
const VALUE = 57675
const VALUES = 57676
const VARCHAR = 57677
const VARIADIC = 57678
const VIEW = 57679
const VARYING = 57680
const WHEN = 57681
const WHERE = 57682
const WINDOW = 57683
const WITH = 57684
const WITHIN = 57685
const WITHOUT = 57686
const WRITE = 57687
const YEAR = 57688
const ZONE = 57689
const NOT_LA = 57690
const WITH_LA = 57691
const AS_LA = 57692
const CONTAINED_BY = 57693
const HAS_SOME_KEY = 57694
const HAS_ALL_KEYS = 57695
const POSTFIXOP = 57696
const UMINUS = 57697
const HELPTOKEN = 57698

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6649

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	376, 54,
	-2, 689,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	153, 541,
	-2, 0,
	-1, 64,
	96, 689,
	157, 689,
	324, 689,
	325, 689,
	-2, 0,
	-1, 74,
	107, 664,
	117, 664,
	165, 664,
	184, 664,
	209, 664,
	215, 664,
	321, 664,
	-2, 653,
	-1, 107,
	4, 691,
	20, 691,
	21, 691,
	23, 691,
	28, 691,
	33, 691,
	34, 691,
	35, 691,
	36, 691,
	37, 691,
	38, 691,
	39, 691,
	40, 691,
	41, 691,
	42, 691,
	44, 691,
	45, 691,
	46, 691,
	47, 691,
	48, 691,
	51, 691,
	52, 691,
	53, 691,
	55, 691,
	56, 691,
	60, 691,
	61, 691,
	62, 691,
	64, 691,
	65, 691,
	66, 691,
	67, 691,
	69, 691,
	71, 691,
	72, 691,
	75, 691,
	76, 691,
	77, 691,
	85, 691,
	86, 691,
	87, 691,
	88, 691,
	89, 691,
	90, 691,
	91, 691,
	92, 691,
	94, 691,
	96, 691,
	98, 691,
	101, 691,
	102, 691,
	104, 691,
	108, 691,
	109, 691,
	110, 691,
	111, 691,
	112, 691,
	113, 691,
	114, 691,
	122, 691,
	123, 691,
	124, 691,
	125, 691,
	126, 691,
	128, 691,
	130, 691,
	135, 691,
	136, 691,
	138, 691,
	141, 691,
	142, 691,
	145, 691,
	146, 691,
	147, 691,
	148, 691,
	151, 691,
	152, 691,
	154, 691,
	157, 691,
	158, 691,
	159, 691,
	160, 691,
	161, 691,
	162, 691,
	163, 691,
	164, 691,
	166, 691,
	169, 691,
	170, 691,
	171, 691,
	173, 691,
	174, 691,
	175, 691,
	177, 691,
	178, 691,
	180, 691,
	182, 691,
	185, 691,
	188, 691,
	190, 691,
	191, 691,
	192, 691,
	193, 691,
	194, 691,
	195, 691,
	197, 691,
	198, 691,
	199, 691,
	200, 691,
	204, 691,
	205, 691,
	206, 691,
	207, 691,
	208, 691,
	210, 691,
	212, 691,
	213, 691,
	216, 691,
	217, 691,
	219, 691,
	221, 691,
	222, 691,
	223, 691,
	224, 691,
	225, 691,
	226, 691,
	228, 691,
	229, 691,
	230, 691,
	231, 691,
	232, 691,
	234, 691,
	235, 691,
	236, 691,
	237, 691,
	238, 691,
	239, 691,
	240, 691,
	241, 691,
	243, 691,
	244, 691,
	245, 691,
	246, 691,
	247, 691,
	249, 691,
	250, 691,
	251, 691,
	252, 691,
	253, 691,
	254, 691,
	255, 691,
	257, 691,
	259, 691,
	260, 691,
	261, 691,
	262, 691,
	264, 691,
	265, 691,
	266, 691,
	267, 691,
	268, 691,
	270, 691,
	271, 691,
	272, 691,
	273, 691,
	274, 691,
	276, 691,
	277, 691,
	278, 691,
	279, 691,
	281, 691,
	282, 691,
	283, 691,
	284, 691,
	286, 691,
	287, 691,
	288, 691,
	289, 691,
	290, 691,
	291, 691,
	292, 691,
	293, 691,
	294, 691,
	295, 691,
	297, 691,
	299, 691,
	300, 691,
	301, 691,
	302, 691,
	303, 691,
	304, 691,
	305, 691,
	307, 691,
	308, 691,
	309, 691,
	312, 691,
	313, 691,
	314, 691,
	315, 691,
	317, 691,
	318, 691,
	319, 691,
	320, 691,
	323, 691,
	324, 691,
	325, 691,
	326, 691,
	328, 691,
	330, 691,
	331, 691,
	332, 691,
	333, 691,
	334, 691,
	335, 691,
	338, 691,
	343, 691,
	344, 691,
	345, 691,
	346, 691,
	347, 691,
	-2, 0,
	-1, 124,
	107, 663,
	117, 663,
	165, 663,
	184, 663,
	209, 663,
	215, 663,
	321, 663,
	-2, 656,
	-1, 129,
	1, 590,
	169, 590,
	234, 590,
	238, 590,
	375, 590,
	376, 590,
	-2, 0,
	-1, 131,
	1, 590,
	375, 590,
	376, 590,
	-2, 0,
	-1, 132,
	1, 590,
	375, 590,
	376, 590,
	-2, 0,
	-1, 133,
	1, 594,
	375, 594,
	376, 594,
	-2, 0,
	-1, 140,
	4, 697,
	5, 697,
	6, 697,
	7, 697,
	8, 697,
	9, 697,
	20, 697,
	21, 697,
	23, 697,
	28, 697,
	29, 697,
	33, 697,
	34, 697,
	35, 697,
	36, 697,
	37, 697,
	38, 697,
	39, 697,
	40, 697,
	41, 697,
	42, 697,
	44, 697,
	45, 697,
	46, 697,
	47, 697,
	48, 697,
	49, 697,
	50, 697,
	51, 697,
	52, 697,
	53, 697,
	55, 697,
	56, 697,
	58, 697,
	60, 697,
	61, 697,
	62, 697,
	64, 697,
	65, 697,
	66, 697,
	67, 697,
	69, 697,
	71, 697,
	72, 697,
	74, 697,
	75, 697,
	76, 697,
	77, 697,
	79, 697,
	80, 697,
	81, 697,
	83, 697,
	84, 697,
	85, 697,
	86, 697,
	87, 697,
	88, 697,
	89, 697,
	90, 697,
	91, 697,
	92, 697,
	94, 697,
	96, 697,
	98, 697,
	101, 697,
	102, 697,
	104, 697,
	108, 697,
	109, 697,
	110, 697,
	111, 697,
	112, 697,
	113, 697,
	114, 697,
	115, 697,
	116, 697,
	122, 697,
	123, 697,
	124, 697,
	125, 697,
	126, 697,
	128, 697,
	130, 697,
	133, 697,
	135, 697,
	136, 697,
	138, 697,
	141, 697,
	142, 697,
	145, 697,
	146, 697,
	147, 697,
	148, 697,
	149, 697,
	151, 697,
	152, 697,
	154, 697,
	156, 697,
	157, 697,
	158, 697,
	159, 697,
	160, 697,
	161, 697,
	162, 697,
	163, 697,
	164, 697,
	166, 697,
	168, 697,
	169, 697,
	170, 697,
	171, 697,
	172, 697,
	173, 697,
	174, 697,
	175, 697,
	177, 697,
	178, 697,
	180, 697,
	181, 697,
	182, 697,
	183, 697,
	185, 697,
	188, 697,
	190, 697,
	191, 697,
	192, 697,
	193, 697,
	194, 697,
	195, 697,
	196, 697,
	197, 697,
	198, 697,
	199, 697,
	200, 697,
	201, 697,
	203, 697,
	204, 697,
	205, 697,
	206, 697,
	207, 697,
	208, 697,
	210, 697,
	213, 697,
	216, 697,
	217, 697,
	218, 697,
	219, 697,
	220, 697,
	221, 697,
	222, 697,
	223, 697,
	224, 697,
	225, 697,
	226, 697,
	228, 697,
	229, 697,
	230, 697,
	231, 697,
	232, 697,
	234, 697,
	235, 697,
	236, 697,
	237, 697,
	238, 697,
	239, 697,
	240, 697,
	241, 697,
	243, 697,
	244, 697,
	245, 697,
	246, 697,
	247, 697,
	249, 697,
	250, 697,
	251, 697,
	252, 697,
	253, 697,
	254, 697,
	255, 697,
	257, 697,
	258, 697,
	259, 697,
	260, 697,
	261, 697,
	262, 697,
	264, 697,
	265, 697,
	266, 697,
	267, 697,
	268, 697,
	270, 697,
	271, 697,
	272, 697,
	273, 697,
	274, 697,
	275, 697,
	276, 697,
	277, 697,
	278, 697,
	279, 697,
	280, 697,
	281, 697,
	282, 697,
	283, 697,
	284, 697,
	286, 697,
	287, 697,
	288, 697,
	289, 697,
	290, 697,
	291, 697,
	292, 697,
	293, 697,
	294, 697,
	295, 697,
	297, 697,
	299, 697,
	300, 697,
	301, 697,
	302, 697,
	303, 697,
	304, 697,
	305, 697,
	307, 697,
	308, 697,
	309, 697,
	312, 697,
	313, 697,
	314, 697,
	315, 697,
	316, 697,
	317, 697,
	318, 697,
	319, 697,
	320, 697,
	323, 697,
	324, 697,
	325, 697,
	326, 697,
	327, 697,
	328, 697,
	330, 697,
	331, 697,
	332, 697,
	333, 697,
	334, 697,
	335, 697,
	338, 697,
	343, 697,
	344, 697,
	345, 697,
	346, 697,
	347, 697,
	348, 697,
	358, 697,
	363, 697,
	364, 697,
	365, 697,
	372, 697,
	378, 697,
	-2, 0,
	-1, 143,
	1, 54,
	376, 54,
	-2, 689,
	-1, 510,
	132, 1302,
	310, 1302,
	353, 1302,
	374, 1302,
	-2, 0,
	-1, 511,
	132, 1251,
	310, 1251,
	353, 1251,
	374, 1251,
	-2, 0,
	-1, 513,
	132, 1361,
	310, 1361,
	353, 1361,
	374, 1361,
	-2, 0,
	-1, 515,
	132, 1383,
	310, 1383,
	353, 1383,
	374, 1383,
	-2, 0,
	-1, 522,
	132, 1307,
	310, 1307,
	353, 1307,
	374, 1307,
	-2, 327,
	-1, 548,
	1, 405,
	371, 405,
	373, 405,
	375, 405,
	376, 405,
	-2, 0,
	-1, 549,
	1, 457,
	129, 457,
	371, 457,
	373, 457,
	375, 457,
	376, 457,
	-2, 0,
	-1, 555,
	1, 419,
	371, 419,
	373, 419,
	375, 419,
	376, 419,
	-2, 0,
	-1, 557,
	1, 423,
	371, 423,
	373, 423,
	375, 423,
	376, 423,
	-2, 0,
	-1, 560,
	1, 431,
	371, 431,
	373, 431,
	375, 431,
	376, 431,
	-2, 0,
	-1, 561,
	1, 436,
	371, 436,
	373, 436,
	375, 436,
	376, 436,
	-2, 0,
	-1, 564,
	1, 446,
	371, 446,
	373, 446,
	375, 446,
	376, 446,
	-2, 0,
	-1, 580,
	117, 699,
	184, 699,
	209, 699,
	-2, 659,
	-1, 583,
	117, 698,
	184, 698,
	209, 698,
	-2, 657,
	-1, 640,
	372, 1229,
	-2, 1222,
	-1, 641,
	372, 1230,
	-2, 1223,
	-1, 647,
	5, 876,
	372, 876,
	-2, 1435,
	-1, 672,
	5, 835,
	-2, 1404,
	-1, 673,
	5, 870,
	372, 870,
	-2, 1406,
	-1, 674,
	5, 845,
	-2, 1407,
	-1, 675,
	5, 844,
	-2, 1408,
	-1, 676,
	5, 870,
	372, 870,
	-2, 1411,
	-1, 677,
	5, 870,
	372, 870,
	-2, 1412,
	-1, 678,
	5, 871,
	-2, 1415,
	-1, 679,
	5, 827,
	-2, 1416,
	-1, 680,
	5, 827,
	-2, 1417,
	-1, 681,
	5, 852,
	-2, 1421,
	-1, 682,
	5, 837,
	-2, 1422,
	-1, 683,
	5, 838,
	-2, 1423,
	-1, 684,
	5, 828,
	-2, 1429,
	-1, 685,
	5, 829,
	-2, 1430,
	-1, 686,
	5, 830,
	-2, 1431,
	-1, 687,
	5, 831,
	-2, 1432,
	-1, 688,
	5, 832,
	-2, 1433,
	-1, 689,
	5, 833,
	-2, 1434,
	-1, 690,
	5, 827,
	-2, 1439,
	-1, 691,
	5, 836,
	-2, 1444,
	-1, 692,
	5, 834,
	-2, 1447,
	-1, 693,
	5, 868,
	372, 868,
	-2, 1449,
	-1, 694,
	5, 872,
	-2, 1452,
	-1, 695,
	5, 874,
	-2, 1453,
	-1, 696,
	5, 867,
	372, 867,
	-2, 1458,
	-1, 880,
	225, 687,
	-2, 534,
	-1, 884,
	211, 1226,
	-2, 0,
	-1, 919,
	1, 216,
	371, 216,
	373, 216,
	375, 216,
	376, 216,
	-2, 662,
	-1, 926,
	4, 1457,
	10, 1457,
	11, 1457,
	13, 1457,
	14, 1457,
	15, 1457,
	16, 1457,
	17, 1457,
	18, 1457,
	20, 1457,
	21, 1457,
	23, 1457,
	26, 1457,
	28, 1457,
	30, 1457,
	33, 1457,
	34, 1457,
	35, 1457,
	36, 1457,
	37, 1457,
	38, 1457,
	39, 1457,
	40, 1457,
	41, 1457,
	42, 1457,
	44, 1457,
	45, 1457,
	46, 1457,
	47, 1457,
	48, 1457,
	51, 1457,
	52, 1457,
	53, 1457,
	55, 1457,
	56, 1457,
	57, 1457,
	60, 1457,
	61, 1457,
	62, 1457,
	63, 1457,
	64, 1457,
	65, 1457,
	66, 1457,
	67, 1457,
	69, 1457,
	70, 1457,
	71, 1457,
	72, 1457,
	74, 1457,
	75, 1457,
	76, 1457,
	77, 1457,
	85, 1457,
	86, 1457,
	87, 1457,
	88, 1457,
	89, 1457,
	90, 1457,
	91, 1457,
	92, 1457,
	94, 1457,
	96, 1457,
	98, 1457,
	101, 1457,
	102, 1457,
	104, 1457,
	108, 1457,
	109, 1457,
	110, 1457,
	111, 1457,
	112, 1457,
	113, 1457,
	114, 1457,
	118, 1457,
	119, 1457,
	120, 1457,
	121, 1457,
	122, 1457,
	123, 1457,
	124, 1457,
	125, 1457,
	126, 1457,
	127, 1457,
	128, 1457,
	130, 1457,
	133, 1457,
	135, 1457,
	136, 1457,
	138, 1457,
	141, 1457,
	142, 1457,
	145, 1457,
	146, 1457,
	147, 1457,
	148, 1457,
	149, 1457,
	150, 1457,
	151, 1457,
	152, 1457,
	154, 1457,
	156, 1457,
	157, 1457,
	158, 1457,
	159, 1457,
	160, 1457,
	161, 1457,
	162, 1457,
	163, 1457,
	164, 1457,
	166, 1457,
	168, 1457,
	169, 1457,
	170, 1457,
	171, 1457,
	172, 1457,
	173, 1457,
	174, 1457,
	175, 1457,
	177, 1457,
	178, 1457,
	180, 1457,
	181, 1457,
	182, 1457,
	183, 1457,
	185, 1457,
	188, 1457,
	189, 1457,
	190, 1457,
	191, 1457,
	192, 1457,
	193, 1457,
	194, 1457,
	195, 1457,
	196, 1457,
	197, 1457,
	198, 1457,
	199, 1457,
	200, 1457,
	204, 1457,
	205, 1457,
	206, 1457,
	207, 1457,
	208, 1457,
	210, 1457,
	213, 1457,
	214, 1457,
	216, 1457,
	217, 1457,
	219, 1457,
	221, 1457,
	222, 1457,
	223, 1457,
	224, 1457,
	225, 1457,
	226, 1457,
	228, 1457,
	229, 1457,
	230, 1457,
	231, 1457,
	232, 1457,
	234, 1457,
	235, 1457,
	236, 1457,
	237, 1457,
	238, 1457,
	239, 1457,
	240, 1457,
	241, 1457,
	243, 1457,
	244, 1457,
	245, 1457,
	246, 1457,
	247, 1457,
	248, 1457,
	249, 1457,
	250, 1457,
	251, 1457,
	252, 1457,
	253, 1457,
	254, 1457,
	255, 1457,
	257, 1457,
	258, 1457,
	259, 1457,
	260, 1457,
	261, 1457,
	262, 1457,
	263, 1457,
	264, 1457,
	265, 1457,
	266, 1457,
	267, 1457,
	268, 1457,
	270, 1457,
	271, 1457,
	272, 1457,
	273, 1457,
	274, 1457,
	276, 1457,
	277, 1457,
	278, 1457,
	279, 1457,
	280, 1457,
	281, 1457,
	282, 1457,
	283, 1457,
	284, 1457,
	286, 1457,
	287, 1457,
	288, 1457,
	289, 1457,
	290, 1457,
	291, 1457,
	292, 1457,
	293, 1457,
	294, 1457,
	295, 1457,
	297, 1457,
	299, 1457,
	300, 1457,
	301, 1457,
	302, 1457,
	303, 1457,
	304, 1457,
	305, 1457,
	307, 1457,
	308, 1457,
	309, 1457,
	312, 1457,
	313, 1457,
	314, 1457,
	315, 1457,
	317, 1457,
	318, 1457,
	319, 1457,
	320, 1457,
	323, 1457,
	324, 1457,
	325, 1457,
	326, 1457,
	328, 1457,
	330, 1457,
	331, 1457,
	332, 1457,
	333, 1457,
	334, 1457,
	335, 1457,
	338, 1457,
	343, 1457,
	344, 1457,
	345, 1457,
	346, 1457,
	347, 1457,
	348, 1457,
	349, 1457,
	351, 1457,
	352, 1457,
	353, 1457,
	354, 1457,
	355, 1457,
	356, 1457,
	357, 1457,
	358, 1457,
	360, 1457,
	361, 1457,
	362, 1457,
	363, 1457,
	364, 1457,
	365, 1457,
	366, 1457,
	367, 1457,
	368, 1457,
	370, 1457,
	373, 1457,
	374, 1457,
	377, 1457,
	378, 1457,
	-2, 0,
	-1, 939,
	132, 1361,
	310, 1361,
	353, 1361,
	374, 1361,
	-2, 0,
	-1, 956,
	132, 1383,
	310, 1383,
	353, 1383,
	374, 1383,
	-2, 0,
	-1, 957,
	169, 602,
	234, 602,
	238, 602,
	-2, 315,
	-1, 1029,
	117, 698,
	184, 698,
	209, 698,
	-2, 660,
	-1, 1108,
	107, 664,
	117, 664,
	165, 664,
	184, 664,
	209, 664,
	215, 664,
	321, 664,
	-2, 1005,
	-1, 1118,
	372, 1206,
	-2, 1194,
	-1, 1136,
	373, 1118,
	-2, 0,
	-1, 1160,
	169, 602,
	234, 602,
	238, 602,
	-2, 597,
	-1, 1188,
	373, 1118,
	-2, 0,
	-1, 1192,
	107, 664,
	117, 664,
	165, 664,
	184, 664,
	209, 664,
	215, 664,
	321, 664,
	-2, 760,
	-1, 1332,
	169, 602,
	234, 602,
	238, 602,
	-2, 317,
	-1, 1434,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 911,
	-1, 1435,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 912,
	-1, 1436,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 913,
	-1, 1437,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 914,
	-1, 1438,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 915,
	-1, 1439,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 916,
	-1, 1440,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 917,
	-1, 1441,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 918,
	-1, 1450,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 927,
	-1, 1451,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 928,
	-1, 1452,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 929,
	-1, 1455,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	280, 0,
	348, 0,
	358, 0,
	-2, 934,
	-1, 1461,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	280, 0,
	348, 0,
	358, 0,
	-2, 936,
	-1, 1463,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	280, 0,
	348, 0,
	358, 0,
	-2, 940,
	-1, 1464,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	280, 0,
	348, 0,
	358, 0,
	-2, 941,
	-1, 1465,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	280, 0,
	348, 0,
	358, 0,
	-2, 942,
	-1, 1466,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	280, 0,
	348, 0,
	358, 0,
	-2, 943,
	-1, 1535,
	132, 1129,
	372, 1229,
	-2, 1222,
	-1, 1536,
	132, 1130,
	-2, 1400,
	-1, 1537,
	132, 1131,
	-2, 1306,
	-1, 1538,
	132, 1132,
	-2, 1269,
	-1, 1539,
	132, 1133,
	-2, 1286,
	-1, 1540,
	132, 1134,
	-2, 1305,
	-1, 1541,
	132, 1135,
	-2, 1358,
	-1, 1617,
	1, 761,
	74, 761,
	107, 761,
	117, 761,
	133, 761,
	137, 761,
	139, 761,
	156, 761,
	165, 761,
	172, 761,
	181, 761,
	184, 761,
	196, 761,
	209, 761,
	211, 761,
	215, 761,
	256, 761,
	258, 761,
	321, 761,
	329, 761,
	340, 761,
	341, 761,
	350, 761,
	371, 761,
	373, 761,
	375, 761,
	376, 761,
	377, 761,
	-2, 760,
	-1, 1762,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	280, 0,
	348, 0,
	358, 0,
	-2, 935,
	-1, 1763,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	280, 0,
	348, 0,
	358, 0,
	-2, 937,
	-1, 1768,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	280, 0,
	348, 0,
	358, 0,
	-2, 938,
	-1, 1786,
	220, 1089,
	-2, 1091,
	-1, 2017,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	280, 0,
	348, 0,
	358, 0,
	-2, 939,
	-1, 2022,
	168, 0,
	-2, 955,
	-1, 2031,
	220, 1090,
	-2, 1092,
	-1, 2073,
	13, 0,
	14, 0,
	15, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 982,
	-1, 2074,
	13, 0,
	14, 0,
	15, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 983,
	-1, 2075,
	13, 0,
	14, 0,
	15, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 984,
	-1, 2079,
	13, 0,
	14, 0,
	15, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 988,
	-1, 2080,
	13, 0,
	14, 0,
	15, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 989,
	-1, 2081,
	13, 0,
	14, 0,
	15, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 990,
	-1, 2213,
	168, 0,
	-2, 956,
	-1, 2216,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	280, 0,
	348, 0,
	358, 0,
	-2, 959,
	-1, 2217,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	280, 0,
	348, 0,
	358, 0,
	-2, 961,
	-1, 2334,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	280, 0,
	348, 0,
	358, 0,
	-2, 960,
	-1, 2335,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	280, 0,
	348, 0,
	358, 0,
	-2, 962,
	-1, 2342,
	168, 0,
	-2, 991,
	-1, 2418,
	168, 0,
	-2, 992,
	-1, 2495,
	36, 0,
	149, 0,
	183, 0,
	280, 0,
	348, 0,
	358, 0,
	-2, 1403,
}

const sqlPrivate = 57344

const sqlLast = 43543

var sqlAct = [...]int{

	641, 2166, 2494, 2540, 2503, 1683, 2469, 2504, 2050, 2368,
	2505, 1691, 2315, 1996, 1663, 1232, 2423, 2133, 2493, 73,
	600, 1326, 1756, 977, 1239, 639, 2267, 2176, 1327, 2200,
	874, 1962, 1662, 1274, 584, 2348, 2132, 1964, 2281, 744,
	2198, 1680, 182, 638, 1186, 1900, 1970, 182, 2192, 1879,
	1169, 1667, 1852, 1692, 1612, 182, 631, 1630, 1235, 2103,
	1666, 1613, 452, 1887, 182, 1656, 1851, 1621, 2247, 182,
	182, 1190, 1797, 182, 1491, 1413, 182, 1357, 1114, 960,
	1490, 1408, 1752, 1032, 182, 1228, 467, 26, 617, 1738,
	1198, 611, 521, 1478, 592, 123, 1170, 1475, 1353, 1499,
	1200, 959, 449, 1515, 1564, 909, 1146, 1664, 1509, 979,
	920, 906, 1150, 750, 1685, 899, 1586, 732, 1670, 1103,
	753, 1599, 1531, 771, 610, 1252, 1177, 1031, 501, 173,
	1195, 1356, 633, 1033, 124, 182, 182, 518, 1160, 479,
	1246, 178, 514, 182, 730, 1159, 589, 896, 2282, 1037,
	2117, 1785, 1254, 2118, 1492, 125, 542, 2536, 1684, 123,
	1254, 1223, 2518, 1254, 2515, 588, 2280, 588, 1706, 182,
	182, 182, 182, 773, 1187, 2514, 2511, 182, 182, 1706,
	1223, 2491, 2490, 2464, 2459, 1721, 1721, 1714, 2329, 2455,
	2015, 1980, 862, 1223, 183, 1979, 1048, 1049, 583, 493,
	697, 2447, 1219, 2420, 2398, 2280, 598, 1714, 2280, 2395,
	2393, 2379, 2378, 1223, 2280, 1223, 2280, 2356, 2353, 1051,
	2336, 1223, 1223, 2303, 1714, 2301, 1657, 1706, 2279, 1706,
	26, 2260, 2280, 2215, 634, 1223, 2191, 1714, 123, 1588,
	1661, 2186, 1706, 1050, 2113, 1661, 699, 2026, 2114, 2465,
	1990, 1706, 1951, 2106, 1952, 1876, 1223, 1869, 581, 1223,
	1867, 1870, 1866, 698, 1706, 1657, 1706, 1865, 1789, 616,
	1721, 1706, 1725, 747, 1790, 2329, 1706, 768, 2106, 580,
	734, 1713, 758, 762, 593, 1714, 1705, 1048, 1049, 1660,
	1706, 1593, 1721, 1661, 1267, 1592, 1587, 736, 1268, 737,
	2007, 1619, 2086, 2028, 1223, 1952, 140, 1755, 1736, 1335,
	1051, 1164, 1494, 1056, 860, 941, 406, 1048, 1049, 143,
	1078, 1079, 1080, 1088, 1089, 1090, 938, 1706, 937, 1796,
	1512, 2283, 936, 1081, 1050, 142, 935, 934, 933, 932,
	1051, 931, 930, 1092, 929, 928, 927, 738, 735, 574,
	573, 572, 540, 1688, 539, 1048, 1049, 538, 1255, 537,
	1354, 1088, 1089, 1090, 1050, 536, 1255, 774, 646, 1255,
	1070, 141, 535, 775, 534, 1071, 533, 1067, 1051, 134,
	532, 1092, 1513, 531, 530, 529, 135, 528, 527, 526,
	525, 524, 509, 508, 140, 507, 506, 505, 440, 439,
	438, 437, 1050, 436, 1056, 1822, 1823, 421, 1070, 126,
	420, 412, 751, 411, 182, 410, 182, 182, 409, 182,
	402, 401, 166, 142, 182, 1073, 1074, 1075, 1076, 165,
	182, 1514, 1511, 164, 1056, 163, 1979, 162, 760, 764,
	161, 770, 160, 182, 182, 182, 182, 182, 591, 1072,
	159, 158, 923, 157, 1048, 1049, 1085, 1093, 156, 141,
	155, 913, 154, 1073, 1074, 1075, 1076, 153, 1048, 1049,
	152, 589, 1056, 151, 182, 1091, 150, 1051, 1822, 1823,
	149, 1260, 1895, 148, 1587, 147, 146, 866, 182, 1253,
	1083, 1051, 1388, 145, 1085, 1093, 1071, 126, 144, 1191,
	1528, 1050, 1360, 1526, 182, 41, 878, 1524, 1516, 882,
	1522, 972, 2510, 2492, 182, 1050, 2479, 2474, 44, 2415,
	2396, 1082, 1828, 1044, 2322, 2246, 2245, 2241, 1083, 140,
	2240, 2233, 2232, 701, 1071, 902, 902, 2231, 2227, 2226,
	2225, 2224, 2218, 898, 2197, 923, 1061, 1059, 1060, 1052,
	1053, 1054, 1055, 1057, 1058, 1077, 873, 2100, 142, 903,
	2095, 921, 2094, 2093, 1822, 1823, 2036, 1840, 1841, 1842,
	1072, 1056, 1950, 975, 1822, 1823, 182, 1954, 1822, 1823,
	942, 1907, 474, 1903, 1874, 1056, 1510, 1086, 1871, 1859,
	1850, 1821, 1818, 1077, 141, 1828, 1817, 1815, 1802, 1801,
	970, 1786, 134, 1048, 1049, 1617, 1044, 1486, 1072, 135,
	1271, 745, 1719, 1189, 1043, 1030, 66, 1837, 1122, 1115,
	1188, 1106, 871, 1238, 2052, 1086, 1051, 1837, 2482, 2450,
	2444, 2443, 1687, 2434, 2432, 589, 2410, 2409, 2408, 2365,
	1052, 1053, 1054, 1055, 1057, 1058, 924, 1071, 866, 1994,
	1050, 2344, 925, 1029, 957, 1084, 954, 1838, 1062, 1063,
	1069, 1068, 1064, 1065, 1066, 1087, 2330, 1061, 1059, 1060,
	1052, 1053, 1054, 1055, 1057, 1058, 2309, 2300, 2286, 1716,
	2238, 1828, 2174, 2172, 2242, 2321, 2171, 2169, 2141, 1025,
	2140, 1828, 2121, 1084, 2109, 1828, 2021, 67, 1940, 764,
	973, 1934, 1920, 1087, 1844, 1061, 1059, 1060, 1052, 1053,
	1054, 1055, 1057, 1058, 770, 140, 1355, 1751, 1487, 1919,
	1056, 1072, 1843, 127, 69, 1750, 70, 581, 1905, 1875,
	182, 1839, 182, 1849, 1811, 1810, 1040, 1041, 1807, 924,
	140, 1782, 1777, 1838, 142, 925, 1480, 473, 580, 1151,
	103, 1045, 1154, 1838, 1604, 182, 182, 1576, 1824, 1825,
	1826, 1827, 1829, 1830, 1520, 1231, 746, 1175, 1167, 142,
	1110, 1158, 1144, 1143, 589, 1118, 1142, 1168, 1141, 1140,
	141, 1139, 1071, 1148, 1149, 1138, 1137, 1136, 134, 1135,
	1134, 1173, 1133, 1152, 1132, 135, 1920, 1131, 1130, 1129,
	1128, 1127, 1126, 1155, 1119, 141, 1107, 1106, 953, 1054,
	1055, 1057, 1058, 134, 945, 917, 2426, 1839, 126, 2328,
	135, 1052, 1053, 1054, 1055, 1057, 1058, 1839, 2220, 1115,
	1275, 1824, 1825, 1826, 1827, 1829, 1830, 2196, 2116, 1189,
	2112, 1788, 1992, 126, 123, 764, 1724, 1605, 1893, 1048,
	1049, 1104, 1185, 1208, 1023, 969, 1072, 1965, 1163, 2332,
	923, 182, 872, 2331, 2325, 2119, 1161, 773, 1981, 1657,
	1191, 1527, 1051, 182, 1525, 1193, 1165, 1156, 1523, 1822,
	1823, 1521, 1157, 1345, 1344, 182, 1354, 1351, 1221, 1723,
	1028, 182, 1943, 182, 1937, 182, 1050, 1933, 1237, 182,
	1873, 1341, 1872, 1761, 1230, 1834, 1835, 1836, 1392, 1272,
	966, 2349, 1124, 1997, 1833, 1831, 1832, 1824, 1825, 1826,
	1827, 1829, 1830, 1236, 1833, 1831, 1832, 1824, 1825, 1826,
	1827, 1829, 1830, 1826, 1827, 1829, 1830, 1684, 2053, 1500,
	182, 182, 1147, 2477, 1243, 1017, 1975, 923, 2128, 182,
	1793, 1710, 182, 2454, 1059, 1060, 1052, 1053, 1054, 1055,
	1057, 1058, 2533, 587, 2294, 1631, 725, 1201, 604, 1202,
	2004, 1726, 1348, 773, 2390, 1201, 2389, 1202, 2387, 1623,
	2534, 746, 182, 2386, 1018, 1121, 2160, 182, 2152, 426,
	1224, 1009, 182, 182, 2157, 182, 723, 182, 2125, 182,
	2124, 182, 1222, 1806, 898, 721, 1201, 1209, 1202, 1805,
	718, 1512, 182, 1993, 1804, 1803, 1764, 1623, 182, 182,
	1717, 586, 1709, 727, 751, 1196, 1622, 923, 1206, 1257,
	441, 1652, 1259, 967, 1342, 1248, 1262, 1648, 1245, 1645,
	1462, 1162, 1634, 859, 2306, 1320, 1207, 182, 1203, 700,
	427, 773, 1822, 1823, 924, 1389, 1203, 1580, 1681, 1579,
	925, 774, 1423, 1513, 1349, 1385, 1386, 775, 1217, 1026,
	1269, 588, 1265, 2164, 1362, 2453, 968, 2165, 1328, 576,
	488, 1270, 954, 1477, 1216, 1947, 1477, 1203, 1226, 1329,
	579, 1729, 2488, 1484, 1249, 1332, 1361, 2009, 1482, 1346,
	1358, 123, 1047, 1731, 1516, 1214, 2370, 1189, 1330, 1376,
	2046, 2525, 1514, 1511, 578, 445, 952, 1395, 2143, 414,
	2461, 1369, 1365, 1215, 1366, 1732, 589, 579, 435, 1972,
	1370, 589, 1371, 2507, 1372, 1942, 1373, 1730, 1374, 1003,
	1973, 924, 1229, 1936, 1633, 2462, 2548, 925, 430, 1230,
	1387, 1753, 1754, 1254, 1210, 1380, 1382, 2437, 1393, 167,
	764, 2005, 1247, 182, 1247, 182, 1394, 774, 182, 1828,
	1145, 963, 581, 775, 1422, 581, 581, 585, 1004, 182,
	1281, 444, 1585, 2340, 1412, 1972, 1500, 1516, 773, 1516,
	1495, 182, 1314, 1404, 1497, 182, 1405, 1406, 182, 1022,
	1016, 1350, 182, 1931, 418, 1676, 182, 1058, 2533, 1313,
	1384, 1559, 182, 2392, 589, 1027, 1101, 429, 428, 182,
	773, 924, 1488, 2508, 182, 1549, 1485, 925, 2003, 1600,
	2150, 1838, 182, 1632, 1199, 982, 964, 1830, 2524, 182,
	965, 1809, 1355, 1352, 170, 774, 2275, 2008, 403, 1616,
	182, 775, 182, 1624, 182, 588, 1542, 182, 1606, 182,
	2207, 182, 182, 1610, 182, 182, 1110, 1510, 1620, 923,
	1635, 1637, 2506, 182, 1502, 1212, 2532, 719, 1204, 1704,
	990, 2509, 1583, 1281, 1281, 2276, 1204, 1534, 1534, 1547,
	1591, 1582, 2144, 1567, 1642, 1314, 1314, 1571, 1572, 1574,
	2543, 1008, 1650, 1601, 1602, 1839, 1597, 719, 2010, 1596,
	171, 1607, 1313, 1313, 1280, 1193, 720, 1204, 643, 1640,
	1627, 719, 2530, 2314, 1653, 1646, 443, 1678, 2371, 948,
	940, 729, 2043, 1686, 728, 1686, 1712, 1036, 1946, 2381,
	2523, 1473, 2380, 1654, 2236, 1333, 1698, 1766, 2363, 902,
	1476, 902, 2549, 2290, 431, 446, 1483, 1471, 2082, 1255,
	2554, 773, 123, 1690, 1459, 442, 1701, 1013, 123, 182,
	1707, 2429, 1699, 1702, 1700, 577, 487, 1046, 921, 1708,
	1711, 2044, 774, 2127, 1916, 182, 182, 182, 775, 182,
	1718, 951, 1720, 2271, 172, 2272, 432, 1912, 1364, 1048,
	1049, 1679, 1833, 1831, 1832, 1824, 1825, 1826, 1827, 1829,
	1830, 1244, 182, 1213, 774, 413, 404, 1280, 1280, 1233,
	775, 1152, 1051, 1155, 480, 2274, 433, 1176, 434, 1149,
	1148, 2293, 1014, 2042, 2277, 1467, 1727, 2275, 2292, 419,
	2268, 2470, 2177, 1468, 415, 1469, 1050, 485, 751, 1474,
	2541, 2266, 2237, 481, 416, 168, 2270, 1379, 1516, 1336,
	2083, 2289, 1400, 924, 751, 1035, 2084, 1618, 983, 925,
	2553, 1035, 123, 2316, 1340, 764, 2276, 1457, 1460, 1316,
	1741, 764, 405, 876, 1737, 482, 1180, 1015, 770, 991,
	875, 1743, 1048, 1049, 169, 2364, 175, 1901, 1749, 2269,
	589, 1890, 1745, 1922, 567, 1921, 2542, 984, 484, 1183,
	981, 1456, 963, 1759, 2273, 1051, 1056, 586, 1595, 1695,
	1180, 1338, 597, 496, 1774, 1178, 958, 1594, 2544, 963,
	770, 770, 1034, 1339, 1181, 490, 1401, 1795, 1034, 1050,
	1772, 895, 2167, 1183, 884, 1070, 2291, 893, 2307, 1179,
	1945, 2248, 2104, 1519, 1767, 774, 3, 1765, 1470, 1598,
	2361, 775, 1012, 1036, 1889, 1472, 1902, 2343, 1181, 717,
	2235, 472, 34, 1781, 589, 2163, 1518, 964, 1071, 1853,
	2020, 965, 1316, 1316, 2271, 1948, 2272, 568, 1816, 182,
	773, 2362, 1877, 1776, 1722, 182, 182, 1883, 1792, 182,
	1073, 1074, 1075, 1076, 182, 471, 33, 182, 1458, 1056,
	1001, 1182, 999, 1884, 498, 182, 2274, 997, 1769, 1659,
	483, 182, 182, 182, 1651, 2277, 1644, 182, 1770, 995,
	182, 1021, 1775, 993, 477, 1780, 182, 182, 182, 182,
	182, 1020, 1783, 470, 30, 1182, 182, 946, 1854, 182,
	987, 891, 1072, 182, 1742, 770, 1744, 1746, 764, 1799,
	1800, 1897, 182, 864, 1377, 1892, 1856, 1857, 1858, 1368,
	865, 1071, 182, 861, 182, 486, 182, 1896, 1913, 182,
	1125, 1760, 1888, 182, 1878, 480, 469, 79, 182, 1906,
	182, 495, 1011, 963, 1007, 569, 1953, 182, 1955, 2502,
	756, 722, 724, 489, 1220, 2273, 894, 589, 485, 1848,
	182, 923, 892, 1882, 481, 34, 1567, 1567, 1567, 1881,
	1908, 1861, 923, 182, 626, 1885, 1886, 2467, 1932, 1891,
	1077, 1930, 468, 78, 465, 22, 1939, 1977, 2264, 1989,
	1000, 1771, 998, 466, 23, 1072, 482, 996, 1773, 33,
	1998, 1060, 1052, 1053, 1054, 1055, 1057, 1058, 964, 994,
	182, 1956, 965, 992, 1959, 2148, 179, 1968, 1957, 484,
	2146, 407, 2126, 1974, 1961, 570, 1682, 464, 28, 422,
	986, 890, 1982, 1675, 774, 1264, 1263, 30, 447, 974,
	775, 567, 1261, 491, 179, 463, 20, 499, 1258, 1988,
	504, 2000, 2001, 595, 1256, 567, 2002, 571, 523, 597,
	182, 2023, 1999, 1218, 2006, 461, 19, 1211, 1205, 462,
	18, 1006, 2033, 597, 1963, 1983, 1984, 2403, 1985, 1986,
	79, 2011, 2534, 2038, 2039, 2040, 1038, 2013, 2327, 456,
	15, 2326, 1061, 1059, 1060, 1052, 1053, 1054, 1055, 1057,
	1058, 1757, 1359, 2193, 475, 2185, 596, 2027, 751, 733,
	733, 1623, 1623, 1281, 751, 751, 2029, 407, 751, 2032,
	1638, 1636, 2405, 1639, 568, 1314, 78, 1655, 22, 1414,
	1421, 483, 1647, 1643, 2054, 2439, 2059, 23, 568, 2056,
	1909, 182, 1313, 407, 407, 766, 407, 182, 2061, 1747,
	1281, 179, 863, 2283, 2088, 924, 182, 182, 2045, 2047,
	2048, 925, 1314, 1039, 985, 1935, 924, 1758, 2417, 2089,
	2122, 28, 925, 2249, 2087, 1042, 497, 457, 16, 1313,
	1649, 1949, 1390, 1391, 741, 1641, 486, 2466, 2102, 20,
	455, 14, 2312, 2107, 1689, 2105, 2138, 1677, 1960, 1281,
	2108, 2115, 1674, 182, 742, 182, 1584, 1229, 2162, 19,
	1331, 1314, 182, 18, 2137, 923, 1229, 1273, 2123, 2539,
	123, 460, 12, 2173, 2552, 2120, 2130, 2139, 1313, 2170,
	182, 182, 569, 15, 2187, 454, 10, 2355, 2179, 2254,
	2154, 459, 7, 2195, 2154, 1315, 569, 1280, 182, 2151,
	2154, 2178, 2190, 1048, 1049, 1403, 458, 6, 182, 773,
	182, 182, 1281, 2168, 2181, 2096, 773, 2101, 2182, 1048,
	1049, 2111, 2153, 2183, 1314, 2180, 2158, 1822, 1823, 2014,
	2189, 743, 2161, 2188, 1280, 1048, 1049, 2209, 2049, 2194,
	1734, 1313, 1051, 453, 5, 1734, 1733, 1995, 1281, 1281,
	1050, 1898, 2147, 182, 2149, 2214, 1868, 1281, 1281, 1735,
	1314, 1314, 570, 1581, 1578, 1577, 1050, 1508, 1112, 1314,
	1314, 16, 2222, 2041, 594, 1958, 570, 1313, 1313, 1122,
	1120, 1019, 1010, 1280, 14, 1005, 1313, 1313, 1002, 2156,
	1281, 988, 950, 1334, 571, 2159, 575, 2369, 1315, 1315,
	478, 1367, 1314, 989, 1550, 1894, 1603, 182, 571, 2460,
	182, 1881, 2234, 2228, 1808, 12, 2422, 2339, 1517, 1313,
	773, 182, 182, 1123, 2252, 182, 182, 182, 55, 10,
	2135, 620, 2204, 2265, 2129, 7, 2259, 1176, 523, 2210,
	880, 523, 182, 885, 1669, 1668, 1280, 182, 888, 182,
	6, 182, 182, 182, 407, 776, 2288, 2253, 182, 924,
	751, 182, 1316, 2255, 923, 925, 2138, 523, 523, 407,
	910, 863, 182, 182, 2284, 2258, 2251, 2287, 2263, 923,
	1343, 642, 1280, 1280, 2137, 2305, 2310, 5, 1533, 1415,
	716, 1280, 1280, 644, 1278, 2138, 1180, 2139, 523, 1316,
	2138, 645, 2318, 774, 1279, 2311, 2308, 1153, 632, 775,
	774, 2313, 523, 2137, 1276, 2317, 775, 918, 2137, 1183,
	1693, 1347, 2319, 1481, 1280, 1498, 2139, 1791, 949, 1116,
	612, 2139, 624, 2333, 2324, 1178, 623, 2250, 523, 1496,
	944, 1899, 1971, 2256, 1181, 2320, 1399, 1748, 1316, 1695,
	751, 1396, 1967, 2145, 417, 1819, 1281, 916, 2338, 1179,
	1556, 1548, 1544, 1024, 1277, 182, 1174, 182, 1314, 773,
	182, 1102, 2345, 2323, 1694, 971, 1978, 1715, 182, 1166,
	2206, 476, 1407, 740, 773, 1313, 739, 2352, 1337, 1728,
	1095, 1094, 726, 2431, 962, 961, 1234, 1915, 2372, 2547,
	407, 477, 2438, 2142, 2373, 2476, 2138, 2375, 139, 136,
	138, 1316, 137, 1230, 774, 182, 2357, 1944, 923, 82,
	775, 1182, 182, 32, 2137, 2354, 31, 102, 101, 100,
	182, 182, 923, 923, 99, 2138, 2404, 2139, 98, 97,
	96, 2401, 95, 94, 93, 92, 2394, 1316, 1316, 91,
	182, 2402, 480, 2137, 2400, 182, 1316, 1316, 924, 2411,
	2413, 2414, 182, 2154, 925, 2406, 2139, 1277, 1277, 90,
	2433, 2412, 89, 924, 2416, 485, 751, 88, 2419, 925,
	87, 481, 86, 85, 84, 2427, 2428, 182, 182, 1316,
	1280, 519, 2359, 182, 516, 2391, 81, 80, 2448, 2397,
	29, 923, 25, 2446, 2351, 106, 182, 2374, 2449, 2425,
	923, 923, 2436, 482, 24, 2435, 77, 76, 27, 17,
	2297, 2384, 2385, 2442, 2451, 621, 74, 2302, 589, 1175,
	2452, 2457, 2458, 182, 11, 182, 484, 21, 182, 60,
	773, 2377, 61, 59, 1550, 1550, 58, 57, 2483, 2472,
	13, 2485, 53, 52, 504, 2388, 733, 2484, 2473, 1917,
	50, 2489, 49, 774, 48, 2487, 182, 47, 9, 775,
	105, 45, 8, 1281, 43, 2501, 2138, 42, 774, 407,
	407, 2499, 2500, 182, 775, 1314, 2517, 2486, 104, 182,
	74, 2512, 118, 115, 2137, 117, 1917, 2516, 2522, 114,
	2519, 116, 1313, 182, 2520, 2521, 120, 2139, 119, 112,
	110, 111, 924, 2531, 113, 2529, 109, 108, 925, 2535,
	1550, 1550, 1550, 121, 39, 2538, 924, 924, 2537, 1281,
	38, 37, 925, 925, 36, 35, 2, 1, 2545, 2550,
	2546, 1314, 2551, 0, 0, 1991, 0, 2367, 483, 582,
	0, 0, 590, 0, 0, 1316, 0, 0, 1313, 0,
	0, 0, 0, 2478, 0, 0, 0, 0, 752, 74,
	0, 0, 2463, 0, 0, 0, 0, 0, 0, 1281,
	0, 0, 0, 0, 2399, 179, 0, 0, 0, 0,
	0, 1314, 0, 0, 0, 924, 0, 407, 2480, 2481,
	0, 925, 0, 486, 924, 924, 0, 1280, 1313, 1242,
	925, 925, 0, 1822, 1823, 407, 0, 407, 0, 407,
	0, 0, 0, 1250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 774, 0, 0, 0, 0, 0,
	775, 0, 0, 0, 1414, 2057, 1822, 1823, 0, 0,
	0, 0, 0, 1414, 2062, 0, 0, 0, 0, 0,
	0, 0, 2445, 1280, 523, 179, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 523, 0, 1315, 0,
	0, 0, 0, 1266, 0, 0, 2092, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1778, 1779, 0, 0, 0, 523, 2475, 0, 0,
	0, 523, 0, 1280, 0, 1315, 179, 523, 0, 523,
	0, 523, 0, 523, 0, 523, 0, 0, 0, 0,
	1828, 0, 0, 0, 1550, 1550, 1378, 0, 0, 0,
	0, 0, 523, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1695, 0,
	0, 0, 0, 1828, 1315, 0, 0, 0, 0, 0,
	0, 523, 1316, 0, 0, 0, 0, 1845, 1846, 1847,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1838, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
	1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
	1550, 1550, 602, 1550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1838, 0, 1315, 1316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1315, 1315, 0, 1839, 0, 0, 0,
	0, 40, 1315, 1315, 0, 0, 0, 590, 1316, 0,
	0, 0, 41, 0, 0, 0, 0, 504, 0, 733,
	0, 0, 863, 0, 0, 44, 0, 0, 0, 1839,
	0, 0, 0, 407, 0, 1315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1615, 0, 0, 0, 407,
	0, 51, 407, 0, 0, 0, 1628, 0, 0, 0,
	407, 0, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 407, 0, 0, 0, 1277, 1658, 0,
	62, 0, 0, 0, 0, 0, 1665, 63, 0, 474,
	64, 0, 0, 863, 1831, 1832, 1824, 1825, 1826, 1827,
	1829, 1830, 0, 0, 407, 0, 1697, 0, 523, 0,
	0, 523, 0, 523, 1277, 407, 407, 0, 1703, 863,
	0, 2018, 2019, 66, 0, 0, 0, 1628, 1832, 1824,
	1825, 1826, 1827, 1829, 1830, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 1105,
	0, 1108, 0, 0, 0, 0, 0, 0, 1113, 0,
	2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,
	2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 0,
	2085, 1315, 0, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 867, 869,
	0, 0, 0, 1739, 0, 0, 1277, 0, 0, 0,
	127, 69, 0, 70, 0, 0, 0, 0, 0, 407,
	407, 407, 0, 407, 0, 0, 0, 140, 0, 0,
	0, 1740, 0, 0, 473, 2383, 0, 103, 0, 0,
	0, 0, 1277, 1277, 0, 0, 407, 0, 0, 0,
	0, 1277, 1277, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 943, 1277, 74, 0, 0, 0, 947,
	1192, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 0, 0, 0, 1550, 0, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1550, 0, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 1315, 1096,
	1097, 1098, 1099, 1100, 0, 46, 0, 51, 0, 1109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1117,
	0, 0, 1550, 407, 0, 0, 0, 0, 54, 407,
	407, 0, 56, 407, 0, 0, 62, 0, 1615, 132,
	0, 1615, 0, 63, 0, 122, 64, 0, 0, 1904,
	1277, 0, 0, 0, 1315, 407, 1910, 1911, 0, 0,
	0, 1628, 0, 0, 1918, 0, 0, 0, 65, 0,
	1923, 1924, 1926, 1928, 1929, 0, 0, 0, 0, 66,
	407, 0, 0, 1938, 0, 0, 0, 1941, 0, 0,
	0, 0, 0, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 1315, 0, 1242, 0, 1242, 0,
	523, 0, 0, 407, 0, 0, 0, 1966, 0, 0,
	0, 0, 407, 0, 1976, 0, 0, 0, 0, 0,
	0, 407, 0, 1171, 1171, 0, 0, 0, 0, 0,
	602, 0, 74, 0, 1739, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1739, 0, 0,
	67, 0, 0, 0, 0, 0, 68, 0, 0, 0,
	0, 2342, 0, 582, 0, 0, 582, 582, 0, 0,
	0, 0, 0, 0, 0, 75, 127, 69, 0, 70,
	0, 71, 0, 133, 407, 0, 0, 0, 72, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	83, 0, 2366, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 1479,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 2051, 0, 0, 1108, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 1277, 141, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 2418,
	0, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 4,
	0, 0, 0, 0, 752, 0, 1822, 1823, 0, 1840,
	1841, 1842, 0, 1277, 0, 407, 0, 0, 0, 0,
	1192, 1615, 0, 0, 0, 0, 0, 0, 0, 0,
	863, 1615, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 2134, 0, 0, 0, 0,
	0, 602, 602, 0, 0, 0, 0, 0, 2155, 1837,
	0, 0, 2155, 1277, 0, 0, 0, 0, 2155, 0,
	0, 0, 74, 0, 74, 0, 0, 1628, 0, 1242,
	0, 0, 0, 0, 0, 0, 2175, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 407, 407, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1397, 0,
	1402, 0, 2201, 1828, 0, 0, 1409, 0, 0, 0,
	0, 0, 2203, 0, 2205, 407, 1424, 1425, 1426, 1427,
	1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
	1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 0, 1461,
	0, 1463, 1464, 1465, 1466, 0, 0, 2229, 0, 0,
	0, 0, 0, 0, 0, 1838, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 1109, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1529, 1530, 0, 0, 1546, 0,
	1558, 1560, 1565, 1568, 1569, 1570, 0, 0, 0, 0,
	0, 407, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1615, 863, 0, 0, 2261,
	2262, 1628, 0, 0, 0, 0, 0, 0, 0, 1839,
	0, 0, 0, 0, 0, 2134, 863, 0, 0, 0,
	0, 2295, 0, 2296, 0, 407, 2298, 2299, 0, 0,
	0, 0, 407, 0, 0, 2304, 1479, 0, 0, 0,
	0, 0, 0, 0, 2134, 0, 863, 1665, 0, 2134,
	0, 0, 0, 0, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1822,
	1823, 0, 1840, 1841, 1842, 0, 0, 1834, 1835, 1836,
	0, 0, 0, 0, 0, 2212, 1833, 1831, 1832, 1824,
	1825, 1826, 1827, 1829, 1830, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 1628,
	0, 2358, 1837, 0, 2360, 0, 0, 0, 0, 0,
	0, 0, 407, 0, 0, 2134, 0, 0, 0, 0,
	0, 0, 0, 0, 752, 0, 0, 0, 0, 0,
	752, 752, 0, 0, 752, 0, 0, 0, 0, 0,
	0, 2155, 0, 0, 2134, 0, 0, 0, 0, 407,
	0, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 0, 2201, 2201, 1828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 2424, 74, 0, 0, 0, 1615,
	0, 0, 0, 0, 0, 0, 1242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1843, 0, 0,
	74, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	40, 2440, 2441, 590, 0, 0, 0, 407, 1838, 0,
	0, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	2456, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	1762, 1763, 0, 0, 0, 0, 1768, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2471, 0, 863,
	51, 0, 407, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2134, 0, 0, 1787, 0,
	0, 0, 0, 0, 1794, 0, 0, 1798, 0, 62,
	2424, 0, 1839, 0, 0, 0, 63, 0, 474, 64,
	0, 0, 0, 0, 1812, 0, 0, 863, 0, 0,
	0, 0, 0, 407, 1048, 1049, 0, 1078, 1079, 1080,
	1088, 1089, 1090, 0, 0, 0, 0, 2528, 0, 0,
	1081, 0, 66, 0, 0, 0, 0, 1051, 1109, 0,
	1092, 0, 0, 0, 0, 1565, 1565, 1565, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1050, 0, 0, 0, 0, 0, 1070, 0, 0,
	0, 1171, 0, 0, 1067, 0, 602, 0, 0, 0,
	1834, 1835, 1836, 0, 0, 0, 0, 0, 0, 1833,
	1831, 1832, 1824, 1825, 1826, 1827, 1829, 1830, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 752, 0, 0, 0,
	0, 0, 1073, 1074, 1075, 1076, 0, 0, 0, 1822,
	1823, 1056, 1840, 1841, 1842, 0, 0, 0, 0, 127,
	69, 0, 70, 0, 0, 2211, 0, 0, 0, 0,
	0, 0, 0, 1085, 1093, 0, 140, 0, 0, 0,
	1375, 0, 0, 473, 0, 0, 103, 0, 1969, 0,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1837, 0, 0, 142, 0, 1083, 0, 0,
	1987, 0, 0, 1071, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 752, 602, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	602, 141, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 2012, 0, 135, 0, 0, 1409,
	0, 0, 0, 0, 0, 2016, 1828, 0, 2017, 0,
	0, 0, 1077, 0, 0, 0, 0, 0, 0, 126,
	2022, 0, 0, 0, 0, 0, 0, 1072, 0, 2030,
	0, 0, 0, 0, 0, 0, 0, 2034, 0, 0,
	1987, 0, 0, 0, 1086, 0, 0, 1843, 0, 1822,
	1823, 0, 1840, 1841, 1842, 0, 0, 0, 0, 0,
	2058, 0, 0, 0, 2060, 2025, 0, 0, 1838, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 752, 0, 0, 0, 0, 2090, 2091, 0,
	0, 0, 1837, 0, 0, 0, 2097, 2098, 2099, 0,
	0, 0, 1084, 0, 0, 1062, 1063, 1069, 1068, 1064,
	1065, 1066, 1087, 0, 1061, 1059, 1060, 1052, 1053, 1054,
	1055, 1057, 1058, 2110, 0, 0, 0, 0, 0, 0,
	0, 1864, 1839, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2131, 0, 0, 1828, 0, 0, 0,
	0, 0, 74, 0, 1048, 1049, 0, 1078, 1079, 1080,
	1088, 1089, 1090, 0, 0, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 1051, 0, 0,
	1092, 0, 0, 0, 0, 0, 0, 1843, 0, 0,
	0, 0, 0, 0, 0, 0, 1171, 0, 0, 0,
	0, 1050, 1184, 0, 0, 602, 0, 1070, 1838, 0,
	1834, 1835, 1836, 0, 1067, 0, 0, 0, 40, 1833,
	1831, 1832, 1824, 1825, 1826, 1827, 1829, 1830, 0, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 0, 2213, 0, 0, 0, 2216, 2217,
	0, 0, 2219, 0, 0, 0, 0, 0, 0, 2221,
	0, 2223, 1073, 1074, 1075, 1076, 0, 0, 51, 0,
	0, 1056, 0, 0, 0, 0, 0, 2230, 74, 0,
	0, 0, 1839, 0, 0, 0, 0, 0, 0, 0,
	0, 2407, 0, 1085, 1093, 0, 450, 62, 0, 0,
	0, 0, 0, 0, 63, 0, 474, 64, 0, 0,
	2239, 0, 1091, 0, 0, 0, 0, 40, 0, 0,
	0, 0, 0, 40, 0, 0, 0, 1083, 41, 0,
	0, 0, 0, 1071, 41, 0, 0, 0, 0, 0,
	66, 44, 0, 0, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	2285, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	1834, 1835, 1836, 51, 1108, 0, 0, 0, 0, 1833,
	1831, 1832, 1824, 1825, 1826, 1827, 1829, 1830, 0, 0,
	0, 0, 1077, 0, 0, 0, 62, 0, 0, 0,
	0, 0, 62, 63, 0, 474, 64, 1072, 0, 63,
	0, 474, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2334, 2335, 0, 0, 66,
	0, 0, 0, 0, 0, 66, 0, 127, 69, 0,
	70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 0, 2347, 0, 0, 0,
	0, 473, 2350, 0, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 142, 0, 1062, 1063, 1069, 1068, 1064,
	1065, 1066, 1087, 0, 1061, 1059, 1060, 1052, 1053, 1054,
	1055, 1057, 1058, 0, 0, 0, 2382, 0, 0, 0,
	67, 1863, 0, 0, 0, 0, 67, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 135, 0, 127, 69, 0, 70,
	0, 0, 127, 69, 0, 70, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 0, 126, 0, 140,
	473, 0, 0, 103, 0, 0, 473, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2430,
	0, 0, 142, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 602, 0, 141, 0, 134, 0, 0, 0,
	0, 0, 134, 135, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2498, 2498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2513, 0, 0, 772, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2498,
	184, 185, 778, 186, 779, 780, 781, 782, 344, 783,
	784, 785, 786, 187, 188, 189, 345, 346, 347, 348,
	190, 349, 350, 787, 191, 351, 352, 192, 193, 788,
	789, 353, 354, 355, 790, 194, 356, 791, 777, 792,
	195, 196, 197, 2498, 199, 200, 201, 198, 793, 202,
	0, 203, 204, 794, 702, 205, 206, 207, 795, 796,
	798, 797, 799, 800, 801, 208, 209, 408, 210, 357,
	211, 358, 359, 802, 212, 803, 213, 804, 214, 805,
	806, 215, 216, 807, 217, 808, 0, 809, 360, 218,
	220, 219, 221, 361, 362, 810, 703, 811, 0, 0,
	0, 0, 222, 223, 363, 364, 365, 0, 224, 812,
	225, 813, 814, 704, 815, 226, 366, 816, 367, 817,
	0, 227, 228, 0, 0, 229, 230, 368, 369, 706,
	818, 370, 234, 819, 231, 820, 705, 232, 371, 233,
	372, 373, 374, 375, 376, 821, 377, 822, 707, 235,
	236, 237, 708, 238, 239, 240, 823, 242, 241, 824,
	378, 709, 243, 710, 825, 244, 826, 827, 245, 0,
	246, 247, 248, 250, 379, 249, 711, 251, 252, 254,
	253, 828, 829, 830, 380, 255, 381, 256, 257, 831,
	258, 832, 833, 259, 834, 835, 260, 382, 712, 261,
	713, 383, 262, 263, 264, 265, 266, 836, 267, 384,
	268, 385, 269, 837, 270, 271, 272, 273, 274, 386,
	275, 276, 838, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 839, 289, 714, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 300, 840,
	302, 388, 301, 303, 304, 841, 305, 293, 294, 306,
	715, 307, 389, 390, 308, 842, 315, 309, 310, 295,
	311, 314, 391, 312, 313, 392, 843, 316, 844, 317,
	318, 319, 320, 321, 322, 323, 845, 393, 394, 395,
	846, 847, 324, 325, 396, 397, 848, 326, 327, 328,
	329, 849, 850, 330, 331, 332, 333, 851, 334, 852,
	398, 335, 336, 337, 399, 400, 853, 854, 338, 855,
	856, 857, 858, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 772, 0, 0, 0, 0, 0,
	1608, 0, 0, 0, 0, 0, 0, 0, 0, 1609,
	184, 185, 778, 186, 779, 780, 781, 782, 344, 783,
	784, 785, 786, 187, 188, 189, 345, 346, 347, 348,
	190, 349, 350, 787, 191, 351, 352, 192, 193, 788,
	789, 353, 354, 355, 790, 194, 356, 791, 777, 792,
	195, 196, 197, 0, 199, 200, 201, 198, 793, 202,
	0, 203, 204, 794, 702, 205, 206, 207, 795, 796,
	798, 797, 799, 800, 801, 208, 209, 408, 210, 357,
	211, 358, 359, 802, 212, 803, 213, 804, 214, 805,
	806, 215, 216, 807, 217, 808, 0, 809, 360, 218,
	220, 219, 221, 361, 362, 810, 703, 811, 0, 0,
	0, 0, 222, 223, 363, 364, 365, 0, 224, 812,
	225, 813, 814, 704, 815, 226, 366, 816, 367, 817,
	0, 227, 228, 0, 0, 229, 230, 368, 369, 706,
	818, 370, 234, 819, 231, 820, 705, 232, 371, 233,
	372, 373, 374, 375, 376, 821, 377, 822, 707, 235,
	236, 237, 708, 238, 239, 240, 823, 242, 241, 824,
	378, 709, 243, 710, 825, 244, 826, 827, 245, 0,
	246, 247, 248, 250, 379, 249, 711, 251, 252, 254,
	253, 828, 829, 830, 380, 255, 381, 256, 257, 831,
	258, 832, 833, 259, 834, 835, 260, 382, 712, 261,
	713, 383, 262, 263, 264, 265, 266, 836, 267, 384,
	268, 385, 269, 837, 270, 271, 272, 273, 274, 386,
	275, 276, 838, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 839, 289, 714, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 300, 840,
	302, 388, 301, 303, 304, 841, 305, 293, 294, 306,
	715, 307, 389, 390, 308, 842, 315, 309, 310, 295,
	311, 314, 391, 312, 313, 392, 843, 316, 844, 317,
	318, 319, 320, 321, 322, 323, 845, 393, 394, 395,
	846, 847, 324, 325, 396, 397, 848, 326, 327, 328,
	329, 849, 850, 330, 331, 332, 333, 851, 334, 852,
	398, 335, 336, 337, 399, 400, 853, 854, 338, 855,
	856, 857, 858, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 0, 0, 0, 772, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2257, 184, 185, 778, 186, 779, 780, 781, 782, 344,
	783, 784, 785, 786, 187, 188, 189, 345, 346, 347,
	348, 190, 349, 350, 787, 191, 351, 352, 192, 193,
	788, 789, 353, 354, 355, 790, 194, 356, 791, 777,
	792, 195, 196, 197, 0, 199, 200, 201, 198, 793,
	202, 0, 203, 204, 794, 702, 205, 206, 207, 795,
	796, 798, 797, 799, 800, 801, 208, 209, 408, 210,
	357, 211, 358, 359, 802, 212, 803, 213, 804, 214,
	805, 806, 215, 216, 807, 217, 808, 0, 809, 360,
	218, 220, 219, 221, 361, 362, 810, 703, 811, 0,
	0, 0, 0, 222, 223, 363, 364, 365, 0, 224,
	812, 225, 813, 814, 704, 815, 226, 366, 816, 367,
	817, 0, 227, 228, 0, 0, 229, 230, 368, 369,
	706, 818, 370, 234, 819, 231, 820, 705, 232, 371,
	233, 372, 373, 374, 375, 376, 821, 377, 822, 707,
	235, 236, 237, 708, 238, 239, 240, 823, 242, 241,
	824, 378, 709, 243, 710, 825, 244, 826, 827, 245,
	0, 246, 247, 248, 250, 379, 249, 711, 251, 252,
	254, 253, 828, 829, 830, 380, 255, 381, 256, 257,
	831, 258, 832, 833, 259, 834, 835, 260, 382, 712,
	261, 713, 383, 262, 263, 264, 265, 266, 836, 267,
	384, 268, 385, 269, 837, 270, 271, 272, 273, 274,
	386, 275, 276, 838, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 839, 289, 714,
	290, 291, 387, 292, 0, 296, 297, 298, 299, 300,
	840, 302, 388, 301, 303, 304, 841, 305, 293, 294,
	306, 715, 307, 389, 390, 308, 842, 315, 309, 310,
	295, 311, 314, 391, 312, 313, 392, 843, 316, 844,
	317, 318, 319, 320, 321, 322, 323, 845, 393, 394,
	395, 846, 847, 324, 325, 396, 397, 848, 326, 327,
	328, 329, 849, 850, 330, 331, 332, 333, 851, 334,
	852, 398, 335, 336, 337, 399, 400, 853, 854, 338,
	855, 856, 857, 858, 339, 340, 341, 342, 343, 0,
	0, 772, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1225, 184, 185, 778,
	186, 779, 780, 781, 782, 344, 783, 784, 785, 786,
	187, 188, 189, 345, 346, 347, 348, 190, 349, 350,
	787, 191, 351, 352, 192, 193, 788, 789, 353, 354,
	355, 790, 194, 356, 791, 777, 792, 195, 196, 197,
	0, 199, 200, 201, 198, 793, 202, 0, 203, 204,
	794, 702, 205, 206, 207, 795, 796, 798, 797, 799,
	800, 801, 208, 209, 408, 210, 357, 211, 358, 359,
	802, 212, 803, 213, 804, 214, 805, 806, 215, 216,
	807, 217, 808, 0, 809, 360, 218, 220, 219, 221,
	361, 362, 810, 703, 811, 0, 0, 0, 0, 222,
	223, 363, 364, 365, 0, 224, 812, 225, 813, 814,
	704, 815, 226, 366, 816, 367, 817, 0, 227, 228,
	0, 0, 229, 230, 368, 369, 706, 818, 370, 234,
	819, 231, 820, 705, 232, 371, 233, 372, 373, 374,
	375, 376, 821, 377, 822, 707, 235, 236, 237, 708,
	238, 239, 240, 823, 242, 241, 824, 378, 709, 243,
	710, 825, 244, 826, 827, 245, 0, 246, 247, 248,
	250, 379, 249, 711, 251, 252, 254, 253, 828, 829,
	830, 380, 255, 381, 256, 257, 831, 258, 832, 833,
	259, 834, 835, 260, 382, 712, 261, 713, 383, 262,
	263, 264, 265, 266, 836, 267, 384, 268, 385, 269,
	837, 270, 271, 272, 273, 274, 386, 275, 276, 838,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 839, 289, 714, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 300, 840, 302, 388, 301,
	303, 304, 841, 305, 293, 294, 306, 715, 307, 389,
	390, 308, 842, 315, 309, 310, 295, 311, 314, 391,
	312, 313, 392, 843, 316, 844, 317, 318, 319, 320,
	321, 322, 323, 845, 393, 394, 395, 846, 847, 324,
	325, 396, 397, 848, 326, 327, 328, 329, 849, 850,
	330, 331, 332, 333, 851, 334, 852, 398, 335, 336,
	337, 399, 400, 853, 854, 338, 855, 856, 857, 858,
	339, 340, 341, 342, 343, 1507, 0, 640, 629, 630,
	627, 628, 619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 1504, 186, 0, 0, 0,
	0, 657, 622, 0, 0, 0, 187, 188, 189, 345,
	672, 347, 673, 190, 674, 675, 0, 191, 351, 352,
	192, 193, 625, 656, 676, 677, 355, 0, 194, 668,
	0, 648, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 702, 205, 206,
	207, 0, 649, 650, 652, 0, 651, 653, 208, 209,
	408, 210, 678, 211, 679, 680, 0, 212, 0, 213,
	0, 214, 1505, 0, 671, 216, 0, 217, 0, 0,
	0, 613, 218, 220, 219, 221, 658, 659, 636, 703,
	0, 0, 0, 0, 0, 222, 223, 681, 682, 683,
	0, 224, 0, 225, 0, 0, 704, 0, 226, 669,
	0, 367, 0, 0, 227, 228, 0, 0, 229, 230,
	665, 667, 706, 0, 370, 234, 0, 231, 0, 705,
	232, 684, 233, 685, 686, 687, 688, 689, 0, 647,
	0, 707, 235, 236, 237, 708, 238, 239, 240, 0,
	242, 241, 0, 670, 709, 243, 710, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 711,
	251, 252, 254, 253, 608, 0, 637, 666, 255, 690,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	382, 712, 261, 713, 660, 262, 263, 264, 265, 266,
	0, 267, 661, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 691, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 714, 290, 291, 614, 292, 0, 296, 297, 298,
	299, 300, 0, 302, 388, 301, 303, 304, 654, 305,
	293, 294, 306, 715, 307, 692, 390, 308, 0, 315,
	309, 310, 295, 311, 314, 693, 312, 313, 662, 0,
	316, 0, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 694, 695, 0, 0, 324, 325, 663, 664, 635,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	655, 334, 0, 398, 335, 336, 337, 399, 696, 1503,
	0, 338, 0, 0, 0, 0, 339, 340, 341, 342,
	343, 609, 0, 640, 629, 630, 627, 628, 619, 0,
	0, 607, 0, 0, 0, 0, 605, 606, 1506, 184,
	185, 0, 186, 0, 0, 615, 1501, 657, 622, 0,
	0, 618, 187, 188, 189, 345, 672, 347, 673, 190,
	674, 675, 0, 191, 351, 352, 192, 193, 625, 656,
	676, 677, 355, 0, 194, 668, 0, 648, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 702, 205, 206, 207, 0, 649, 650,
	652, 0, 651, 653, 208, 209, 408, 210, 678, 211,
	679, 680, 603, 212, 0, 213, 0, 214, 0, 0,
	671, 216, 0, 217, 0, 0, 0, 613, 218, 220,
	219, 221, 658, 659, 636, 703, 0, 0, 0, 0,
	0, 222, 223, 681, 682, 683, 0, 224, 0, 225,
	0, 0, 704, 0, 226, 669, 0, 367, 0, 0,
	227, 228, 0, 0, 229, 230, 665, 667, 706, 0,
	370, 234, 0, 231, 0, 705, 232, 684, 233, 685,
	686, 687, 688, 689, 0, 647, 0, 707, 235, 236,
	237, 708, 238, 239, 240, 0, 242, 241, 0, 670,
	709, 243, 710, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 711, 251, 252, 254, 253,
	608, 0, 637, 666, 255, 690, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 712, 261, 713,
	660, 262, 263, 264, 265, 266, 0, 267, 661, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 691, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 714, 290, 291,
	614, 292, 0, 296, 297, 298, 299, 300, 140, 302,
	388, 301, 303, 304, 654, 305, 293, 294, 306, 715,
	307, 692, 390, 308, 0, 315, 309, 310, 295, 311,
	314, 693, 312, 313, 662, 0, 316, 142, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 694, 695, 0,
	0, 324, 325, 663, 664, 635, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 655, 334, 0, 398,
	335, 336, 337, 926, 696, 0, 0, 338, 0, 0,
	0, 134, 339, 340, 341, 342, 343, 609, 135, 591,
	0, 640, 629, 630, 627, 628, 619, 607, 0, 0,
	0, 0, 605, 606, 0, 0, 0, 184, 185, 0,
	186, 1111, 0, 0, 0, 657, 622, 618, 0, 0,
	187, 188, 189, 345, 672, 347, 673, 190, 674, 675,
	0, 191, 351, 352, 192, 193, 625, 656, 676, 677,
	355, 0, 194, 668, 0, 648, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 702, 205, 206, 207, 0, 649, 650, 652, 0,
	651, 653, 208, 209, 408, 210, 678, 211, 679, 680,
	0, 212, 0, 213, 0, 214, 0, 0, 671, 216,
	0, 217, 0, 0, 0, 613, 218, 220, 219, 221,
	658, 659, 636, 703, 0, 0, 0, 0, 0, 222,
	223, 681, 682, 683, 0, 224, 0, 225, 0, 0,
	704, 0, 226, 669, 0, 367, 0, 0, 227, 228,
	0, 0, 229, 230, 665, 667, 706, 0, 370, 234,
	0, 231, 0, 705, 232, 684, 233, 685, 686, 687,
	688, 689, 0, 647, 0, 707, 235, 236, 237, 708,
	238, 239, 240, 0, 242, 241, 0, 670, 709, 243,
	710, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 711, 251, 252, 254, 253, 608, 0,
	637, 666, 255, 690, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 712, 261, 713, 660, 262,
	263, 264, 265, 266, 0, 267, 661, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 691, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 714, 290, 291, 614, 292,
	0, 296, 297, 298, 299, 300, 140, 302, 388, 301,
	303, 304, 654, 305, 293, 294, 306, 715, 307, 692,
	390, 308, 0, 315, 309, 310, 295, 311, 314, 693,
	312, 313, 662, 0, 316, 142, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 694, 695, 0, 0, 324,
	325, 663, 664, 635, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 655, 334, 0, 398, 335, 336,
	337, 926, 696, 0, 0, 338, 0, 0, 0, 134,
	339, 340, 341, 342, 343, 609, 135, 640, 629, 630,
	627, 628, 619, 0, 0, 607, 0, 0, 0, 0,
	605, 606, 0, 184, 185, 0, 186, 0, 0, 1111,
	0, 657, 622, 0, 0, 618, 187, 188, 189, 345,
	672, 347, 673, 190, 674, 675, 0, 191, 351, 352,
	192, 193, 625, 656, 676, 677, 355, 0, 194, 668,
	0, 648, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 702, 205, 206,
	207, 0, 649, 650, 652, 0, 651, 653, 208, 209,
	408, 210, 678, 211, 679, 680, 0, 212, 0, 213,
	0, 214, 0, 0, 671, 216, 0, 217, 0, 0,
	0, 613, 218, 220, 219, 221, 658, 659, 636, 703,
	0, 0, 0, 0, 0, 222, 223, 681, 682, 683,
	0, 224, 0, 225, 0, 0, 704, 0, 226, 669,
	0, 367, 0, 0, 227, 228, 0, 0, 229, 230,
	665, 667, 706, 0, 370, 234, 0, 231, 0, 705,
	232, 684, 233, 685, 686, 687, 688, 689, 0, 647,
	0, 707, 235, 236, 237, 708, 238, 239, 240, 0,
	242, 241, 0, 670, 709, 243, 710, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 711,
	251, 252, 254, 253, 608, 0, 637, 666, 255, 690,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	382, 712, 261, 713, 660, 262, 263, 264, 265, 266,
	0, 267, 661, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 691, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 714, 290, 291, 614, 292, 0, 296, 297, 298,
	299, 300, 140, 302, 388, 301, 303, 304, 654, 305,
	293, 294, 306, 715, 307, 692, 390, 308, 0, 315,
	309, 310, 295, 311, 314, 693, 312, 313, 662, 0,
	316, 142, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 694, 695, 0, 0, 324, 325, 663, 664, 635,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	655, 334, 0, 398, 335, 336, 337, 926, 696, 0,
	0, 338, 0, 0, 0, 134, 339, 340, 341, 342,
	343, 609, 135, 640, 629, 630, 627, 628, 619, 0,
	0, 607, 0, 0, 0, 0, 605, 606, 0, 184,
	185, 0, 186, 0, 0, 1111, 0, 657, 622, 0,
	0, 618, 187, 188, 189, 345, 672, 347, 673, 190,
	674, 675, 1561, 191, 351, 352, 192, 193, 625, 656,
	676, 677, 355, 0, 194, 668, 0, 648, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 702, 205, 206, 207, 0, 649, 650,
	652, 0, 651, 653, 208, 209, 408, 210, 678, 211,
	679, 680, 0, 212, 0, 213, 0, 214, 0, 0,
	671, 216, 0, 217, 0, 0, 0, 613, 218, 220,
	219, 221, 658, 659, 636, 703, 0, 0, 0, 0,
	0, 222, 223, 681, 682, 683, 0, 224, 0, 225,
	0, 1566, 704, 0, 226, 669, 0, 367, 0, 0,
	227, 228, 0, 0, 229, 230, 665, 667, 706, 0,
	370, 234, 0, 231, 0, 705, 232, 684, 233, 685,
	686, 687, 688, 689, 0, 647, 0, 707, 235, 236,
	237, 708, 238, 239, 240, 0, 242, 241, 1562, 670,
	709, 243, 710, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 711, 251, 252, 254, 253,
	608, 0, 637, 666, 255, 690, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 712, 261, 713,
	660, 262, 263, 264, 265, 266, 0, 267, 661, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 691, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 714, 290, 291,
	614, 292, 0, 296, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 654, 305, 293, 294, 306, 715,
	307, 692, 390, 308, 0, 315, 309, 310, 295, 311,
	314, 693, 312, 313, 662, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 694, 695, 0,
	1563, 324, 325, 663, 664, 635, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 655, 334, 0, 398,
	335, 336, 337, 399, 696, 0, 0, 338, 0, 0,
	0, 0, 339, 340, 341, 342, 343, 609, 599, 0,
	640, 629, 630, 627, 628, 619, 0, 607, 0, 0,
	0, 0, 605, 606, 0, 0, 184, 185, 0, 186,
	0, 615, 0, 0, 657, 622, 0, 618, 0, 187,
	188, 189, 345, 672, 347, 673, 190, 674, 675, 0,
	191, 351, 352, 192, 193, 625, 656, 676, 677, 355,
	0, 194, 668, 0, 648, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	702, 205, 206, 207, 0, 649, 650, 652, 0, 651,
	653, 208, 209, 408, 210, 678, 211, 679, 680, 603,
	212, 0, 213, 0, 214, 0, 0, 671, 216, 0,
	217, 0, 0, 0, 613, 218, 220, 219, 221, 658,
	659, 636, 703, 0, 0, 0, 0, 0, 222, 223,
	681, 682, 683, 0, 224, 0, 225, 0, 0, 704,
	0, 226, 669, 0, 367, 0, 0, 227, 228, 0,
	0, 229, 230, 665, 667, 706, 0, 370, 234, 0,
	231, 0, 705, 232, 684, 233, 685, 686, 687, 688,
	689, 0, 647, 0, 707, 235, 236, 237, 708, 238,
	239, 240, 0, 242, 241, 0, 670, 709, 243, 710,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 711, 251, 252, 254, 253, 608, 0, 637,
	666, 255, 690, 256, 257, 0, 258, 601, 0, 259,
	0, 0, 260, 382, 712, 261, 713, 660, 262, 263,
	264, 265, 266, 0, 267, 661, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 691, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 714, 290, 291, 614, 292, 0,
	296, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 654, 305, 293, 294, 306, 715, 307, 692, 390,
	308, 0, 315, 309, 310, 295, 311, 314, 693, 312,
	313, 662, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 694, 695, 0, 0, 324, 325,
	663, 664, 635, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 655, 334, 0, 398, 335, 336, 337,
	399, 696, 0, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 609, 0, 640, 629, 630, 627,
	628, 619, 0, 0, 607, 0, 0, 0, 0, 605,
	606, 0, 184, 185, 0, 186, 0, 0, 615, 0,
	657, 622, 0, 0, 618, 187, 188, 189, 345, 672,
	347, 673, 190, 674, 675, 0, 191, 351, 352, 192,
	193, 625, 656, 676, 677, 355, 0, 194, 668, 0,
	648, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 702, 205, 206, 207,
	0, 649, 650, 652, 0, 651, 653, 208, 209, 408,
	210, 678, 211, 679, 680, 0, 212, 0, 213, 0,
	214, 0, 0, 671, 216, 0, 217, 0, 0, 0,
	613, 218, 220, 219, 221, 658, 659, 636, 703, 0,
	0, 0, 0, 0, 222, 223, 681, 682, 683, 0,
	224, 0, 225, 0, 0, 704, 0, 226, 669, 0,
	367, 0, 0, 227, 228, 0, 0, 229, 230, 665,
	667, 706, 0, 370, 234, 0, 231, 0, 705, 232,
	684, 233, 685, 686, 687, 688, 689, 0, 647, 0,
	707, 235, 236, 237, 708, 238, 239, 240, 0, 242,
	241, 0, 670, 709, 243, 710, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 711, 251,
	252, 254, 253, 608, 2184, 637, 666, 255, 690, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	712, 261, 713, 660, 262, 263, 264, 265, 266, 0,
	267, 661, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 691, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	714, 290, 291, 614, 292, 0, 296, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 654, 305, 293,
	294, 306, 715, 307, 692, 390, 308, 0, 315, 309,
	310, 295, 311, 314, 693, 312, 313, 662, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	694, 695, 0, 0, 324, 325, 663, 664, 635, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 655,
	334, 0, 398, 335, 336, 337, 399, 696, 0, 0,
	338, 0, 0, 0, 0, 339, 340, 341, 342, 343,
	609, 0, 640, 629, 630, 627, 628, 619, 0, 0,
	607, 0, 0, 0, 0, 605, 606, 1172, 184, 185,
	0, 186, 0, 0, 615, 0, 657, 622, 0, 0,
	618, 187, 188, 189, 345, 672, 347, 673, 190, 674,
	675, 0, 191, 351, 352, 192, 193, 625, 656, 676,
	677, 355, 0, 194, 668, 0, 648, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 702, 205, 206, 207, 0, 649, 650, 652,
	0, 651, 653, 208, 209, 408, 210, 678, 211, 679,
	680, 0, 212, 0, 213, 0, 214, 0, 0, 671,
	216, 0, 217, 0, 0, 0, 613, 218, 220, 219,
	221, 658, 659, 636, 703, 0, 0, 0, 0, 0,
	222, 223, 681, 682, 683, 0, 224, 0, 225, 0,
	0, 704, 0, 226, 669, 0, 367, 0, 0, 227,
	228, 0, 0, 229, 230, 665, 667, 706, 0, 370,
	234, 1411, 231, 0, 705, 232, 684, 233, 685, 686,
	687, 688, 689, 0, 647, 0, 707, 235, 236, 237,
	708, 238, 239, 240, 0, 242, 241, 0, 670, 709,
	243, 710, 0, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 379, 249, 711, 251, 252, 254, 253, 608,
	0, 637, 666, 255, 690, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 382, 712, 261, 713, 660,
	262, 263, 264, 265, 266, 0, 267, 661, 268, 385,
	269, 1410, 270, 271, 272, 273, 274, 691, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 714, 290, 291, 614,
	292, 0, 296, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 654, 305, 293, 294, 306, 715, 307,
	692, 390, 308, 0, 315, 309, 310, 295, 311, 314,
	693, 312, 313, 662, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 694, 695, 0, 0,
	324, 325, 663, 664, 635, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 655, 334, 0, 398, 335,
	336, 337, 399, 696, 0, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 609, 0, 640, 629,
	630, 627, 628, 619, 0, 0, 607, 0, 0, 0,
	0, 605, 606, 0, 184, 185, 0, 186, 0, 0,
	615, 0, 657, 622, 0, 0, 618, 187, 188, 189,
	345, 672, 347, 673, 190, 674, 675, 0, 191, 351,
	352, 192, 193, 625, 656, 676, 677, 355, 0, 194,
	668, 0, 648, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 702, 205,
	206, 207, 0, 649, 650, 652, 0, 651, 653, 208,
	209, 408, 210, 678, 211, 679, 680, 603, 212, 0,
	213, 0, 214, 0, 0, 671, 216, 0, 217, 0,
	0, 0, 613, 218, 220, 219, 221, 658, 659, 636,
	703, 0, 0, 0, 0, 0, 222, 223, 681, 682,
	683, 0, 224, 0, 225, 0, 0, 704, 0, 226,
	669, 0, 367, 0, 0, 227, 228, 0, 0, 229,
	230, 665, 667, 706, 0, 370, 234, 0, 231, 0,
	705, 232, 684, 233, 685, 686, 687, 688, 689, 0,
	647, 0, 707, 235, 236, 237, 708, 238, 239, 240,
	0, 242, 241, 0, 670, 709, 243, 710, 0, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	711, 251, 252, 254, 253, 608, 0, 637, 666, 255,
	690, 256, 257, 0, 258, 601, 0, 259, 0, 0,
	260, 382, 712, 261, 713, 660, 262, 263, 264, 265,
	266, 0, 267, 661, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 691, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 714, 290, 291, 614, 292, 0, 296, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 654,
	305, 293, 294, 306, 715, 307, 692, 390, 308, 0,
	315, 309, 310, 295, 311, 314, 693, 312, 313, 662,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 694, 695, 0, 0, 324, 325, 663, 664,
	635, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 655, 334, 0, 398, 335, 336, 337, 399, 696,
	0, 0, 338, 0, 0, 0, 0, 339, 340, 341,
	342, 343, 609, 0, 640, 629, 630, 627, 628, 619,
	0, 0, 607, 0, 0, 0, 0, 605, 606, 0,
	184, 185, 0, 186, 0, 0, 615, 0, 657, 622,
	0, 0, 618, 187, 188, 189, 345, 672, 347, 673,
	190, 674, 675, 0, 191, 351, 352, 192, 193, 625,
	656, 676, 677, 355, 0, 194, 668, 0, 648, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 702, 205, 206, 207, 0, 649,
	650, 652, 0, 651, 653, 208, 209, 408, 210, 678,
	211, 679, 680, 603, 212, 0, 213, 0, 214, 0,
	0, 671, 216, 0, 217, 0, 0, 0, 613, 218,
	220, 219, 221, 658, 659, 636, 703, 0, 0, 0,
	0, 0, 222, 223, 681, 682, 683, 0, 224, 0,
	225, 0, 0, 704, 0, 226, 669, 0, 367, 0,
	0, 227, 228, 0, 0, 229, 230, 665, 667, 706,
	0, 370, 234, 0, 231, 0, 705, 232, 684, 233,
	685, 686, 687, 688, 689, 0, 647, 0, 707, 235,
	236, 237, 708, 238, 239, 240, 0, 242, 241, 0,
	670, 709, 243, 710, 0, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 711, 251, 252, 254,
	253, 608, 0, 637, 666, 255, 690, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 712, 261,
	713, 660, 262, 263, 264, 265, 266, 0, 267, 661,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 691,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 714, 290,
	291, 614, 292, 0, 296, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 654, 305, 293, 294, 306,
	715, 307, 692, 390, 308, 0, 315, 309, 310, 295,
	311, 314, 693, 312, 313, 662, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 694, 695,
	0, 0, 324, 325, 663, 664, 635, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 655, 334, 0,
	398, 335, 336, 337, 399, 696, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 609, 0,
	640, 629, 630, 627, 628, 619, 0, 0, 607, 0,
	0, 0, 0, 605, 606, 0, 184, 185, 0, 186,
	0, 0, 615, 0, 657, 622, 0, 0, 618, 187,
	188, 189, 345, 672, 347, 673, 190, 674, 675, 0,
	191, 351, 352, 192, 193, 625, 656, 676, 677, 355,
	0, 194, 668, 0, 648, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	702, 205, 206, 207, 0, 649, 650, 652, 0, 651,
	653, 208, 209, 408, 210, 678, 211, 679, 680, 0,
	212, 0, 213, 0, 214, 0, 0, 671, 216, 0,
	217, 0, 0, 0, 613, 218, 220, 219, 221, 658,
	659, 636, 703, 0, 0, 0, 0, 0, 222, 223,
	681, 682, 683, 0, 224, 0, 225, 0, 0, 704,
	0, 226, 669, 0, 367, 0, 0, 227, 228, 0,
	0, 229, 230, 665, 667, 706, 0, 370, 234, 0,
	231, 0, 705, 232, 684, 233, 685, 686, 687, 688,
	689, 0, 647, 0, 707, 235, 236, 237, 708, 238,
	239, 240, 0, 242, 241, 0, 670, 709, 243, 710,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 711, 251, 252, 254, 253, 608, 0, 637,
	666, 255, 690, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 382, 712, 261, 713, 660, 262, 263,
	264, 265, 266, 0, 267, 661, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 691, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 714, 290, 291, 614, 292, 0,
	296, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 654, 305, 293, 294, 306, 715, 307, 692, 390,
	308, 0, 315, 309, 310, 295, 311, 314, 693, 312,
	313, 662, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 694, 695, 0, 0, 324, 325,
	663, 664, 635, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 655, 334, 0, 398, 335, 336, 337,
	399, 696, 2037, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 609, 0, 640, 629, 630, 627,
	628, 619, 0, 0, 607, 0, 0, 0, 0, 605,
	606, 0, 184, 185, 0, 186, 0, 0, 615, 0,
	657, 622, 0, 0, 618, 187, 188, 189, 345, 672,
	347, 673, 190, 674, 675, 0, 191, 351, 352, 192,
	193, 625, 656, 676, 677, 355, 0, 194, 668, 0,
	648, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 702, 205, 206, 207,
	0, 649, 650, 652, 0, 651, 653, 208, 209, 408,
	210, 678, 211, 679, 680, 0, 212, 0, 213, 0,
	214, 0, 0, 671, 216, 0, 217, 0, 0, 0,
	613, 218, 220, 219, 221, 658, 659, 636, 703, 0,
	0, 0, 0, 0, 222, 223, 681, 682, 683, 0,
	224, 0, 225, 0, 0, 704, 0, 226, 669, 0,
	367, 0, 0, 227, 228, 0, 0, 229, 230, 665,
	667, 706, 0, 370, 234, 0, 231, 0, 705, 232,
	684, 233, 685, 686, 687, 688, 689, 0, 647, 0,
	707, 235, 236, 237, 708, 238, 239, 240, 0, 242,
	241, 0, 670, 709, 243, 710, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 711, 251,
	252, 254, 253, 608, 0, 637, 666, 255, 690, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	712, 261, 713, 660, 262, 263, 264, 265, 266, 0,
	267, 661, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 691, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	714, 290, 291, 614, 292, 0, 296, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 654, 305, 293,
	294, 306, 715, 307, 692, 390, 308, 0, 315, 309,
	310, 295, 311, 314, 693, 312, 313, 662, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	694, 695, 0, 0, 324, 325, 663, 664, 635, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 655,
	334, 0, 398, 335, 336, 337, 399, 696, 0, 0,
	338, 0, 0, 0, 0, 339, 340, 341, 342, 343,
	609, 0, 640, 629, 630, 627, 628, 619, 0, 0,
	607, 0, 0, 0, 0, 605, 606, 1172, 184, 185,
	0, 186, 0, 0, 615, 0, 657, 622, 0, 0,
	618, 187, 188, 189, 345, 672, 347, 673, 190, 674,
	675, 0, 191, 351, 352, 192, 193, 625, 656, 676,
	677, 355, 0, 194, 668, 0, 648, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 702, 205, 206, 207, 0, 649, 650, 652,
	0, 651, 653, 208, 209, 408, 210, 678, 211, 679,
	680, 0, 212, 0, 213, 0, 214, 0, 0, 671,
	216, 0, 217, 0, 0, 0, 613, 218, 220, 219,
	221, 658, 659, 636, 703, 0, 0, 0, 0, 0,
	222, 223, 681, 682, 683, 0, 224, 0, 225, 0,
	1566, 704, 0, 226, 669, 0, 367, 0, 0, 227,
	228, 0, 0, 229, 230, 665, 667, 706, 0, 370,
	234, 0, 231, 0, 705, 232, 684, 233, 685, 686,
	687, 688, 689, 0, 647, 0, 707, 235, 236, 237,
	708, 238, 239, 240, 0, 242, 241, 0, 670, 709,
	243, 710, 0, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 379, 249, 711, 251, 252, 254, 253, 608,
	0, 637, 666, 255, 690, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 382, 712, 261, 713, 660,
	262, 263, 264, 265, 266, 0, 267, 661, 268, 385,
	269, 0, 270, 271, 272, 273, 274, 691, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 714, 290, 291, 614,
	292, 0, 296, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 654, 305, 293, 294, 306, 715, 307,
	692, 390, 308, 0, 315, 309, 310, 295, 311, 314,
	693, 312, 313, 662, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 694, 695, 0, 0,
	324, 325, 663, 664, 635, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 655, 334, 0, 398, 335,
	336, 337, 399, 696, 0, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 609, 1611, 0, 640,
	629, 630, 627, 628, 619, 0, 607, 0, 0, 0,
	0, 605, 606, 0, 0, 184, 185, 0, 186, 0,
	615, 0, 0, 657, 622, 0, 618, 0, 187, 188,
	189, 345, 672, 347, 673, 190, 674, 675, 0, 191,
	351, 352, 192, 193, 625, 656, 676, 677, 355, 0,
	194, 668, 0, 648, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 702,
	205, 206, 207, 0, 649, 650, 652, 0, 651, 653,
	208, 209, 408, 210, 678, 211, 679, 680, 0, 212,
	0, 213, 0, 214, 0, 0, 671, 216, 0, 217,
	0, 0, 0, 613, 218, 220, 219, 221, 658, 659,
	636, 703, 0, 0, 0, 0, 0, 222, 223, 681,
	682, 683, 0, 224, 0, 225, 0, 0, 704, 0,
	226, 669, 0, 367, 0, 0, 227, 228, 0, 0,
	229, 230, 665, 667, 706, 0, 370, 234, 0, 231,
	0, 705, 232, 684, 233, 685, 686, 687, 688, 689,
	0, 647, 0, 707, 235, 236, 237, 708, 238, 239,
	240, 0, 242, 241, 0, 670, 709, 243, 710, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 711, 251, 252, 254, 253, 608, 0, 637, 666,
	255, 690, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 712, 261, 713, 660, 262, 263, 264,
	265, 266, 0, 267, 661, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 691, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 714, 290, 291, 614, 292, 0, 296,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	654, 305, 293, 294, 306, 715, 307, 692, 390, 308,
	0, 315, 309, 310, 295, 311, 314, 693, 312, 313,
	662, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 694, 695, 0, 0, 324, 325, 663,
	664, 635, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 655, 334, 0, 398, 335, 336, 337, 399,
	696, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 609, 1575, 0, 640, 629, 630, 627,
	628, 619, 0, 607, 0, 0, 0, 0, 605, 606,
	0, 0, 184, 185, 0, 186, 0, 615, 0, 0,
	657, 622, 0, 618, 0, 187, 188, 189, 345, 672,
	347, 673, 190, 674, 675, 0, 191, 351, 352, 192,
	193, 625, 656, 676, 677, 355, 0, 194, 668, 0,
	648, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 702, 205, 206, 207,
	0, 649, 650, 652, 0, 651, 653, 208, 209, 408,
	210, 678, 211, 679, 680, 0, 212, 0, 213, 0,
	214, 0, 0, 671, 216, 0, 217, 0, 0, 0,
	613, 218, 220, 219, 221, 658, 659, 636, 703, 0,
	0, 0, 0, 0, 222, 223, 681, 682, 683, 0,
	224, 0, 225, 0, 0, 704, 0, 226, 669, 0,
	367, 0, 0, 227, 228, 0, 0, 229, 230, 665,
	667, 706, 0, 370, 234, 0, 231, 0, 705, 232,
	684, 233, 685, 686, 687, 688, 689, 0, 647, 0,
	707, 235, 236, 237, 708, 238, 239, 240, 0, 242,
	241, 0, 670, 709, 243, 710, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 711, 251,
	252, 254, 253, 608, 0, 637, 666, 255, 690, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	712, 261, 713, 660, 262, 263, 264, 265, 266, 0,
	267, 661, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 691, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	714, 290, 291, 614, 292, 0, 296, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 654, 305, 293,
	294, 306, 715, 307, 692, 390, 308, 0, 315, 309,
	310, 295, 311, 314, 693, 312, 313, 662, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	694, 695, 0, 0, 324, 325, 663, 664, 635, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 655,
	334, 0, 398, 335, 336, 337, 399, 696, 0, 0,
	338, 0, 0, 0, 0, 339, 340, 341, 342, 343,
	609, 1573, 0, 640, 629, 630, 627, 628, 619, 0,
	607, 0, 0, 0, 0, 605, 606, 0, 0, 184,
	185, 0, 186, 0, 615, 0, 0, 657, 622, 0,
	618, 0, 187, 188, 189, 345, 672, 347, 673, 190,
	674, 675, 0, 191, 351, 352, 192, 193, 625, 656,
	676, 677, 355, 0, 194, 668, 0, 648, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 702, 205, 206, 207, 0, 649, 650,
	652, 0, 651, 653, 208, 209, 408, 210, 678, 211,
	679, 680, 0, 212, 0, 213, 0, 214, 0, 0,
	671, 216, 0, 217, 0, 0, 0, 613, 218, 220,
	219, 221, 658, 659, 636, 703, 0, 0, 0, 0,
	0, 222, 223, 681, 682, 683, 0, 224, 0, 225,
	0, 0, 704, 0, 226, 669, 0, 367, 0, 0,
	227, 228, 0, 0, 229, 230, 665, 667, 706, 0,
	370, 234, 0, 231, 0, 705, 232, 684, 233, 685,
	686, 687, 688, 689, 0, 647, 0, 707, 235, 236,
	237, 708, 238, 239, 240, 0, 242, 241, 0, 670,
	709, 243, 710, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 711, 251, 252, 254, 253,
	608, 0, 637, 666, 255, 690, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 712, 261, 713,
	660, 262, 263, 264, 265, 266, 0, 267, 661, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 691, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 714, 290, 291,
	614, 292, 0, 296, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 654, 305, 293, 294, 306, 715,
	307, 692, 390, 308, 0, 315, 309, 310, 295, 311,
	314, 693, 312, 313, 662, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 694, 695, 0,
	0, 324, 325, 663, 664, 635, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 655, 334, 0, 398,
	335, 336, 337, 399, 696, 0, 0, 338, 0, 0,
	0, 0, 339, 340, 341, 342, 343, 609, 1557, 0,
	640, 629, 630, 627, 628, 619, 0, 607, 0, 0,
	0, 0, 605, 606, 0, 0, 184, 185, 0, 186,
	0, 615, 0, 0, 657, 622, 0, 618, 0, 187,
	188, 189, 345, 672, 347, 673, 190, 674, 675, 0,
	191, 351, 352, 192, 193, 625, 656, 676, 677, 355,
	0, 194, 668, 0, 648, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	702, 205, 206, 207, 0, 649, 650, 652, 0, 651,
	653, 208, 209, 408, 210, 678, 211, 679, 680, 0,
	212, 0, 213, 0, 214, 0, 0, 671, 216, 0,
	217, 0, 0, 0, 613, 218, 220, 219, 221, 658,
	659, 636, 703, 0, 0, 0, 0, 0, 222, 223,
	681, 682, 683, 0, 224, 0, 225, 0, 0, 704,
	0, 226, 669, 0, 367, 0, 0, 227, 228, 0,
	0, 229, 230, 665, 667, 706, 0, 370, 234, 0,
	231, 0, 705, 232, 684, 233, 685, 686, 687, 688,
	689, 0, 647, 0, 707, 235, 236, 237, 708, 238,
	239, 240, 0, 242, 241, 0, 670, 709, 243, 710,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 711, 251, 252, 254, 253, 608, 0, 637,
	666, 255, 690, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 382, 712, 261, 713, 660, 262, 263,
	264, 265, 266, 0, 267, 661, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 691, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 714, 290, 291, 614, 292, 0,
	296, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 654, 305, 293, 294, 306, 715, 307, 692, 390,
	308, 0, 315, 309, 310, 295, 311, 314, 693, 312,
	313, 662, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 694, 695, 0, 0, 324, 325,
	663, 664, 635, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 655, 334, 0, 398, 335, 336, 337,
	399, 696, 0, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 609, 1545, 0, 640, 629, 630,
	627, 628, 619, 0, 607, 0, 0, 0, 0, 605,
	606, 0, 0, 184, 185, 0, 186, 0, 615, 0,
	0, 657, 622, 0, 618, 0, 187, 188, 189, 345,
	672, 347, 673, 190, 674, 675, 0, 191, 351, 352,
	192, 193, 625, 656, 676, 677, 355, 0, 194, 668,
	0, 648, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 702, 205, 206,
	207, 0, 649, 650, 652, 0, 651, 653, 208, 209,
	408, 210, 678, 211, 679, 680, 0, 212, 0, 213,
	0, 214, 0, 0, 671, 216, 0, 217, 0, 0,
	0, 613, 218, 220, 219, 221, 658, 659, 636, 703,
	0, 0, 0, 0, 0, 222, 223, 681, 682, 683,
	0, 224, 0, 225, 0, 0, 704, 0, 226, 669,
	0, 367, 0, 0, 227, 228, 0, 0, 229, 230,
	665, 667, 706, 0, 370, 234, 0, 231, 0, 705,
	232, 684, 233, 685, 686, 687, 688, 689, 0, 647,
	0, 707, 235, 236, 237, 708, 238, 239, 240, 0,
	242, 241, 0, 670, 709, 243, 710, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 711,
	251, 252, 254, 253, 608, 0, 637, 666, 255, 690,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	382, 712, 261, 713, 660, 262, 263, 264, 265, 266,
	0, 267, 661, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 691, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 714, 290, 291, 614, 292, 0, 296, 297, 298,
	299, 300, 0, 302, 388, 301, 303, 304, 654, 305,
	293, 294, 306, 715, 307, 692, 390, 308, 0, 315,
	309, 310, 295, 311, 314, 693, 312, 313, 662, 0,
	316, 0, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 694, 695, 0, 0, 324, 325, 663, 664, 635,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	655, 334, 0, 398, 335, 336, 337, 399, 696, 0,
	0, 338, 0, 0, 0, 0, 339, 340, 341, 342,
	343, 609, 1543, 0, 1535, 629, 630, 627, 628, 619,
	0, 607, 0, 0, 0, 0, 605, 606, 0, 0,
	184, 185, 0, 186, 0, 615, 0, 0, 657, 622,
	0, 618, 0, 187, 188, 189, 345, 672, 347, 673,
	190, 674, 675, 0, 191, 351, 352, 192, 193, 625,
	656, 676, 677, 355, 0, 194, 668, 0, 648, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 702, 205, 206, 207, 0, 649,
	650, 652, 0, 651, 653, 208, 209, 408, 210, 678,
	1538, 679, 680, 0, 212, 0, 213, 0, 214, 0,
	0, 671, 216, 0, 217, 0, 0, 0, 613, 218,
	220, 219, 221, 658, 659, 636, 703, 0, 0, 0,
	0, 0, 222, 223, 681, 682, 683, 0, 224, 0,
	225, 0, 0, 704, 0, 226, 669, 0, 367, 0,
	0, 227, 1539, 0, 0, 229, 230, 665, 667, 706,
	0, 370, 234, 0, 231, 0, 705, 232, 684, 233,
	685, 686, 687, 688, 689, 0, 647, 0, 707, 235,
	236, 237, 708, 238, 239, 240, 0, 242, 241, 0,
	670, 709, 243, 710, 0, 244, 0, 0, 245, 0,
	246, 1540, 1537, 250, 379, 249, 711, 251, 252, 254,
	253, 608, 0, 637, 666, 255, 690, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 712, 261,
	713, 660, 262, 263, 264, 265, 266, 0, 267, 661,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 691,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 714, 290,
	291, 614, 292, 0, 296, 297, 298, 299, 1541, 0,
	302, 388, 301, 303, 304, 654, 305, 293, 294, 306,
	715, 307, 692, 390, 308, 0, 315, 309, 310, 295,
	311, 314, 693, 312, 313, 662, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 694, 695,
	0, 0, 324, 325, 663, 664, 635, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 655, 334, 0,
	398, 335, 336, 337, 399, 696, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 1536, 343, 609, 1532,
	0, 1535, 629, 630, 627, 628, 619, 0, 607, 0,
	0, 0, 0, 605, 606, 0, 0, 184, 185, 0,
	186, 0, 615, 0, 0, 657, 622, 0, 618, 0,
	187, 188, 189, 345, 672, 347, 673, 190, 674, 675,
	0, 191, 351, 352, 192, 193, 625, 656, 676, 677,
	355, 0, 194, 668, 0, 648, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 702, 205, 206, 207, 0, 649, 650, 652, 0,
	651, 653, 208, 209, 408, 210, 678, 1538, 679, 680,
	0, 212, 0, 213, 0, 214, 0, 0, 671, 216,
	0, 217, 0, 0, 0, 613, 218, 220, 219, 221,
	658, 659, 636, 703, 0, 0, 0, 0, 0, 222,
	223, 681, 682, 683, 0, 224, 0, 225, 0, 0,
	704, 0, 226, 669, 0, 367, 0, 0, 227, 1539,
	0, 0, 229, 230, 665, 667, 706, 0, 370, 234,
	0, 231, 0, 705, 232, 684, 233, 685, 686, 687,
	688, 689, 0, 647, 0, 707, 235, 236, 237, 708,
	238, 239, 240, 0, 242, 241, 0, 670, 709, 243,
	710, 0, 244, 0, 0, 245, 0, 246, 1540, 1537,
	250, 379, 249, 711, 251, 252, 254, 253, 608, 0,
	637, 666, 255, 690, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 712, 261, 713, 660, 262,
	263, 264, 265, 266, 0, 267, 661, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 691, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 714, 290, 291, 614, 292,
	0, 296, 297, 298, 299, 1541, 0, 302, 388, 301,
	303, 304, 654, 305, 293, 294, 306, 715, 307, 692,
	390, 308, 0, 315, 309, 310, 295, 311, 314, 693,
	312, 313, 662, 0, 316, 0, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 694, 695, 0, 0, 324,
	325, 663, 664, 635, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 655, 334, 0, 398, 335, 336,
	337, 399, 696, 0, 0, 338, 0, 0, 0, 0,
	339, 340, 341, 1536, 343, 609, 0, 640, 629, 630,
	627, 628, 619, 0, 0, 607, 0, 0, 0, 0,
	605, 606, 0, 184, 185, 0, 186, 0, 0, 615,
	0, 657, 622, 0, 0, 618, 187, 188, 189, 345,
	672, 347, 673, 190, 674, 675, 0, 191, 351, 352,
	192, 193, 625, 656, 676, 677, 355, 0, 194, 668,
	0, 648, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 702, 205, 206,
	207, 0, 649, 650, 652, 0, 651, 653, 208, 209,
	408, 210, 678, 211, 679, 680, 0, 212, 0, 213,
	0, 214, 0, 0, 671, 216, 0, 217, 0, 0,
	0, 613, 218, 220, 219, 221, 658, 659, 636, 703,
	0, 0, 0, 0, 0, 222, 223, 681, 682, 683,
	0, 224, 0, 225, 0, 0, 704, 0, 226, 669,
	0, 367, 0, 0, 227, 228, 0, 0, 229, 230,
	665, 667, 706, 0, 370, 234, 0, 231, 0, 705,
	232, 684, 233, 685, 686, 687, 688, 689, 0, 647,
	0, 707, 235, 236, 237, 708, 238, 239, 240, 0,
	242, 241, 0, 670, 709, 243, 710, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 711,
	251, 252, 254, 253, 608, 0, 637, 666, 255, 690,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	382, 712, 261, 713, 660, 262, 263, 264, 265, 266,
	0, 267, 661, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 691, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 714, 290, 291, 614, 292, 0, 296, 297, 298,
	299, 300, 0, 302, 388, 301, 303, 304, 654, 305,
	293, 294, 306, 715, 307, 692, 390, 308, 0, 315,
	309, 310, 295, 311, 314, 693, 312, 313, 662, 0,
	316, 0, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 694, 695, 0, 0, 324, 325, 663, 664, 635,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	655, 334, 0, 398, 335, 336, 337, 399, 696, 0,
	0, 338, 0, 0, 0, 0, 339, 340, 341, 342,
	343, 609, 0, 640, 629, 630, 627, 628, 619, 0,
	0, 607, 0, 0, 0, 0, 605, 606, 0, 184,
	185, 1398, 186, 1115, 0, 615, 0, 657, 622, 0,
	0, 618, 187, 188, 189, 345, 672, 347, 673, 190,
	674, 675, 0, 191, 351, 352, 192, 193, 625, 656,
	676, 677, 355, 0, 194, 668, 0, 648, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 702, 205, 206, 207, 0, 649, 650,
	652, 0, 651, 653, 208, 209, 408, 210, 678, 211,
	679, 680, 0, 212, 0, 213, 0, 214, 0, 0,
	671, 216, 0, 217, 0, 0, 0, 613, 218, 220,
	219, 221, 658, 659, 636, 703, 0, 0, 0, 0,
	0, 222, 223, 681, 682, 683, 0, 224, 0, 225,
	0, 0, 704, 0, 226, 669, 0, 367, 0, 0,
	227, 228, 0, 0, 229, 230, 665, 667, 706, 0,
	370, 234, 0, 231, 0, 705, 232, 684, 233, 685,
	686, 687, 688, 689, 0, 647, 0, 707, 235, 236,
	237, 708, 238, 239, 240, 0, 242, 241, 0, 670,
	709, 243, 710, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 711, 251, 252, 254, 253,
	608, 0, 637, 666, 255, 690, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 712, 261, 713,
	660, 262, 263, 264, 265, 266, 0, 267, 661, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 691, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 714, 290, 291,
	614, 292, 0, 296, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 654, 305, 293, 294, 306, 715,
	307, 692, 390, 308, 0, 315, 309, 310, 295, 311,
	314, 693, 312, 313, 662, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 694, 695, 0,
	0, 324, 325, 663, 664, 635, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 655, 334, 0, 398,
	335, 336, 337, 399, 696, 0, 0, 338, 0, 0,
	0, 0, 339, 340, 341, 342, 343, 609, 870, 0,
	640, 629, 630, 627, 628, 619, 0, 607, 0, 0,
	0, 0, 605, 606, 0, 0, 184, 185, 0, 186,
	0, 615, 0, 0, 657, 622, 0, 618, 0, 187,
	188, 189, 345, 672, 347, 673, 190, 674, 675, 0,
	191, 351, 352, 192, 193, 625, 656, 676, 677, 355,
	0, 194, 668, 0, 648, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	702, 205, 206, 207, 0, 649, 650, 652, 0, 651,
	653, 208, 209, 408, 210, 678, 211, 679, 680, 0,
	212, 0, 213, 0, 214, 0, 0, 671, 216, 0,
	217, 0, 0, 0, 613, 218, 220, 219, 221, 658,
	659, 636, 703, 0, 0, 0, 0, 0, 222, 223,
	681, 682, 683, 0, 224, 0, 225, 0, 0, 704,
	0, 226, 669, 0, 367, 0, 0, 227, 228, 0,
	0, 229, 230, 665, 667, 706, 0, 370, 234, 0,
	231, 0, 705, 232, 684, 233, 685, 686, 687, 688,
	689, 0, 647, 0, 707, 235, 236, 237, 708, 238,
	239, 240, 0, 242, 241, 0, 670, 709, 243, 710,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 711, 251, 252, 254, 253, 608, 0, 637,
	666, 255, 690, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 382, 712, 261, 713, 660, 262, 263,
	264, 265, 266, 0, 267, 661, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 691, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 714, 290, 291, 614, 292, 0,
	296, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 654, 305, 293, 294, 306, 715, 307, 692, 390,
	308, 0, 315, 309, 310, 295, 311, 314, 693, 312,
	313, 662, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 694, 695, 0, 0, 324, 325,
	663, 664, 635, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 655, 334, 0, 398, 335, 336, 337,
	399, 696, 0, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 609, 868, 0, 640, 629, 630,
	627, 628, 619, 0, 607, 0, 0, 0, 0, 605,
	606, 0, 0, 184, 185, 0, 186, 0, 615, 0,
	0, 657, 622, 0, 618, 0, 187, 188, 189, 345,
	672, 347, 673, 190, 674, 675, 0, 191, 351, 352,
	192, 193, 625, 656, 676, 677, 355, 0, 194, 668,
	0, 648, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 702, 205, 206,
	207, 0, 649, 650, 652, 0, 651, 653, 208, 209,
	408, 210, 678, 211, 679, 680, 0, 212, 0, 213,
	0, 214, 0, 0, 671, 216, 0, 217, 0, 0,
	0, 613, 218, 220, 219, 221, 658, 659, 636, 703,
	0, 0, 0, 0, 0, 222, 223, 681, 682, 683,
	0, 224, 0, 225, 0, 0, 704, 0, 226, 669,
	0, 367, 0, 0, 227, 228, 0, 0, 229, 230,
	665, 667, 706, 0, 370, 234, 0, 231, 0, 705,
	232, 684, 233, 685, 686, 687, 688, 689, 0, 647,
	0, 707, 235, 236, 237, 708, 238, 239, 240, 0,
	242, 241, 0, 670, 709, 243, 710, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 711,
	251, 252, 254, 253, 608, 0, 637, 666, 255, 690,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	382, 712, 261, 713, 660, 262, 263, 264, 265, 266,
	0, 267, 661, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 691, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 714, 290, 291, 614, 292, 0, 296, 297, 298,
	299, 300, 0, 302, 388, 301, 303, 304, 654, 305,
	293, 294, 306, 715, 307, 692, 390, 308, 0, 315,
	309, 310, 295, 311, 314, 693, 312, 313, 662, 0,
	316, 0, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 694, 695, 0, 0, 324, 325, 663, 664, 635,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	655, 334, 0, 398, 335, 336, 337, 399, 696, 0,
	0, 338, 0, 0, 0, 0, 339, 340, 341, 342,
	343, 609, 0, 640, 629, 630, 627, 628, 619, 0,
	0, 607, 0, 0, 0, 0, 605, 606, 0, 184,
	185, 0, 186, 0, 0, 615, 0, 657, 622, 0,
	0, 618, 187, 188, 189, 345, 672, 347, 673, 190,
	674, 675, 0, 191, 351, 352, 192, 193, 625, 656,
	676, 677, 355, 0, 194, 668, 0, 648, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 702, 205, 206, 2497, 0, 649, 650,
	652, 0, 651, 653, 208, 209, 408, 210, 678, 211,
	679, 680, 0, 212, 0, 213, 0, 214, 0, 0,
	671, 216, 0, 217, 0, 0, 0, 613, 218, 220,
	219, 221, 658, 659, 636, 703, 0, 0, 0, 0,
	0, 222, 223, 681, 682, 683, 0, 224, 0, 225,
	0, 0, 704, 0, 226, 669, 0, 367, 0, 0,
	227, 228, 0, 0, 229, 230, 665, 667, 706, 0,
	370, 234, 0, 231, 0, 705, 232, 684, 233, 685,
	686, 687, 688, 689, 0, 647, 0, 707, 235, 236,
	237, 708, 238, 239, 240, 0, 242, 241, 0, 670,
	709, 243, 710, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 711, 251, 252, 254, 253,
	608, 0, 637, 666, 255, 690, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 712, 261, 713,
	660, 262, 263, 264, 265, 266, 0, 267, 661, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 691, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 714, 290, 291,
	614, 292, 0, 296, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 654, 305, 293, 294, 306, 715,
	307, 692, 390, 308, 0, 315, 309, 310, 295, 311,
	314, 693, 312, 313, 662, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 694, 695, 0,
	0, 324, 325, 663, 664, 635, 326, 327, 2496, 329,
	0, 0, 330, 331, 332, 333, 655, 334, 0, 398,
	335, 336, 337, 399, 696, 0, 0, 338, 0, 0,
	0, 0, 339, 340, 341, 342, 343, 609, 0, 640,
	629, 630, 627, 628, 619, 0, 0, 607, 0, 0,
	0, 0, 605, 606, 0, 184, 185, 0, 186, 0,
	0, 615, 0, 657, 622, 0, 0, 618, 187, 188,
	189, 345, 672, 347, 673, 190, 674, 675, 0, 191,
	351, 352, 192, 193, 625, 656, 676, 677, 355, 0,
	194, 668, 0, 648, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 702,
	205, 206, 207, 0, 649, 650, 652, 0, 651, 653,
	208, 209, 408, 210, 678, 211, 679, 680, 0, 212,
	0, 213, 0, 214, 0, 0, 671, 216, 0, 217,
	0, 0, 0, 613, 218, 220, 219, 221, 658, 659,
	636, 703, 0, 0, 0, 0, 0, 222, 223, 681,
	682, 683, 0, 224, 0, 225, 0, 0, 704, 0,
	226, 669, 0, 367, 0, 0, 227, 228, 0, 0,
	229, 230, 665, 667, 706, 0, 370, 234, 0, 231,
	0, 705, 232, 684, 233, 685, 686, 687, 688, 689,
	0, 647, 0, 707, 235, 236, 237, 708, 238, 239,
	240, 0, 242, 241, 0, 670, 709, 243, 710, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 711, 251, 252, 254, 253, 608, 0, 637, 666,
	255, 690, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 712, 261, 713, 660, 262, 263, 264,
	265, 266, 0, 267, 661, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 691, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 714, 290, 291, 614, 292, 0, 296,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	654, 305, 293, 294, 306, 715, 307, 692, 390, 308,
	0, 315, 309, 310, 295, 311, 314, 693, 312, 313,
	662, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 694, 695, 0, 0, 324, 325, 663,
	664, 635, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 655, 334, 0, 398, 335, 336, 337, 399,
	696, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 609, 0, 640, 629, 630, 627, 628,
	619, 0, 0, 607, 0, 0, 0, 0, 605, 606,
	0, 184, 185, 0, 186, 0, 0, 615, 0, 657,
	622, 0, 0, 618, 187, 188, 189, 2495, 672, 347,
	673, 190, 674, 675, 0, 191, 351, 352, 192, 193,
	625, 656, 676, 677, 355, 0, 194, 668, 0, 648,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 702, 205, 206, 2497, 0,
	649, 650, 652, 0, 651, 653, 208, 209, 408, 210,
	678, 211, 679, 680, 0, 212, 0, 213, 0, 214,
	0, 0, 671, 216, 0, 217, 0, 0, 0, 613,
	218, 220, 219, 221, 658, 659, 636, 703, 0, 0,
	0, 0, 0, 222, 223, 681, 682, 683, 0, 224,
	0, 225, 0, 0, 704, 0, 226, 669, 0, 367,
	0, 0, 227, 228, 0, 0, 229, 230, 665, 667,
	706, 0, 370, 234, 0, 231, 0, 705, 232, 684,
	233, 685, 686, 687, 688, 689, 0, 647, 0, 707,
	235, 236, 237, 708, 238, 239, 240, 0, 242, 241,
	0, 670, 709, 243, 710, 0, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 379, 249, 711, 251, 252,
	254, 253, 608, 0, 637, 666, 255, 690, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 382, 712,
	261, 713, 660, 262, 263, 264, 265, 266, 0, 267,
	661, 268, 385, 269, 0, 270, 271, 272, 273, 274,
	691, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 714,
	290, 291, 614, 292, 0, 296, 297, 298, 299, 300,
	0, 302, 388, 301, 303, 304, 654, 305, 293, 294,
	306, 715, 307, 692, 390, 308, 0, 315, 309, 310,
	295, 311, 314, 693, 312, 313, 662, 0, 316, 0,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 694,
	695, 0, 0, 324, 325, 663, 664, 635, 326, 327,
	2496, 329, 0, 0, 330, 331, 332, 333, 655, 334,
	0, 398, 335, 336, 337, 399, 696, 0, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 609,
	0, 640, 629, 630, 627, 628, 619, 0, 0, 607,
	0, 0, 0, 0, 605, 606, 0, 184, 185, 0,
	186, 0, 0, 615, 0, 657, 622, 0, 0, 618,
	187, 188, 189, 345, 672, 347, 673, 190, 674, 675,
	0, 191, 351, 352, 192, 193, 625, 656, 676, 677,
	355, 0, 194, 668, 0, 648, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 702, 205, 206, 207, 0, 649, 650, 652, 0,
	651, 653, 208, 209, 408, 210, 678, 211, 679, 680,
	0, 212, 0, 213, 0, 214, 0, 0, 671, 216,
	0, 217, 0, 0, 0, 613, 218, 220, 219, 221,
	658, 659, 636, 703, 0, 0, 0, 0, 0, 222,
	223, 681, 682, 683, 0, 224, 0, 225, 0, 0,
	704, 0, 226, 669, 0, 367, 0, 0, 227, 228,
	0, 0, 229, 230, 665, 667, 706, 0, 370, 234,
	0, 231, 0, 705, 232, 684, 233, 685, 686, 687,
	688, 689, 0, 647, 0, 707, 235, 236, 237, 708,
	238, 239, 240, 0, 242, 241, 0, 670, 709, 243,
	710, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 711, 251, 252, 254, 253, 0, 0,
	637, 666, 255, 690, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 712, 261, 713, 660, 262,
	263, 264, 265, 266, 0, 267, 661, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 691, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 714, 290, 291, 1555, 292,
	0, 296, 297, 298, 299, 300, 0, 302, 388, 301,
	303, 304, 654, 305, 293, 294, 306, 715, 307, 692,
	390, 308, 0, 315, 309, 310, 295, 311, 314, 693,
	312, 313, 662, 0, 316, 0, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 694, 695, 0, 0, 324,
	325, 663, 664, 635, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 655, 334, 0, 398, 335, 336,
	337, 399, 696, 0, 0, 338, 0, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 640, 629, 630,
	627, 628, 619, 0, 0, 1553, 0, 0, 0, 0,
	1551, 1552, 0, 184, 185, 0, 186, 0, 0, 1554,
	0, 657, 622, 0, 0, 618, 187, 188, 189, 345,
	672, 347, 673, 190, 674, 675, 0, 191, 351, 352,
	192, 193, 0, 656, 676, 677, 355, 0, 194, 668,
	0, 648, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 702, 205, 206,
	207, 0, 649, 650, 652, 0, 651, 653, 208, 209,
	408, 210, 678, 211, 679, 680, 0, 212, 0, 213,
	0, 214, 0, 0, 671, 216, 0, 217, 0, 0,
	0, 360, 218, 220, 219, 221, 658, 659, 636, 703,
	0, 0, 0, 0, 0, 222, 223, 681, 682, 683,
	0, 224, 0, 225, 0, 0, 704, 0, 226, 669,
	0, 367, 0, 0, 227, 228, 0, 0, 229, 230,
	665, 667, 706, 0, 370, 234, 0, 231, 0, 705,
	232, 684, 233, 685, 686, 687, 688, 689, 0, 647,
	0, 707, 235, 236, 237, 708, 238, 239, 240, 0,
	242, 241, 0, 670, 709, 243, 710, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 711,
	251, 252, 254, 253, 0, 0, 637, 666, 255, 690,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	382, 712, 261, 713, 660, 262, 263, 264, 265, 266,
	0, 267, 661, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 691, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 714, 290, 291, 1555, 292, 0, 296, 297, 298,
	299, 300, 0, 302, 388, 301, 303, 304, 654, 305,
	293, 294, 306, 715, 307, 692, 390, 308, 0, 315,
	309, 310, 295, 311, 314, 693, 312, 313, 662, 0,
	316, 0, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 694, 695, 0, 0, 324, 325, 663, 664, 635,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	655, 334, 0, 398, 335, 336, 337, 399, 696, 0,
	0, 338, 0, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 0, 640, 629, 630, 627, 628, 619, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 1554, 0, 657, 622, 0,
	0, 618, 187, 188, 189, 0, 672, 347, 673, 190,
	674, 675, 0, 191, 351, 352, 192, 193, 625, 656,
	676, 677, 355, 0, 194, 668, 0, 648, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 702, 205, 206, 2497, 0, 649, 650,
	652, 0, 651, 653, 208, 209, 408, 210, 678, 211,
	679, 680, 0, 212, 0, 213, 0, 214, 0, 0,
	671, 216, 0, 217, 0, 0, 0, 613, 218, 220,
	219, 221, 658, 659, 636, 703, 0, 0, 0, 0,
	0, 222, 223, 681, 682, 683, 0, 224, 0, 225,
	0, 0, 704, 0, 226, 669, 0, 367, 0, 0,
	227, 228, 0, 0, 229, 230, 665, 667, 0, 0,
	370, 234, 0, 231, 0, 705, 232, 684, 233, 685,
	686, 687, 688, 689, 0, 647, 0, 0, 235, 236,
	237, 708, 238, 239, 240, 0, 242, 241, 0, 670,
	709, 243, 0, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 711, 251, 252, 254, 253,
	608, 0, 637, 666, 255, 690, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 712, 261, 713,
	660, 262, 263, 264, 265, 266, 0, 267, 661, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 691, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 714, 290, 291,
	614, 292, 0, 296, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 654, 305, 293, 294, 306, 0,
	307, 692, 390, 308, 0, 315, 309, 310, 295, 311,
	314, 693, 312, 313, 662, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 694, 695, 0,
	0, 324, 325, 663, 664, 635, 326, 327, 2496, 329,
	0, 0, 330, 331, 332, 333, 655, 334, 0, 398,
	335, 336, 337, 399, 696, 0, 0, 338, 0, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 606, 0, 184, 185, 0, 186, 0,
	0, 615, 0, 657, 0, 0, 0, 618, 187, 188,
	189, 345, 346, 347, 348, 190, 349, 350, 0, 191,
	351, 352, 192, 193, 0, 656, 353, 354, 355, 0,
	194, 668, 0, 648, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 702,
	205, 206, 207, 0, 649, 650, 652, 0, 651, 653,
	208, 209, 408, 210, 357, 211, 358, 359, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 360, 218, 220, 219, 221, 658, 659,
	0, 703, 0, 0, 0, 0, 0, 222, 223, 363,
	364, 365, 0, 224, 0, 225, 0, 0, 704, 0,
	226, 669, 0, 367, 0, 0, 227, 228, 0, 0,
	229, 230, 665, 667, 706, 0, 370, 234, 0, 231,
	0, 705, 232, 371, 233, 372, 373, 374, 375, 376,
	0, 377, 0, 707, 235, 236, 237, 708, 238, 239,
	240, 0, 242, 241, 0, 670, 709, 243, 710, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 711, 251, 252, 254, 253, 0, 0, 0, 666,
	255, 381, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 712, 261, 713, 660, 262, 263, 264,
	265, 266, 0, 267, 661, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 386, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 714, 290, 291, 387, 292, 0, 296,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	654, 305, 293, 294, 306, 715, 307, 389, 390, 308,
	0, 315, 309, 310, 295, 311, 314, 391, 312, 313,
	662, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 663,
	664, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 655, 334, 0, 398, 335, 336, 337, 399,
	400, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 919, 0, 922, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 2136, 0, 344,
	0, 0, 0, 0, 187, 188, 189, 345, 346, 347,
	348, 190, 349, 350, 0, 191, 351, 352, 192, 193,
	0, 0, 353, 354, 355, 0, 194, 356, 0, 777,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 702, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 408, 210,
	357, 211, 358, 359, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 360,
	218, 220, 219, 221, 361, 362, 0, 703, 0, 0,
	0, 0, 0, 222, 223, 363, 364, 365, 0, 224,
	0, 225, 0, 0, 704, 0, 226, 366, 0, 367,
	0, 0, 227, 228, 0, 0, 229, 230, 368, 369,
	706, 0, 370, 234, 0, 231, 0, 705, 232, 371,
	233, 372, 373, 374, 375, 376, 0, 377, 0, 707,
	235, 236, 237, 708, 238, 239, 240, 0, 242, 241,
	0, 378, 709, 243, 710, 0, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 379, 249, 711, 251, 252,
	254, 253, 0, 0, 0, 380, 255, 381, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 382, 712,
	261, 713, 383, 262, 263, 264, 265, 266, 0, 267,
	384, 268, 385, 269, 0, 270, 271, 272, 273, 274,
	386, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 714,
	290, 291, 387, 292, 0, 296, 297, 298, 299, 300,
	140, 302, 388, 301, 303, 304, 0, 305, 293, 294,
	306, 715, 307, 389, 390, 308, 0, 315, 309, 310,
	295, 311, 314, 391, 312, 313, 392, 0, 316, 142,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 394,
	395, 0, 0, 324, 325, 396, 397, 0, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 0, 334,
	0, 398, 335, 336, 337, 926, 400, 0, 0, 338,
	0, 0, 0, 134, 339, 340, 341, 342, 343, 591,
	135, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 126, 0, 344, 0, 0, 0, 0,
	187, 188, 189, 345, 346, 347, 348, 190, 349, 350,
	0, 191, 351, 352, 192, 193, 0, 0, 353, 354,
	355, 0, 194, 356, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 408, 210, 357, 211, 358, 359,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 360, 218, 220, 219, 221,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 363, 364, 365, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 366, 0, 367, 0, 0, 227, 228,
	0, 0, 229, 230, 368, 369, 0, 0, 370, 234,
	0, 231, 0, 0, 232, 371, 233, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 378, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 755,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 300, 140, 302, 388, 301,
	303, 304, 0, 305, 293, 294, 306, 0, 307, 389,
	390, 308, 0, 315, 309, 310, 295, 311, 314, 391,
	312, 313, 392, 0, 316, 142, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 926, 400, 0, 0, 338, 0, 0, 0, 134,
	339, 340, 341, 342, 343, 0, 135, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 749, 0, 1194,
	0, 344, 0, 0, 0, 0, 187, 188, 189, 345,
	346, 347, 348, 190, 349, 350, 0, 191, 351, 352,
	192, 193, 0, 0, 353, 354, 355, 0, 194, 356,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	408, 210, 357, 211, 358, 359, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 360, 218, 220, 219, 221, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 363, 364, 365,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 366,
	0, 367, 0, 0, 227, 228, 0, 0, 229, 230,
	368, 369, 0, 0, 370, 234, 0, 231, 0, 0,
	232, 371, 233, 372, 373, 374, 375, 376, 0, 377,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 378, 0, 243, 0, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 0,
	251, 252, 254, 253, 0, 0, 0, 380, 255, 381,
	256, 257, 0, 258, 0, 755, 259, 0, 0, 260,
	382, 0, 261, 0, 383, 262, 263, 264, 265, 266,
	0, 267, 384, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 386, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 0, 290, 291, 387, 292, 0, 296, 297, 298,
	299, 300, 140, 302, 388, 301, 303, 304, 0, 305,
	293, 294, 306, 0, 307, 389, 390, 308, 0, 315,
	309, 310, 295, 311, 314, 391, 312, 313, 392, 0,
	316, 142, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 394, 395, 0, 0, 324, 325, 396, 397, 0,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	0, 334, 0, 398, 335, 336, 337, 926, 400, 0,
	0, 338, 0, 0, 0, 134, 339, 340, 341, 342,
	343, 591, 135, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 749, 0, 1194, 0, 344, 0, 0,
	0, 0, 187, 188, 189, 345, 346, 347, 348, 190,
	349, 350, 0, 191, 351, 352, 192, 193, 0, 0,
	353, 354, 355, 0, 194, 356, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 408, 210, 357, 211,
	358, 359, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 360, 218, 220,
	219, 221, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 363, 364, 365, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 366, 0, 367, 0, 0,
	227, 228, 0, 0, 229, 230, 368, 369, 0, 0,
	370, 234, 0, 231, 0, 0, 232, 371, 233, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 378,
	0, 243, 0, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 380, 255, 381, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 0, 261, 0,
	383, 262, 263, 264, 265, 266, 0, 267, 384, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 386, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	387, 292, 0, 296, 297, 298, 299, 300, 140, 302,
	388, 301, 303, 304, 0, 305, 293, 294, 306, 0,
	307, 389, 390, 308, 0, 315, 309, 310, 295, 311,
	314, 391, 312, 313, 392, 0, 316, 142, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 926, 400, 0, 0, 338, 0, 0,
	0, 134, 339, 340, 341, 342, 343, 1880, 135, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 126, 0, 344, 0, 0, 0, 0, 187, 188,
	189, 345, 346, 347, 348, 190, 349, 350, 0, 191,
	351, 352, 192, 193, 0, 0, 353, 354, 355, 0,
	194, 356, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 408, 210, 357, 211, 358, 359, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 360, 218, 220, 219, 221, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 363,
	364, 365, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 366, 0, 367, 0, 0, 227, 228, 0, 0,
	229, 230, 368, 369, 0, 0, 370, 234, 0, 231,
	0, 0, 232, 371, 233, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 378, 0, 243, 0, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 380,
	255, 381, 256, 257, 0, 258, 0, 755, 259, 0,
	0, 260, 382, 0, 261, 0, 383, 262, 263, 264,
	265, 266, 0, 267, 384, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 386, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 387, 292, 0, 296,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	0, 305, 293, 294, 306, 0, 307, 389, 390, 308,
	0, 315, 309, 310, 295, 311, 314, 391, 312, 313,
	392, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 748, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 749, 0, 754, 0, 344,
	0, 0, 0, 0, 187, 188, 189, 345, 346, 347,
	348, 190, 349, 350, 0, 191, 351, 352, 192, 193,
	0, 0, 353, 354, 355, 0, 194, 356, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 408, 210,
	357, 211, 358, 359, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 360,
	218, 220, 219, 221, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 363, 364, 365, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 366, 0, 367,
	0, 0, 227, 228, 0, 0, 229, 230, 368, 369,
	0, 0, 370, 234, 0, 231, 0, 0, 232, 371,
	233, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 378, 0, 243, 0, 0, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 379, 249, 0, 251, 252,
	254, 253, 0, 0, 0, 380, 255, 381, 256, 257,
	0, 258, 0, 755, 259, 0, 0, 260, 382, 0,
	261, 0, 383, 262, 263, 264, 265, 266, 0, 267,
	384, 268, 385, 269, 0, 270, 271, 272, 273, 274,
	386, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 0,
	290, 291, 387, 292, 0, 296, 297, 298, 299, 300,
	0, 302, 388, 301, 303, 304, 0, 305, 293, 294,
	306, 0, 307, 389, 390, 308, 0, 315, 309, 310,
	295, 311, 314, 391, 312, 313, 392, 0, 316, 0,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 394,
	395, 0, 0, 324, 325, 396, 397, 0, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 0, 334,
	0, 398, 335, 336, 337, 399, 400, 0, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 749, 0, 754, 344, 0, 0, 0, 0, 187,
	188, 189, 345, 346, 347, 348, 190, 349, 350, 0,
	191, 351, 352, 192, 193, 0, 0, 353, 354, 355,
	0, 194, 356, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 408, 210, 357, 211, 358, 359, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 360, 218, 220, 219, 221, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	363, 364, 365, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 366, 0, 367, 0, 0, 227, 228, 0,
	0, 229, 230, 368, 369, 0, 0, 370, 234, 0,
	231, 0, 0, 232, 371, 233, 372, 373, 374, 375,
	376, 0, 377, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 378, 0, 243, 0,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 0, 251, 252, 254, 253, 0, 0, 0,
	380, 255, 381, 256, 257, 0, 258, 0, 755, 259,
	0, 0, 260, 382, 0, 261, 0, 383, 262, 263,
	264, 265, 266, 0, 267, 384, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 386, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 0, 290, 291, 387, 292, 0,
	296, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 0, 305, 293, 294, 306, 0, 307, 389, 390,
	308, 0, 315, 309, 310, 295, 311, 314, 391, 312,
	313, 392, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 394, 395, 0, 0, 324, 325,
	396, 397, 0, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 0, 334, 0, 398, 335, 336, 337,
	399, 400, 0, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 749, 0, 754, 344,
	0, 0, 0, 0, 187, 188, 189, 345, 346, 347,
	348, 190, 349, 350, 0, 191, 351, 352, 192, 193,
	0, 0, 353, 354, 355, 0, 194, 356, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 408, 210,
	357, 211, 358, 359, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 360,
	218, 220, 219, 221, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 363, 364, 365, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 366, 0, 367,
	0, 0, 227, 228, 0, 0, 229, 230, 368, 369,
	0, 0, 370, 234, 0, 231, 0, 0, 232, 371,
	233, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 378, 0, 243, 0, 0, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 379, 249, 0, 251, 252,
	254, 253, 0, 0, 0, 380, 255, 381, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 382, 0,
	261, 0, 383, 262, 263, 264, 265, 266, 0, 267,
	384, 268, 385, 269, 0, 270, 271, 272, 273, 274,
	386, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 0,
	290, 291, 387, 292, 0, 296, 297, 298, 299, 300,
	0, 302, 388, 301, 303, 304, 0, 305, 293, 294,
	306, 0, 307, 389, 390, 308, 0, 315, 309, 310,
	295, 311, 314, 391, 312, 313, 392, 0, 316, 0,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 394,
	395, 0, 0, 324, 325, 396, 397, 0, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 0, 334,
	0, 398, 335, 336, 337, 399, 400, 0, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 344, 1227, 0, 0, 0, 187, 188,
	189, 345, 346, 347, 348, 190, 349, 350, 0, 191,
	351, 352, 192, 193, 0, 0, 353, 354, 355, 0,
	194, 356, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 408, 210, 357, 211, 358, 359, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 360, 218, 220, 219, 221, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 363,
	364, 365, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 366, 0, 367, 0, 0, 227, 228, 0, 0,
	229, 230, 368, 369, 0, 0, 370, 234, 0, 231,
	0, 0, 232, 371, 233, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 378, 0, 243, 0, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 380,
	255, 381, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 0, 261, 0, 383, 262, 263, 264,
	265, 266, 0, 267, 384, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 386, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 387, 292, 0, 296,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	0, 305, 293, 294, 306, 0, 307, 389, 390, 308,
	0, 315, 309, 310, 295, 311, 314, 391, 312, 313,
	392, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 1696, 344, 0,
	0, 0, 0, 187, 188, 189, 345, 346, 347, 348,
	190, 349, 350, 0, 191, 351, 352, 192, 193, 0,
	0, 353, 354, 355, 0, 194, 356, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 408, 210, 357,
	211, 358, 359, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 360, 218,
	220, 219, 221, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 363, 364, 365, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 366, 0, 367, 0,
	0, 227, 228, 0, 0, 229, 230, 368, 369, 0,
	0, 370, 234, 0, 231, 0, 0, 232, 371, 233,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	378, 0, 243, 0, 0, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 380, 255, 381, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 0, 261,
	0, 383, 262, 263, 264, 265, 266, 0, 267, 384,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 386,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 293, 294, 306,
	0, 307, 389, 390, 308, 0, 315, 309, 310, 295,
	311, 314, 391, 312, 313, 392, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 2052, 344, 0, 0, 0, 0, 187, 188,
	189, 345, 346, 347, 348, 190, 349, 350, 0, 191,
	351, 352, 192, 193, 0, 0, 353, 354, 355, 0,
	194, 356, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 408, 210, 357, 211, 358, 359, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 360, 218, 220, 219, 221, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 363,
	364, 365, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 366, 0, 367, 0, 0, 227, 228, 0, 0,
	229, 230, 368, 369, 0, 0, 370, 234, 0, 231,
	0, 0, 232, 371, 233, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 378, 0, 243, 0, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 380,
	255, 381, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 0, 261, 0, 383, 262, 263, 264,
	265, 266, 0, 267, 384, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 386, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 387, 292, 0, 296,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	0, 305, 293, 294, 306, 0, 307, 389, 390, 308,
	0, 315, 309, 310, 295, 311, 314, 391, 312, 313,
	392, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 640, 629, 630, 627, 628, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 1197, 344, 0,
	0, 0, 0, 187, 188, 189, 345, 672, 347, 673,
	190, 674, 675, 0, 191, 351, 352, 192, 193, 0,
	0, 676, 677, 355, 0, 194, 356, 0, 777, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 702, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 408, 210, 678,
	211, 679, 680, 0, 212, 0, 213, 0, 214, 0,
	0, 671, 216, 0, 217, 0, 0, 0, 360, 218,
	220, 219, 221, 361, 362, 636, 703, 0, 0, 0,
	0, 0, 222, 223, 681, 682, 683, 0, 224, 0,
	225, 0, 0, 704, 0, 226, 366, 0, 367, 0,
	0, 227, 228, 0, 0, 229, 230, 368, 369, 706,
	0, 370, 234, 0, 231, 0, 705, 232, 684, 233,
	685, 686, 687, 688, 689, 0, 647, 0, 707, 235,
	236, 237, 708, 238, 239, 240, 0, 242, 241, 0,
	378, 709, 243, 710, 0, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 711, 251, 252, 254,
	253, 0, 0, 637, 380, 255, 690, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 712, 261,
	713, 383, 262, 263, 264, 265, 266, 0, 267, 384,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 691,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 714, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 293, 294, 306,
	715, 307, 692, 390, 308, 0, 315, 309, 310, 295,
	311, 314, 693, 312, 313, 392, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 694, 695,
	0, 0, 324, 325, 396, 397, 635, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 696, 0, 494, 338, 181,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 187, 188,
	189, 345, 346, 347, 348, 190, 349, 350, 0, 191,
	351, 352, 192, 193, 0, 0, 353, 354, 355, 0,
	194, 356, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 177, 210, 357, 211, 358, 359, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 360, 218, 220, 219, 221, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 363,
	364, 365, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 366, 0, 367, 0, 0, 227, 228, 0, 0,
	229, 230, 368, 369, 0, 0, 370, 234, 0, 231,
	0, 0, 232, 371, 233, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 378, 0, 243, 0, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 380,
	255, 381, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 0, 261, 0, 383, 262, 263, 264,
	265, 266, 0, 267, 384, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 386, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 387, 292, 0, 296,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	0, 305, 293, 294, 306, 0, 307, 389, 390, 308,
	0, 315, 309, 310, 295, 311, 314, 391, 312, 313,
	392, 0, 316, 176, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 0, 174, 338, 181, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 344, 0,
	180, 0, 0, 187, 188, 189, 345, 346, 347, 348,
	190, 349, 350, 0, 191, 351, 352, 192, 193, 0,
	0, 353, 354, 355, 0, 194, 356, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 177, 210, 357,
	211, 358, 359, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 360, 218,
	220, 219, 221, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 363, 364, 365, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 366, 0, 367, 0,
	0, 227, 228, 0, 0, 229, 230, 368, 369, 0,
	0, 370, 234, 0, 231, 0, 0, 232, 371, 233,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	378, 0, 243, 0, 0, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 380, 255, 381, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 0, 261,
	0, 383, 262, 263, 264, 265, 266, 0, 267, 384,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 386,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 293, 294, 306,
	0, 307, 389, 390, 308, 0, 315, 309, 310, 295,
	311, 314, 391, 312, 313, 392, 0, 316, 176, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 181, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 344, 0, 0, 0, 180, 187, 188, 189, 345,
	346, 347, 348, 190, 349, 350, 0, 191, 351, 352,
	192, 193, 0, 0, 353, 354, 355, 0, 194, 356,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	177, 210, 357, 211, 358, 359, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 360, 218, 220, 219, 221, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 363, 364, 365,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 366,
	0, 367, 0, 0, 227, 228, 0, 0, 229, 230,
	368, 369, 0, 0, 370, 234, 0, 231, 0, 0,
	232, 371, 233, 372, 373, 374, 375, 376, 0, 377,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 378, 0, 243, 0, 0, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 0,
	251, 252, 254, 253, 0, 0, 0, 380, 255, 381,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	382, 0, 261, 0, 383, 262, 263, 264, 265, 266,
	0, 267, 384, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 386, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 0, 290, 291, 387, 292, 0, 296, 297, 298,
	299, 300, 0, 302, 388, 301, 303, 304, 0, 305,
	293, 294, 306, 0, 307, 389, 390, 308, 0, 315,
	309, 310, 295, 311, 314, 391, 312, 313, 392, 0,
	316, 176, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 394, 395, 0, 0, 324, 325, 396, 397, 0,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	0, 334, 0, 398, 335, 336, 337, 399, 400, 0,
	181, 338, 0, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 344, 0, 0, 0, 180, 187,
	188, 189, 345, 346, 347, 348, 190, 349, 350, 0,
	191, 351, 352, 192, 193, 0, 0, 353, 354, 355,
	0, 194, 356, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 408, 210, 357, 211, 358, 359, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 360, 218, 220, 219, 221, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	363, 364, 365, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 366, 0, 367, 0, 0, 227, 228, 0,
	0, 229, 230, 368, 369, 0, 0, 370, 234, 0,
	231, 0, 0, 232, 371, 233, 372, 373, 374, 375,
	376, 0, 377, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 378, 0, 243, 0,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 0, 251, 252, 254, 253, 0, 0, 0,
	380, 255, 381, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 382, 0, 261, 0, 383, 262, 263,
	264, 265, 266, 0, 267, 384, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 386, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 0, 290, 291, 387, 292, 0,
	296, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 0, 305, 293, 294, 306, 0, 307, 389, 390,
	308, 0, 315, 309, 310, 295, 311, 314, 391, 312,
	313, 392, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 394, 395, 0, 0, 324, 325,
	396, 397, 0, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 0, 334, 0, 398, 335, 336, 337,
	399, 400, 0, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 976, 0, 922, 980, 0, 0,
	0, 978, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 184, 185, 0, 186, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 187, 188, 189, 345, 346,
	347, 348, 190, 349, 350, 0, 191, 351, 352, 192,
	193, 0, 0, 353, 354, 355, 0, 194, 356, 0,
	777, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 702, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 408,
	210, 357, 211, 358, 359, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	360, 218, 220, 219, 221, 361, 362, 0, 703, 0,
	0, 0, 0, 0, 222, 223, 363, 364, 365, 0,
	224, 0, 225, 0, 0, 704, 0, 226, 366, 0,
	367, 0, 0, 227, 228, 0, 0, 229, 230, 368,
	369, 706, 0, 370, 234, 0, 231, 0, 705, 232,
	371, 233, 372, 373, 374, 375, 376, 0, 377, 0,
	707, 235, 236, 237, 708, 238, 239, 240, 0, 242,
	241, 0, 378, 709, 243, 710, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 711, 251,
	252, 254, 253, 0, 0, 0, 380, 255, 381, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	712, 261, 713, 383, 262, 263, 264, 265, 266, 0,
	267, 384, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 386, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	714, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 0, 305, 293,
	294, 306, 715, 307, 389, 390, 308, 0, 315, 309,
	310, 295, 311, 314, 391, 312, 313, 392, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 922, 980,
	338, 0, 0, 978, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 344, 0, 0, 0, 0, 187, 188, 189,
	345, 346, 347, 348, 190, 349, 350, 0, 191, 351,
	352, 192, 193, 0, 0, 353, 354, 355, 0, 194,
	356, 0, 777, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 702, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 408, 210, 357, 211, 358, 359, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 360, 218, 220, 219, 221, 361, 362, 0,
	703, 0, 0, 0, 0, 0, 222, 223, 363, 364,
	365, 0, 224, 0, 225, 0, 0, 704, 0, 226,
	366, 0, 367, 0, 0, 227, 228, 0, 0, 229,
	230, 368, 369, 706, 0, 370, 234, 0, 231, 0,
	705, 232, 371, 233, 372, 373, 374, 375, 376, 0,
	377, 0, 707, 235, 236, 237, 708, 238, 239, 240,
	0, 242, 241, 0, 378, 709, 243, 710, 0, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	711, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 712, 261, 713, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 714, 290, 291, 387, 292, 0, 296, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 0,
	305, 293, 294, 306, 715, 307, 389, 390, 308, 0,
	315, 309, 310, 295, 311, 314, 391, 312, 313, 392,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	922, 980, 338, 0, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 344, 0, 0, 0, 0, 187,
	188, 189, 345, 346, 347, 348, 190, 349, 350, 0,
	191, 351, 352, 192, 193, 0, 0, 353, 354, 355,
	0, 194, 356, 0, 777, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	702, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 408, 210, 357, 211, 358, 359, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 360, 218, 220, 219, 221, 361,
	362, 0, 703, 0, 0, 0, 0, 0, 222, 223,
	363, 364, 365, 0, 224, 0, 225, 0, 0, 704,
	0, 226, 366, 0, 367, 0, 0, 227, 228, 0,
	0, 229, 230, 368, 369, 706, 0, 370, 234, 0,
	231, 0, 705, 232, 371, 233, 372, 373, 374, 375,
	376, 0, 377, 0, 707, 235, 236, 237, 708, 238,
	239, 240, 0, 242, 241, 0, 378, 709, 243, 710,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 711, 251, 252, 254, 253, 0, 0, 0,
	380, 255, 381, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 382, 712, 261, 713, 383, 262, 263,
	264, 265, 266, 0, 267, 384, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 386, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 714, 290, 291, 387, 292, 0,
	296, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 0, 305, 293, 294, 306, 715, 307, 389, 390,
	308, 0, 315, 309, 310, 295, 311, 314, 391, 312,
	313, 392, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 394, 395, 0, 0, 324, 325,
	396, 397, 0, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 0, 334, 0, 398, 335, 336, 337,
	399, 400, 922, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 344, 0, 0, 0,
	0, 187, 188, 189, 345, 346, 347, 348, 190, 349,
	350, 0, 191, 351, 352, 192, 193, 0, 0, 353,
	354, 355, 0, 194, 356, 0, 777, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 702, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 408, 210, 357, 211, 358,
	359, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 360, 218, 220, 219,
	221, 361, 362, 0, 703, 0, 0, 0, 0, 0,
	222, 223, 363, 364, 365, 0, 224, 0, 225, 0,
	0, 704, 0, 226, 366, 0, 367, 0, 0, 227,
	228, 0, 0, 229, 230, 368, 369, 706, 0, 370,
	234, 0, 231, 0, 705, 232, 371, 233, 372, 373,
	374, 375, 376, 0, 377, 0, 707, 235, 236, 237,
	708, 238, 239, 240, 0, 242, 241, 0, 378, 709,
	243, 710, 0, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 379, 249, 711, 251, 252, 254, 253, 0,
	0, 0, 380, 255, 381, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 382, 712, 261, 713, 383,
	262, 263, 264, 265, 266, 0, 267, 384, 268, 385,
	269, 0, 270, 271, 272, 273, 274, 386, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 714, 290, 291, 387,
	292, 0, 296, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 0, 305, 293, 294, 306, 715, 307,
	389, 390, 308, 0, 315, 309, 310, 295, 311, 314,
	391, 312, 313, 392, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 399, 400, 181, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 344, 0,
	0, 0, 0, 187, 188, 189, 345, 346, 347, 348,
	190, 349, 350, 0, 191, 351, 352, 192, 193, 0,
	0, 353, 354, 355, 1631, 194, 356, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 1629, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 408, 210, 357,
	211, 358, 359, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 360, 218,
	220, 219, 221, 361, 362, 0, 1673, 0, 0, 0,
	0, 0, 222, 223, 363, 364, 365, 0, 224, 0,
	225, 1634, 0, 0, 0, 226, 366, 0, 367, 0,
	0, 227, 228, 0, 0, 229, 230, 368, 369, 0,
	0, 370, 234, 1671, 231, 0, 0, 232, 371, 233,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	378, 0, 243, 0, 0, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 380, 255, 381, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 0, 261,
	0, 383, 262, 263, 264, 265, 266, 0, 267, 384,
	268, 385, 269, 1633, 270, 271, 272, 273, 274, 386,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 293, 294, 306,
	0, 307, 389, 390, 308, 0, 315, 309, 310, 295,
	311, 314, 391, 312, 313, 392, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 1672, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 181, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 187, 188, 189, 345, 346,
	347, 348, 190, 349, 350, 0, 191, 351, 352, 192,
	193, 0, 0, 353, 354, 355, 1631, 194, 356, 0,
	0, 1626, 195, 196, 197, 0, 199, 200, 201, 198,
	1629, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 408,
	210, 357, 211, 358, 359, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	360, 218, 220, 219, 221, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 363, 364, 365, 0,
	224, 0, 225, 1634, 0, 0, 0, 226, 366, 0,
	367, 0, 0, 227, 228, 0, 0, 229, 230, 1625,
	369, 0, 0, 370, 234, 0, 231, 0, 0, 232,
	371, 233, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 378, 0, 243, 0, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 0, 251,
	252, 254, 253, 0, 0, 0, 380, 255, 381, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	0, 261, 0, 383, 262, 263, 264, 265, 266, 0,
	267, 384, 268, 385, 269, 1633, 270, 271, 272, 273,
	274, 386, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 0, 305, 293,
	294, 306, 0, 307, 389, 390, 308, 0, 315, 309,
	310, 295, 311, 314, 391, 312, 313, 392, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 1632, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 897,
	338, 181, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	187, 188, 189, 345, 346, 347, 348, 190, 349, 350,
	0, 191, 351, 352, 192, 193, 0, 0, 353, 354,
	355, 0, 194, 356, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 408, 210, 357, 211, 358, 359,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 360, 218, 220, 219, 221,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 363, 364, 365, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 366, 0, 367, 0, 0, 227, 228,
	0, 0, 229, 230, 368, 369, 0, 0, 370, 234,
	0, 231, 0, 0, 232, 371, 233, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 378, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 755,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 300, 0, 302, 388, 301,
	303, 304, 0, 305, 293, 294, 306, 0, 307, 389,
	390, 308, 0, 315, 309, 310, 295, 311, 314, 391,
	312, 313, 392, 0, 316, 0, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 0, 761, 338, 181, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 187, 188, 189, 345, 346,
	347, 348, 190, 349, 350, 0, 191, 351, 352, 192,
	193, 0, 0, 353, 354, 355, 0, 194, 356, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 408,
	210, 357, 211, 358, 359, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	360, 218, 220, 219, 221, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 363, 364, 365, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 366, 0,
	367, 0, 0, 227, 228, 0, 0, 229, 230, 763,
	369, 0, 0, 370, 234, 0, 231, 0, 0, 232,
	371, 233, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 378, 0, 243, 0, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 0, 251,
	252, 254, 253, 0, 0, 0, 380, 255, 381, 256,
	257, 0, 258, 0, 755, 259, 0, 0, 260, 382,
	0, 261, 0, 383, 262, 263, 264, 265, 266, 0,
	267, 384, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 386, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 0, 305, 293,
	294, 306, 0, 307, 389, 390, 308, 0, 315, 309,
	310, 295, 311, 314, 391, 312, 313, 392, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 757,
	338, 181, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	187, 188, 189, 345, 346, 347, 348, 190, 349, 350,
	0, 191, 351, 352, 192, 193, 0, 0, 353, 354,
	355, 0, 194, 356, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 408, 210, 357, 211, 358, 359,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 360, 218, 220, 219, 221,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 363, 364, 365, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 366, 0, 367, 0, 0, 227, 228,
	0, 0, 229, 230, 759, 369, 0, 0, 370, 234,
	0, 231, 0, 0, 232, 371, 233, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 378, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 755,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 300, 0, 302, 388, 301,
	303, 304, 0, 305, 293, 294, 306, 0, 307, 389,
	390, 308, 0, 315, 309, 310, 295, 311, 314, 391,
	312, 313, 392, 0, 316, 0, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 0, 425, 338, 181, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 424, 186, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 187, 188, 189, 345, 346,
	347, 348, 190, 349, 350, 0, 191, 351, 352, 192,
	193, 0, 0, 353, 354, 355, 0, 194, 356, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 408,
	210, 357, 211, 358, 359, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	360, 218, 220, 219, 221, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 363, 364, 365, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 366, 0,
	367, 0, 0, 227, 228, 0, 0, 229, 230, 368,
	369, 0, 0, 370, 234, 0, 231, 0, 0, 232,
	371, 233, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 378, 0, 243, 0, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 0, 251,
	252, 254, 253, 0, 0, 0, 380, 255, 381, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	0, 261, 0, 383, 262, 263, 264, 265, 266, 0,
	267, 384, 268, 385, 423, 0, 270, 271, 272, 273,
	274, 386, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 0, 305, 293,
	294, 306, 0, 307, 389, 390, 308, 0, 315, 309,
	310, 295, 311, 314, 391, 312, 313, 392, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 181, 0,
	338, 0, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 344, 0, 1614, 0, 0, 187, 188, 189,
	345, 346, 347, 348, 190, 349, 350, 0, 191, 351,
	352, 192, 193, 0, 0, 353, 354, 355, 0, 194,
	356, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 408, 210, 357, 211, 358, 359, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 360, 218, 220, 219, 221, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 363, 364,
	365, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	366, 0, 367, 0, 0, 227, 228, 0, 0, 229,
	230, 368, 369, 0, 0, 370, 234, 0, 231, 0,
	0, 232, 371, 233, 372, 373, 374, 375, 376, 0,
	377, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 378, 0, 243, 0, 0, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 0, 261, 0, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 387, 292, 0, 296, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 0,
	305, 293, 294, 306, 0, 307, 389, 390, 308, 0,
	315, 309, 310, 295, 311, 314, 391, 312, 313, 392,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	181, 2202, 338, 0, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 344, 0, 0, 0, 0, 187,
	188, 189, 345, 346, 347, 348, 190, 349, 350, 0,
	191, 351, 352, 192, 193, 0, 0, 353, 354, 355,
	0, 194, 356, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 408, 210, 357, 211, 358, 359, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 360, 218, 220, 219, 221, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	363, 364, 365, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 366, 0, 367, 0, 0, 227, 228, 0,
	0, 229, 230, 368, 369, 0, 0, 370, 234, 0,
	231, 0, 0, 232, 371, 233, 372, 373, 374, 375,
	376, 0, 377, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 378, 0, 243, 0,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 0, 251, 252, 254, 253, 0, 0, 0,
	380, 255, 381, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 382, 0, 261, 0, 383, 262, 263,
	264, 265, 266, 0, 267, 384, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 386, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 0, 290, 291, 387, 292, 0,
	296, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 0, 305, 293, 294, 306, 0, 307, 389, 390,
	308, 0, 315, 309, 310, 295, 311, 314, 391, 312,
	313, 392, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 394, 395, 0, 0, 324, 325,
	396, 397, 0, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 0, 334, 0, 398, 335, 336, 337,
	399, 400, 181, 2202, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 344, 0, 0, 0,
	0, 187, 188, 189, 345, 346, 347, 348, 190, 349,
	350, 0, 191, 351, 352, 192, 193, 0, 0, 353,
	354, 355, 0, 194, 356, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 408, 210, 357, 211, 358,
	359, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 360, 218, 220, 219,
	221, 361, 362, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 363, 364, 365, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 366, 0, 367, 0, 0, 227,
	228, 0, 0, 229, 230, 368, 369, 0, 0, 370,
	234, 0, 231, 0, 0, 232, 371, 233, 372, 373,
	374, 375, 376, 0, 377, 0, 0, 235, 236, 237,
	0, 238, 239, 240, 0, 242, 241, 0, 378, 0,
	243, 0, 0, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 379, 249, 0, 251, 252, 254, 253, 0,
	0, 0, 380, 255, 381, 256, 257, 0, 258, 0,
	0, 2199, 0, 0, 260, 382, 0, 261, 0, 383,
	262, 263, 264, 265, 266, 0, 267, 384, 268, 385,
	269, 0, 270, 271, 272, 273, 274, 386, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 0, 290, 291, 387,
	292, 0, 296, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 0, 305, 293, 294, 306, 0, 307,
	389, 390, 308, 0, 315, 309, 310, 295, 311, 314,
	391, 312, 313, 392, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 399, 400, 181, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 344, 0,
	0, 0, 0, 187, 188, 189, 345, 346, 347, 348,
	190, 349, 350, 0, 191, 351, 352, 192, 193, 0,
	0, 353, 354, 355, 0, 194, 356, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 408, 210, 357,
	211, 358, 359, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 360, 218,
	220, 219, 221, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 363, 364, 365, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 366, 0, 367, 0,
	0, 227, 228, 0, 0, 229, 230, 368, 369, 0,
	0, 370, 234, 0, 231, 0, 0, 232, 371, 233,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	378, 0, 243, 0, 0, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 380, 255, 381, 256, 257, 0,
	258, 0, 755, 259, 0, 0, 260, 382, 0, 261,
	0, 383, 262, 263, 264, 265, 266, 0, 267, 384,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 386,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 293, 294, 306,
	0, 307, 389, 390, 308, 0, 315, 309, 310, 295,
	311, 314, 391, 312, 313, 392, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 1383, 338, 181,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 187, 188,
	189, 345, 346, 347, 348, 190, 349, 350, 0, 191,
	351, 352, 192, 193, 0, 0, 353, 354, 355, 0,
	194, 356, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 408, 210, 357, 211, 358, 359, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 360, 218, 220, 219, 221, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 363,
	364, 365, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 366, 0, 367, 0, 0, 227, 228, 0, 0,
	229, 230, 368, 369, 0, 0, 370, 234, 0, 231,
	0, 0, 232, 371, 233, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 378, 0, 243, 0, 0,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 380,
	255, 381, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 0, 261, 0, 383, 262, 263, 264,
	265, 266, 0, 267, 384, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 386, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 387, 292, 0, 296,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	0, 305, 293, 294, 306, 0, 307, 389, 390, 308,
	0, 315, 309, 310, 295, 311, 314, 391, 312, 313,
	392, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 0, 1381, 338, 181, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 344, 0,
	0, 0, 0, 187, 188, 189, 345, 346, 347, 348,
	190, 349, 350, 0, 191, 351, 352, 192, 193, 0,
	0, 353, 354, 355, 0, 194, 356, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 408, 210, 357,
	211, 358, 359, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 360, 218,
	220, 219, 221, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 363, 364, 365, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 366, 0, 367, 0,
	0, 227, 228, 0, 0, 229, 230, 368, 369, 0,
	0, 370, 234, 0, 231, 0, 0, 232, 371, 233,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	378, 0, 243, 0, 0, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 380, 255, 381, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 0, 261,
	0, 383, 262, 263, 264, 265, 266, 0, 267, 384,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 386,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 293, 294, 306,
	0, 307, 389, 390, 308, 0, 315, 309, 310, 295,
	311, 314, 391, 312, 313, 392, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 181, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 184, 185, 1363, 186, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 187, 188, 189, 345, 346,
	347, 348, 190, 349, 350, 0, 191, 351, 352, 192,
	193, 0, 0, 353, 354, 355, 0, 194, 356, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 408,
	210, 357, 211, 358, 359, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	360, 218, 220, 219, 221, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 363, 364, 365, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 366, 0,
	367, 0, 0, 227, 228, 0, 0, 229, 230, 368,
	369, 0, 0, 370, 234, 0, 231, 0, 0, 232,
	371, 233, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 378, 0, 243, 0, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 0, 251,
	252, 254, 253, 0, 0, 0, 380, 255, 381, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	0, 261, 0, 383, 262, 263, 264, 265, 266, 0,
	267, 384, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 386, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 0, 305, 293,
	294, 306, 0, 307, 389, 390, 308, 0, 315, 309,
	310, 295, 311, 314, 391, 312, 313, 392, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 520,
	338, 181, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	187, 188, 189, 345, 346, 347, 348, 190, 349, 350,
	0, 191, 351, 352, 192, 193, 0, 0, 353, 354,
	955, 0, 194, 356, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 408, 210, 357, 211, 358, 359,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 360, 218, 220, 219, 221,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 363, 364, 365, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 366, 0, 367, 0, 0, 227, 228,
	0, 0, 229, 230, 368, 369, 0, 0, 370, 234,
	0, 231, 0, 0, 232, 371, 233, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 378, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 522, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 300, 0, 302, 388, 301,
	303, 304, 0, 305, 293, 294, 306, 0, 307, 389,
	390, 308, 0, 315, 309, 310, 295, 311, 314, 391,
	312, 313, 392, 0, 316, 0, 317, 318, 319, 320,
	321, 322, 323, 0, 517, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 0, 1241, 338, 181, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 187, 188, 189, 345, 346,
	347, 348, 190, 349, 350, 0, 191, 351, 352, 192,
	193, 0, 0, 353, 354, 355, 0, 194, 356, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 408,
	210, 357, 211, 358, 359, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	360, 218, 220, 219, 221, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 363, 364, 365, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 366, 0,
	367, 0, 0, 227, 228, 0, 0, 229, 230, 1240,
	369, 0, 0, 370, 234, 0, 231, 0, 0, 232,
	371, 233, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 378, 0, 243, 0, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 0, 251,
	252, 254, 253, 0, 0, 0, 380, 255, 381, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	0, 261, 0, 383, 262, 263, 264, 265, 266, 0,
	267, 384, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 386, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 0, 305, 293,
	294, 306, 0, 307, 389, 390, 308, 0, 315, 309,
	310, 295, 311, 314, 391, 312, 313, 392, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 520,
	338, 181, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	187, 188, 189, 345, 346, 347, 348, 190, 349, 350,
	0, 191, 351, 352, 192, 193, 0, 0, 353, 354,
	955, 0, 194, 356, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 408, 210, 357, 211, 358, 359,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 360, 218, 220, 219, 221,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 363, 364, 365, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 366, 0, 367, 0, 0, 227, 228,
	0, 0, 229, 230, 368, 369, 0, 0, 370, 234,
	0, 231, 0, 0, 232, 371, 233, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 378, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 522, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 300, 0, 302, 388, 301,
	303, 304, 0, 305, 293, 294, 306, 0, 307, 389,
	390, 308, 0, 315, 309, 310, 295, 311, 314, 391,
	312, 313, 392, 0, 316, 0, 317, 318, 319, 320,
	321, 322, 323, 0, 517, 394, 395, 0, 0, 324,
	956, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 0, 520, 338, 181, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 187, 188, 189, 345, 346,
	347, 348, 190, 349, 350, 0, 191, 351, 352, 192,
	193, 0, 0, 353, 354, 355, 0, 511, 356, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 408,
	210, 357, 211, 358, 359, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	360, 218, 220, 219, 221, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 363, 364, 365, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 366, 0,
	367, 0, 0, 227, 228, 0, 0, 229, 230, 368,
	369, 0, 0, 370, 234, 0, 231, 0, 0, 232,
	371, 233, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 378, 0, 243, 0, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 522, 0, 251,
	252, 254, 253, 0, 0, 0, 380, 255, 381, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	0, 261, 0, 383, 262, 263, 264, 265, 266, 0,
	267, 384, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 386, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	300, 0, 302, 388, 301, 939, 304, 0, 305, 293,
	294, 306, 0, 307, 389, 390, 308, 0, 315, 309,
	310, 295, 311, 314, 391, 312, 313, 392, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 517,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 915,
	338, 181, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	187, 188, 189, 345, 346, 347, 348, 190, 349, 350,
	0, 191, 351, 352, 192, 193, 0, 0, 353, 354,
	355, 0, 194, 356, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 408, 210, 357, 211, 358, 359,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 360, 218, 220, 219, 221,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 363, 364, 365, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 366, 0, 367, 0, 0, 227, 228,
	0, 0, 229, 230, 914, 369, 0, 0, 370, 234,
	0, 231, 0, 0, 232, 371, 233, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 378, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 300, 0, 302, 388, 301,
	303, 304, 0, 305, 293, 294, 306, 0, 307, 389,
	390, 308, 0, 315, 309, 310, 295, 311, 314, 391,
	312, 313, 392, 0, 316, 0, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 0, 912, 338, 181, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 187, 188, 189, 345, 346,
	347, 348, 190, 349, 350, 0, 191, 351, 352, 192,
	193, 0, 0, 353, 354, 355, 0, 194, 356, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 408,
	210, 357, 211, 358, 359, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	360, 218, 220, 219, 221, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 363, 364, 365, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 366, 0,
	367, 0, 0, 227, 228, 0, 0, 229, 230, 911,
	369, 0, 0, 370, 234, 0, 231, 0, 0, 232,
	371, 233, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 378, 0, 243, 0, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 0, 251,
	252, 254, 253, 0, 0, 0, 380, 255, 381, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	0, 261, 0, 383, 262, 263, 264, 265, 266, 0,
	267, 384, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 386, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 0, 305, 293,
	294, 306, 0, 307, 389, 390, 308, 0, 315, 309,
	310, 295, 311, 314, 391, 312, 313, 392, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 908,
	338, 181, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	187, 188, 189, 345, 346, 347, 348, 190, 349, 350,
	0, 191, 351, 352, 192, 193, 0, 0, 353, 354,
	355, 0, 194, 356, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 408, 210, 357, 211, 358, 359,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 360, 218, 220, 219, 221,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 363, 364, 365, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 366, 0, 367, 0, 0, 227, 228,
	0, 0, 229, 230, 907, 369, 0, 0, 370, 234,
	0, 231, 0, 0, 232, 371, 233, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 378, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 300, 0, 302, 388, 301,
	303, 304, 0, 305, 293, 294, 306, 0, 307, 389,
	390, 308, 0, 315, 309, 310, 295, 311, 314, 391,
	312, 313, 392, 0, 316, 0, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 0, 905, 338, 181, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 187, 188, 189, 345, 346,
	347, 348, 190, 349, 350, 0, 191, 351, 352, 192,
	193, 0, 0, 353, 354, 355, 0, 194, 356, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 408,
	210, 357, 211, 358, 359, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	360, 218, 220, 219, 221, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 363, 364, 365, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 366, 0,
	367, 0, 0, 227, 228, 0, 0, 229, 230, 904,
	369, 0, 0, 370, 234, 0, 231, 0, 0, 232,
	371, 233, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 378, 0, 243, 0, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 0, 251,
	252, 254, 253, 0, 0, 0, 380, 255, 381, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	0, 261, 0, 383, 262, 263, 264, 265, 266, 0,
	267, 384, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 386, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 0, 305, 293,
	294, 306, 0, 307, 389, 390, 308, 0, 315, 309,
	310, 295, 311, 314, 391, 312, 313, 392, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 901,
	338, 181, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	187, 188, 189, 345, 346, 347, 348, 190, 349, 350,
	0, 191, 351, 352, 192, 193, 0, 0, 353, 354,
	355, 0, 194, 356, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 408, 210, 357, 211, 358, 359,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 360, 218, 220, 219, 221,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 363, 364, 365, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 366, 0, 367, 0, 0, 227, 228,
	0, 0, 229, 230, 900, 369, 0, 0, 370, 234,
	0, 231, 0, 0, 232, 371, 233, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 378, 0, 243,
	0, 0, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 300, 0, 302, 388, 301,
	303, 304, 0, 305, 293, 294, 306, 0, 307, 389,
	390, 308, 0, 315, 309, 310, 295, 311, 314, 391,
	312, 313, 392, 0, 316, 0, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 181, 0, 338, 0, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 184,
	185, 889, 186, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 187, 188, 189, 345, 346, 347, 348, 190,
	349, 350, 0, 191, 351, 352, 192, 193, 0, 0,
	353, 354, 355, 0, 194, 356, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 408, 210, 357, 211,
	358, 359, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 360, 218, 220,
	219, 221, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 363, 364, 365, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 366, 0, 367, 0, 0,
	227, 228, 0, 0, 229, 230, 368, 369, 0, 0,
	370, 234, 0, 231, 0, 0, 232, 371, 233, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 378,
	0, 243, 0, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 380, 255, 381, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 0, 261, 0,
	383, 262, 263, 264, 265, 266, 0, 267, 384, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 386, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	387, 292, 0, 296, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 0, 305, 293, 294, 306, 0,
	307, 389, 390, 308, 0, 315, 309, 310, 295, 311,
	314, 391, 312, 313, 392, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 0, 887, 338, 181, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 344, 0, 0, 0, 0, 187, 188, 189,
	345, 346, 347, 348, 190, 349, 350, 0, 191, 351,
	352, 192, 193, 0, 0, 353, 354, 355, 0, 194,
	356, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 408, 210, 357, 211, 358, 359, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 360, 218, 220, 219, 221, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 363, 364,
	365, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	366, 0, 367, 0, 0, 227, 228, 0, 0, 229,
	230, 886, 369, 0, 0, 370, 234, 0, 231, 0,
	0, 232, 371, 233, 372, 373, 374, 375, 376, 0,
	377, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 378, 0, 243, 0, 0, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 0, 261, 0, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 387, 292, 0, 296, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 0,
	305, 293, 294, 306, 0, 307, 389, 390, 308, 0,
	315, 309, 310, 295, 311, 314, 391, 312, 313, 392,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 883, 338, 181, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 187, 188, 189, 345, 346, 347, 348, 190,
	349, 350, 0, 191, 351, 352, 192, 193, 0, 0,
	353, 354, 355, 0, 194, 356, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 408, 210, 357, 211,
	358, 359, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 360, 218, 220,
	219, 221, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 363, 364, 365, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 366, 0, 367, 0, 0,
	227, 228, 0, 0, 229, 230, 368, 369, 0, 0,
	370, 234, 0, 231, 0, 0, 232, 371, 233, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 378,
	0, 243, 0, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 380, 255, 381, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 0, 261, 0,
	383, 262, 263, 264, 265, 266, 0, 267, 384, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 386, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	387, 292, 0, 296, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 0, 305, 293, 294, 306, 0,
	307, 389, 390, 308, 0, 315, 309, 310, 295, 311,
	314, 391, 312, 313, 392, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 0, 881, 338, 181, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 344, 0, 0, 0, 0, 187, 188, 189,
	345, 346, 347, 348, 190, 349, 350, 0, 191, 351,
	352, 192, 193, 0, 0, 353, 354, 355, 0, 194,
	356, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 408, 210, 357, 211, 358, 359, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 360, 218, 220, 219, 221, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 363, 364,
	365, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	366, 0, 367, 0, 0, 227, 228, 0, 0, 229,
	230, 368, 369, 0, 0, 370, 234, 0, 231, 0,
	0, 232, 371, 233, 372, 373, 374, 375, 376, 0,
	377, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 378, 0, 243, 0, 0, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 0, 261, 0, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 387, 292, 0, 296, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 0,
	305, 293, 294, 306, 0, 307, 389, 390, 308, 0,
	315, 309, 310, 295, 311, 314, 391, 312, 313, 392,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 877, 338, 181, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 187, 188, 189, 345, 346, 347, 348, 190,
	349, 350, 0, 191, 351, 352, 192, 193, 0, 0,
	353, 354, 355, 0, 194, 356, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 408, 210, 357, 211,
	358, 359, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 360, 218, 220,
	219, 221, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 363, 364, 365, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 366, 0, 367, 0, 0,
	227, 228, 0, 0, 229, 230, 879, 369, 0, 0,
	370, 234, 0, 231, 0, 0, 232, 371, 233, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 378,
	0, 243, 0, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 380, 255, 381, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 0, 261, 0,
	383, 262, 263, 264, 265, 266, 0, 267, 384, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 386, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	387, 292, 0, 296, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 0, 305, 293, 294, 306, 0,
	307, 389, 390, 308, 0, 315, 309, 310, 295, 311,
	314, 391, 312, 313, 392, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 0, 767, 338, 181, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 344, 0, 0, 0, 0, 187, 188, 189,
	345, 346, 347, 348, 190, 349, 350, 0, 191, 351,
	352, 192, 193, 0, 0, 353, 354, 355, 0, 194,
	356, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 408, 210, 357, 211, 358, 359, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 360, 218, 220, 219, 221, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 363, 364,
	365, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	366, 0, 367, 0, 0, 227, 228, 0, 0, 229,
	230, 769, 369, 0, 0, 370, 234, 0, 231, 0,
	0, 232, 371, 233, 372, 373, 374, 375, 376, 0,
	377, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 378, 0, 243, 0, 0, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 0, 261, 0, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 387, 292, 0, 296, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 0,
	305, 293, 294, 306, 0, 307, 389, 390, 308, 0,
	315, 309, 310, 295, 311, 314, 391, 312, 313, 392,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 765, 338, 181, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 187, 188, 189, 345, 346, 347, 348, 190,
	349, 350, 0, 191, 351, 352, 192, 193, 0, 0,
	353, 354, 355, 0, 194, 356, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 408, 210, 357, 211,
	358, 359, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 360, 218, 220,
	219, 221, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 363, 364, 365, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 366, 0, 367, 0, 0,
	227, 228, 0, 0, 229, 230, 368, 369, 0, 0,
	370, 234, 0, 231, 0, 0, 232, 371, 233, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 378,
	0, 243, 0, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 380, 255, 381, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 0, 261, 0,
	383, 262, 263, 264, 265, 266, 0, 267, 384, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 386, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	387, 292, 0, 296, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 0, 305, 293, 294, 306, 0,
	307, 389, 390, 308, 0, 315, 309, 310, 295, 311,
	314, 391, 312, 313, 392, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 0, 520, 338, 181, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 344, 0, 0, 0, 0, 187, 188, 189,
	345, 346, 347, 348, 190, 349, 350, 0, 191, 351,
	352, 192, 193, 0, 0, 353, 354, 355, 0, 511,
	356, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 408, 210, 357, 211, 358, 359, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 360, 218, 220, 219, 221, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 363, 364,
	365, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	366, 0, 367, 0, 0, 227, 228, 0, 0, 229,
	230, 368, 369, 0, 0, 370, 234, 0, 231, 0,
	0, 232, 371, 233, 372, 373, 374, 375, 376, 0,
	377, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 378, 0, 243, 0, 0, 510,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 522,
	0, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 0, 261, 0, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 512, 292, 0, 296, 297,
	298, 299, 300, 0, 302, 388, 301, 513, 304, 0,
	305, 293, 294, 306, 0, 307, 389, 390, 308, 0,
	315, 309, 310, 295, 311, 314, 391, 312, 313, 392,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 517, 394, 395, 0, 0, 324, 515, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 502, 338, 181, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 187, 188, 189, 345, 346, 347, 348, 190,
	349, 350, 0, 191, 351, 352, 192, 193, 0, 0,
	353, 354, 355, 0, 194, 356, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 408, 210, 357, 211,
	358, 359, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 360, 218, 220,
	219, 221, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 363, 364, 365, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 366, 0, 367, 0, 0,
	227, 228, 0, 0, 229, 230, 368, 369, 0, 0,
	370, 234, 0, 231, 0, 0, 232, 371, 233, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 378,
	0, 243, 0, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 380, 255, 381, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 0, 261, 0,
	383, 262, 263, 264, 265, 266, 0, 267, 384, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 386, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	387, 292, 0, 503, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 0, 305, 293, 294, 306, 0,
	307, 389, 390, 308, 0, 315, 309, 310, 295, 311,
	314, 391, 312, 313, 392, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 0, 500, 338, 181, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 344, 0, 0, 0, 0, 187, 188, 189,
	345, 346, 347, 348, 190, 349, 350, 0, 191, 351,
	352, 192, 193, 0, 0, 353, 354, 355, 0, 194,
	356, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 408, 210, 357, 211, 358, 359, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 360, 218, 220, 219, 221, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 363, 364,
	365, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	366, 0, 367, 0, 0, 227, 228, 0, 0, 229,
	230, 368, 369, 0, 0, 370, 234, 0, 231, 0,
	0, 232, 371, 233, 372, 373, 374, 375, 376, 0,
	377, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 378, 0, 243, 0, 0, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 0, 261, 0, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 387, 292, 0, 296, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 0,
	305, 293, 294, 306, 0, 307, 389, 390, 308, 0,
	315, 309, 310, 295, 311, 314, 391, 312, 313, 392,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 492, 338, 181, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 187, 188, 189, 345, 346, 347, 348, 190,
	349, 350, 0, 191, 351, 352, 192, 193, 0, 0,
	353, 354, 355, 0, 194, 356, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 408, 210, 357, 211,
	358, 359, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 360, 218, 220,
	219, 221, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 363, 364, 365, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 366, 0, 367, 0, 0,
	227, 228, 0, 0, 229, 230, 368, 369, 0, 0,
	370, 234, 0, 231, 0, 0, 232, 371, 233, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 378,
	0, 243, 0, 0, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 380, 255, 381, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 0, 261, 0,
	383, 262, 263, 264, 265, 266, 0, 267, 384, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 386, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	387, 292, 0, 296, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 0, 305, 293, 294, 306, 0,
	307, 389, 390, 308, 0, 315, 309, 310, 295, 311,
	314, 391, 312, 313, 392, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 0, 448, 338, 181, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 344, 0, 0, 0, 0, 187, 188, 189,
	345, 346, 347, 348, 190, 349, 350, 0, 191, 351,
	352, 192, 193, 0, 0, 353, 354, 355, 0, 194,
	356, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 408, 210, 357, 211, 358, 359, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 360, 218, 220, 219, 221, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 363, 364,
	365, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	366, 0, 367, 0, 0, 227, 228, 0, 0, 229,
	230, 368, 369, 0, 0, 370, 234, 0, 231, 0,
	0, 232, 371, 233, 372, 373, 374, 375, 376, 0,
	377, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 378, 0, 243, 0, 0, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 0, 261, 0, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 387, 292, 0, 296, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 0,
	305, 293, 294, 306, 0, 307, 389, 390, 308, 0,
	315, 309, 310, 295, 311, 314, 391, 312, 313, 392,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	181, 0, 338, 0, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 344, 0, 0, 0, 0, 187,
	188, 189, 345, 346, 347, 348, 190, 349, 350, 0,
	191, 351, 352, 192, 193, 0, 0, 353, 354, 355,
	0, 194, 356, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 408, 210, 357, 211, 358, 359, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 360, 218, 220, 219, 221, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	363, 364, 365, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 366, 0, 367, 0, 0, 227, 228, 0,
	0, 229, 230, 368, 369, 0, 0, 370, 234, 0,
	231, 0, 0, 232, 371, 233, 372, 373, 374, 375,
	376, 0, 377, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 378, 0, 243, 0,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 0, 251, 252, 254, 253, 0, 0, 0,
	380, 255, 381, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 382, 0, 261, 0, 383, 262, 263,
	264, 265, 266, 0, 267, 384, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 386, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 0, 290, 291, 387, 292, 0,
	296, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 0, 305, 293, 294, 306, 0, 307, 389, 390,
	308, 0, 315, 309, 310, 295, 311, 314, 391, 312,
	313, 392, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 394, 395, 0, 0, 324, 325,
	396, 397, 0, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 0, 334, 0, 398, 335, 336, 337,
	399, 400, 181, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 344, 0, 0, 0,
	0, 187, 188, 189, 345, 346, 347, 348, 190, 349,
	350, 0, 191, 351, 352, 192, 193, 0, 0, 353,
	354, 355, 0, 194, 356, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 408, 210, 357, 211, 358,
	359, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 360, 218, 220, 219,
	221, 361, 362, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 363, 364, 365, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 366, 0, 367, 0, 0, 227,
	228, 0, 0, 229, 230, 1927, 369, 0, 0, 370,
	234, 0, 231, 0, 0, 232, 371, 233, 372, 373,
	374, 375, 376, 0, 377, 0, 0, 235, 236, 237,
	0, 238, 239, 240, 0, 242, 241, 0, 378, 0,
	243, 0, 0, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 379, 249, 0, 251, 252, 254, 253, 0,
	0, 0, 380, 255, 381, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 382, 0, 261, 0, 383,
	262, 263, 264, 265, 266, 0, 267, 384, 268, 385,
	269, 0, 270, 271, 272, 273, 274, 386, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 0, 290, 291, 387,
	292, 0, 296, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 0, 305, 293, 294, 306, 0, 307,
	389, 390, 308, 0, 315, 309, 310, 295, 311, 314,
	391, 312, 313, 392, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 399, 400, 181, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 344, 0,
	0, 0, 0, 187, 188, 189, 345, 346, 347, 348,
	190, 349, 350, 0, 191, 351, 352, 192, 193, 0,
	0, 353, 354, 355, 0, 194, 356, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 408, 210, 357,
	211, 358, 359, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 360, 218,
	220, 219, 221, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 363, 364, 365, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 366, 0, 367, 0,
	0, 227, 228, 0, 0, 229, 230, 1925, 369, 0,
	0, 370, 234, 0, 231, 0, 0, 232, 371, 233,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	378, 0, 243, 0, 0, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 380, 255, 381, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 0, 261,
	0, 383, 262, 263, 264, 265, 266, 0, 267, 384,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 386,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 293, 294, 306,
	0, 307, 389, 390, 308, 0, 315, 309, 310, 295,
	311, 314, 391, 312, 313, 392, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 181, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 187, 188, 189, 345, 346,
	347, 348, 190, 349, 350, 0, 191, 351, 352, 192,
	193, 0, 0, 353, 354, 355, 0, 194, 356, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 408,
	210, 357, 211, 358, 359, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	360, 218, 220, 219, 221, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 363, 364, 365, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 366, 0,
	367, 0, 0, 227, 228, 0, 0, 229, 230, 1914,
	369, 0, 0, 370, 234, 0, 231, 0, 0, 232,
	371, 233, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 378, 0, 243, 0, 0, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 0, 251,
	252, 254, 253, 0, 0, 0, 380, 255, 381, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	0, 261, 0, 383, 262, 263, 264, 265, 266, 0,
	267, 384, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 386, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 0, 305, 293,
	294, 306, 0, 307, 389, 390, 308, 0, 315, 309,
	310, 295, 311, 314, 391, 312, 313, 392, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 181, 0,
	338, 0, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 344, 0, 0, 0, 0, 187, 188, 189,
	345, 346, 347, 348, 190, 349, 350, 0, 191, 351,
	352, 192, 193, 0, 0, 353, 354, 355, 0, 194,
	356, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 408, 210, 357, 211, 358, 359, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 360, 218, 220, 219, 221, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 363, 364,
	365, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	366, 0, 367, 0, 0, 227, 228, 0, 0, 229,
	230, 368, 369, 0, 0, 370, 234, 0, 231, 0,
	0, 232, 371, 233, 372, 373, 374, 375, 376, 0,
	377, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 378, 0, 243, 0, 0, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 0, 261, 0, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 387, 292, 0, 503, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 0,
	305, 293, 294, 306, 0, 307, 389, 390, 308, 0,
	315, 309, 310, 295, 311, 314, 391, 312, 313, 392,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	181, 0, 338, 0, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 344, 0, 1251, 0, 0, 187,
	188, 189, 345, 346, 347, 348, 190, 349, 350, 0,
	191, 351, 352, 192, 193, 0, 0, 353, 354, 355,
	0, 194, 356, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 408, 210, 357, 211, 358, 359, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 360, 218, 220, 219, 221, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	363, 364, 365, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 366, 0, 367, 0, 0, 227, 228, 0,
	0, 229, 230, 368, 369, 0, 0, 370, 234, 0,
	231, 0, 0, 232, 371, 233, 372, 373, 374, 375,
	376, 0, 377, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 378, 0, 243, 0,
	0, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 0, 251, 252, 254, 253, 0, 0, 0,
	380, 255, 381, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 382, 0, 261, 0, 383, 262, 263,
	264, 265, 266, 0, 267, 384, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 386, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 0, 290, 291, 387, 292, 0,
	296, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 0, 0, 293, 294, 306, 0, 307, 389, 390,
	308, 0, 315, 309, 310, 295, 311, 314, 391, 312,
	313, 392, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 394, 395, 0, 0, 324, 325,
	396, 397, 0, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 0, 334, 0, 398, 335, 336, 337,
	399, 400, 181, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 344, 0, 0, 0,
	0, 187, 188, 189, 345, 346, 347, 348, 190, 349,
	350, 0, 191, 351, 352, 192, 193, 0, 0, 353,
	354, 355, 0, 194, 356, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 408, 210, 357, 211, 358,
	359, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 360, 218, 220, 219,
	221, 361, 362, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 363, 364, 365, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 366, 0, 367, 0, 0, 227,
	228, 0, 0, 229, 230, 368, 369, 0, 0, 370,
	234, 0, 231, 0, 0, 232, 371, 233, 372, 373,
	374, 375, 376, 0, 377, 0, 0, 235, 236, 237,
	0, 238, 239, 240, 0, 242, 241, 0, 378, 0,
	243, 0, 0, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 379, 249, 0, 251, 252, 254, 253, 0,
	0, 0, 380, 255, 381, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 382, 0, 261, 0, 383,
	262, 263, 264, 265, 266, 0, 267, 384, 268, 385,
	269, 0, 270, 271, 272, 273, 274, 386, 731, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 0, 290, 291, 387,
	292, 0, 296, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 0, 305, 293, 294, 306, 0, 307,
	389, 390, 308, 0, 315, 309, 310, 295, 311, 314,
	391, 312, 313, 392, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 399, 400, 181, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 344, 0,
	0, 0, 0, 187, 188, 189, 345, 346, 347, 348,
	190, 349, 350, 0, 191, 351, 352, 192, 193, 0,
	0, 353, 354, 355, 0, 194, 356, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 408, 210, 357,
	211, 358, 359, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 360, 218,
	220, 219, 221, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 363, 364, 365, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 366, 0, 367, 0,
	0, 227, 228, 0, 0, 229, 230, 368, 369, 0,
	0, 370, 234, 0, 231, 0, 0, 232, 371, 233,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	378, 0, 243, 0, 0, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 380, 255, 381, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 0, 261,
	0, 383, 262, 263, 0, 265, 266, 0, 267, 384,
	268, 385, 269, 0, 270, 271, 272, 0, 274, 386,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 387, 0, 0, 296, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 293, 294, 306,
	0, 307, 389, 390, 308, 0, 315, 309, 310, 295,
	311, 314, 391, 312, 313, 392, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 1048, 1049,
	0, 1078, 1079, 1080, 1088, 1089, 1090, 0, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 0, 0, 0,
	0, 1051, 0, 0, 1092, 0, 0, 0, 0, 0,
	0, 0, 0, 1048, 1049, 0, 1078, 1079, 1080, 1088,
	1089, 1090, 0, 0, 0, 1050, 0, 0, 0, 1081,
	0, 1070, 0, 0, 0, 0, 1051, 0, 1067, 1092,
	0, 0, 0, 1822, 1823, 0, 1840, 1841, 1842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2024,
	1050, 0, 0, 0, 0, 0, 1070, 0, 0, 0,
	0, 0, 0, 1067, 1822, 1823, 0, 1840, 1841, 1842,
	0, 0, 0, 0, 0, 0, 1073, 1074, 1075, 1076,
	0, 0, 0, 0, 0, 1056, 1837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 1093, 0,
	0, 1073, 1074, 1075, 1076, 0, 0, 1837, 0, 0,
	1056, 0, 0, 0, 0, 0, 1091, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 1085, 1093, 0, 0, 0, 1071, 0, 0,
	1828, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 0, 0, 0, 1083, 0, 0, 0,
	0, 1828, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 1843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1077, 1082, 0, 0,
	0, 0, 1838, 0, 0, 0, 0, 0, 0, 0,
	0, 1072, 1843, 1048, 1049, 0, 1078, 1079, 1080, 1088,
	1089, 1090, 0, 0, 0, 0, 0, 0, 1086, 1081,
	0, 1077, 0, 1838, 0, 0, 1051, 0, 0, 1092,
	0, 0, 0, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1050, 0, 0, 1086, 0, 0, 1070, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 1839, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 1062,
	1063, 1069, 1068, 1064, 1065, 1066, 1087, 1839, 1061, 1059,
	1060, 1052, 1053, 1054, 1055, 1057, 1058, 0, 0, 0,
	0, 1073, 1074, 1075, 1076, 1862, 0, 0, 0, 0,
	1056, 1084, 0, 0, 1062, 1063, 1069, 1068, 1064, 1065,
	1066, 1087, 0, 1061, 1059, 1060, 1052, 1053, 1054, 1055,
	1057, 1058, 1085, 1093, 0, 0, 0, 0, 0, 0,
	1814, 0, 0, 0, 1834, 1835, 1836, 0, 0, 0,
	0, 1091, 0, 1833, 1831, 1832, 1824, 1825, 1826, 1827,
	1829, 1830, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 1071, 0, 0, 1834, 1835, 1836, 0, 0,
	0, 0, 0, 0, 1833, 1831, 1832, 1824, 1825, 1826,
	1827, 1829, 1830, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1048, 1049, 0, 1078, 1079, 1080, 1088,
	1089, 1090, 0, 0, 0, 0, 0, 0, 0, 1081,
	0, 1077, 0, 0, 0, 0, 1051, 0, 0, 1092,
	0, 0, 0, 0, 0, 0, 1072, 0, 0, 1048,
	1049, 0, 1078, 1079, 1080, 1088, 1089, 1090, 0, 0,
	1050, 0, 0, 1086, 0, 1081, 1070, 0, 0, 0,
	0, 0, 1051, 1067, 0, 1092, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1050, 0, 0, 0,
	0, 0, 1070, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1073, 1074, 1075, 1076, 0, 0, 0, 0, 0,
	1056, 1084, 0, 0, 1062, 1063, 1069, 1068, 1064, 1065,
	1066, 1087, 0, 1061, 1059, 1060, 1052, 1053, 1054, 1055,
	1057, 1058, 1085, 1093, 0, 0, 2468, 1073, 1074, 1075,
	1076, 0, 0, 0, 0, 0, 1056, 0, 0, 0,
	0, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 1085, 1093,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1077, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1072, 0, 0, 1048,
	1049, 0, 1078, 1079, 1080, 1088, 1089, 1090, 0, 0,
	0, 0, 0, 1086, 0, 1081, 0, 1077, 0, 0,
	0, 0, 1051, 0, 0, 1092, 0, 0, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1050, 0, 0, 1086,
	0, 0, 1070, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 1062, 1063, 1069, 1068, 1064, 1065,
	1066, 1087, 0, 1061, 1059, 1060, 1052, 1053, 1054, 1055,
	1057, 1058, 0, 0, 0, 0, 2421, 1073, 1074, 1075,
	1076, 0, 0, 0, 0, 0, 1056, 1084, 0, 0,
	1062, 1063, 1069, 1068, 1064, 1065, 1066, 1087, 0, 1061,
	1059, 1060, 1052, 1053, 1054, 1055, 1057, 1058, 1085, 1093,
	0, 0, 2376, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1048,
	1049, 0, 1078, 1079, 1080, 1088, 1089, 1090, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 1077, 0, 0,
	0, 0, 1051, 0, 0, 1092, 0, 0, 0, 0,
	0, 0, 1072, 0, 0, 1048, 1049, 0, 1078, 1079,
	1080, 1088, 1089, 1090, 0, 0, 1050, 0, 0, 1086,
	0, 1081, 1070, 0, 0, 0, 0, 0, 1051, 1067,
	0, 1092, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1050, 0, 0, 0, 0, 0, 1070, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1073, 1074, 1075,
	1076, 0, 0, 0, 0, 0, 1056, 1084, 0, 0,
	1062, 1063, 1069, 1068, 1064, 1065, 1066, 1087, 0, 1061,
	1059, 1060, 1052, 1053, 1054, 1055, 1057, 1058, 1085, 1093,
	0, 0, 2346, 1073, 1074, 1075, 1076, 0, 0, 0,
	0, 0, 1056, 0, 0, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 1085, 1093, 0, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1077, 0, 1082,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1072, 0, 0, 1048, 1049, 0, 1078, 1079,
	1080, 1088, 1089, 1090, 0, 0, 0, 0, 0, 1086,
	0, 1081, 0, 1077, 0, 0, 0, 0, 1051, 0,
	0, 1092, 0, 0, 0, 0, 0, 0, 1072, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1050, 0, 0, 1086, 0, 0, 1070, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 0, 0,
	1062, 1063, 1069, 1068, 1064, 1065, 1066, 1087, 0, 1061,
	1059, 1060, 1052, 1053, 1054, 1055, 1057, 1058, 0, 0,
	0, 0, 2341, 1073, 1074, 1075, 1076, 0, 0, 0,
	0, 0, 1056, 1084, 0, 0, 1062, 1063, 1069, 1068,
	1064, 1065, 1066, 1087, 0, 1061, 1059, 1060, 1052, 1053,
	1054, 1055, 1057, 1058, 1085, 1093, 0, 0, 2337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1048, 1049, 0, 1078, 1079,
	1080, 1088, 1089, 1090, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 1077, 0, 0, 0, 0, 1051, 0,
	0, 1092, 0, 0, 0, 0, 0, 0, 1072, 0,
	0, 1048, 1049, 0, 1078, 1079, 1080, 1088, 1089, 1090,
	0, 0, 1050, 0, 0, 1086, 0, 1081, 1070, 0,
	0, 0, 0, 0, 1051, 1067, 0, 1092, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 0,
	0, 0, 0, 0, 1070, 0, 0, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1073, 1074, 1075, 1076, 0, 0, 0,
	0, 0, 1056, 1084, 0, 0, 1062, 1063, 1069, 1068,
	1064, 1065, 1066, 1087, 0, 1061, 1059, 1060, 1052, 1053,
	1054, 1055, 1057, 1058, 1085, 1093, 0, 0, 2278, 1073,
	1074, 1075, 1076, 0, 0, 0, 0, 0, 1056, 0,
	0, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	1085, 1093, 0, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	1071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1077, 0, 1082, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1072, 0,
	0, 1048, 1049, 0, 1078, 1079, 1080, 1088, 1089, 1090,
	0, 0, 0, 0, 0, 1086, 0, 1081, 0, 1077,
	0, 0, 0, 0, 1051, 0, 0, 1092, 0, 0,
	0, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 0,
	0, 1086, 0, 0, 1070, 0, 0, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 1062, 1063, 1069, 1068,
	1064, 1065, 1066, 1087, 0, 1061, 1059, 1060, 1052, 1053,
	1054, 1055, 1057, 1058, 0, 0, 0, 0, 2244, 1073,
	1074, 1075, 1076, 0, 0, 0, 0, 0, 1056, 1084,
	0, 0, 1062, 1063, 1069, 1068, 1064, 1065, 1066, 1087,
	0, 1061, 1059, 1060, 1052, 1053, 1054, 1055, 1057, 1058,
	1085, 1093, 0, 0, 2243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	1071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1048, 1049, 0, 1078, 1079, 1080, 1088, 1089, 1090,
	0, 0, 0, 0, 0, 0, 0, 1081, 0, 1077,
	0, 0, 0, 0, 1051, 0, 0, 1092, 0, 0,
	0, 0, 0, 0, 1072, 0, 0, 1048, 1049, 0,
	1078, 1079, 1080, 1088, 1089, 1090, 0, 0, 1050, 0,
	0, 1086, 0, 1081, 1070, 0, 0, 0, 0, 0,
	1051, 1067, 0, 1092, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1050, 0, 0, 0, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1073,
	1074, 1075, 1076, 0, 0, 0, 0, 0, 1056, 1084,
	0, 0, 1062, 1063, 1069, 1068, 1064, 1065, 1066, 1087,
	0, 1061, 1059, 1060, 1052, 1053, 1054, 1055, 1057, 1058,
	1085, 1093, 0, 0, 2208, 1073, 1074, 1075, 1076, 0,
	0, 0, 0, 0, 1056, 0, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 1085, 1093, 0, 0,
	1071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1077,
	0, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1072, 0, 0, 1048, 1049, 0,
	1078, 1079, 1080, 1088, 1089, 1090, 0, 0, 0, 0,
	0, 1086, 0, 1081, 0, 1077, 0, 0, 0, 0,
	1051, 0, 0, 1092, 0, 0, 0, 0, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1050, 0, 0, 1086, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 1062, 1063, 1069, 1068, 1064, 1065, 1066, 1087,
	0, 1061, 1059, 1060, 1052, 1053, 1054, 1055, 1057, 1058,
	0, 0, 0, 0, 2055, 1073, 1074, 1075, 1076, 0,
	0, 0, 0, 0, 1056, 1084, 0, 0, 1062, 1063,
	1069, 1068, 1064, 1065, 1066, 1087, 0, 1061, 1059, 1060,
	1052, 1053, 1054, 1055, 1057, 1058, 1085, 1093, 0, 0,
	2031, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1048, 1049, 0,
	1078, 1079, 1080, 1088, 1089, 1090, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 1077, 0, 0, 0, 0,
	1051, 0, 0, 1092, 0, 0, 0, 0, 0, 0,
	1072, 0, 0, 1048, 1049, 0, 1078, 1079, 1080, 1088,
	1089, 1090, 0, 0, 1050, 0, 0, 1086, 0, 1081,
	1070, 0, 0, 0, 0, 0, 1051, 1067, 0, 1092,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1050, 0, 0, 0, 0, 0, 1070, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1073, 1074, 1075, 1076, 0,
	0, 0, 0, 0, 1056, 1084, 0, 0, 1062, 1063,
	1069, 1068, 1064, 1065, 1066, 1087, 0, 1061, 1059, 1060,
	1052, 1053, 1054, 1055, 1057, 1058, 1085, 1093, 0, 0,
	1493, 1073, 1074, 1075, 1076, 0, 0, 0, 0, 0,
	1056, 2527, 0, 0, 0, 1091, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 1085, 1093, 0, 0, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1077, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1072, 0, 0, 2526, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 1077, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	1048, 1049, 0, 1078, 1079, 1080, 1088, 1089, 1090, 0,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 1051, 0, 1084, 1092, 0, 1062, 1063,
	1069, 1068, 1064, 1065, 1066, 1087, 0, 1061, 1059, 1060,
	1052, 1053, 1054, 1055, 1057, 1058, 0, 1050, 1784, 0,
	0, 0, 0, 1070, 0, 0, 0, 0, 0, 0,
	1067, 1084, 0, 0, 1062, 1063, 1069, 1068, 1064, 1065,
	1066, 1087, 0, 1061, 1059, 1060, 1052, 1053, 1054, 1055,
	1057, 1058, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1073, 1074,
	1075, 1076, 0, 0, 0, 0, 0, 1056, 0, 1854,
	0, 0, 1853, 0, 0, 1048, 1049, 0, 1078, 1079,
	1080, 1088, 1089, 1090, 0, 0, 0, 0, 0, 1085,
	1093, 1081, 0, 0, 0, 0, 1757, 0, 1051, 0,
	0, 1092, 0, 0, 0, 0, 0, 0, 1091, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1050, 1083, 0, 0, 0, 0, 1070, 1071,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 0, 0, 0,
	0, 0, 1758, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1073, 1074, 1075, 1076, 0, 1077, 0,
	0, 0, 1056, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1072, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 1093, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 1062, 1063, 1069, 1068, 1064, 1065, 1066, 1087, 0,
	1061, 1059, 1060, 1052, 1053, 1054, 1055, 1057, 1058, 0,
	0, 0, 0, 1077, 0, 0, 0, 0, 0, 0,
	1590, 0, 0, 0, 0, 0, 1048, 1049, 1072, 1078,
	1079, 1080, 1088, 1089, 1090, 0, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 1086, 1589, 0, 0, 1051,
	0, 0, 1092, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1050, 0, 0, 0, 0, 0, 1070,
	0, 0, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 1062, 1063, 1069, 1068,
	1064, 1065, 1066, 1087, 0, 1061, 1059, 1060, 1052, 1053,
	1054, 1055, 1057, 1058, 1073, 1074, 1075, 1076, 0, 0,
	0, 0, 0, 1056, 0, 0, 0, 0, 1048, 1049,
	0, 1078, 1079, 1080, 1088, 1089, 1090, 0, 0, 0,
	0, 541, 0, 567, 1081, 1085, 1093, 0, 0, 0,
	0, 1051, 0, 0, 1092, 0, 0, 0, 0, 0,
	0, 546, 0, 0, 1091, 0, 0, 0, 0, 0,
	0, 0, 0, 544, 0, 1050, 0, 0, 0, 1083,
	0, 1070, 0, 0, 0, 1071, 0, 0, 1067, 0,
	0, 0, 0, 0, 545, 0, 0, 0, 0, 547,
	0, 0, 0, 0, 0, 0, 0, 553, 554, 0,
	1082, 0, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 1073, 1074, 1075, 1076,
	0, 0, 0, 0, 1077, 1056, 0, 0, 0, 566,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1072,
	0, 0, 0, 0, 0, 0, 0, 1085, 1093, 0,
	0, 0, 0, 0, 549, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1091, 0, 0, 0,
	0, 0, 550, 551, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 1071, 0, 0,
	557, 0, 0, 552, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 556, 0, 0, 0, 0, 0,
	0, 0, 1082, 588, 569, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 0, 0, 1062, 1063, 1069,
	1068, 1064, 1065, 1066, 1087, 0, 1061, 1059, 1060, 1052,
	1053, 1054, 1055, 1057, 1058, 0, 1077, 0, 0, 0,
	0, 0, 0, 0, 555, 0, 0, 0, 0, 1048,
	1049, 1072, 1078, 1079, 1080, 1088, 1089, 1090, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 1086, 0,
	0, 0, 1051, 0, 0, 1092, 0, 0, 0, 0,
	0, 0, 543, 560, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1050, 0, 0, 0,
	0, 0, 1070, 0, 0, 0, 0, 0, 561, 1067,
	0, 0, 565, 0, 0, 0, 571, 0, 0, 0,
	0, 558, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 564, 0, 1062,
	1063, 1069, 1068, 1064, 1065, 1066, 1087, 0, 1061, 1059,
	1060, 1052, 1053, 1054, 1055, 1057, 1058, 1073, 1074, 1075,
	1076, 0, 0, 0, 0, 0, 1056, 0, 0, 0,
	0, 1048, 1049, 0, 1078, 1079, 1080, 1088, 1089, 1090,
	0, 0, 0, 0, 0, 0, 0, 1081, 1085, 1093,
	0, 0, 0, 0, 1051, 0, 0, 1092, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 0,
	0, 0, 1083, 0, 1070, 0, 0, 0, 1071, 0,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1073,
	1074, 1075, 1076, 0, 0, 0, 0, 1077, 1056, 0,
	0, 0, 0, 1860, 0, 0, 0, 0, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
	1085, 1093, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 2035, 0, 0, 0, 0,
	1071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 0, 0,
	1062, 1063, 1069, 1068, 1064, 1065, 1066, 1087, 0, 1061,
	1059, 1060, 1052, 1053, 1054, 1055, 1057, 1058, 0, 1077,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1048, 1049, 1072, 1078, 1079, 1080, 1088, 1089,
	1090, 0, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 1086, 1855, 0, 0, 1051, 0, 0, 1092, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	0, 0, 0, 0, 0, 1070, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 1062, 1063, 1069, 1068, 1064, 1065, 1066, 1087,
	0, 1061, 1059, 1060, 1052, 1053, 1054, 1055, 1057, 1058,
	1073, 1074, 1075, 1076, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 0, 1048, 1049, 0, 1078, 1079, 1080,
	1088, 1089, 1090, 0, 0, 0, 0, 0, 0, 0,
	1081, 1085, 1093, 0, 0, 0, 0, 1051, 0, 0,
	1092, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1091, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1050, 0, 0, 0, 1083, 0, 1070, 0, 0,
	0, 1071, 0, 0, 1067, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1073, 1074, 1075, 1076, 0, 0, 0, 0,
	1077, 1056, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 1085, 1093, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 1071, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 1820, 0, 1062, 1063, 1069, 1068, 1064, 1065, 1066,
	1087, 0, 1061, 1059, 1060, 1052, 1053, 1054, 1055, 1057,
	1058, 0, 1077, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1048, 1049, 1072, 1078, 1079,
	1080, 1088, 1089, 1090, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 1086, 1813, 0, 0, 1051, 0,
	0, 1092, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1050, 0, 0, 0, 0, 0, 1070, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 0, 0, 1062, 1063, 1069, 1068, 1064,
	1065, 1066, 1087, 0, 1061, 1059, 1060, 1052, 1053, 1054,
	1055, 1057, 1058, 1073, 1074, 1075, 1076, 0, 0, 0,
	0, 0, 1056, 0, 0, 0, 0, 1048, 1049, 0,
	1078, 1079, 1080, 1088, 1089, 1090, 0, 0, 0, 0,
	0, 0, 0, 1081, 1085, 1093, 0, 0, 0, 0,
	1051, 0, 0, 1092, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1050, 0, 0, 0, 1083, 0,
	1070, 0, 0, 0, 1071, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1073, 1074, 1075, 1076, 0,
	0, 0, 0, 1077, 1056, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1072, 0,
	0, 0, 0, 0, 0, 0, 1085, 1093, 0, 0,
	0, 0, 0, 1048, 1049, 1086, 1078, 1079, 1080, 1088,
	1089, 1090, 0, 0, 0, 1091, 0, 0, 0, 1081,
	0, 0, 0, 0, 0, 0, 1051, 0, 0, 1092,
	1083, 0, 0, 0, 0, 0, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1050, 0, 0, 0, 0, 0, 1070, 0, 0, 0,
	0, 1082, 0, 1067, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 1062, 1063, 1069, 1068,
	1064, 1065, 1066, 1087, 0, 1061, 1059, 1060, 1052, 1053,
	1054, 1055, 1057, 1058, 0, 1077, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1072, 1073, 1074, 1075, 1076, 0, 0, 0, 0, 0,
	1056, 0, 0, 0, 0, 1048, 1049, 1086, 1078, 1079,
	1080, 1088, 1089, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 1093, 0, 0, 0, 0, 1051, 0,
	0, 1092, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1050, 0, 0, 0, 1083, 0, 1070, 0,
	0, 0, 1071, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1084, 0, 0, 1062, 1063,
	1069, 1068, 1064, 1065, 1066, 1087, 0, 1061, 1059, 1060,
	1052, 1053, 1054, 1055, 1057, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1073, 1074, 1075, 1076, 0, 0, 0,
	0, 1077, 1056, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 1085, 1093, 0, 0, 0, 0,
	0, 1048, 1049, 1086, 1078, 1079, 1080, 1088, 1089, 1090,
	0, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1051, 0, 0, 1092, 1083, 0,
	0, 0, 0, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 0,
	0, 0, 0, 0, 1070, 0, 0, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 1062, 1063, 1069, 1068, 1064, 1065,
	1066, 1087, 0, 1061, 1059, 1060, 1052, 1053, 1054, 1055,
	1057, 1058, 0, 1077, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1072, 1073,
	1074, 1075, 1076, 0, 0, 0, 0, 0, 1056, 0,
	0, 0, 0, 0, 0, 1086, 0, 0, 0, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1302, 1291, 1321, 1282, 1312, 1311, 0, 0,
	1284, 1283, 0, 0, 1083, 0, 1323, 1322, 0, 0,
	1071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 1062, 1063, 1069, 1068,
	1064, 1065, 1066, 1087, 0, 1061, 1059, 1060, 1052, 1053,
	1054, 1055, 1057, 1058, 1317, 0, 1309, 1308, 0, 0,
	0, 0, 0, 0, 0, 0, 1307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1077,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1306,
	1304, 1305, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 1295, 1293, 1296, 1297, 1298, 1299, 1300,
	0, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 0, 1292, 0, 0, 0, 1084,
	0, 1294, 1062, 1063, 1069, 1068, 1064, 1065, 1066, 1087,
	0, 1061, 1059, 1060, 1052, 1053, 1054, 1055, 1057, 1058,
	0, 0, 0, 0, 1303, 0, 0, 0, 1418, 1416,
	1417, 1420, 1419, 0, 1302, 1291, 1321, 1282, 1312, 1311,
	0, 0, 1284, 1283, 0, 0, 0, 0, 1323, 1322,
	0, 0, 0, 0, 0, 0, 1287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1301, 1288, 0,
	0, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 1317, 0, 1309, 1308,
	1285, 0, 0, 1318, 1319, 0, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1289, 0, 0, 0, 0,
	1324, 1306, 1304, 1305, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1290, 0,
	0, 0, 0, 0, 0, 1295, 1293, 1296, 1297, 1298,
	1299, 1300, 0, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1310, 0, 0, 0, 1292, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1303, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1301,
	1288, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1285, 0, 0, 1318, 1319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1289, 0, 0,
	0, 0, 1324,
}
var sqlPact = [...]int{

	3224, -1000, -57, -1000, -1000, -1000, 123, -1000, -1000, -1000,
	-1000, 118, 111, 110, -1000, 108, 105, 101, 98, 95,
	92, 87, 85, 83, 78, 76, -1000, 75, -1000, -1000,
	-1000, -1000, 67, 65, 62, 60, 58, 54, 47, -1000,
	1157, 21770, 46, 45, 1246, -1000, 35476, 43, 40, 38,
	36, 1117, 35, 32, 25782, 893, 1126, 28, 26, 25,
	24, 23, 1028, 35144, 4754, 2279, 1078, 1533, 34809, 21435,
	1521, 1612, 34474, -1000, -1000, 34139, 22, 21, 20, 18,
	17, -1000, -1000, 33804, 16, 15, 14, 13, 12, 10,
	9, 8, 5, 1, -1, -3, -10, -16, -1000, -18,
	-21, -23, -1000, 41349, -24, -25, -26, 1077, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 848, 125, -1000, 856, 446, 1801, 8296, 1008,
	1003, 994, 964, 1021, 37468, 35476, -27, -78, -28, -1000,
	1932, 609, 19031, 3224, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25447, 25112,
	33469, 33134, 6217, 733, -1000, -63, 22436, 35476, -1000, 113,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14533, 14186, 490, 113, -1000, -1000,
	-1000, -1000, -1000, 32799, -1000, 32464, 32129, 1391, 31794, -1000,
	-1000, -1000, -1000, 31459, -1000, -1000, 1649, 1545, 1539, 24777,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 31127, 30792, 30457, 30122, 29787, 443, -1000, -1000,
	-1000, 17301, -1000, -1000, -1000, -1000, -29, -1000, -30, -1000,
	-31, -33, -34, -36, -1000, -37, -38, -1000, -39, -43,
	-1000, -47, -49, 29452, 811, 1119, -1000, -1000, -62, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35476, -1000, 15225,
	-1000, 442, -1000, 1515, -1000, 15225, -1000, 1118, -1000, -1000,
	-1000, -1000, -1000, 35476, -1000, -1000, -1000, -1000, -1000, -1000,
	2090, 1114, 436, 29117, -1000, 1524, -1000, 563, 723, -1000,
	-1000, -1000, 9334, 137, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1787, 22782, 1233, 1859, 1648, 2089, 1278,
	1631, 1627, 1615, 1610, 1608, 2086, 904, 2083, 1692, 989,
	2080, 1560, 1198, 647, 2079, 1509, 1499, -1000, -1000, -1000,
	-1000, 852, -1000, -1000, -1000, 27110, -1000, -1000, 771, 868,
	856, -1000, -1000, -1000, 1354, 1814, 1814, 1814, 1881, 241,
	233, -1000, 125, -1000, 1500, -1000, 1100, -1000, -1000, -1000,
	-1000, -1000, 42447, -1000, -1000, 15225, 15225, 15225, 15225, 15225,
	996, 481, -1000, 435, 434, 7603, -1000, -1000, 2061, -1000,
	-1000, -1000, 249, -1000, -1000, 15225, 113, -1000, -1000, -1000,
	-1000, 432, 2075, -1000, 613, -1000, -1000, -1000, 569, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1551, 430,
	429, 428, -1000, 427, -1000, -1000, 426, 425, 422, 420,
	418, 417, 415, 414, 413, 409, 407, 406, 404, 401,
	400, 939, -1000, 604, -1000, -1000, 604, 604, -1000, 377,
	377, 380, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	377, -1000, -1000, -1000, 533, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 399, 1002, -1000, -1000,
	1002, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 731, 36804,
	-66, 35476, -1000, 396, -66, -1000, -1000, 394, -1000, 10372,
	10372, -1000, -1000, -1000, -1000, -1000, 9680, 2063, -1000, 4655,
	-204, 248, 521, -1000, 17993, 20755, -1000, -1000, 985, 1710,
	742, -1000, 905, 1709, 474, -1000, 1164, -1000, 819, 1705,
	-176, 1593, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 23114,
	22436, -63, -73, -1000, -1000, -1000, 5871, 42447, -1000, 42447,
	-1000, 798, 19721, 113, -1000, -1000, -1000, -1000, 393, 1218,
	581, -1000, 251, -1000, 28782, 581, 1210, -1000, -1000, -1000,
	27110, -1000, 35476, -1000, 35476, -1000, 818, -1000, 37136, 112,
	1696, -1000, -1000, 112, 1690, -1000, 104, 1684, -1000, -1000,
	1105, 1678, -1000, -73, 1677, -1000, -1000, 15225, -79, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 609, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28447,
	22103, 1351, 537, 42447, 1937, 43207, 23114, 42447, 22103, -1000,
	-1000, 35476, -1000, 15225, -1000, 1930, 1343, -68, -1000, -1000,
	-1000, -1000, -1000, 1277, 1333, 689, 879, 9334, 9334, 1775,
	-1000, 128, 6217, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 28112, -1000, -1000, -1000, 1120, 35476, -1000, -1000, 1540,
	-1000, 22103, 35476, -1000, 35476, -1000, 35476, -1000, 35476, -1000,
	35476, -1000, -1000, -1000, -1000, -1000, 4087, -1000, 1535, -1000,
	-1000, 35476, -1000, 1275, -1000, -1000, -1000, 27780, 27445, -1000,
	912, 768, -1000, -1000, 115, -1000, 23114, 1868, 561, -1000,
	1354, -1000, 1128, 1348, 13839, 1339, 15225, 125, -1000, -1000,
	125, 125, 8988, -1000, -1000, -1000, 35476, -1000, 42995, 43207,
	6217, 755, 15225, 15225, 15225, 15225, 15225, 15225, 15225, 15225,
	15225, 15225, 15225, 15225, 15225, 15225, 15225, 15225, 15225, 15225,
	15225, 15225, 15225, 15225, 15225, 15225, 15225, 15225, 15225, 15225,
	15225, 15225, 15225, 15225, 1328, 15225, 730, 15225, 15225, 15225,
	15225, 1242, 1054, 374, 1071, -1000, 2025, 2025, 2025, 42715,
	42715, 346, 481, -1000, 15225, -1000, 37, 15225, 233, 40297,
	-65, 7257, -1000, -1000, -1000, 13493, 600, 42447, 113, 6563,
	-1000, 2060, 921, 1454, 1416, 392, 508, 505, 501, 498,
	15225, 15225, 13147, 12800, 12453, 15917, 12106, 15225, 7949, 15225,
	15225, 15225, 15225, 11759, 11412, -1000, 385, -1000, -1000, -1000,
	-1000, 2058, -1000, -1000, 2057, -1000, 752, 750, 2056, -1000,
	-68, -1000, 36804, -1000, 35476, -66, 1926, 35476, -1000, 107,
	-1000, 41206, -1000, 107, -82, -1000, 1355, 1346, 19376, 1387,
	1011, 1011, 1011, -1000, 382, 476, 521, 5160, 11065, -1000,
	26114, 1033, 150, 232, 17647, 2063, -1000, 35476, -76, 958,
	-1000, 24442, 1803, 1802, 1805, 27110, 1902, 37, 1817, 1494,
	729, 27110, 1816, 727, 1897, 37, 1492, 721, 35476, 6217,
	1811, 519, -1000, 35476, -1000, -1000, -1000, 1487, -84, -1000,
	-1000, 24110, 1922, 1675, -1000, 980, -1000, 1917, 35476, 1116,
	1200, -1000, -1000, 757, 1668, 597, 260, 1914, 260, 20065,
	-1000, 35476, -1000, 35476, -1000, -1000, 35476, -1000, 35476, -1000,
	35476, 35476, -1000, 35476, 35476, -87, 42447, 4760, 23778, 712,
	-1000, 622, 24110, 471, -92, -1000, 650, -1000, -1000, -1000,
	-1000, 240, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 380, 939, 377, 377,
	377, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 533, -1000,
	-1000, 604, 604, 604, -1000, -1000, -85, -1000, 1462, 536,
	-101, 658, -68, -1000, 1002, -1000, 853, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2074, -1000, 2038, -1000, -1000, 2052, -69, -1000, -69, -1000,
	6217, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35476, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2848, -1000, -1000,
	-1000, -1000, -1000, -1000, 35476, 35476, 35476, -1000, 27110, -1000,
	1528, -1000, 1834, -1000, -1000, -1000, -1000, 42447, -1000, 353,
	-1000, -1000, 42447, 890, 1352, -1000, 1352, -70, -1000, 40955,
	1340, 35476, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 556, 444, 444, 839, 839, 839, 839,
	2009, 1389, 458, 593, 345, 345, 345, 345, 345, 345,
	345, 345, 186, 277, 277, 186, 186, 186, 186, 186,
	345, 345, 345, 42715, 42593, 1482, 15225, 15225, 706, 1051,
	374, 1482, 15225, 1482, 1482, 1482, 1482, -1000, 1425, -1000,
	-1000, -1000, -1000, 1461, 370, 15917, 15917, -1000, -1000, -1000,
	7603, 16263, -1000, -1000, -1000, -1000, 369, 15225, -1000, 40517,
	-230, 228, -135, -1000, 15225, 470, -103, -1000, 847, -1000,
	15225, -1000, -48, 15225, 15225, 15225, 226, -1000, 225, -1000,
	705, -1000, 704, 699, 693, -1000, 366, 1022, 363, 362,
	15225, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42325,
	38173, 224, -1000, 1456, -135, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 223, -1000, 219, -1000, 42074, -135, 218, 554,
	-1000, 15917, 15917, 15917, 7603, 361, 217, -1000, 40830, -1000,
	41952, 10718, 10718, 10718, 216, 41701, 15225, -135, 38138, 4604,
	4204, -106, -111, -1000, -113, -1000, 2049, -116, 215, 555,
	553, 211, -1000, -1000, 357, -118, 597, 10372, 18685, 6217,
	-1000, 597, 9680, -1000, 19376, 19376, 1353, 1329, 19376, -1000,
	-1000, -1000, -1000, 26114, 475, 521, 26114, -1000, 2044, 1367,
	210, -1000, -1000, -1000, 35476, 356, -1000, 521, 208, 946,
	35476, 35476, 35476, -1000, -1000, 1196, 36472, 1183, 43207, 35476,
	-1000, 347, 330, 1332, 1330, 35476, 35476, 36140, 35808, 35476,
	954, 37, -1000, 550, 329, 35476, 894, 547, 35476, 37,
	-1000, 326, 35476, 886, -1000, 545, 1404, 1131, -1000, 795,
	1453, 35476, 199, -121, -72, 43207, -1000, -1000, -1000, -1000,
	-1000, 35476, 424, 35476, 37, 35476, 2070, 37, 35476, 1666,
	1720, 504, 35476, 1348, 15225, 929, -1000, 18339, 612, 35476,
	873, 59, -1000, -1000, -1000, 515, 35476, -1000, -1000, 112,
	112, -1000, 104, 1105, -73, -1000, 15225, -1000, -1000, 35476,
	23114, -123, -1000, -1000, 43207, -1000, 472, 642, -1000, 2040,
	571, 23114, 35476, 9334, 9334, -1000, 1360, -1000, -1000, 908,
	-1000, 923, -1000, -1000, -1000, -1000, 9334, -1000, -77, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1010, -1000, 890, -1000,
	15225, 2033, -1000, -1000, -1000, 8988, -1000, -1000, -1000, 35476,
	-188, 15225, 1482, 1482, 15225, 15917, 15917, -1000, 1482, -1000,
	-1000, -1000, -1000, -1000, 1448, 324, 15225, 43207, 38203, 4479,
	-126, -1000, 15225, -74, -1000, 15225, -1000, 40077, -1000, -1000,
	459, 1717, -1000, 15225, 41579, 193, 10026, -1000, 41328, -50,
	-50, -1000, 2068, 1241, 1190, 919, 836, 2031, -1000, 20410,
	598, 1040, 40041, 42995, 43207, -1000, 15225, -1000, -1000, 1447,
	15225, -1000, 42995, 43207, 15917, 15917, 15917, 15917, 15917, 15917,
	15917, 15917, 15917, 15917, 15917, 15917, 15917, 15917, 15917, 15917,
	15917, 15917, 15917, 1259, 15917, 2017, 2017, 2017, -75, 15225,
	-1000, 1519, 1447, 15225, 15225, 43207, 190, 189, 187, -1000,
	15225, -135, 15225, 15225, 15225, -1000, -1000, -1000, 184, -1000,
	2010, -1000, -1000, -1000, -1000, 471, -1000, 1415, -1000, -124,
	-1000, 2063, -1000, 1415, -1000, -1000, 1353, -1000, 322, 15225,
	19376, -1000, 469, -1000, -129, -1000, 26114, -1000, 467, -227,
	-1000, 512, -1000, 521, 320, 35476, 26114, -1000, -1000, -1000,
	690, 688, 1664, -1000, 1182, -1000, 617, -1000, 911, 15225,
	16955, 318, 316, 1016, -1000, 1662, 1105, 1657, 1105, -1000,
	-76, 920, -1000, 21100, 15225, -1000, 684, 21100, -1000, -1000,
	15225, -1000, 676, 21100, 571, 1443, 776, -1000, 787, -1000,
	1390, -1000, 24110, 315, 35476, 314, -1000, 311, -1000, -1000,
	310, 35476, 1264, 504, 23446, -1000, 581, 873, -1000, 42447,
	-1000, 873, 8642, 1788, -132, -1000, -1000, -1000, 597, 20065,
	19376, 9680, -137, -1000, -1000, -1000, -1000, 42447, -77, 1778,
	1778, -1000, 1986, -1000, 466, 171, -1000, 26778, -1000, -77,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35476, 6217, 35476,
	35476, 1048, 39821, -1000, 1820, 6217, 1993, 1482, 4319, 3929,
	15225, 43207, 42861, -140, 15225, 15225, -1000, 169, 15225, 457,
	42447, -1000, -1000, -1000, 42447, 15225, 2067, 15225, 168, 167,
	166, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 165,
	-1000, -1000, 37800, 15225, 164, -1000, 159, 158, 42447, 1519,
	42447, -1000, -1000, 568, 568, 869, 869, 869, 869, 2017,
	2636, 468, 2603, 564, 564, 564, 1042, 395, 395, 564,
	564, 564, 1438, 1245, 308, 38234, 15225, 157, -1000, -1000,
	42447, 42447, 154, -1000, -1000, -1000, -135, 307, 39601, 39565,
	-1000, 153, 152, 1412, 1879, -1000, 19376, 1412, -1000, 35476,
	42447, -1000, -204, -1000, 1982, -1000, -1000, 1367, -1000, 5520,
	26114, 35476, -142, -1000, 35476, 35476, 35476, 1630, -1000, 1383,
	-1000, 39345, -145, -1000, 274, 1846, 15225, -1000, -1000, 306,
	16955, 35476, -1000, 1260, 1345, 646, 35476, -1000, 35476, -1000,
	35476, 35476, 35476, -1000, 305, 113, -148, 35476, -1000, -150,
	35476, -1000, -1000, 23114, 737, -1000, -1000, 1398, -1000, 16955,
	304, 35476, 24110, 1912, 16955, 1112, 1296, 504, 23446, -1000,
	757, -1000, -1000, -81, -1000, 313, 37, 873, -1000, -99,
	-1000, 511, 1755, -1000, 1752, 448, -1000, -1000, -102, 294,
	-1000, 510, 506, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1820, 15225, 15225, 42861, -153, -1000, 1482, 1482, -1000, 39125,
	-1000, 42447, -1000, 41328, -1000, -1000, -1000, -1000, 959, -1000,
	39089, -1000, -1000, -1000, -1000, 15917, 1435, 279, 43207, 38869,
	-1000, -1000, 15225, -1000, -1000, -1000, -1000, 570, 15225, 15225,
	2063, 570, -155, 521, -1000, -1000, -1000, 1980, -1000, -156,
	-1000, -1000, -1000, -1000, 35476, -1000, 35476, -1000, 6217, 35476,
	1444, 1145, -1000, -1000, 1322, 267, 15917, 35476, -1000, 1034,
	16955, 1820, 113, 6217, 1820, 38649, 6563, -161, -162, 1139,
	-1000, 1136, 15225, -1000, 43207, 1105, 1105, -1000, 673, 668,
	15225, 666, -1000, 664, -1000, -107, 21100, 991, -163, 16955,
	-164, 147, 37, -169, 35476, -1000, 504, 23446, -1000, 1720,
	1727, 35476, 1804, -1000, -1000, 266, 265, 264, -1000, 26446,
	26446, 23114, 23114, -1000, 1482, 1482, -1000, -1000, 146, 1040,
	1874, -1000, 3596, 15917, 43207, -170, -1000, 38613, -1000, 35476,
	42447, -135, -1000, -1000, 26114, 445, -1000, -1000, 1192, -1000,
	-1000, 35476, 1170, -1000, -1000, 15225, 38234, 262, 1390, 261,
	-1000, -1000, -1000, -1000, -1000, -1000, 1846, -48, -1000, 915,
	-1000, -1000, 42447, 1828, -1000, -1000, 35476, 35476, -50, 259,
	258, -1000, 35476, 1034, -172, -1000, 1390, -1000, 1034, 257,
	23446, -1000, 1264, 751, -184, 35476, -1000, -1000, 6909, 23114,
	23114, -1000, -189, -1000, -1000, -1000, 883, 15225, 3596, -190,
	-1000, -1000, -128, -1000, 1907, -1000, -1000, -1000, -1000, 1619,
	38393, 1251, 35476, -1000, 35476, 1820, 144, 35476, 614, 6217,
	-1000, -1000, 143, 15225, 15225, 256, 1390, 1034, -1000, 1390,
	16955, -1000, 1296, 816, -1000, 597, -1000, -191, -192, -1000,
	140, 15571, 15571, -135, -1000, 35476, 252, 1583, -1000, 1061,
	1000, 139, -197, -1000, -1000, 251, -1000, 15225, -1000, 2067,
	-198, -209, 35476, -1000, 1390, -1000, -211, -1000, 20065, -1000,
	571, 571, -1000, -1000, -1000, 16609, 1110, 850, 40553, -1000,
	-1000, -1000, 35476, -1000, 1111, 1065, 884, -1000, -1000, -1000,
	-1000, -1000, 1251, 42447, -1000, -1000, -216, -1000, 1034, -182,
	-1000, -1000, 1943, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1736, -1000, 638, 1252, 1252, 1061, 1098, 1390, -1000, 14879,
	-1000, 1954, -1000, -1000, 1267, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2537, 2536, 1556, 2043, 2535, 2534, 2531, 2530, 2524,
	2523, 2517, 2516, 2514, 2511, 2510, 2509, 2508, 2506, 2501,
	2499, 2495, 2493, 2492, 2006, 2488, 1991, 2477, 2474, 2472,
	2471, 2470, 2468, 1985, 2467, 2464, 2462, 2460, 2453, 2452,
	1971, 2450, 1940, 2447, 2446, 2443, 2442, 2439, 1927, 2437,
	62, 102, 1839, 2434, 2419, 1819, 1815, 1795, 2418, 1777,
	2417, 2416, 1743, 1734, 2414, 86, 2405, 2402, 2400, 1732,
	1686, 2397, 2396, 2394, 142, 2391, 1643, 2384, 2383, 2382,
	2380, 2377, 2372, 2369, 2349, 2345, 2344, 2343, 2342, 2340,
	2339, 2338, 2334, 2329, 2328, 2327, 156, 2326, 2323, 1605,
	1571, 2319, 2317, 29, 40, 13, 48, 19, 155, 2425,
	134, 2312, 2310, 2309, 2308, 2305, 2303, 22, 100, 90,
	2302, 125, 2299, 2297, 41, 31, 27, 12, 2296, 79,
	2295, 2294, 1724, 24, 2293, 2292, 128, 2291, 56, 38,
	269, 141, 140, 105, 111, 2290, 2289, 2288, 32, 107,
	1, 2286, 2283, 15, 72, 34, 2282, 36, 14, 2279,
	2277, 116, 2276, 49, 85, 1496, 92, 115, 154, 74,
	2275, 50, 11, 53, 2274, 2271, 148, 30, 2266, 39,
	59, 127, 2263, 46, 149, 121, 63, 126, 122, 2262,
	2261, 2260, 104, 2257, 108, 103, 2255, 2254, 67, 2253,
	83, 133, 2252, 2251, 2247, 82, 2246, 114, 2245, 2242,
	145, 138, 101, 9, 51, 60, 5, 1490, 1483, 119,
	80, 44, 45, 2241, 2683, 1225, 968, 88, 91, 66,
	52, 93, 68, 78, 132, 33, 2240, 2239, 124, 2236,
	2232, 2230, 2229, 2227, 99, 2225, 2223, 20, 2221, 61,
	54, 71, 81, 17, 130, 120, 113, 147, 96, 2220,
	65, 110, 2217, 830, 2214, 2208, 1318, 112, 2207, 2204,
	2201, 1049, 533, 368, 234, 2194, 2193, 263, 246, 2190,
	2189, 75, 2188, 106, 98, 77, 131, 137, 123, 2181,
	109, 23, 2180, 28, 21, 0, 200, 194, 2155, 118,
	57, 2145, 2144, 2134, 2133, 26, 4, 10, 6, 7,
	3, 43, 25, 2131, 2130, 117, 94, 58, 2128, 144,
	2123, 2118, 2117, 35, 2116, 16, 2114, 8, 2113, 2109,
	18, 2, 2106, 2105, 129, 2103, 89, 2101, 1854, 2100,
	139, 2097, 2096, 1569, 2093, 37, 97,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 119, 119, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 116, 116, 121, 121, 121, 123, 123,
	120, 120, 115, 115, 24, 24, 63, 63, 106, 56,
	56, 56, 293, 293, 294, 294, 102, 102, 103, 103,
	103, 103, 104, 104, 105, 105, 105, 32, 32, 32,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 40, 40, 41, 41, 41, 41, 41,
	41, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 47, 47, 47, 45, 45, 45, 44, 44,
	44, 43, 43, 43, 46, 46, 46, 167, 167, 166,
	166, 170, 170, 48, 48, 48, 48, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 51, 51, 51, 51, 51, 51, 51,
	262, 262, 261, 49, 49, 236, 236, 52, 52, 193,
	193, 53, 53, 53, 53, 53, 54, 54, 64, 64,
	334, 334, 334, 338, 338, 339, 339, 340, 340, 340,
	340, 340, 340, 340, 336, 336, 59, 59, 59, 59,
	60, 60, 60, 61, 61, 101, 101, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 29, 30, 70, 70,
	70, 72, 69, 69, 69, 71, 71, 71, 71, 73,
	73, 74, 74, 74, 74, 74, 75, 75, 287, 285,
	285, 286, 286, 146, 146, 146, 146, 146, 147, 147,
	147, 292, 292, 292, 292, 292, 292, 291, 291, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 88, 88, 88, 96,
	96, 96, 96, 96, 96, 96, 77, 77, 82, 82,
	82, 82, 82, 78, 78, 83, 83, 84, 84, 85,
	85, 85, 85, 85, 85, 79, 79, 79, 79, 87,
	87, 87, 87, 86, 86, 92, 92, 92, 92, 92,
	92, 89, 89, 89, 89, 90, 90, 90, 93, 93,
	93, 93, 80, 80, 81, 81, 94, 94, 95, 95,
	95, 95, 95, 91, 91, 91, 335, 335, 337, 337,
	57, 57, 36, 36, 37, 37, 148, 148, 149, 149,
	215, 215, 215, 215, 150, 150, 122, 122, 122, 214,
	303, 303, 304, 304, 304, 304, 304, 304, 305, 305,
	305, 305, 305, 305, 305, 301, 301, 302, 299, 299,
	300, 300, 300, 300, 341, 341, 213, 213, 153, 153,
	308, 308, 308, 308, 306, 306, 306, 306, 306, 309,
	307, 310, 310, 310, 310, 310, 248, 248, 248, 98,
	98, 38, 38, 128, 128, 39, 39, 35, 35, 35,
	197, 197, 157, 157, 253, 253, 253, 139, 139, 117,
	117, 117, 17, 13, 13, 13, 13, 13, 13, 23,
	23, 21, 21, 198, 198, 199, 199, 58, 58, 62,
	62, 67, 67, 97, 97, 97, 97, 97, 97, 25,
	25, 25, 25, 31, 31, 31, 31, 66, 66, 343,
	343, 135, 135, 135, 135, 136, 136, 210, 210, 211,
	211, 344, 344, 212, 212, 212, 130, 129, 131, 131,
	34, 34, 34, 124, 124, 125, 125, 126, 126, 127,
	127, 345, 345, 55, 55, 55, 100, 100, 142, 142,
	207, 207, 207, 209, 209, 208, 208, 208, 183, 183,
	183, 99, 99, 162, 162, 172, 172, 173, 173, 259,
	174, 174, 65, 65, 109, 109, 107, 107, 107, 107,
	107, 107, 108, 108, 108, 110, 110, 110, 110, 110,
	110, 110, 113, 113, 113, 114, 114, 114, 112, 112,
	316, 316, 316, 319, 319, 315, 317, 317, 318, 318,
	342, 342, 184, 184, 184, 152, 151, 151, 155, 155,
	154, 156, 156, 252, 252, 252, 181, 181, 181, 181,
	202, 202, 200, 200, 201, 201, 203, 203, 204, 204,
	204, 205, 205, 206, 206, 180, 180, 232, 232, 111,
	111, 111, 161, 161, 161, 163, 163, 222, 222, 222,
	223, 223, 221, 221, 221, 221, 254, 254, 254, 254,
	254, 254, 254, 254, 332, 332, 332, 333, 333, 251,
	251, 255, 255, 255, 255, 255, 255, 249, 249, 249,
	249, 250, 250, 260, 260, 187, 187, 187, 187, 185,
	185, 186, 186, 256, 256, 256, 256, 182, 182, 257,
	257, 257, 216, 216, 263, 263, 263, 281, 281, 160,
	160, 160, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 265, 265, 265, 265, 267, 267, 267, 266, 266,
	266, 266, 266, 266, 266, 266, 266, 266, 266, 266,
	266, 266, 266, 266, 266, 266, 280, 280, 280, 280,
	280, 268, 268, 275, 275, 276, 276, 277, 278, 269,
	269, 270, 270, 271, 272, 279, 279, 279, 279, 283,
	283, 273, 273, 273, 273, 273, 274, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 195, 195, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 226, 226, 226, 226, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	311, 311, 311, 311, 311, 311, 311, 311, 313, 313,
	314, 314, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 320, 320, 321, 321, 323, 323, 324, 324,
	325, 326, 326, 326, 327, 328, 328, 322, 322, 329,
	329, 329, 330, 330, 331, 331, 331, 331, 331, 238,
	238, 239, 240, 246, 246, 246, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 137, 137, 137, 137, 137, 169, 169, 168,
	168, 235, 235, 233, 233, 237, 237, 188, 188, 282,
	282, 282, 282, 282, 282, 282, 189, 189, 189, 196,
	190, 190, 191, 191, 191, 191, 191, 229, 230, 192,
	192, 192, 231, 231, 241, 245, 245, 244, 243, 243,
	242, 242, 219, 219, 220, 220, 218, 217, 177, 177,
	176, 176, 175, 175, 346, 346, 247, 247, 178, 178,
	179, 171, 171, 258, 258, 258, 258, 164, 164, 144,
	144, 165, 165, 140, 140, 143, 143, 141, 141, 141,
	141, 158, 158, 159, 159, 138, 138, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 284, 284,
	284, 234, 132, 132, 132, 133, 133, 134, 134, 289,
	289, 289, 290, 290, 290, 290, 288, 288, 288, 288,
	288, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 1, 3, 1,
	2, 2, 3, 2, 2, 5, 3, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 3, 1, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 1, 4, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 3, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 4, 3, 5, 3, 4,
	5, 2, 3, 3, 3, 4, 2, 3, 4, 3,
	3, 3, 4, 4, 4, 4, 2, 3, 7, 7,
	7, 4, 5, 5, 5, 5, 2, 0, 2, 0,
	3, 2, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	2, 4, 3, 3, 0, 6, 3, 11, 14, 4,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 8, 10, 8, 10, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 3, 2, 0, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	2, 3, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 6, 3,
	3, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 2,
	3, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 3, 3, 1, 3, 3, 1,
	3, 3, 1, 1, 3, 3, 1, 1, 6, 6,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	5, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 375, -4, -24, -26, -29, -32,
	-33, -53, -40, -41, -42, -52, -48, -54, -55, -56,
	-57, -49, -63, -62, -64, -67, -65, -58, -59, -68,
	-76, -97, -98, -99, -100, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -34, -35, -36,
	-37, 73, -38, -39, 94, -318, 98, -43, -44, -45,
	-47, -46, 102, 109, 112, 134, 145, 226, 232, 253,
	255, 257, 264, -107, -109, 251, -60, -61, -69, -70,
	-71, -72, -101, 276, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -88, -89, -90, -91, -92,
	-93, -94, -95, 279, -25, -31, -66, 317, -11, -12,
	-15, -14, -16, -13, -20, -22, -19, -21, -23, -17,
	-18, -10, 111, -316, -110, -108, 372, 252, 326, 35,
	288, 61, 105, 259, 342, 349, -113, -111, -112, -114,
	269, 334, 298, 376, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 2, 298, 337,
	87, 153, 237, -334, 2, -165, 298, 87, -141, -132,
	365, 4, -295, -297, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 67, 64,
	65, 66, 69, 71, 72, 75, 76, 77, 85, 86,
	88, 90, 94, 96, 98, 101, 102, 104, 109, 111,
	110, 112, 122, 123, 128, 130, 135, 141, 142, 145,
	146, 154, 157, 159, 152, 169, 170, 171, 173, 174,
	175, 178, 177, 182, 185, 188, 190, 191, 192, 195,
	193, 197, 198, 200, 199, 205, 207, 208, 210, 213,
	216, 219, 222, 223, 224, 225, 226, 228, 230, 232,
	234, 235, 236, 237, 238, 240, 241, 243, 244, 245,
	246, 247, 251, 249, 250, 252, 253, 254, 255, 257,
	259, 260, 262, 277, 278, 289, 264, 265, 266, 267,
	268, 272, 270, 273, 274, 276, 279, 281, 284, 287,
	288, 290, 293, 294, 291, 286, 297, 299, 300, 301,
	302, 303, 304, 305, 312, 313, 317, 318, 319, 320,
	323, 324, 325, 326, 328, 331, 332, 333, 338, 343,
	344, 345, 346, 347, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 51, 52, 53, 56, 89, 91, 92,
	108, 113, 114, 124, 125, 126, 136, 138, 147, 148,
	151, 158, 160, 161, 162, 163, 164, 166, 180, 194,
	204, 206, 217, 221, 229, 231, 239, 261, 271, 282,
	283, 292, 295, 307, 308, 309, 314, 315, 330, 334,
	335, 375, 375, 2, 170, 236, -140, -132, 87, 375,
	375, 375, 375, 298, 2, 327, 337, -197, 87, 322,
	375, 375, -132, 232, 22, 2, 96, 157, 325, 324,
	22, 228, 270, 300, 302, 2, 375, 375, 375, 375,
	375, 2, 337, 298, 153, 87, 327, -132, 2, -51,
	2, 372, -50, -4, -33, -42, -52, -48, -24, -26,
	-40, -56, -55, -57, -59, -63, -62, -65, -69, -70,
	-76, -99, -100, 276, 111, -338, 2, 22, -339, -340,
	73, 102, 134, 269, 157, 96, 324, 298, 2, 170,
	2, -132, 2, -334, 2, 170, 2, -338, 2, -132,
	2, -136, 2, 264, -132, 375, 375, 375, 375, 375,
	185, 55, 261, 273, -74, 313, -73, 307, -287, -75,
	2, -166, 195, -132, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 2, -96, 273, 34, 55, 22, 60, 88, 135,
	153, 154, 174, 68, 69, 235, 185, 171, 312, 175,
	274, 299, 313, 73, 328, 303, 110, 4, 87, 195,
	275, 307, 375, 375, 375, -342, 2, 298, 266, 279,
	-108, -110, -109, -154, -155, 321, 165, 107, 215, -107,
	-109, 2, -316, -96, 273, 2, 55, 22, -285, 2,
	-247, 211, -224, 93, -226, 363, 364, 358, 201, 348,
	-238, -228, -241, 108, 261, 372, -140, -227, 378, 9,
	-313, -109, 29, -239, -240, 49, -132, 7, 8, 5,
	6, -138, -265, -234, -274, 316, 115, 203, -311, -312,
	4, -295, -289, -266, -276, -270, -273, 166, 58, 79,
	80, 83, 81, 84, 275, 327, 50, 28, 113, 114,
	221, 229, 295, 314, 315, 147, 204, 148, 56, 136,
	180, 101, 37, 39, 41, 42, 51, 52, 89, 91,
	92, 124, 125, 126, 158, 160, 161, 162, 163, 164,
	206, 239, 282, 292, 308, 309, 335, -296, -277, -278,
	-271, -272, 74, 116, 133, 156, 149, 168, 172, 181,
	183, 196, 218, 220, 258, 280, -279, -343, 2, 313,
	313, 2, -343, 2, -343, 2, -135, 2, 313, 310,
	-319, 240, -315, -132, -319, 375, 375, 377, 375, -151,
	-152, 2, 22, 99, -179, 2, 372, -254, 2, 370,
	-256, -140, -109, -255, 372, 212, -3, 2, -256, 147,
	-140, 2, -256, 147, -140, 2, -132, 2, -143, 147,
	-140, -288, 4, -295, -297, -296, -298, 58, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 43, 49, 50,
	54, 57, 59, 68, 73, 78, 79, 81, 80, 82,
	83, 84, 93, 95, 97, 99, 100, 103, 105, 107,
	115, 117, 129, 131, 132, 134, 137, 139, 150, 153,
	155, 165, 167, 176, 179, 184, 186, 187, 201, 202,
	203, 209, 211, 212, 214, 215, 227, 233, 242, 256,
	269, 275, 285, 296, 298, 306, 310, 311, 316, 321,
	322, 327, 329, 336, 337, 339, 340, 341, 342, 310,
	377, -165, -158, -132, -218, -217, 374, -224, 2, -224,
	2, 132, 372, -176, -177, -217, -218, 2, -166, 147,
	-132, 2, -166, 2, 153, -132, 147, 2, -132, 22,
	132, 2, 167, 2, 167, 2, -257, 2, -256, -167,
	147, 2, -166, -167, 147, 2, -144, 147, 2, -143,
	-132, 147, 2, -158, 147, 2, -193, 372, -262, 2,
	-261, -290, 4, -295, -297, -296, 334, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 273,
	211, 377, -166, -224, -236, 372, 132, -224, 211, -132,
	2, 277, 2, 372, -74, 53, 313, -211, 2, -212,
	-129, -130, -131, 169, 234, 238, 347, 310, 353, 132,
	-285, -170, 374, -96, 2, -293, 2, -291, 9, -290,
	5, 277, 2, 235, 274, 55, 132, 2, 2, -335,
	2, 211, 132, 2, 132, 2, 132, 2, 132, 2,
	132, 2, 2, 235, 274, 2, 129, 2, 312, 2,
	2, 132, 2, 169, 234, 289, 2, 298, 337, 2,
	132, 132, 347, 2, -182, -256, 298, 347, 22, -154,
	-155, -181, -200, -201, 184, 117, 209, -184, 22, 99,
	-184, -184, 44, 373, 373, -96, 277, 2, 10, 11,
	57, 33, 363, 364, 365, 366, 127, 367, 368, 361,
	362, 360, 351, 352, 355, 356, 357, 70, 354, 353,
	63, 189, 263, 118, 119, 120, 121, 248, 13, 14,
	15, 26, 214, 183, 348, 149, 280, 358, 16, 17,
	18, 168, 36, 150, -137, -145, -224, -224, -224, -224,
	-224, 220, -175, -219, 370, -109, 372, 372, -109, -224,
	-168, 372, 7, -109, -233, 370, -242, -224, -176, 372,
	5, 372, 5, -320, 343, 129, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 231, -283, 338, -283, -283,
	-267, 372, -267, -268, 372, -267, 344, 349, 372, -210,
	-211, -210, 310, -136, 377, -319, -159, 372, -179, -171,
	-258, -224, 365, -171, -178, -247, 74, -187, 172, 196,
	133, 181, 258, 156, 7, -51, -221, 378, 372, 365,
	-251, 349, -109, -255, 372, -254, -140, 372, -119, 249,
	-118, 21, 23, 102, 332, 108, 286, 304, 111, 265,
	249, 108, 111, 249, 286, 304, 265, 249, 108, 378,
	111, -293, -141, 377, -288, 365, 290, 373, -164, -140,
	-177, 372, -153, 201, -128, -317, 342, -153, 372, -133,
	147, 2, -132, -317, 201, -257, -142, -140, -142, 276,
	-132, 30, -121, 377, 48, 254, 108, -121, 108, -121,
	377, 108, -121, 108, 108, -168, -224, 373, 377, -334,
	-340, 73, 372, 30, -235, -263, -264, -266, -275, -269,
	-273, -274, 40, 46, 45, 305, 194, 271, 283, 330,
	151, 38, 210, 159, 4, 158, 160, 161, 162, 163,
	164, 282, 37, 239, 125, 126, 124, 101, 92, 91,
	206, 42, 41, -277, -278, -271, -272, 89, 308, 309,
	166, 39, 52, 51, 335, 292, -294, -293, -334, -287,
	-168, 30, -211, 2, -344, 377, 182, -147, 188, 200,
	141, 212, 345, -292, 5, 4, -234, -248, 93, 185,
	-274, 8, 364, -284, 7, 363, -286, -285, -286, 77,
	374, -288, -166, 22, 278, 2, -287, -337, 129, -334,
	-287, -287, -287, -287, -287, 273, -51, 129, -132, 182,
	-287, 2, -287, 2, 298, 153, 298, -121, 377, -293,
	64, 65, 347, -181, -201, -200, -203, -224, 22, -206,
	123, 197, -224, -226, -108, -108, -108, -156, -252, -224,
	233, 153, -287, -281, -263, -280, 244, 245, 243, 247,
	246, -263, -288, 307, -224, -224, -224, -224, -224, -224,
	-224, -224, -224, -224, -224, -224, -224, -224, -224, -224,
	-224, -224, -224, -224, -224, -224, -224, -224, -224, -224,
	-224, -224, -224, -224, -224, -224, 183, 149, 280, 36,
	150, -224, 310, -224, -224, -224, -224, 193, 201, 203,
	316, 115, 323, 99, 207, -346, 296, 32, -231, -109,
	372, -246, 27, 285, 22, -238, 261, 372, -219, -224,
	-220, -169, -168, 373, 377, -169, -237, -233, -245, -244,
	339, 373, -168, 336, 22, 99, 365, 2, 7, -194,
	346, 192, 90, 142, 191, -195, 268, -321, 122, 137,
	372, 373, 2, 373, 2, 373, 2, 373, 2, -224,
	-224, -188, 2, -282, -168, 4, 346, 192, 90, 142,
	191, 268, -188, 2, -189, 2, -224, -168, -190, -225,
	-226, 363, 364, 358, 372, 261, -191, 2, -224, -169,
	-224, 43, 179, 311, -192, -224, 132, -168, -224, -224,
	-224, -168, -168, 2, -168, 2, 372, 7, 7, 307,
	307, 7, -136, -315, 30, -158, -161, 377, 132, 30,
	4, -161, 377, 373, 172, 172, -254, -187, 172, -185,
	218, -185, -185, -332, 372, 371, -251, -288, 370, 379,
	-169, 2, -250, -249, 30, -132, 216, 373, -140, 377,
	310, -198, 68, 59, -214, 147, 59, -299, -132, 68,
	-300, 54, 322, 233, 131, -198, 68, -198, 68, 68,
	-256, 33, -65, 66, 132, 310, -256, 66, 310, 33,
	-65, 132, 310, -143, -288, 66, -260, 350, -132, 132,
	373, 377, -148, -158, -149, -132, -215, -214, -301, -302,
	-299, 153, 322, 116, 30, 108, 225, 30, 211, 201,
	-124, 301, 108, -216, 340, -207, -65, 372, 93, 30,
	-207, -172, -173, -259, -174, -140, 372, -132, -166, -167,
	-167, -143, -144, -132, -158, 373, 377, -51, -261, 310,
	329, -149, -50, 373, 377, -160, 29, 370, -194, 372,
	-260, 377, 132, 353, 310, 373, 313, -212, -146, 238,
	284, 250, 272, 8, 7, 7, 377, -288, -336, -132,
	273, -51, -140, -143, -140, -256, 129, 65, -204, -284,
	372, 364, -205, 261, 262, 377, -117, 31, 97, 173,
	-140, 347, -224, -224, 310, -346, 296, -231, -224, 193,
	203, 316, 115, 323, 99, 207, 132, 372, -225, -225,
	-168, -228, 372, -168, 371, 381, 373, -224, 371, 371,
	377, -243, -244, 103, -224, -155, 377, -154, -224, -168,
	-168, 373, 373, 310, 310, 310, 310, 372, -326, 219,
	372, 372, -224, 30, 377, 373, 132, 373, 373, -196,
	227, 373, 10, 11, 363, 364, 365, 366, 127, 367,
	368, 361, 362, 360, 351, 352, 353, 63, 189, 263,
	13, 14, 15, 168, 150, -225, -225, -225, -168, 372,
	373, -229, -230, 132, 129, 30, -192, -192, -192, 373,
	132, -168, 377, 377, 377, 373, 373, 373, 7, 373,
	377, 373, 347, 347, 373, 372, 373, -216, -258, -163,
	2, -254, -288, -216, -247, -254, -254, -186, 329, 211,
	172, -254, -249, 373, -333, 7, -251, -250, 7, -223,
	-222, 130, 199, 373, -132, 372, -251, 373, -118, -140,
	-132, -132, 201, -214, 147, -123, 201, -263, -132, 372,
	372, 173, 173, -132, -132, 147, -132, 147, -132, -132,
	-119, 249, -65, 347, 372, -140, 249, 347, -132, -65,
	372, -132, 249, 347, -102, 146, 207, 290, 132, -140,
	373, 373, 377, -133, 153, -133, -65, -166, 5, -65,
	-140, 108, -125, 104, -345, 353, -132, -202, -200, -224,
	-183, -209, 256, 211, -164, 334, -132, -183, -162, 377,
	132, 353, -164, -121, -121, -121, -121, -224, -336, -293,
	373, -263, 370, 371, 7, 7, -105, 342, -293, -336,
	-285, -285, -129, 320, 62, 238, -285, 377, 237, 87,
	298, -205, -224, -252, -140, 378, -224, -224, -225, -225,
	132, 372, -224, -235, 26, 26, 373, -169, 377, -220,
	-224, 373, -233, 105, -224, 306, 373, 336, -155, -155,
	-155, 5, 192, 142, 191, -195, 191, -195, -195, 7,
	-327, -132, 372, 340, -154, 373, -281, -263, -224, -229,
	-224, -281, -263, -225, -225, -225, -225, -225, -225, -225,
	-225, -225, -225, -225, -225, -225, -225, -225, -225, -225,
	-225, -225, 99, 201, 207, -225, 377, -169, -230, -229,
	-224, -224, -263, 373, 373, 373, -168, -224, -224, -224,
	373, 7, -50, -180, 137, -260, 377, -180, -186, 372,
	-224, -254, 371, 373, 377, -250, 371, 377, 380, 353,
	-251, 372, -158, -249, 310, 310, 108, 201, 331, -303,
	-300, -224, -157, -253, -132, -314, 372, -311, -312, -138,
	372, 372, -116, 102, 276, -199, 108, -121, 108, -121,
	310, -198, 68, -227, -138, -132, -168, 310, -227, -168,
	310, -227, -105, 132, 297, 290, -150, 152, -215, 372,
	-133, 372, 372, -153, 372, -132, -126, 178, -345, -291,
	-317, -183, -183, -171, 202, 67, 373, -216, -173, -163,
	-247, 373, -106, 75, -106, 7, 371, 373, -104, 213,
	-103, -132, 5, -132, -288, -132, -140, 212, 373, -117,
	-288, 26, 26, -224, -235, 373, -224, -224, 373, -224,
	371, -224, 5, -224, 373, 373, 373, 373, -328, -132,
	-224, 373, 373, 373, -230, 132, 99, 207, 372, -224,
	373, 373, 377, 373, 373, 373, 373, -232, 139, 44,
	-254, -232, -158, -221, 7, -222, -288, 370, -250, -158,
	373, -132, -132, -214, 108, -304, 68, -305, 57, 116,
	73, 201, 203, 322, 233, 54, 93, 242, 373, 373,
	377, -139, -176, 57, -139, -224, 372, -157, -158, 201,
	93, 201, 93, 86, 318, -132, -132, -140, -132, -132,
	372, 373, -140, 373, -132, -294, 307, 150, -157, 372,
	-158, -148, 30, -157, 211, -127, 177, -345, -291, -124,
	-208, 372, 211, -65, -183, 353, 86, 86, 371, 377,
	372, 353, 353, -117, -224, -224, 373, 373, -155, -322,
	224, 373, -225, 132, 372, -235, 373, -224, -323, 341,
	-224, -168, -323, 373, -251, 7, 373, -214, -132, -288,
	-132, 116, 147, 203, 173, 372, -225, -140, -213, -341,
	72, 294, -253, -117, -288, -117, 373, -168, 373, 373,
	203, 203, -224, -263, -121, -121, 310, 310, -168, 310,
	310, -227, 222, 373, -157, 373, 373, -65, 373, -140,
	-345, -291, -125, 100, -158, 68, -179, -109, 372, 372,
	372, -103, -104, -293, -293, 373, -155, 44, -225, -235,
	373, 373, -324, -325, -132, -250, 371, -305, -133, 201,
	-224, -134, 372, -150, 372, -139, -155, 242, -120, 57,
	-132, -132, -155, 372, 372, -140, -213, 373, -150, -213,
	372, -291, -126, 324, 202, 373, -132, -294, -294, 373,
	-329, 237, 262, -168, 373, 377, 30, 108, 373, -308,
	190, -132, -158, -117, 373, -140, -115, 329, -288, 373,
	-168, -168, 372, -150, -213, -150, -157, -127, 276, -216,
	373, 373, 373, -330, -331, 36, 319, 77, -224, -330,
	-325, -327, 116, -306, -309, -307, 211, 133, 223, 281,
	373, 373, -153, -224, 373, 373, -158, -150, 373, -172,
	-105, -105, -331, 230, 128, 261, 230, 128, -132, -307,
	211, -309, 211, 324, 96, -308, 373, -213, -216, 26,
	-310, 198, 254, 48, 276, -310, -306, -122, 48, 254,
	-150, -331, 20, 203, 93,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 306, 0, 159, 161, 163,
	165, -2, 168, 170, 0, 0, 0, 181, 183, 185,
	187, 189, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 652, -2, 0, 286, 288, 297, 299,
	301, 303, 304, 0, 349, 351, 353, 355, 357, 359,
	361, 363, 365, 367, 369, 371, 373, 375, 377, 378,
	380, 382, 384, 0, 573, 575, 577, -2, 65, 66,
	67, 68, 69, 70, 78, 79, 80, 81, 72, 74,
	75, 77, 0, 688, -2, 699, 0, 0, 0, -2,
	0, -2, -2, -2, 0, 0, 665, 667, 669, 671,
	-2, 0, 0, -2, 7, 13, 15, 17, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 40, 43,
	49, 51, 53, 56, 58, 60, 62, 64, 0, 0,
	0, 0, 0, 0, 125, 270, 0, 1267, 1191, 1197,
	1198, 1222, 1223, 1224, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
	1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
	1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
	1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
	1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
	1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
	1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
	1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417,
	1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427,
	1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
	1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
	1458, 151, 153, 154, 0, 0, 0, 1193, 1267, 160,
	162, 164, 166, 0, 172, 0, 0, 0, 0, 540,
	169, 171, 261, 1327, 263, 265, 0, 0, 0, 0,
	175, 176, 177, 178, 179, 180, 182, 184, 186, 188,
	190, 191, 0, 0, 0, 0, 0, 260, 258, 213,
	214, 0, 243, 244, 245, 246, 247, 249, 217, 219,
	220, 222, 224, 226, 228, 229, 231, 233, 234, 236,
	238, 239, 241, 0, 0, 0, 267, 273, 274, 275,
	277, 278, 279, 280, 281, 282, 283, 0, 131, 0,
	461, 256, 254, 0, 127, 0, 570, 0, 269, 571,
	572, 567, 568, 1354, 596, 287, 289, 298, 300, 302,
	-2, -2, 1445, -2, 313, -2, 321, 1451, 0, 324,
	325, 328, -2, 209, 350, 352, 354, 356, 358, 360,
	362, 364, 366, 368, 370, 372, 374, 376, 379, 381,
	383, 385, 386, 0, 0, 0, 390, 0, -2, -2,
	0, 0, 0, 0, 0, -2, 0, -2, 0, 0,
	-2, -2, 0, 0, -2, 0, 0, 389, 391, 392,
	393, 0, 574, 576, 578, 0, 530, 690, 0, 0,
	-2, 663, 664, -2, 0, 694, 694, 694, 0, 0,
	664, 662, 0, 290, 0, 292, 0, 390, 295, 296,
	329, 330, 1176, 1177, 893, 0, 0, 0, 0, 0,
	0, 995, 997, 1418, 1445, 0, 999, 1000, 0, 1002,
	1004, 1005, 0, 1008, 1009, 1161, 1193, 1207, 1208, 1209,
	1210, 0, 0, 1213, 0, 1215, 1216, 1217, 1063, 1019,
	-2, -2, 1205, 821, 822, 823, 824, -2, 1459, 1023,
	1026, 1029, 1032, 1033, 1036, 1037, 0, 1402, 1419, 1420,
	1441, 1442, 1450, 1454, 1455, 1426, 1438, 1427, 1414, 1424,
	1436, 1273, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1231, 855, 856,
	861, 862, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 864, 598, 580, 589,
	598, 582, 583, 584, 585, 586, 587, 588, 591, 0,
	680, 1333, 683, 1204, 681, 666, 668, 0, 670, 0,
	0, 674, 696, 695, 729, 730, 0, 678, 679, 689,
	745, 783, 760, 751, 0, 0, 2, 71, 0, 1426,
	783, 73, 0, 1426, 783, 76, 0, 82, 0, 1426,
	1196, 0, 1236, 1237, 1238, 1239, 1240, 1459, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
	1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
	1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
	1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
	1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
	1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 0,
	0, 271, 272, 1201, 1199, 1200, 0, 155, 156, 157,
	158, 0, 0, 1194, 1170, 1168, 1169, 167, 509, 1426,
	-2, 532, 509, 536, -2, 687, 1426, 612, 262, 264,
	0, 174, 0, 625, 0, 627, 0, 642, 789, 117,
	1426, 194, 207, 117, 1426, 197, 117, 1426, 200, 1189,
	117, 1426, 203, 204, 1426, 206, 257, 0, 0, -2,
	250, 252, 1232, 1233, 1234, 1235, -2, 248, 218, 221,
	223, 225, 227, 230, 232, 235, 237, 240, 242, -2,
	0, 0, 0, 460, 0, 0, 0, 569, 0, 595,
	305, 0, 310, 0, 312, 1413, -2, -2, 316, 599,
	603, 604, 605, 0, 0, 0, 0, 0, 0, 0,
	326, 210, 0, 387, 388, 396, 397, 132, 133, 347,
	348, 0, 400, 421, 433, 0, 0, 404, 406, 459,
	408, 0, 0, 410, 0, 412, 0, 414, 0, 416,
	0, 418, 420, 422, 434, 424, 689, 426, 0, 428,
	432, 0, 437, 0, 439, 440, 441, 0, 0, 447,
	0, 0, 394, 395, 117, 787, 0, 0, 0, -2,
	0, 658, 708, 709, 0, 0, 0, 0, 692, 693,
	0, 0, 0, 654, 655, 291, 0, 294, 0, 0,
	0, 0, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1105,
	1102, 1103, 1106, 1107, 0, 0, 0, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 1109, 1110,
	1111, 0, 0, 1113, 0, 1115, 0, 0, 0, 0,
	0, 0, 1175, 0, 0, 1112, 898, 899, 900, 932,
	933, 0, 996, 1172, 1165, 998, 0, 1118, -2, 1119,
	0, 0, 1001, 1006, 1007, 1118, 0, 1160, -2, 0,
	1212, 0, 890, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1141, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 840, 858, 869, 866, 865,
	842, 0, 841, 839, 0, 843, 0, 0, 0, 579,
	-2, 581, 0, 593, 0, 682, 0, 0, 731, 734,
	1181, 1185, 1186, 734, 0, 1178, 0, 0, 0, 0,
	780, 780, 780, 778, 754, 0, 760, 0, -2, 784,
	772, 0, -2, 751, 0, 0, 785, 0, 83, 564,
	96, 0, 564, 564, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 774, 1192, 0, 1166, 1167, 147, 0, 0, 1187,
	1171, 467, 0, 0, 531, 0, 686, 0, 0, 0,
	1426, 539, 1225, 614, 0, 793, 0, 628, 0, 0,
	790, 0, 192, 0, 115, 116, 0, 195, 0, 198,
	0, 0, 201, 0, 0, 0, 1119, 689, 0, 0,
	276, 0, 0, 689, 0, 1121, 801, 802, 803, 804,
	805, 890, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 852, 0, 827, 827,
	827, 844, 845, 853, 854, 859, 860, 871, 872, 874,
	876, 870, 870, 870, 867, 868, 774, 134, 0, 0,
	0, 0, -2, 318, 0, 601, 0, 606, 338, 339,
	340, 608, 609, 322, 341, 342, 343, 344, 345, 346,
	0, 526, 0, 528, 1218, 0, 319, 331, 320, 323,
	0, 211, 398, 399, 401, 402, 403, 407, 0, 456,
	409, 411, 413, 415, 417, 425, 429, 689, 435, 438,
	442, 443, 444, 445, 0, 0, 0, 529, 0, 307,
	0, 451, 0, 661, 706, 707, 712, 716, 717, 720,
	723, 724, 714, 893, 675, 676, 677, 700, 701, 551,
	0, 0, 293, 894, 797, 798, 846, 847, 848, 849,
	850, 895, 896, 0, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, -2, -2, -2, -2, -2, -2,
	-2, -2, 919, 920, 921, 922, 923, 924, 925, 926,
	-2, -2, -2, 930, 931, -2, 1114, 1116, 0, 1175,
	0, -2, 0, -2, -2, -2, -2, 944, 0, 946,
	949, 951, 953, 0, 0, 0, 0, 1174, 963, 1152,
	0, 0, 1093, 1094, 1095, 948, 0, 0, 1173, 1164,
	0, 0, 1117, 1003, 0, 0, 0, 1125, 1159, 1155,
	0, 1010, 699, 0, 0, 0, 0, 1017, 0, 1221,
	877, 878, 879, 880, 881, 882, 891, 1073, 0, 0,
	0, 1024, 1025, 1027, 1028, 1030, 1031, 1034, 1035, 0,
	0, 0, 1041, 0, 1128, -2, -2, -2, -2, -2,
	-2, -2, 0, 1043, 0, 1045, 1119, 1138, 0, 0,
	966, 0, 0, 0, 0, 1445, 0, 1048, 1119, 1146,
	0, 0, 0, 0, 0, 1119, 0, 1151, 0, 0,
	0, 0, 0, 1059, 0, 1061, 0, 0, 0, 0,
	0, 0, 592, 684, 0, 0, 793, 0, 0, 0,
	1184, 793, 0, 1180, 0, 0, 0, 0, 0, 775,
	779, 776, 777, 0, 0, 760, 772, 742, 0, 0,
	0, 749, 750, 771, 0, 770, 759, -2, 0, 0,
	0, 0, 0, 563, 98, 1426, 0, 119, 0, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 1195, 0, 137, 0, 1202, 0,
	0, 0, 0, 0, 466, 1201, 468, 470, 471, 472,
	473, 1226, 0, 1226, 0, 0, 0, 0, 0, 0,
	616, 622, 0, 711, 0, 640, 630, 0, 0, 0,
	640, 644, 645, 647, 648, 0, 0, 791, 208, 117,
	117, 1190, 117, 117, 205, 259, 0, 215, 251, 0,
	0, 0, 253, 255, 0, 794, 796, 0, 806, 0,
	146, 0, 0, 0, 0, 311, 0, 600, 607, 0,
	335, 0, 337, 527, 1220, 1219, 0, 212, 458, 284,
	427, 430, 453, 454, 455, 788, 0, 452, 0, 718,
	0, 0, 715, 721, 722, 0, 703, 549, 550, 0,
	0, 0, -2, -2, 0, 0, 0, 964, -2, 945,
	947, 950, 952, 954, 0, 0, 0, 0, 0, 0,
	0, 965, 1118, 0, 1162, 1165, -2, 1120, 1123, 1124,
	0, 0, 1156, 0, 0, 0, 0, 698, 699, 699,
	699, 1016, 0, 0, 0, 0, 0, 0, 1018, 0,
	0, 0, 0, 0, 0, 1040, 0, 1042, 1044, 0,
	0, 1046, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 969, 970, 971, 0, 1118,
	1047, 1144, 1145, 0, 0, 0, 0, 0, 0, 1053,
	0, 1150, 0, 0, 0, 1057, 1058, 1060, 0, 825,
	0, 851, 873, 875, 863, 689, 1203, 726, 1182, 774,
	733, 735, 1183, 726, 1179, 762, 0, 764, 0, 0,
	0, 766, 0, 755, 0, 757, 772, 747, 0, 0,
	740, 0, 739, 760, 768, 0, 0, 786, 97, 553,
	0, 0, 0, 100, 1426, 108, 0, 481, 0, 0,
	0, 0, 0, 566, 109, 1426, 117, 1426, 117, 110,
	84, 564, 85, 0, 0, 559, 0, 0, 552, 86,
	0, 561, 0, 0, 146, 0, 0, 148, 0, 1188,
	475, 508, 0, 0, 1226, 0, 464, 509, 533, 535,
	0, 0, 618, 622, 0, 621, 687, 640, 710, 792,
	623, 640, 0, 0, 0, 632, 629, 626, 793, 0,
	0, 0, 0, 193, 196, 199, 202, 1120, 266, 0,
	0, 1122, 0, 799, 0, 0, 126, 0, 135, 268,
	308, 309, 314, 333, 334, 336, 332, 0, 0, 0,
	0, 0, 0, 702, 551, 0, 897, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 1153, 0, 0, 0,
	1164, -2, 1126, 1154, 1158, 0, 1011, 0, 0, 0,
	0, 1214, 883, 884, 885, 886, 887, 888, 889, 0,
	1071, 1072, 1076, 0, 0, 1022, 0, 0, 1127, 1137,
	1139, 967, 968, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, -2, -2, -2, 985, 986, 987, -2,
	-2, -2, 0, 0, 0, 1140, 0, 0, 1142, 1143,
	1147, 1148, 0, 1050, 1051, 1052, 1149, 0, 0, 0,
	857, 0, 0, 728, 0, 732, 0, 728, 763, 0,
	782, 765, 745, 756, 0, 753, 743, 0, 744, 0,
	772, 0, 0, 752, 0, 0, 0, 0, 118, 479,
	498, 0, 0, 542, 548, 548, 0, 1020, 1021, 0,
	0, 0, 102, 0, 0, 0, 0, 106, 0, 112,
	0, 0, 0, 91, 0, 0, 0, 0, 90, 0,
	0, 89, 124, 0, 0, 149, 462, 0, 469, 0,
	0, 0, 467, 0, 0, 0, 620, 622, 0, 613,
	614, 173, 624, 638, 639, 637, 0, 640, 646, 643,
	649, 0, 0, 128, 0, 0, 800, 807, 144, 1317,
	142, 139, 141, 285, 448, 449, 450, 713, 719, 704,
	551, 0, 0, -2, 0, 957, -2, -2, 1089, 1120,
	1163, 1157, 1211, 699, 1012, 1014, 1015, 892, 1078, 1075,
	0, 1062, 1038, 1039, 1136, 0, 0, 0, 0, 1120,
	1091, 1049, 0, 1055, 1056, 826, 685, 1067, 0, 0,
	736, 1067, 0, 760, 758, 741, 737, 0, 748, 0,
	769, 555, 557, 99, 0, 480, 0, 483, 0, 0,
	0, 0, 489, 490, 0, 0, 0, 0, 500, 507,
	0, 551, 1206, 0, 551, 0, 0, 0, 0, 0,
	114, 0, 0, 565, 0, 117, 117, 554, 0, 0,
	0, 0, 560, 0, 562, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 622, 0, 615, 616,
	0, 0, 0, 631, 641, 0, 0, 0, 795, 0,
	0, 0, 0, 705, -2, -2, 958, 1090, 0, 699,
	0, 1064, -2, 0, 0, 0, 1092, 0, 672, 0,
	727, 725, 673, 781, 772, 0, 767, 101, 0, 484,
	485, 1226, 0, 488, 491, 0, 493, 1228, 475, 0,
	504, 505, 543, 544, 547, 545, 548, 699, 502, 0,
	103, 104, 113, 121, 105, 111, 0, 0, 699, 0,
	0, 773, 0, 507, 0, 497, 475, 465, 507, 0,
	0, 617, 618, 0, 0, 0, 650, 651, 0, 0,
	0, 143, 0, 138, 140, 1013, 1081, 0, -2, 0,
	993, 1054, 1066, 1068, 0, 746, 738, 482, 486, 0,
	0, 513, 0, 501, 0, 551, 0, 0, 123, 0,
	556, 558, 0, 0, 0, 0, 475, 507, 463, 475,
	0, 619, 620, 0, 634, 793, 636, 0, 0, 145,
	0, 0, 0, 1077, 994, 0, 0, 0, 492, 518,
	0, 0, 0, 546, 1011, 509, 107, 0, 120, 0,
	0, 0, 0, 495, 475, 537, 0, 611, 0, 635,
	146, 146, 1074, 1079, 1082, -2, 1386, 1264, 0, 1080,
	1069, 1070, 0, 494, 514, 515, 0, 510, 511, 512,
	1227, 506, 513, 122, 93, 95, 0, 496, 507, 793,
	129, 130, 0, 1084, 1085, 1086, 1087, 1088, 487, 516,
	0, 517, 0, 0, 0, 518, 478, 475, 633, 0,
	519, 0, 522, 523, 0, 520, 503, 474, 476, 477,
	538, 1083, 521, 524, 525,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 361, 3, 367, 362, 3,
	372, 373, 365, 363, 377, 364, 374, 366, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 381, 376,
	351, 353, 352, 355, 378, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 370, 3, 371, 368, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 379, 360, 380, 358,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 354, 57694, 356,
	57695, 357, 57696, 359, 57697, 369, 57698, 375, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:870
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:876
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:882
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:998
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1047
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1053
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1059
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1068
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1077
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1146
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1169
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1179
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1241
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1242
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1245
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1246
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1273
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1299
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1337
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1406
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "CREATE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1484
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1509
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1524
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1539
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1585
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1600
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1651
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1663
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			return helpWith(sqllex, "DELETE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1666
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1667
		{
			return helpWith(sqllex, "INSERT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1668
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1679
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1687
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1688
		{ /* SKIP DOC */
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1795
		{
			return helpWith(sqllex, "GRANT")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1815
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1893
		{
			return helpWith(sqllex, "RESET")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1894
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1909
		{
			return helpWith(sqllex, "RESET")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1920
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1928
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1932
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1934
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1935
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1936
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			return unimplemented(sqllex, "set local")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.expr()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2013
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2018
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2035
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			return unimplemented(sqllex, "set from current")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2040
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2050
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = Low
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = Normal
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = High
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2152
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2154
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2155
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2156
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2158
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2159
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2160
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2161
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2162
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2165
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2168
		{
			return helpWith(sqllex, "SHOW")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2177
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.str = "client_encoding"
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2203
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2220
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2247
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2258
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2274
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2279
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2290
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2343
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2361
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2384
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2392
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2396
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2403
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2414
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2425
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2440
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2444
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2448
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2452
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2456
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2462
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2466
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2470
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2476
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2504
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2603
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2607
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = DropDefault
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2617
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2822
		{
			return unimplemented(sqllex, "match full")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
			return unimplemented(sqllex, "match partial")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2824
		{
			return unimplemented(sqllex, "match simple")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2825
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2831
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2832
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2833
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2835
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2838
		{
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2841
		{
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			return unimplemented(sqllex, "no action")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2847
		{
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2848
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2849
		{
			return unimplemented(sqllex, "action set null")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2850
		{
			return unimplemented(sqllex, "action set default")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2875
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2886
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2890
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2951
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = true
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = false
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2981
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2982
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2985
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2986
		{
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = Ascending
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = Descending
		}
	case 551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3026
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3028
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = true
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = false
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3061
		{
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3062
		{
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3073
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3084
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3099
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3100
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3101
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3119
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3137
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3142
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3150
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3157
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3160
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3161
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.str = ""
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.str = ""
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3220
		{
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3222
		{
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = ReadOnly
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = ReadWrite
		}
	case 610:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3286
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.str = ""
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.str = ""
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.str = ""
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.str = ""
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3329
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3330
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3354
		{
			return helpWith(sqllex, "INSERT")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3371
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3413
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3425
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 641:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3448
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3452
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3453
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3582
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3617
		{
			return helpWith(sqllex, "SELECT")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3618
		{
			return helpWith(sqllex, "VALUES")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3619
		{
			return helpWith(sqllex, "TABLE")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3665
		{
			return helpWith(sqllex, "SELECT")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3709
		{
			return helpWith(sqllex, "TABLE")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3720
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3721
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3722
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3725
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3726
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3729
		{
			return unimplemented(sqllex, "cte")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3732
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3733
		{
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3736
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3737
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3740
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3741
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = true
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = false
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = false
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = true
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3765
		{
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3812
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3836
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3888
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3889
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3892
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3893
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3951
		{
			return helpWith(sqllex, "VALUES")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3953
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3968
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &From{}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3990
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4035
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4072
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4097
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = nil
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4138
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4144
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = true
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = false
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.str = astFullJoin
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.str = astLeftJoin
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.str = astRightJoin
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.str = astInnerJoin
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4255
		{
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4256
		{
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4342
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4356
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4364
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4388
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4399
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4480
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4489
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = nil
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4554
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4650
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 863:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4682
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4721
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4722
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 873:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 875:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = year
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = month
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = day
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = hour
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = minute
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = month
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = hour
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = minute
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = minute
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = nil
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = second
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4817
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4852
		{
			return unimplemented(sqllex, "at tz")
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5060
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5126
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5299
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5352
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5353
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5366
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5377
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5393
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5394
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5398
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5407
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5416
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5425
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5426
		{
			return unimplemented(sqllex, "current role")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5435
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5437
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5441
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5445
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5456
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5461
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5463
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5466
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5475
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5476
		{
			return unimplemented(sqllex, "treat")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5513
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5515
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5518
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5522
		{
			return unimplemented(sqllex, "within group")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5523
		{
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5527
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5531
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5558
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5600
		{
			sqlVAL.str = ""
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5610
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5620
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5621
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5622
		{
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5625
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5626
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5632
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5633
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5634
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5635
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5636
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5651
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = Any
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = Some
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5677
		{
			sqlVAL.union.val = All
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = Plus
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = Minus
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = Mult
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = Div
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = Mod
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5688
		{
			sqlVAL.union.val = Bitand
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = Bitor
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = Pow
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = Bitxor
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5692
		{
			sqlVAL.union.val = LT
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = GT
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = EQ
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = LE
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5696
		{
			sqlVAL.union.val = GE
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = NE
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = Like
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5702
		{
			sqlVAL.union.val = NotLike
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = ILike
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = NotILike
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5722
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5933
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5937
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5976
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5991
		{
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5992
		{
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6020
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6036
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6045
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6071
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6081
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6085
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6100
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6110
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6123
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6127
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6131
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6135
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6151
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6154
		{
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6164
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6168
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6175
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6187
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6190
		{
			return unimplemented(sqllex, "func const")
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6192
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6196
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6199
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6201
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6205
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6209
		{
			sqlVAL.union.val = DNull
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6216
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6220
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6226
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6261
		{
			sqlVAL.str = ""
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6267
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6271
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
