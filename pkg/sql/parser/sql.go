// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680
const HELPTOKEN = 57681

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6517

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	358, 53,
	-2, 672,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	141, 525,
	-2, 0,
	-1, 61,
	92, 672,
	145, 672,
	310, 672,
	311, 672,
	-2, 0,
	-1, 71,
	103, 647,
	112, 647,
	153, 647,
	172, 647,
	197, 647,
	203, 647,
	307, 647,
	-2, 636,
	-1, 103,
	4, 674,
	20, 674,
	21, 674,
	23, 674,
	28, 674,
	33, 674,
	34, 674,
	35, 674,
	36, 674,
	37, 674,
	38, 674,
	39, 674,
	40, 674,
	41, 674,
	42, 674,
	44, 674,
	45, 674,
	46, 674,
	47, 674,
	48, 674,
	51, 674,
	52, 674,
	53, 674,
	55, 674,
	56, 674,
	60, 674,
	61, 674,
	62, 674,
	64, 674,
	66, 674,
	67, 674,
	68, 674,
	71, 674,
	72, 674,
	73, 674,
	81, 674,
	82, 674,
	83, 674,
	84, 674,
	85, 674,
	86, 674,
	87, 674,
	88, 674,
	90, 674,
	92, 674,
	94, 674,
	97, 674,
	98, 674,
	100, 674,
	104, 674,
	105, 674,
	106, 674,
	107, 674,
	108, 674,
	109, 674,
	113, 674,
	114, 674,
	115, 674,
	116, 674,
	117, 674,
	119, 674,
	121, 674,
	126, 674,
	127, 674,
	129, 674,
	132, 674,
	133, 674,
	134, 674,
	135, 674,
	136, 674,
	137, 674,
	140, 674,
	142, 674,
	145, 674,
	146, 674,
	147, 674,
	148, 674,
	149, 674,
	150, 674,
	151, 674,
	152, 674,
	154, 674,
	157, 674,
	158, 674,
	159, 674,
	161, 674,
	162, 674,
	163, 674,
	165, 674,
	166, 674,
	168, 674,
	170, 674,
	173, 674,
	176, 674,
	178, 674,
	179, 674,
	180, 674,
	181, 674,
	182, 674,
	183, 674,
	185, 674,
	186, 674,
	187, 674,
	188, 674,
	192, 674,
	193, 674,
	194, 674,
	195, 674,
	196, 674,
	198, 674,
	200, 674,
	201, 674,
	204, 674,
	205, 674,
	207, 674,
	209, 674,
	210, 674,
	211, 674,
	212, 674,
	213, 674,
	214, 674,
	216, 674,
	217, 674,
	218, 674,
	219, 674,
	220, 674,
	222, 674,
	223, 674,
	224, 674,
	225, 674,
	226, 674,
	227, 674,
	228, 674,
	229, 674,
	231, 674,
	232, 674,
	233, 674,
	234, 674,
	235, 674,
	236, 674,
	237, 674,
	238, 674,
	239, 674,
	240, 674,
	241, 674,
	242, 674,
	244, 674,
	246, 674,
	247, 674,
	248, 674,
	249, 674,
	251, 674,
	252, 674,
	253, 674,
	254, 674,
	256, 674,
	257, 674,
	258, 674,
	259, 674,
	260, 674,
	262, 674,
	263, 674,
	264, 674,
	265, 674,
	267, 674,
	268, 674,
	269, 674,
	270, 674,
	272, 674,
	273, 674,
	274, 674,
	275, 674,
	276, 674,
	277, 674,
	278, 674,
	279, 674,
	280, 674,
	281, 674,
	283, 674,
	285, 674,
	286, 674,
	287, 674,
	288, 674,
	289, 674,
	290, 674,
	291, 674,
	293, 674,
	294, 674,
	295, 674,
	298, 674,
	299, 674,
	300, 674,
	301, 674,
	303, 674,
	304, 674,
	305, 674,
	306, 674,
	309, 674,
	310, 674,
	311, 674,
	312, 674,
	314, 674,
	316, 674,
	317, 674,
	318, 674,
	319, 674,
	320, 674,
	321, 674,
	324, 674,
	329, 674,
	330, 674,
	331, 674,
	332, 674,
	333, 674,
	-2, 0,
	-1, 116,
	103, 646,
	112, 646,
	153, 646,
	172, 646,
	197, 646,
	203, 646,
	307, 646,
	-2, 639,
	-1, 121,
	1, 574,
	157, 574,
	222, 574,
	226, 574,
	357, 574,
	358, 574,
	-2, 0,
	-1, 123,
	1, 574,
	357, 574,
	358, 574,
	-2, 0,
	-1, 124,
	1, 574,
	357, 574,
	358, 574,
	-2, 0,
	-1, 125,
	1, 578,
	357, 578,
	358, 578,
	-2, 0,
	-1, 132,
	4, 680,
	5, 680,
	6, 680,
	7, 680,
	8, 680,
	9, 680,
	20, 680,
	21, 680,
	23, 680,
	28, 680,
	29, 680,
	33, 680,
	34, 680,
	35, 680,
	36, 680,
	37, 680,
	38, 680,
	39, 680,
	40, 680,
	41, 680,
	42, 680,
	44, 680,
	45, 680,
	46, 680,
	47, 680,
	48, 680,
	49, 680,
	50, 680,
	51, 680,
	52, 680,
	53, 680,
	55, 680,
	56, 680,
	58, 680,
	60, 680,
	61, 680,
	62, 680,
	64, 680,
	66, 680,
	67, 680,
	68, 680,
	70, 680,
	71, 680,
	72, 680,
	73, 680,
	75, 680,
	76, 680,
	77, 680,
	79, 680,
	80, 680,
	81, 680,
	82, 680,
	83, 680,
	84, 680,
	85, 680,
	86, 680,
	87, 680,
	88, 680,
	90, 680,
	92, 680,
	94, 680,
	97, 680,
	98, 680,
	100, 680,
	104, 680,
	105, 680,
	106, 680,
	107, 680,
	108, 680,
	109, 680,
	110, 680,
	113, 680,
	114, 680,
	115, 680,
	116, 680,
	117, 680,
	119, 680,
	121, 680,
	124, 680,
	126, 680,
	127, 680,
	129, 680,
	132, 680,
	133, 680,
	134, 680,
	135, 680,
	136, 680,
	137, 680,
	138, 680,
	140, 680,
	142, 680,
	144, 680,
	145, 680,
	146, 680,
	147, 680,
	148, 680,
	149, 680,
	150, 680,
	151, 680,
	152, 680,
	154, 680,
	156, 680,
	157, 680,
	158, 680,
	159, 680,
	160, 680,
	161, 680,
	162, 680,
	163, 680,
	165, 680,
	166, 680,
	168, 680,
	169, 680,
	170, 680,
	171, 680,
	173, 680,
	176, 680,
	178, 680,
	179, 680,
	180, 680,
	181, 680,
	182, 680,
	183, 680,
	184, 680,
	185, 680,
	186, 680,
	187, 680,
	188, 680,
	189, 680,
	191, 680,
	192, 680,
	193, 680,
	194, 680,
	195, 680,
	196, 680,
	198, 680,
	201, 680,
	204, 680,
	205, 680,
	206, 680,
	207, 680,
	208, 680,
	209, 680,
	210, 680,
	211, 680,
	212, 680,
	213, 680,
	214, 680,
	216, 680,
	217, 680,
	218, 680,
	219, 680,
	220, 680,
	222, 680,
	223, 680,
	224, 680,
	225, 680,
	226, 680,
	227, 680,
	228, 680,
	229, 680,
	231, 680,
	232, 680,
	233, 680,
	234, 680,
	235, 680,
	236, 680,
	237, 680,
	238, 680,
	239, 680,
	240, 680,
	241, 680,
	242, 680,
	244, 680,
	245, 680,
	246, 680,
	247, 680,
	248, 680,
	249, 680,
	251, 680,
	252, 680,
	253, 680,
	254, 680,
	256, 680,
	257, 680,
	258, 680,
	259, 680,
	260, 680,
	261, 680,
	262, 680,
	263, 680,
	264, 680,
	265, 680,
	266, 680,
	267, 680,
	268, 680,
	269, 680,
	270, 680,
	272, 680,
	273, 680,
	274, 680,
	275, 680,
	276, 680,
	277, 680,
	278, 680,
	279, 680,
	280, 680,
	281, 680,
	283, 680,
	285, 680,
	286, 680,
	287, 680,
	288, 680,
	289, 680,
	290, 680,
	291, 680,
	293, 680,
	294, 680,
	295, 680,
	298, 680,
	299, 680,
	300, 680,
	301, 680,
	302, 680,
	303, 680,
	304, 680,
	305, 680,
	306, 680,
	309, 680,
	310, 680,
	311, 680,
	312, 680,
	313, 680,
	314, 680,
	316, 680,
	317, 680,
	318, 680,
	319, 680,
	320, 680,
	321, 680,
	324, 680,
	329, 680,
	330, 680,
	331, 680,
	332, 680,
	333, 680,
	334, 680,
	340, 680,
	345, 680,
	346, 680,
	347, 680,
	354, 680,
	360, 680,
	-2, 0,
	-1, 135,
	1, 53,
	358, 53,
	-2, 672,
	-1, 494,
	123, 1271,
	296, 1271,
	339, 1271,
	356, 1271,
	-2, 0,
	-1, 495,
	123, 1224,
	296, 1224,
	339, 1224,
	356, 1224,
	-2, 0,
	-1, 497,
	123, 1329,
	296, 1329,
	339, 1329,
	356, 1329,
	-2, 0,
	-1, 499,
	123, 1351,
	296, 1351,
	339, 1351,
	356, 1351,
	-2, 0,
	-1, 506,
	123, 1276,
	296, 1276,
	339, 1276,
	356, 1276,
	-2, 317,
	-1, 532,
	1, 394,
	353, 394,
	355, 394,
	357, 394,
	358, 394,
	-2, 0,
	-1, 533,
	1, 441,
	120, 441,
	353, 441,
	355, 441,
	357, 441,
	358, 441,
	-2, 0,
	-1, 539,
	1, 408,
	353, 408,
	355, 408,
	357, 408,
	358, 408,
	-2, 0,
	-1, 541,
	1, 412,
	353, 412,
	355, 412,
	357, 412,
	358, 412,
	-2, 0,
	-1, 544,
	1, 420,
	353, 420,
	355, 420,
	357, 420,
	358, 420,
	-2, 0,
	-1, 545,
	1, 425,
	353, 425,
	355, 425,
	357, 425,
	358, 425,
	-2, 0,
	-1, 548,
	1, 435,
	353, 435,
	355, 435,
	357, 435,
	358, 435,
	-2, 0,
	-1, 562,
	112, 682,
	172, 682,
	197, 682,
	-2, 642,
	-1, 565,
	112, 681,
	172, 681,
	197, 681,
	-2, 640,
	-1, 622,
	354, 1202,
	-2, 1195,
	-1, 623,
	354, 1203,
	-2, 1196,
	-1, 629,
	5, 857,
	354, 857,
	-2, 1402,
	-1, 654,
	5, 816,
	-2, 1372,
	-1, 655,
	5, 851,
	354, 851,
	-2, 1374,
	-1, 656,
	5, 826,
	-2, 1375,
	-1, 657,
	5, 825,
	-2, 1376,
	-1, 658,
	5, 851,
	354, 851,
	-2, 1379,
	-1, 659,
	5, 851,
	354, 851,
	-2, 1380,
	-1, 660,
	5, 852,
	-2, 1383,
	-1, 661,
	5, 808,
	-2, 1384,
	-1, 662,
	5, 808,
	-2, 1385,
	-1, 663,
	5, 833,
	-2, 1389,
	-1, 664,
	5, 818,
	-2, 1390,
	-1, 665,
	5, 819,
	-2, 1391,
	-1, 666,
	5, 809,
	-2, 1396,
	-1, 667,
	5, 810,
	-2, 1397,
	-1, 668,
	5, 811,
	-2, 1398,
	-1, 669,
	5, 812,
	-2, 1399,
	-1, 670,
	5, 813,
	-2, 1400,
	-1, 671,
	5, 814,
	-2, 1401,
	-1, 672,
	5, 808,
	-2, 1406,
	-1, 673,
	5, 817,
	-2, 1411,
	-1, 674,
	5, 815,
	-2, 1414,
	-1, 675,
	5, 849,
	354, 849,
	-2, 1416,
	-1, 676,
	5, 853,
	-2, 1419,
	-1, 677,
	5, 855,
	-2, 1420,
	-1, 678,
	5, 848,
	354, 848,
	-2, 1425,
	-1, 773,
	213, 670,
	-2, 518,
	-1, 777,
	199, 1199,
	-2, 0,
	-1, 812,
	1, 208,
	353, 208,
	355, 208,
	357, 208,
	358, 208,
	-2, 645,
	-1, 819,
	4, 1424,
	10, 1424,
	11, 1424,
	13, 1424,
	14, 1424,
	15, 1424,
	16, 1424,
	17, 1424,
	18, 1424,
	20, 1424,
	21, 1424,
	23, 1424,
	26, 1424,
	28, 1424,
	30, 1424,
	33, 1424,
	34, 1424,
	35, 1424,
	36, 1424,
	37, 1424,
	38, 1424,
	39, 1424,
	40, 1424,
	41, 1424,
	42, 1424,
	44, 1424,
	45, 1424,
	46, 1424,
	47, 1424,
	48, 1424,
	51, 1424,
	52, 1424,
	53, 1424,
	55, 1424,
	56, 1424,
	57, 1424,
	60, 1424,
	61, 1424,
	62, 1424,
	63, 1424,
	64, 1424,
	66, 1424,
	67, 1424,
	68, 1424,
	70, 1424,
	71, 1424,
	72, 1424,
	73, 1424,
	81, 1424,
	82, 1424,
	83, 1424,
	84, 1424,
	85, 1424,
	86, 1424,
	87, 1424,
	88, 1424,
	90, 1424,
	92, 1424,
	94, 1424,
	97, 1424,
	98, 1424,
	100, 1424,
	104, 1424,
	105, 1424,
	106, 1424,
	107, 1424,
	108, 1424,
	109, 1424,
	113, 1424,
	114, 1424,
	115, 1424,
	116, 1424,
	117, 1424,
	118, 1424,
	119, 1424,
	121, 1424,
	124, 1424,
	126, 1424,
	127, 1424,
	129, 1424,
	132, 1424,
	133, 1424,
	134, 1424,
	135, 1424,
	136, 1424,
	137, 1424,
	138, 1424,
	139, 1424,
	140, 1424,
	142, 1424,
	144, 1424,
	145, 1424,
	146, 1424,
	147, 1424,
	148, 1424,
	149, 1424,
	150, 1424,
	151, 1424,
	152, 1424,
	154, 1424,
	156, 1424,
	157, 1424,
	158, 1424,
	159, 1424,
	160, 1424,
	161, 1424,
	162, 1424,
	163, 1424,
	165, 1424,
	166, 1424,
	168, 1424,
	169, 1424,
	170, 1424,
	171, 1424,
	173, 1424,
	176, 1424,
	177, 1424,
	178, 1424,
	179, 1424,
	180, 1424,
	181, 1424,
	182, 1424,
	183, 1424,
	184, 1424,
	185, 1424,
	186, 1424,
	187, 1424,
	188, 1424,
	192, 1424,
	193, 1424,
	194, 1424,
	195, 1424,
	196, 1424,
	198, 1424,
	201, 1424,
	202, 1424,
	204, 1424,
	205, 1424,
	207, 1424,
	209, 1424,
	210, 1424,
	211, 1424,
	212, 1424,
	213, 1424,
	214, 1424,
	216, 1424,
	217, 1424,
	218, 1424,
	219, 1424,
	220, 1424,
	222, 1424,
	223, 1424,
	224, 1424,
	225, 1424,
	226, 1424,
	227, 1424,
	228, 1424,
	229, 1424,
	231, 1424,
	232, 1424,
	233, 1424,
	234, 1424,
	235, 1424,
	236, 1424,
	237, 1424,
	238, 1424,
	239, 1424,
	240, 1424,
	241, 1424,
	242, 1424,
	244, 1424,
	245, 1424,
	246, 1424,
	247, 1424,
	248, 1424,
	249, 1424,
	250, 1424,
	251, 1424,
	252, 1424,
	253, 1424,
	254, 1424,
	256, 1424,
	257, 1424,
	258, 1424,
	259, 1424,
	260, 1424,
	262, 1424,
	263, 1424,
	264, 1424,
	265, 1424,
	266, 1424,
	267, 1424,
	268, 1424,
	269, 1424,
	270, 1424,
	272, 1424,
	273, 1424,
	274, 1424,
	275, 1424,
	276, 1424,
	277, 1424,
	278, 1424,
	279, 1424,
	280, 1424,
	281, 1424,
	283, 1424,
	285, 1424,
	286, 1424,
	287, 1424,
	288, 1424,
	289, 1424,
	290, 1424,
	291, 1424,
	293, 1424,
	294, 1424,
	295, 1424,
	298, 1424,
	299, 1424,
	300, 1424,
	301, 1424,
	303, 1424,
	304, 1424,
	305, 1424,
	306, 1424,
	309, 1424,
	310, 1424,
	311, 1424,
	312, 1424,
	314, 1424,
	316, 1424,
	317, 1424,
	318, 1424,
	319, 1424,
	320, 1424,
	321, 1424,
	324, 1424,
	329, 1424,
	330, 1424,
	331, 1424,
	332, 1424,
	333, 1424,
	334, 1424,
	335, 1424,
	337, 1424,
	338, 1424,
	339, 1424,
	340, 1424,
	342, 1424,
	343, 1424,
	344, 1424,
	345, 1424,
	346, 1424,
	347, 1424,
	348, 1424,
	349, 1424,
	350, 1424,
	352, 1424,
	355, 1424,
	356, 1424,
	359, 1424,
	360, 1424,
	-2, 0,
	-1, 833,
	123, 1329,
	296, 1329,
	339, 1329,
	356, 1329,
	-2, 0,
	-1, 850,
	123, 1351,
	296, 1351,
	339, 1351,
	356, 1351,
	-2, 0,
	-1, 920,
	112, 681,
	172, 681,
	197, 681,
	-2, 643,
	-1, 989,
	103, 647,
	112, 647,
	153, 647,
	172, 647,
	197, 647,
	203, 647,
	307, 647,
	-2, 976,
	-1, 999,
	354, 1179,
	-2, 1167,
	-1, 1017,
	355, 1119,
	-2, 0,
	-1, 1073,
	103, 647,
	112, 647,
	153, 647,
	172, 647,
	197, 647,
	203, 647,
	307, 647,
	-2, 743,
	-1, 1393,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 892,
	-1, 1394,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 893,
	-1, 1395,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 894,
	-1, 1399,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 898,
	-1, 1400,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 899,
	-1, 1401,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 900,
	-1, 1404,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 905,
	-1, 1410,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 907,
	-1, 1412,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 911,
	-1, 1413,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 912,
	-1, 1414,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 913,
	-1, 1415,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 914,
	-1, 1441,
	208, 1061,
	-2, 1064,
	-1, 1485,
	123, 1101,
	354, 1202,
	-2, 1195,
	-1, 1486,
	123, 1102,
	-2, 1368,
	-1, 1487,
	123, 1103,
	-2, 1275,
	-1, 1488,
	123, 1104,
	-2, 1239,
	-1, 1489,
	123, 1105,
	-2, 1255,
	-1, 1490,
	123, 1106,
	-2, 1274,
	-1, 1491,
	123, 1107,
	-2, 1326,
	-1, 1567,
	1, 744,
	70, 744,
	103, 744,
	112, 744,
	124, 744,
	128, 744,
	130, 744,
	144, 744,
	153, 744,
	160, 744,
	169, 744,
	172, 744,
	184, 744,
	197, 744,
	199, 744,
	203, 744,
	243, 744,
	245, 744,
	307, 744,
	315, 744,
	326, 744,
	327, 744,
	336, 744,
	353, 744,
	355, 744,
	357, 744,
	358, 744,
	359, 744,
	-2, 743,
	-1, 1707,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 906,
	-1, 1708,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 908,
	-1, 1713,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 909,
	-1, 1731,
	208, 1060,
	-2, 1063,
	-1, 1956,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 910,
	-1, 1961,
	156, 0,
	-2, 926,
	-1, 1971,
	208, 1062,
	-2, 1065,
	-1, 2013,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 953,
	-1, 2014,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 954,
	-1, 2015,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 955,
	-1, 2019,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 959,
	-1, 2020,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 960,
	-1, 2021,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 961,
	-1, 2146,
	156, 0,
	-2, 927,
	-1, 2149,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 930,
	-1, 2150,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 932,
	-1, 2266,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 931,
	-1, 2267,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 933,
	-1, 2274,
	156, 0,
	-2, 962,
	-1, 2351,
	156, 0,
	-2, 963,
	-1, 2428,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1371,
}

const sqlPrivate = 57344

const sqlLast = 41015

var sqlAct = [...]int{

	623, 2427, 2436, 2300, 2475, 1630, 2102, 2402, 2437, 1938,
	2438, 1197, 1990, 566, 2356, 1638, 1290, 2247, 2426, 1610,
	582, 70, 1701, 2112, 2073, 2200, 1289, 1204, 2214, 2134,
	599, 725, 1904, 1239, 621, 613, 2136, 620, 871, 767,
	173, 2280, 1562, 1614, 173, 2074, 2180, 1609, 1906, 1067,
	1627, 1845, 173, 1797, 2128, 1824, 1071, 1200, 1912, 1639,
	1563, 173, 1613, 1580, 1571, 2044, 173, 173, 1050, 1465,
	173, 1439, 437, 173, 1832, 1742, 1102, 1603, 1372, 1796,
	995, 173, 1367, 1697, 1193, 923, 854, 1079, 1449, 1081,
	505, 1685, 574, 115, 1076, 1320, 452, 25, 1427, 1316,
	1051, 1424, 1611, 1217, 802, 853, 434, 1459, 731, 873,
	813, 799, 1632, 1617, 734, 1514, 1549, 1058, 1536, 713,
	1027, 1481, 1031, 792, 984, 116, 592, 173, 173, 924,
	117, 615, 1319, 485, 922, 173, 1041, 164, 463, 498,
	571, 1211, 789, 169, 711, 1040, 2215, 526, 928, 2058,
	1730, 1631, 2059, 857, 115, 2471, 1219, 1219, 1219, 1101,
	1240, 173, 173, 173, 173, 1068, 2452, 1954, 173, 173,
	2213, 570, 2448, 939, 940, 2447, 1653, 39, 2444, 1653,
	570, 2424, 1101, 2423, 1921, 1668, 1922, 1668, 755, 1538,
	42, 2397, 1098, 565, 2392, 1661, 942, 2388, 2261, 2380,
	1653, 1101, 2353, 2213, 477, 2331, 1661, 2398, 2328, 2213,
	2326, 681, 1101, 2311, 2213, 2310, 580, 1101, 858, 2213,
	941, 2288, 859, 2285, 1604, 1101, 2268, 1101, 115, 728,
	1661, 2235, 25, 2233, 2212, 1653, 2193, 1653, 2213, 2173,
	1101, 563, 1734, 1653, 502, 2151, 562, 2047, 1735, 1653,
	939, 940, 174, 959, 960, 961, 969, 970, 971, 2148,
	2127, 2122, 1668, 1661, 1608, 1608, 962, 575, 749, 739,
	743, 2054, 715, 942, 1965, 2055, 973, 63, 1653, 1932,
	1893, 947, 1848, 1894, 1101, 1821, 1653, 1814, 1812, 1101,
	1811, 1815, 1653, 2261, 1653, 1767, 1768, 941, 1785, 1786,
	1787, 1810, 1733, 956, 2047, 1653, 1731, 1604, 1653, 1672,
	1653, 2145, 717, 1653, 718, 939, 940, 1537, 959, 960,
	961, 969, 970, 971, 1660, 1652, 1949, 1653, 1661, 1653,
	1668, 962, 1569, 1607, 2026, 1543, 1741, 1608, 942, 1542,
	957, 973, 939, 940, 1968, 1101, 1894, 1700, 1782, 1220,
	1220, 1220, 1232, 1683, 1045, 1297, 1233, 64, 947, 1443,
	753, 1635, 941, 835, 135, 942, 2216, 832, 956, 1317,
	831, 132, 830, 1517, 829, 828, 827, 826, 966, 974,
	825, 824, 119, 66, 823, 67, 822, 821, 719, 941,
	716, 558, 557, 556, 524, 616, 972, 523, 132, 173,
	134, 173, 173, 1773, 173, 458, 1767, 1768, 99, 173,
	522, 964, 521, 958, 520, 173, 519, 957, 518, 517,
	1840, 516, 1921, 947, 515, 1537, 514, 134, 173, 173,
	173, 173, 173, 939, 940, 513, 133, 816, 1462, 512,
	511, 1788, 963, 966, 974, 510, 509, 508, 493, 573,
	947, 806, 492, 491, 490, 489, 942, 425, 571, 173,
	424, 972, 1783, 133, 423, 2254, 1478, 1225, 1218, 1351,
	118, 126, 173, 1767, 1768, 422, 964, 421, 127, 406,
	941, 405, 957, 397, 396, 1463, 395, 394, 173, 771,
	958, 387, 775, 939, 940, 386, 158, 118, 173, 157,
	1476, 156, 155, 154, 153, 152, 967, 963, 943, 944,
	945, 946, 948, 949, 1773, 151, 942, 150, 795, 795,
	1236, 149, 148, 791, 147, 146, 145, 132, 144, 816,
	143, 1464, 1461, 142, 141, 1784, 140, 139, 138, 766,
	941, 947, 137, 136, 759, 869, 814, 1323, 1072, 1474,
	866, 1472, 796, 2470, 2443, 958, 134, 2425, 2407, 2348,
	173, 2329, 836, 2179, 2178, 2174, 2166, 679, 935, 2165,
	2164, 967, 2160, 1783, 965, 2159, 921, 953, 954, 955,
	968, 1773, 952, 950, 951, 943, 944, 945, 946, 948,
	949, 2158, 133, 1767, 1768, 1003, 132, 2157, 2133, 2175,
	126, 947, 864, 2041, 2036, 2035, 1466, 127, 2034, 1976,
	1892, 1896, 1852, 1819, 1816, 1804, 1795, 1766, 1763, 571,
	2253, 1435, 1779, 1780, 1781, 134, 1634, 1778, 1776, 1777,
	1769, 1770, 1771, 1772, 1774, 1775, 851, 848, 920, 965,
	764, 1762, 953, 954, 955, 968, 1784, 952, 950, 951,
	943, 944, 945, 946, 948, 949, 1760, 1747, 1746, 1567,
	957, 133, 935, 1070, 1809, 759, 934, 726, 919, 126,
	1069, 996, 1203, 987, 1992, 867, 127, 943, 944, 945,
	946, 948, 949, 2415, 1460, 2383, 1907, 2377, 2376, 817,
	2375, 2367, 2365, 2343, 2342, 118, 2341, 2297, 2276, 2262,
	563, 1773, 132, 2241, 2219, 562, 1666, 1318, 1696, 2171,
	2110, 173, 2108, 173, 2107, 2105, 1695, 931, 932, 2082,
	2081, 2062, 2050, 1960, 936, 1883, 1878, 1436, 1936, 1865,
	1864, 134, 1850, 958, 1820, 1794, 173, 173, 1778, 1776,
	1777, 1769, 1770, 1771, 1772, 1774, 1775, 1756, 1056, 1755,
	1049, 1752, 1727, 816, 173, 999, 1722, 571, 1429, 1032,
	1105, 1035, 1554, 1526, 1470, 1196, 173, 133, 1838, 1099,
	945, 946, 948, 949, 727, 126, 1048, 2359, 173, 1029,
	1030, 817, 127, 1039, 173, 1033, 173, 1202, 173, 1025,
	1054, 1024, 173, 1023, 1022, 1036, 1021, 1020, 939, 940,
	1019, 118, 1018, 1017, 1016, 1237, 1195, 1015, 1769, 1770,
	1771, 1772, 1774, 1775, 1014, 1013, 1012, 863, 2260, 1477,
	1011, 942, 1010, 115, 1865, 952, 950, 951, 943, 944,
	945, 946, 948, 949, 173, 173, 1208, 1066, 1009, 1008,
	1007, 816, 1000, 173, 1044, 941, 173, 1042, 988, 987,
	1074, 847, 2153, 1475, 839, 810, 2132, 1046, 2057, 2053,
	1663, 1555, 996, 1934, 985, 1767, 1768, 1105, 1070, 2264,
	1089, 765, 1671, 939, 940, 2263, 173, 2257, 2060, 1923,
	1604, 173, 1304, 1037, 1818, 680, 173, 173, 1038, 173,
	1087, 173, 791, 173, 1072, 173, 942, 1100, 1817, 1706,
	1222, 917, 1473, 1224, 1471, 860, 173, 1227, 1088, 1005,
	1939, 2281, 173, 173, 1201, 1670, 1738, 1631, 1993, 1450,
	941, 1028, 911, 1917, 1767, 1768, 1210, 2069, 2410, 1213,
	1771, 1772, 1774, 1775, 1082, 628, 1083, 1657, 173, 2467,
	2468, 2387, 1105, 1324, 1002, 1946, 2227, 1767, 1768, 411,
	1785, 1786, 1787, 1673, 608, 2321, 1573, 1298, 708, 2320,
	2319, 912, 2093, 1767, 1768, 1070, 1325, 569, 2318, 706,
	704, 991, 1234, 848, 1235, 903, 702, 2097, 2238, 1581,
	1291, 947, 2095, 399, 2066, 2065, 1751, 1295, 1750, 1749,
	861, 1462, 1309, 115, 170, 1321, 1748, 1709, 392, 1656,
	1782, 1600, 412, 1596, 818, 817, 407, 1339, 1594, 571,
	1354, 1084, 1106, 1305, 571, 432, 1782, 568, 1381, 727,
	475, 170, 1350, 1332, 483, 699, 1411, 488, 1043, 752,
	1530, 1573, 1773, 862, 1529, 507, 1382, 1572, 1463, 1195,
	957, 1628, 1349, 1348, 173, 2100, 173, 1584, 2101, 173,
	1889, 1277, 560, 1353, 563, 1773, 1352, 563, 563, 1363,
	173, 2386, 1364, 1365, 403, 1426, 1426, 570, 1535, 1105,
	1191, 1773, 173, 2421, 1935, 2084, 173, 1447, 1082, 173,
	1083, 714, 714, 173, 1464, 1461, 472, 173, 1214, 392,
	1292, 1783, 173, 817, 2302, 897, 818, 571, 173, 1105,
	1373, 1380, 173, 1308, 1307, 1466, 1317, 1314, 1437, 1434,
	1328, 426, 938, 958, 1783, 392, 392, 747, 392, 1106,
	1914, 2459, 170, 756, 1556, 1329, 1574, 1698, 1699, 1433,
	1783, 1333, 898, 1334, 1431, 1335, 1492, 1336, 949, 1337,
	1767, 1768, 1450, 1986, 586, 1557, 1583, 1298, 1585, 1587,
	2370, 1277, 1277, 2483, 1546, 1084, 1343, 1345, 2467, 1466,
	1885, 1947, 1767, 1768, 1784, 1533, 159, 414, 413, 1880,
	846, 567, 1219, 1541, 1092, 1602, 1090, 1532, 1547, 1551,
	1552, 1026, 1371, 1664, 1230, 1592, 1347, 1784, 1311, 1945,
	1074, 1598, 430, 2091, 1106, 1590, 1577, 173, 1983, 1915,
	1595, 2394, 1601, 1784, 173, 1775, 950, 951, 943, 944,
	945, 946, 948, 949, 1082, 173, 1083, 173, 1466, 173,
	1623, 1293, 173, 857, 173, 2395, 173, 173, 2272, 173,
	173, 1085, 916, 1582, 816, 1246, 982, 1460, 173, 2085,
	2325, 1550, 2458, 1914, 1984, 1754, 1566, 162, 1773, 1651,
	429, 570, 710, 1283, 2140, 709, 1313, 1776, 1777, 1769,
	1770, 1771, 1772, 1774, 1775, 398, 700, 700, 1570, 876,
	1773, 902, 1312, 701, 1779, 1780, 1781, 2439, 2466, 1778,
	1776, 1777, 1769, 1770, 1771, 1772, 1774, 1775, 858, 404,
	2464, 1084, 859, 1876, 400, 1778, 1776, 1777, 1769, 1770,
	1771, 1772, 1774, 1775, 401, 163, 2303, 1783, 1633, 1645,
	1633, 1659, 795, 388, 795, 1711, 1425, 2246, 1422, 1466,
	818, 1106, 700, 927, 1105, 115, 1637, 1107, 1625, 1783,
	1648, 115, 173, 1420, 561, 1246, 1246, 1408, 1649, 1654,
	1658, 2457, 842, 814, 1655, 1646, 2484, 1647, 173, 173,
	173, 1106, 173, 507, 1665, 773, 507, 1499, 778, 834,
	1888, 420, 1440, 781, 884, 1220, 991, 1667, 471, 392,
	1444, 173, 1327, 937, 1452, 1085, 910, 2313, 1432, 1676,
	1784, 415, 507, 507, 392, 803, 756, 1484, 1484, 1497,
	1678, 1509, 2169, 428, 1033, 2440, 1036, 1521, 1522, 1524,
	1684, 1298, 1784, 1674, 1416, 1096, 1030, 1029, 818, 2312,
	2489, 1679, 1417, 507, 1418, 2295, 2223, 2362, 1423, 2068,
	1861, 1095, 431, 1677, 2022, 1857, 507, 1626, 1209, 1080,
	1057, 845, 427, 115, 1107, 1198, 577, 1982, 551, 1406,
	1409, 1093, 843, 1560, 1318, 1315, 2208, 1688, 160, 2201,
	2403, 571, 507, 1690, 1342, 926, 579, 2199, 1694, 1094,
	1692, 2203, 2478, 1303, 1299, 464, 1740, 1846, 926, 389,
	1719, 868, 1405, 551, 1777, 1769, 1770, 1771, 1772, 1774,
	1775, 2209, 2441, 2113, 1061, 1717, 817, 161, 469, 578,
	877, 579, 2170, 769, 465, 166, 2296, 1769, 1770, 1771,
	1772, 1774, 1775, 2202, 1064, 2248, 1867, 1301, 1712, 1107,
	1710, 1085, 2488, 1296, 392, 925, 2222, 552, 2023, 1302,
	1059, 466, 1359, 1835, 2024, 1419, 571, 878, 925, 1062,
	875, 907, 1421, 1847, 1866, 390, 1545, 1737, 2442, 173,
	1105, 468, 1822, 2226, 1060, 173, 173, 1828, 852, 173,
	2225, 768, 552, 927, 173, 1704, 1714, 173, 1544, 1834,
	857, 885, 788, 1829, 482, 173, 1715, 1407, 568, 777,
	1720, 173, 173, 173, 2239, 416, 1106, 173, 480, 474,
	173, 2204, 2103, 2205, 461, 2293, 173, 173, 173, 173,
	173, 786, 1887, 1360, 2181, 173, 908, 173, 683, 1842,
	2476, 173, 906, 2045, 1469, 1063, 2275, 457, 33, 173,
	2294, 2168, 1841, 2207, 1837, 417, 1827, 553, 2099, 173,
	1858, 173, 2210, 173, 1851, 682, 173, 1801, 1802, 1803,
	173, 464, 1798, 1826, 3, 173, 1107, 173, 1823, 1830,
	1831, 1959, 625, 1836, 173, 418, 1895, 419, 1897, 909,
	2224, 467, 553, 1061, 469, 2477, 571, 173, 816, 1853,
	465, 698, 1890, 754, 757, 488, 1107, 714, 857, 816,
	173, 456, 32, 1064, 1931, 1833, 2479, 1716, 1875, 1761,
	1721, 1669, 455, 29, 1718, 1940, 1606, 466, 1877, 1548,
	392, 392, 1599, 576, 1882, 554, 1919, 1593, 1062, 1468,
	2206, 915, 914, 857, 840, 173, 470, 468, 170, 901,
	895, 1799, 1340, 1899, 1331, 787, 1910, 1006, 1898, 1916,
	392, 1901, 758, 905, 1057, 1276, 2435, 555, 1924, 551,
	554, 2400, 1207, 858, 479, 473, 893, 859, 392, 1862,
	392, 2197, 392, 33, 785, 2089, 1215, 579, 1930, 2087,
	1925, 1926, 2067, 1927, 1928, 173, 1962, 1978, 1979, 1980,
	1944, 1941, 555, 1903, 1629, 1622, 1942, 1943, 858, 1229,
	737, 1228, 859, 1862, 1063, 1245, 1226, 1950, 1061, 1948,
	2208, 1223, 1221, 1952, 1097, 703, 705, 1091, 507, 170,
	1277, 1086, 1106, 891, 1973, 454, 76, 170, 1064, 1905,
	507, 818, 1969, 1725, 889, 2336, 2468, 32, 552, 929,
	1728, 887, 453, 75, 1059, 2209, 1972, 467, 29, 1985,
	1987, 1988, 1933, 1062, 1277, 1276, 1276, 900, 1744, 1745,
	507, 894, 1994, 450, 21, 507, 173, 1996, 1060, 881,
	170, 507, 173, 507, 1999, 507, 2001, 507, 2259, 507,
	2029, 173, 173, 451, 22, 449, 27, 892, 2258, 1322,
	1341, 448, 19, 446, 18, 2129, 507, 507, 447, 17,
	2063, 784, 470, 1277, 2121, 1245, 1245, 2030, 1793, 441,
	14, 2338, 930, 1589, 2056, 442, 15, 440, 13, 722,
	1806, 1107, 507, 2043, 2048, 173, 2098, 173, 459, 1063,
	2079, 2080, 2046, 2078, 173, 2061, 2049, 816, 553, 723,
	817, 2109, 2064, 115, 890, 2204, 2372, 2205, 2216, 1373,
	1997, 817, 173, 173, 2106, 888, 2123, 2071, 1373, 2002,
	2052, 76, 886, 1702, 1277, 445, 11, 439, 9, 879,
	173, 2092, 444, 7, 2126, 2115, 1597, 2207, 75, 2350,
	173, 443, 6, 1573, 2114, 1105, 2210, 2104, 2182, 1588,
	880, 2033, 933, 438, 5, 1591, 2116, 481, 2117, 21,
	1277, 1277, 2118, 2399, 1246, 2088, 2142, 2090, 2125, 1277,
	1277, 2124, 724, 2119, 1573, 2244, 554, 2130, 1636, 22,
	1586, 27, 783, 173, 2147, 1703, 1624, 19, 488, 18,
	714, 1621, 1534, 756, 17, 1294, 1238, 2474, 1246, 2487,
	2287, 1231, 1277, 2187, 392, 14, 2155, 1826, 555, 1767,
	1768, 15, 2131, 13, 1981, 598, 1565, 939, 940, 2042,
	392, 2143, 1900, 392, 2206, 939, 940, 1578, 939, 940,
	1989, 392, 1681, 1680, 1681, 1937, 392, 1843, 173, 1813,
	942, 173, 392, 2167, 1682, 1531, 1605, 1246, 1528, 1527,
	1458, 1105, 173, 173, 993, 1003, 173, 173, 173, 391,
	2185, 11, 1362, 9, 941, 1001, 913, 904, 7, 899,
	896, 882, 2192, 173, 844, 941, 559, 6, 173, 2301,
	173, 462, 173, 173, 173, 2184, 173, 1330, 173, 5,
	816, 1966, 2221, 2186, 2191, 2217, 2220, 1107, 173, 173,
	2188, 2196, 883, 1839, 1553, 816, 2079, 2080, 1246, 2078,
	2393, 2161, 1753, 2355, 2271, 1467, 2237, 2242, 1004, 52,
	2240, 2076, 584, 602, 2198, 2245, 2070, 2189, 1616, 1615,
	2079, 2080, 2183, 2078, 1108, 2079, 2080, 1306, 2078, 624,
	1483, 1612, 1374, 2250, 1246, 1246, 2243, 697, 756, 817,
	732, 1500, 2249, 1246, 1246, 626, 2265, 2251, 2027, 392,
	2270, 1644, 1277, 507, 1243, 627, 507, 1244, 507, 2037,
	392, 392, 2256, 1650, 756, 1034, 741, 745, 614, 751,
	1241, 811, 1578, 1640, 1310, 1430, 1246, 1448, 173, 1736,
	173, 997, 1105, 173, 594, 2277, 606, 1106, 605, 1445,
	838, 173, 593, 1844, 1913, 2252, 1358, 1105, 1693, 2255,
	1355, 1909, 2086, 402, 1764, 818, 2284, 809, 1506, 1498,
	1494, 918, 1055, 983, 1641, 865, 818, 2305, 1920, 1662,
	2307, 2289, 1047, 2286, 1366, 721, 720, 173, 2079, 2080,
	816, 2078, 2094, 1300, 173, 1195, 1675, 2096, 976, 2304,
	975, 707, 173, 173, 816, 816, 2327, 2364, 856, 2322,
	855, 1199, 1860, 2337, 2323, 2482, 2079, 2080, 2291, 2078,
	2346, 2347, 173, 2371, 2335, 2349, 1686, 173, 2334, 2339,
	2083, 2409, 2345, 2306, 173, 131, 128, 2333, 2344, 130,
	129, 1886, 392, 392, 392, 79, 392, 2366, 460, 31,
	2352, 30, 98, 1106, 97, 96, 2360, 95, 94, 173,
	173, 2361, 93, 2369, 92, 392, 173, 91, 461, 2358,
	2379, 90, 2316, 2317, 816, 2382, 2381, 2368, 89, 173,
	88, 2330, 87, 816, 816, 86, 85, 84, 83, 82,
	81, 503, 817, 500, 78, 77, 1246, 28, 24, 2385,
	102, 23, 1056, 571, 74, 73, 173, 817, 173, 2390,
	2391, 173, 2384, 1105, 26, 464, 16, 10, 20, 57,
	58, 56, 55, 1277, 2417, 54, 2416, 2405, 2315, 2418,
	12, 2406, 50, 49, 2422, 47, 46, 45, 469, 173,
	44, 760, 762, 2420, 465, 8, 101, 41, 2419, 40,
	100, 113, 2434, 2433, 2432, 110, 173, 112, 2079, 2080,
	2445, 2078, 173, 109, 2451, 111, 114, 106, 2449, 107,
	2456, 466, 108, 2454, 2455, 2450, 173, 2453, 1279, 1277,
	745, 105, 104, 37, 36, 35, 34, 2465, 2463, 2411,
	2, 468, 1, 2469, 1106, 751, 2472, 0, 0, 2473,
	0, 0, 0, 0, 1276, 1278, 0, 0, 0, 1106,
	0, 0, 2481, 2480, 818, 0, 2486, 0, 0, 2485,
	0, 0, 1242, 0, 0, 837, 0, 0, 1277, 0,
	0, 841, 0, 392, 0, 0, 0, 0, 1276, 392,
	392, 0, 817, 392, 0, 0, 0, 0, 1565, 0,
	0, 1565, 0, 0, 1245, 0, 817, 817, 584, 1849,
	0, 0, 1107, 0, 0, 392, 1855, 1856, 0, 0,
	0, 1578, 0, 0, 1863, 0, 0, 0, 1279, 1279,
	1868, 1869, 1871, 1873, 1874, 0, 0, 1276, 1245, 392,
	0, 1881, 0, 0, 0, 1884, 2283, 0, 0, 0,
	0, 467, 0, 392, 0, 1278, 1278, 1246, 0, 1500,
	1500, 0, 0, 1207, 0, 1207, 0, 507, 0, 0,
	392, 0, 1242, 1242, 1908, 745, 817, 0, 0, 392,
	0, 1918, 0, 2309, 0, 817, 817, 1245, 392, 977,
	978, 979, 980, 981, 0, 0, 0, 0, 1276, 990,
	0, 1686, 0, 0, 939, 940, 470, 0, 0, 998,
	0, 0, 0, 1246, 1686, 1106, 0, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 942, 0, 0,
	0, 0, 0, 0, 1276, 1276, 1500, 1500, 1500, 0,
	0, 0, 0, 1276, 1276, 939, 940, 0, 1245, 392,
	0, 941, 0, 0, 0, 0, 0, 818, 0, 0,
	0, 0, 1246, 0, 0, 0, 0, 0, 942, 0,
	0, 0, 818, 603, 71, 0, 1276, 0, 0, 0,
	0, 0, 0, 0, 1245, 1245, 0, 0, 0, 0,
	0, 0, 941, 1245, 1245, 0, 0, 0, 956, 1991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 947, 0, 2396, 0, 0, 0, 0, 0,
	0, 0, 1052, 1052, 0, 0, 1245, 0, 0, 584,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 2412,
	2413, 2414, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 732, 1077, 947, 0, 0, 0, 0, 0, 1107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 1723, 1724, 1107, 0, 0, 0, 0, 0,
	392, 1194, 0, 0, 0, 0, 1565, 0, 0, 564,
	0, 0, 572, 0, 0, 756, 1565, 0, 0, 745,
	0, 1212, 0, 1212, 0, 0, 0, 818, 733, 71,
	2075, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	0, 818, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1276, 0, 0, 1578,
	0, 1207, 0, 0, 958, 1500, 1500, 0, 2111, 1790,
	1791, 1792, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 584, 0, 392, 392, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2137, 958, 1245, 0, 0, 0,
	0, 818, 0, 0, 2139, 0, 0, 0, 0, 0,
	818, 818, 0, 0, 1500, 1500, 1500, 1500, 1500, 1500,
	1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
	1500, 1500, 1500, 0, 1500, 0, 0, 1356, 0, 1361,
	1107, 0, 0, 0, 0, 1368, 0, 2162, 951, 943,
	944, 945, 946, 948, 949, 1383, 1384, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 0, 1410, 0,
	1412, 1413, 1414, 1415, 0, 0, 0, 952, 950, 951,
	943, 944, 945, 946, 948, 949, 0, 1438, 0, 0,
	0, 0, 392, 0, 990, 756, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1565, 756, 0, 0,
	2194, 2195, 1578, 1479, 1480, 0, 0, 1496, 0, 1508,
	1510, 1515, 1518, 1519, 1520, 0, 2075, 756, 0, 0,
	0, 0, 2228, 0, 2229, 0, 392, 2231, 2232, 0,
	392, 0, 2236, 0, 0, 0, 0, 1276, 0, 0,
	2075, 0, 756, 1612, 0, 2075, 0, 0, 1957, 1958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 732, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 0, 1568, 0, 0, 1245, 0, 0,
	0, 0, 745, 1276, 0, 0, 0, 745, 0, 0,
	572, 0, 0, 751, 0, 0, 0, 2003, 2004, 2005,
	2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015,
	2016, 2017, 2018, 2019, 2020, 2021, 0, 2025, 0, 0,
	0, 0, 1578, 0, 2290, 0, 0, 2292, 0, 0,
	0, 0, 1276, 1245, 0, 392, 0, 0, 2075, 0,
	0, 0, 0, 0, 0, 0, 0, 1279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2324, 0, 0, 2075, 0, 0, 0,
	0, 392, 0, 0, 1278, 0, 0, 0, 756, 0,
	0, 1279, 1245, 0, 0, 0, 2137, 2137, 0, 0,
	0, 1242, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2357, 0, 1278, 0,
	1642, 1565, 0, 0, 0, 0, 0, 0, 1207, 0,
	0, 751, 751, 0, 0, 1242, 0, 0, 564, 0,
	1279, 38, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 39, 2373, 2374, 0, 0, 0, 0, 986,
	392, 989, 0, 0, 0, 42, 0, 1278, 994, 0,
	0, 0, 0, 2389, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1242, 0, 0, 48, 0, 0,
	0, 0, 0, 1500, 0, 0, 0, 0, 0, 0,
	2404, 1279, 756, 0, 0, 392, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 2075, 0,
	0, 0, 0, 60, 0, 61, 0, 0, 1278, 0,
	0, 0, 0, 2357, 1500, 0, 0, 1279, 1279, 0,
	0, 0, 0, 0, 0, 1242, 1279, 1279, 0, 0,
	756, 0, 63, 1689, 751, 1691, 392, 745, 0, 0,
	0, 0, 0, 0, 1278, 1278, 0, 0, 0, 0,
	2462, 0, 0, 1278, 1278, 0, 1705, 0, 0, 1279,
	0, 1242, 1242, 0, 0, 0, 0, 0, 0, 0,
	1242, 1242, 0, 0, 71, 0, 0, 1707, 1708, 1073,
	1500, 0, 0, 1713, 0, 0, 1278, 0, 939, 940,
	0, 959, 960, 961, 969, 970, 971, 0, 0, 0,
	0, 0, 1726, 1242, 0, 0, 0, 0, 0, 0,
	0, 942, 64, 0, 973, 1732, 0, 0, 0, 0,
	0, 0, 1739, 0, 0, 1743, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 119, 66, 0,
	67, 956, 1757, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 1687, 0, 0,
	458, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 990, 0, 0, 0,
	0, 0, 134, 1515, 1515, 1515, 2274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 947, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1052,
	0, 0, 0, 0, 584, 0, 966, 974, 133, 1279,
	0, 0, 0, 0, 732, 0, 126, 2298, 0, 0,
	732, 732, 0, 127, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 1278, 0, 0, 964,
	0, 0, 118, 0, 0, 957, 1854, 0, 0, 0,
	0, 0, 0, 1242, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 0, 0, 564, 564, 0, 0, 0,
	1879, 0, 0, 0, 38, 0, 0, 0, 0, 0,
	0, 0, 0, 2351, 1891, 39, 0, 0, 0, 0,
	0, 0, 0, 1911, 0, 0, 0, 0, 42, 0,
	0, 1902, 0, 0, 0, 0, 0, 0, 1428, 0,
	1194, 0, 0, 0, 0, 1929, 0, 0, 958, 1194,
	48, 572, 0, 0, 0, 0, 989, 0, 0, 0,
	0, 0, 584, 584, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 0, 59,
	0, 0, 0, 0, 0, 0, 60, 1951, 61, 0,
	0, 0, 1368, 0, 0, 0, 0, 0, 1955, 0,
	0, 1956, 0, 0, 0, 0, 0, 0, 0, 0,
	1953, 0, 0, 1961, 0, 63, 0, 0, 0, 0,
	0, 0, 1970, 733, 0, 0, 0, 0, 0, 0,
	1974, 0, 965, 1929, 0, 953, 954, 955, 968, 1073,
	952, 950, 951, 943, 944, 945, 946, 948, 949, 0,
	1279, 0, 71, 1998, 0, 0, 0, 2000, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2031, 2032, 0, 0, 1242, 64, 0, 0, 0, 2038,
	2039, 2040, 0, 0, 0, 0, 1279, 0, 0, 0,
	0, 939, 940, 0, 959, 960, 961, 969, 970, 971,
	119, 66, 0, 67, 0, 0, 2051, 962, 0, 0,
	0, 0, 0, 1278, 942, 0, 132, 973, 0, 0,
	1338, 732, 0, 458, 0, 0, 99, 0, 0, 0,
	1242, 0, 0, 0, 0, 1279, 2072, 0, 941, 0,
	0, 0, 0, 0, 956, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 71, 0, 0,
	0, 0, 1278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 1242,
	0, 133, 71, 0, 0, 0, 1052, 0, 0, 126,
	0, 0, 0, 0, 0, 584, 127, 0, 0, 947,
	0, 0, 0, 0, 0, 0, 0, 1642, 732, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 966,
	974, 0, 939, 940, 0, 959, 960, 961, 969, 970,
	971, 2146, 0, 0, 0, 2149, 2150, 972, 962, 0,
	2152, 0, 0, 0, 0, 942, 0, 2154, 973, 2156,
	0, 0, 964, 0, 0, 0, 0, 0, 957, 0,
	0, 0, 0, 0, 0, 2163, 0, 0, 0, 941,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 963, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	947, 958, 0, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 0, 2218,
	966, 974, 0, 1428, 0, 0, 939, 940, 0, 959,
	960, 961, 969, 970, 971, 0, 0, 0, 972, 0,
	0, 0, 962, 989, 0, 0, 0, 2230, 0, 942,
	0, 2234, 973, 964, 0, 0, 0, 0, 0, 957,
	0, 0, 0, 0, 0, 1065, 0, 1767, 1768, 0,
	1785, 1786, 1787, 941, 0, 0, 0, 0, 0, 956,
	0, 38, 0, 2144, 963, 965, 2266, 2267, 953, 954,
	955, 968, 39, 952, 950, 951, 943, 944, 945, 946,
	948, 949, 0, 0, 0, 42, 0, 0, 0, 0,
	1808, 0, 0, 0, 0, 0, 0, 2279, 989, 0,
	1782, 0, 0, 2282, 0, 0, 0, 48, 0, 0,
	0, 0, 958, 0, 947, 0, 0, 0, 0, 0,
	0, 1767, 1768, 0, 1785, 1786, 1787, 0, 967, 0,
	0, 0, 733, 0, 966, 974, 59, 1964, 733, 733,
	0, 0, 733, 60, 0, 61, 2299, 2314, 0, 0,
	0, 0, 972, 0, 0, 1773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 964, 0, 0,
	0, 0, 63, 957, 1782, 0, 0, 0, 0, 0,
	0, 0, 2332, 0, 0, 71, 0, 0, 0, 0,
	0, 71, 0, 1788, 0, 0, 965, 0, 963, 953,
	954, 955, 968, 0, 952, 950, 951, 943, 944, 945,
	946, 948, 949, 0, 1783, 71, 0, 0, 71, 2363,
	0, 1807, 0, 0, 0, 0, 0, 0, 572, 1773,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 2378, 967, 584, 0, 0, 0, 1788, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 66, 0,
	67, 0, 0, 0, 0, 0, 0, 1784, 1783, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	458, 0, 0, 99, 0, 0, 2408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2431, 2431, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 2446, 953, 954, 955, 968, 0, 952, 950,
	951, 943, 944, 945, 946, 948, 949, 0, 0, 0,
	2431, 0, 0, 0, 0, 1759, 0, 1642, 133, 0,
	0, 1784, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 127, 1779, 1780, 1781, 0, 0, 1778,
	1776, 1777, 1769, 1770, 1771, 1772, 1774, 1775, 0, 0,
	0, 0, 118, 0, 0, 0, 2431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1779, 1780,
	1781, 0, 0, 1778, 1776, 1777, 1769, 1770, 1771, 1772,
	1774, 1775, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	622, 611, 612, 609, 610, 601, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 1454, 177,
	0, 0, 0, 0, 639, 604, 733, 0, 0, 178,
	179, 180, 331, 654, 333, 655, 181, 656, 657, 0,
	182, 337, 338, 183, 184, 607, 638, 658, 659, 341,
	0, 185, 650, 0, 630, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 684, 193, 194, 195,
	0, 631, 632, 634, 0, 633, 635, 196, 197, 393,
	198, 660, 199, 661, 662, 0, 200, 0, 201, 0,
	202, 1455, 0, 653, 204, 0, 205, 0, 0, 0,
	595, 206, 207, 208, 640, 641, 618, 0, 0, 209,
	210, 663, 664, 665, 0, 211, 0, 212, 0, 0,
	685, 0, 213, 651, 0, 353, 0, 0, 214, 215,
	216, 217, 647, 649, 687, 0, 221, 0, 218, 0,
	686, 219, 666, 220, 667, 668, 669, 670, 671, 0,
	629, 733, 688, 222, 223, 224, 689, 225, 226, 227,
	0, 229, 228, 0, 652, 690, 230, 691, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	692, 238, 239, 241, 240, 590, 0, 619, 648, 242,
	672, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 693, 248, 694, 642, 249, 250, 251, 252,
	253, 0, 254, 643, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 673, 262, 263, 71, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 695, 277, 278, 596, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 636, 291, 280,
	281, 292, 696, 293, 674, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 675, 298, 299, 644, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	676, 677, 0, 0, 310, 311, 645, 646, 617, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 637,
	320, 0, 383, 321, 322, 323, 384, 678, 1453, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	591, 0, 0, 0, 0, 0, 589, 0, 0, 0,
	0, 587, 588, 1456, 0, 0, 0, 1104, 71, 0,
	597, 1451, 0, 0, 0, 0, 600, 0, 0, 0,
	0, 2340, 0, 175, 176, 1109, 177, 1110, 1111, 1112,
	1113, 330, 1114, 1115, 1116, 1117, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 1118, 182, 337, 338,
	183, 184, 1119, 1120, 339, 340, 341, 1121, 185, 342,
	1122, 820, 1123, 186, 187, 188, 0, 189, 1124, 190,
	191, 192, 1125, 684, 193, 194, 195, 1126, 1127, 1129,
	1128, 1130, 1131, 1132, 196, 197, 393, 198, 343, 199,
	344, 345, 1133, 200, 1134, 201, 1135, 202, 1136, 1137,
	203, 204, 1138, 205, 1139, 989, 1140, 346, 206, 207,
	208, 347, 348, 1141, 1142, 1143, 209, 210, 349, 350,
	351, 0, 211, 1144, 212, 1145, 1146, 685, 1147, 213,
	352, 1148, 353, 1149, 0, 214, 215, 216, 217, 354,
	355, 687, 1150, 221, 1151, 218, 1152, 686, 219, 356,
	220, 357, 358, 359, 360, 361, 1153, 362, 1154, 688,
	222, 223, 224, 689, 225, 226, 227, 1155, 229, 228,
	1156, 363, 690, 230, 691, 1157, 231, 1158, 1159, 232,
	0, 233, 234, 235, 237, 364, 236, 692, 238, 239,
	241, 240, 1160, 1161, 1162, 365, 242, 366, 243, 244,
	1163, 245, 1164, 1165, 246, 1166, 1167, 247, 367, 693,
	248, 694, 368, 249, 250, 251, 252, 253, 1168, 254,
	369, 255, 370, 256, 1169, 257, 258, 259, 260, 261,
	371, 262, 263, 1170, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 1171, 276, 695, 277,
	278, 372, 279, 0, 283, 284, 285, 286, 1172, 288,
	373, 287, 289, 290, 1173, 291, 280, 281, 292, 696,
	293, 374, 375, 294, 1174, 301, 295, 296, 282, 297,
	300, 376, 298, 299, 377, 1175, 302, 1176, 303, 304,
	305, 306, 307, 308, 309, 1177, 378, 379, 380, 1178,
	1179, 310, 311, 381, 382, 1180, 312, 313, 314, 315,
	1181, 1182, 316, 317, 318, 319, 1183, 320, 1184, 383,
	321, 322, 323, 384, 385, 1185, 1186, 324, 1187, 1188,
	1189, 1190, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 0, 1558, 0, 0, 0, 0,
	0, 0, 0, 0, 1559, 175, 176, 1109, 177, 1110,
	1111, 1112, 1113, 330, 1114, 1115, 1116, 1117, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 1118, 182,
	337, 338, 183, 184, 1119, 1120, 339, 340, 341, 1121,
	185, 342, 1122, 820, 1123, 186, 187, 188, 0, 189,
	1124, 190, 191, 192, 1125, 684, 193, 194, 195, 1126,
	1127, 1129, 1128, 1130, 1131, 1132, 196, 197, 393, 198,
	343, 199, 344, 345, 1133, 200, 1134, 201, 1135, 202,
	1136, 1137, 203, 204, 1138, 205, 1139, 0, 1140, 346,
	206, 207, 208, 347, 348, 1141, 1142, 1143, 209, 210,
	349, 350, 351, 0, 211, 1144, 212, 1145, 1146, 685,
	1147, 213, 352, 1148, 353, 1149, 0, 214, 215, 216,
	217, 354, 355, 687, 1150, 221, 1151, 218, 1152, 686,
	219, 356, 220, 357, 358, 359, 360, 361, 1153, 362,
	1154, 688, 222, 223, 224, 689, 225, 226, 227, 1155,
	229, 228, 1156, 363, 690, 230, 691, 1157, 231, 1158,
	1159, 232, 0, 233, 234, 235, 237, 364, 236, 692,
	238, 239, 241, 240, 1160, 1161, 1162, 365, 242, 366,
	243, 244, 1163, 245, 1164, 1165, 246, 1166, 1167, 247,
	367, 693, 248, 694, 368, 249, 250, 251, 252, 253,
	1168, 254, 369, 255, 370, 256, 1169, 257, 258, 259,
	260, 261, 371, 262, 263, 1170, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 1171, 276,
	695, 277, 278, 372, 279, 0, 283, 284, 285, 286,
	1172, 288, 373, 287, 289, 290, 1173, 291, 280, 281,
	292, 696, 293, 374, 375, 294, 1174, 301, 295, 296,
	282, 297, 300, 376, 298, 299, 377, 1175, 302, 1176,
	303, 304, 305, 306, 307, 308, 309, 1177, 378, 379,
	380, 1178, 1179, 310, 311, 381, 382, 1180, 312, 313,
	314, 315, 1181, 1182, 316, 317, 318, 319, 1183, 320,
	1184, 383, 321, 322, 323, 384, 385, 1185, 1186, 324,
	1187, 1188, 1189, 1190, 325, 326, 327, 328, 329, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2190, 175, 176,
	1109, 177, 1110, 1111, 1112, 1113, 330, 1114, 1115, 1116,
	1117, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 1118, 182, 337, 338, 183, 184, 1119, 1120, 339,
	340, 341, 1121, 185, 342, 1122, 820, 1123, 186, 187,
	188, 0, 189, 1124, 190, 191, 192, 1125, 684, 193,
	194, 195, 1126, 1127, 1129, 1128, 1130, 1131, 1132, 196,
	197, 393, 198, 343, 199, 344, 345, 1133, 200, 1134,
	201, 1135, 202, 1136, 1137, 203, 204, 1138, 205, 1139,
	0, 1140, 346, 206, 207, 208, 347, 348, 1141, 1142,
	1143, 209, 210, 349, 350, 351, 0, 211, 1144, 212,
	1145, 1146, 685, 1147, 213, 352, 1148, 353, 1149, 0,
	214, 215, 216, 217, 354, 355, 687, 1150, 221, 1151,
	218, 1152, 686, 219, 356, 220, 357, 358, 359, 360,
	361, 1153, 362, 1154, 688, 222, 223, 224, 689, 225,
	226, 227, 1155, 229, 228, 1156, 363, 690, 230, 691,
	1157, 231, 1158, 1159, 232, 0, 233, 234, 235, 237,
	364, 236, 692, 238, 239, 241, 240, 1160, 1161, 1162,
	365, 242, 366, 243, 244, 1163, 245, 1164, 1165, 246,
	1166, 1167, 247, 367, 693, 248, 694, 368, 249, 250,
	251, 252, 253, 1168, 254, 369, 255, 370, 256, 1169,
	257, 258, 259, 260, 261, 371, 262, 263, 1170, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 1171, 276, 695, 277, 278, 372, 279, 0, 283,
	284, 285, 286, 1172, 288, 373, 287, 289, 290, 1173,
	291, 280, 281, 292, 696, 293, 374, 375, 294, 1174,
	301, 295, 296, 282, 297, 300, 376, 298, 299, 377,
	1175, 302, 1176, 303, 304, 305, 306, 307, 308, 309,
	1177, 378, 379, 380, 1178, 1179, 310, 311, 381, 382,
	1180, 312, 313, 314, 315, 1181, 1182, 316, 317, 318,
	319, 1183, 320, 1184, 383, 321, 322, 323, 384, 385,
	1185, 1186, 324, 1187, 1188, 1189, 1190, 325, 326, 327,
	328, 329, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 175, 176,
	1109, 177, 1110, 1111, 1112, 1113, 330, 1114, 1115, 1116,
	1117, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 1118, 182, 337, 338, 183, 184, 1119, 1120, 339,
	340, 341, 1121, 185, 342, 1122, 820, 1123, 186, 187,
	188, 0, 189, 1124, 190, 191, 192, 1125, 684, 193,
	194, 195, 1126, 1127, 1129, 1128, 1130, 1131, 1132, 196,
	197, 393, 198, 343, 199, 344, 345, 1133, 200, 1134,
	201, 1135, 202, 1136, 1137, 203, 204, 1138, 205, 1139,
	0, 1140, 346, 206, 207, 208, 347, 348, 1141, 1142,
	1143, 209, 210, 349, 350, 351, 0, 211, 1144, 212,
	1145, 1146, 685, 1147, 213, 352, 1148, 353, 1149, 0,
	214, 215, 216, 217, 354, 355, 687, 1150, 221, 1151,
	218, 1152, 686, 219, 356, 220, 357, 358, 359, 360,
	361, 1153, 362, 1154, 688, 222, 223, 224, 689, 225,
	226, 227, 1155, 229, 228, 1156, 363, 690, 230, 691,
	1157, 231, 1158, 1159, 232, 0, 233, 234, 235, 237,
	364, 236, 692, 238, 239, 241, 240, 1160, 1161, 1162,
	365, 242, 366, 243, 244, 1163, 245, 1164, 1165, 246,
	1166, 1167, 247, 367, 693, 248, 694, 368, 249, 250,
	251, 252, 253, 1168, 254, 369, 255, 370, 256, 1169,
	257, 258, 259, 260, 261, 371, 262, 263, 1170, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 1171, 276, 695, 277, 278, 372, 279, 0, 283,
	284, 285, 286, 1172, 288, 373, 287, 289, 290, 1173,
	291, 280, 281, 292, 696, 293, 374, 375, 294, 1174,
	301, 295, 296, 282, 297, 300, 376, 298, 299, 377,
	1175, 302, 1176, 303, 304, 305, 306, 307, 308, 309,
	1177, 378, 379, 380, 1178, 1179, 310, 311, 381, 382,
	1180, 312, 313, 314, 315, 1181, 1182, 316, 317, 318,
	319, 1183, 320, 1184, 383, 321, 322, 323, 384, 385,
	1185, 1186, 324, 1187, 1188, 1189, 1190, 325, 326, 327,
	328, 329, 622, 611, 612, 609, 610, 601, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 639, 604, 0, 0,
	0, 178, 179, 180, 331, 654, 333, 655, 181, 656,
	657, 0, 182, 337, 338, 183, 184, 607, 638, 658,
	659, 341, 0, 185, 650, 0, 630, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 684, 193,
	194, 195, 0, 631, 632, 634, 0, 633, 635, 196,
	197, 393, 198, 660, 199, 661, 662, 585, 200, 0,
	201, 0, 202, 0, 0, 653, 204, 0, 205, 0,
	0, 0, 595, 206, 207, 208, 640, 641, 618, 0,
	0, 209, 210, 663, 664, 665, 0, 211, 0, 212,
	0, 0, 685, 0, 213, 651, 0, 353, 0, 0,
	214, 215, 216, 217, 647, 649, 687, 0, 221, 0,
	218, 0, 686, 219, 666, 220, 667, 668, 669, 670,
	671, 0, 629, 0, 688, 222, 223, 224, 689, 225,
	226, 227, 0, 229, 228, 0, 652, 690, 230, 691,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 692, 238, 239, 241, 240, 590, 0, 619,
	648, 242, 672, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 693, 248, 694, 642, 249, 250,
	251, 252, 253, 0, 254, 643, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 673, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 695, 277, 278, 596, 279, 0, 283,
	284, 285, 286, 132, 288, 373, 287, 289, 290, 636,
	291, 280, 281, 292, 696, 293, 674, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 675, 298, 299, 644,
	0, 302, 134, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 676, 677, 0, 0, 310, 311, 645, 646,
	617, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 637, 320, 0, 383, 321, 322, 323, 819, 678,
	0, 0, 324, 0, 0, 0, 126, 325, 326, 327,
	328, 329, 591, 127, 0, 0, 0, 0, 589, 0,
	0, 0, 0, 587, 588, 0, 0, 0, 0, 0,
	0, 0, 992, 0, 0, 0, 0, 573, 600, 622,
	611, 612, 609, 610, 601, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 639, 604, 0, 0, 0, 178, 179,
	180, 331, 654, 333, 655, 181, 656, 657, 0, 182,
	337, 338, 183, 184, 607, 638, 658, 659, 341, 0,
	185, 650, 0, 630, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 684, 193, 194, 195, 0,
	631, 632, 634, 0, 633, 635, 196, 197, 393, 198,
	660, 199, 661, 662, 0, 200, 0, 201, 0, 202,
	0, 0, 653, 204, 0, 205, 0, 0, 0, 595,
	206, 207, 208, 640, 641, 618, 0, 0, 209, 210,
	663, 664, 665, 0, 211, 0, 212, 0, 0, 685,
	0, 213, 651, 0, 353, 0, 0, 214, 215, 216,
	217, 647, 649, 687, 0, 221, 0, 218, 0, 686,
	219, 666, 220, 667, 668, 669, 670, 671, 0, 629,
	0, 688, 222, 223, 224, 689, 225, 226, 227, 0,
	229, 228, 0, 652, 690, 230, 691, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 692,
	238, 239, 241, 240, 590, 0, 619, 648, 242, 672,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 693, 248, 694, 642, 249, 250, 251, 252, 253,
	0, 254, 643, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 673, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	695, 277, 278, 596, 279, 0, 283, 284, 285, 286,
	132, 288, 373, 287, 289, 290, 636, 291, 280, 281,
	292, 696, 293, 674, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 675, 298, 299, 644, 0, 302, 134,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 676,
	677, 0, 0, 310, 311, 645, 646, 617, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 637, 320,
	0, 383, 321, 322, 323, 819, 678, 0, 0, 324,
	0, 0, 0, 126, 325, 326, 327, 328, 329, 591,
	127, 0, 0, 0, 0, 589, 0, 0, 0, 0,
	587, 588, 622, 611, 612, 609, 610, 601, 0, 992,
	0, 0, 0, 0, 0, 600, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 639, 604, 0, 0,
	0, 178, 179, 180, 331, 654, 333, 655, 181, 656,
	657, 0, 182, 337, 338, 183, 184, 607, 638, 658,
	659, 341, 0, 185, 650, 0, 630, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 684, 193,
	194, 195, 0, 631, 632, 634, 0, 633, 635, 196,
	197, 393, 198, 660, 199, 661, 662, 0, 200, 0,
	201, 0, 202, 0, 0, 653, 204, 0, 205, 0,
	0, 0, 595, 206, 207, 208, 640, 641, 618, 0,
	0, 209, 210, 663, 664, 665, 0, 211, 0, 212,
	0, 0, 685, 0, 213, 651, 0, 353, 0, 0,
	214, 215, 216, 217, 647, 649, 687, 0, 221, 0,
	218, 0, 686, 219, 666, 220, 667, 668, 669, 670,
	671, 0, 629, 0, 688, 222, 223, 224, 689, 225,
	226, 227, 0, 229, 228, 0, 652, 690, 230, 691,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 692, 238, 239, 241, 240, 590, 0, 619,
	648, 242, 672, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 693, 248, 694, 642, 249, 250,
	251, 252, 253, 0, 254, 643, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 673, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 695, 277, 278, 596, 279, 0, 283,
	284, 285, 286, 132, 288, 373, 287, 289, 290, 636,
	291, 280, 281, 292, 696, 293, 674, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 675, 298, 299, 644,
	0, 302, 134, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 676, 677, 0, 0, 310, 311, 645, 646,
	617, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 637, 320, 0, 383, 321, 322, 323, 819, 678,
	0, 0, 324, 0, 0, 0, 126, 325, 326, 327,
	328, 329, 591, 127, 0, 0, 0, 0, 589, 0,
	0, 0, 0, 587, 588, 622, 611, 612, 609, 610,
	601, 0, 992, 0, 0, 0, 0, 0, 600, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 639,
	604, 0, 0, 0, 178, 179, 180, 331, 654, 333,
	655, 181, 656, 657, 1511, 182, 337, 338, 183, 184,
	607, 638, 658, 659, 341, 0, 185, 650, 0, 630,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 684, 193, 194, 195, 0, 631, 632, 634, 0,
	633, 635, 196, 197, 393, 198, 660, 199, 661, 662,
	0, 200, 0, 201, 0, 202, 0, 0, 653, 204,
	0, 205, 0, 0, 0, 595, 206, 207, 208, 640,
	641, 618, 0, 0, 209, 210, 663, 664, 665, 0,
	211, 0, 212, 0, 1516, 685, 0, 213, 651, 0,
	353, 0, 0, 214, 215, 216, 217, 647, 649, 687,
	0, 221, 0, 218, 0, 686, 219, 666, 220, 667,
	668, 669, 670, 671, 0, 629, 0, 688, 222, 223,
	224, 689, 225, 226, 227, 0, 229, 228, 1512, 652,
	690, 230, 691, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 692, 238, 239, 241, 240,
	590, 0, 619, 648, 242, 672, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 693, 248, 694,
	642, 249, 250, 251, 252, 253, 0, 254, 643, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 673, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 695, 277, 278, 596,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 636, 291, 280, 281, 292, 696, 293, 674,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 675,
	298, 299, 644, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 676, 677, 0, 1513, 310,
	311, 645, 646, 617, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 637, 320, 0, 383, 321, 322,
	323, 384, 678, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 591, 0, 0, 0, 0,
	0, 589, 0, 0, 0, 0, 587, 588, 0, 0,
	0, 0, 0, 0, 0, 597, 0, 0, 0, 0,
	581, 600, 622, 611, 612, 609, 610, 601, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 639, 604, 0, 0,
	0, 178, 179, 180, 331, 654, 333, 655, 181, 656,
	657, 0, 182, 337, 338, 183, 184, 607, 638, 658,
	659, 341, 0, 185, 650, 0, 630, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 684, 193,
	194, 195, 0, 631, 632, 634, 0, 633, 635, 196,
	197, 393, 198, 660, 199, 661, 662, 585, 200, 0,
	201, 0, 202, 0, 0, 653, 204, 0, 205, 0,
	0, 0, 595, 206, 207, 208, 640, 641, 618, 0,
	0, 209, 210, 663, 664, 665, 0, 211, 0, 212,
	0, 0, 685, 0, 213, 651, 0, 353, 0, 0,
	214, 215, 216, 217, 647, 649, 687, 0, 221, 0,
	218, 0, 686, 219, 666, 220, 667, 668, 669, 670,
	671, 0, 629, 0, 688, 222, 223, 224, 689, 225,
	226, 227, 0, 229, 228, 0, 652, 690, 230, 691,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 692, 238, 239, 241, 240, 590, 0, 619,
	648, 242, 672, 243, 244, 0, 245, 583, 0, 246,
	0, 0, 247, 367, 693, 248, 694, 642, 249, 250,
	251, 252, 253, 0, 254, 643, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 673, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 695, 277, 278, 596, 279, 0, 283,
	284, 285, 286, 0, 288, 373, 287, 289, 290, 636,
	291, 280, 281, 292, 696, 293, 674, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 675, 298, 299, 644,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 676, 677, 0, 0, 310, 311, 645, 646,
	617, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 637, 320, 0, 383, 321, 322, 323, 384, 678,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 591, 0, 0, 0, 0, 0, 589, 0,
	0, 0, 0, 587, 588, 622, 611, 612, 609, 610,
	601, 0, 597, 0, 0, 0, 0, 0, 600, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 639,
	604, 0, 0, 0, 178, 179, 180, 331, 654, 333,
	655, 181, 656, 657, 0, 182, 337, 338, 183, 184,
	607, 638, 658, 659, 341, 0, 185, 650, 0, 630,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 684, 193, 194, 195, 0, 631, 632, 634, 0,
	633, 635, 196, 197, 393, 198, 660, 199, 661, 662,
	0, 200, 0, 201, 0, 202, 0, 0, 653, 204,
	0, 205, 0, 0, 0, 595, 206, 207, 208, 640,
	641, 618, 0, 0, 209, 210, 663, 664, 665, 0,
	211, 0, 212, 0, 0, 685, 0, 213, 651, 0,
	353, 0, 0, 214, 215, 216, 217, 647, 649, 687,
	0, 221, 0, 218, 0, 686, 219, 666, 220, 667,
	668, 669, 670, 671, 0, 629, 0, 688, 222, 223,
	224, 689, 225, 226, 227, 0, 229, 228, 0, 652,
	690, 230, 691, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 692, 238, 239, 241, 240,
	590, 2120, 619, 648, 242, 672, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 693, 248, 694,
	642, 249, 250, 251, 252, 253, 0, 254, 643, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 673, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 695, 277, 278, 596,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 636, 291, 280, 281, 292, 696, 293, 674,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 675,
	298, 299, 644, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 676, 677, 0, 0, 310,
	311, 645, 646, 617, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 637, 320, 0, 383, 321, 322,
	323, 384, 678, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 591, 0, 0, 0, 0,
	0, 589, 0, 0, 0, 0, 587, 588, 1053, 622,
	611, 612, 609, 610, 601, 597, 0, 0, 0, 0,
	0, 600, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 639, 604, 0, 0, 0, 178, 179,
	180, 331, 654, 333, 655, 181, 656, 657, 0, 182,
	337, 338, 183, 184, 607, 638, 658, 659, 341, 0,
	185, 650, 0, 630, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 684, 193, 194, 195, 0,
	631, 632, 634, 0, 633, 635, 196, 197, 393, 198,
	660, 199, 661, 662, 0, 200, 0, 201, 0, 202,
	0, 0, 653, 204, 0, 205, 0, 0, 0, 595,
	206, 207, 208, 640, 641, 618, 0, 0, 209, 210,
	663, 664, 665, 0, 211, 0, 212, 0, 0, 685,
	0, 213, 651, 0, 353, 0, 0, 214, 215, 216,
	217, 647, 649, 687, 0, 221, 1370, 218, 0, 686,
	219, 666, 220, 667, 668, 669, 670, 671, 0, 629,
	0, 688, 222, 223, 224, 689, 225, 226, 227, 0,
	229, 228, 0, 652, 690, 230, 691, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 692,
	238, 239, 241, 240, 590, 0, 619, 648, 242, 672,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 693, 248, 694, 642, 249, 250, 251, 252, 253,
	0, 254, 643, 255, 370, 256, 1369, 257, 258, 259,
	260, 261, 673, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	695, 277, 278, 596, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 636, 291, 280, 281,
	292, 696, 293, 674, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 675, 298, 299, 644, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 676,
	677, 0, 0, 310, 311, 645, 646, 617, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 637, 320,
	0, 383, 321, 322, 323, 384, 678, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 591,
	0, 0, 0, 0, 0, 589, 0, 0, 0, 0,
	587, 588, 622, 611, 612, 609, 610, 601, 0, 597,
	0, 0, 0, 0, 0, 600, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 639, 604, 0, 0,
	0, 178, 179, 180, 331, 654, 333, 655, 181, 656,
	657, 0, 182, 337, 338, 183, 184, 607, 638, 658,
	659, 341, 0, 185, 650, 0, 630, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 684, 193,
	194, 195, 0, 631, 632, 634, 0, 633, 635, 196,
	197, 393, 198, 660, 199, 661, 662, 585, 200, 0,
	201, 0, 202, 0, 0, 653, 204, 0, 205, 0,
	0, 0, 595, 206, 207, 208, 640, 641, 618, 0,
	0, 209, 210, 663, 664, 665, 0, 211, 0, 212,
	0, 0, 685, 0, 213, 651, 0, 353, 0, 0,
	214, 215, 216, 217, 647, 649, 687, 0, 221, 0,
	218, 0, 686, 219, 666, 220, 667, 668, 669, 670,
	671, 0, 629, 0, 688, 222, 223, 224, 689, 225,
	226, 227, 0, 229, 228, 0, 652, 690, 230, 691,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 692, 238, 239, 241, 240, 590, 0, 619,
	648, 242, 672, 243, 244, 0, 245, 583, 0, 246,
	0, 0, 247, 367, 693, 248, 694, 642, 249, 250,
	251, 252, 253, 0, 254, 643, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 673, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 695, 277, 278, 596, 279, 0, 283,
	284, 285, 286, 0, 288, 373, 287, 289, 290, 636,
	291, 280, 281, 292, 696, 293, 674, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 675, 298, 299, 644,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 676, 677, 0, 0, 310, 311, 645, 646,
	617, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 637, 320, 0, 383, 321, 322, 323, 384, 678,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 591, 0, 0, 0, 0, 0, 589, 0,
	0, 0, 0, 587, 588, 622, 611, 612, 609, 610,
	601, 0, 597, 0, 0, 0, 0, 0, 600, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 639,
	604, 0, 0, 0, 178, 179, 180, 331, 654, 333,
	655, 181, 656, 657, 0, 182, 337, 338, 183, 184,
	607, 638, 658, 659, 341, 0, 185, 650, 0, 630,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 684, 193, 194, 195, 0, 631, 632, 634, 0,
	633, 635, 196, 197, 393, 198, 660, 199, 661, 662,
	0, 200, 0, 201, 0, 202, 0, 0, 653, 204,
	0, 205, 0, 0, 0, 595, 206, 207, 208, 640,
	641, 618, 0, 0, 209, 210, 663, 664, 665, 0,
	211, 0, 212, 0, 0, 685, 0, 213, 651, 0,
	353, 0, 0, 214, 215, 216, 217, 647, 649, 687,
	0, 221, 0, 218, 0, 686, 219, 666, 220, 667,
	668, 669, 670, 671, 0, 629, 0, 688, 222, 223,
	224, 689, 225, 226, 227, 0, 229, 228, 0, 652,
	690, 230, 691, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 692, 238, 239, 241, 240,
	590, 0, 619, 648, 242, 672, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 693, 248, 694,
	642, 249, 250, 251, 252, 253, 0, 254, 643, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 673, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 695, 277, 278, 596,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 636, 291, 280, 281, 292, 696, 293, 674,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 675,
	298, 299, 644, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 676, 677, 0, 0, 310,
	311, 645, 646, 617, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 637, 320, 0, 383, 321, 322,
	323, 384, 678, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 591, 0, 0, 0, 0,
	0, 589, 0, 0, 0, 0, 587, 588, 0, 0,
	0, 0, 0, 996, 1446, 597, 0, 0, 0, 0,
	0, 600, 622, 611, 612, 609, 610, 601, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 639, 604, 0, 0,
	0, 178, 179, 180, 331, 654, 333, 655, 181, 656,
	657, 0, 182, 337, 338, 183, 184, 607, 638, 658,
	659, 341, 0, 185, 650, 0, 630, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 684, 193,
	194, 195, 0, 631, 632, 634, 0, 633, 635, 196,
	197, 393, 198, 660, 199, 661, 662, 585, 200, 0,
	201, 0, 202, 0, 0, 653, 204, 0, 205, 0,
	0, 0, 595, 206, 207, 208, 640, 641, 618, 0,
	0, 209, 210, 663, 664, 665, 0, 211, 0, 212,
	0, 0, 685, 0, 213, 651, 0, 353, 0, 0,
	214, 215, 216, 217, 647, 649, 687, 0, 221, 0,
	218, 0, 686, 219, 666, 220, 667, 668, 669, 670,
	671, 0, 629, 0, 688, 222, 223, 224, 689, 225,
	226, 227, 0, 229, 228, 0, 652, 690, 230, 691,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 692, 238, 239, 241, 240, 590, 0, 619,
	648, 242, 672, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 693, 248, 694, 642, 249, 250,
	251, 252, 253, 0, 254, 643, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 673, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 695, 277, 278, 596, 279, 0, 283,
	284, 285, 286, 0, 288, 373, 287, 289, 290, 636,
	291, 280, 281, 292, 696, 293, 674, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 675, 298, 299, 644,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 676, 677, 0, 0, 310, 311, 645, 646,
	617, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 637, 320, 0, 383, 321, 322, 323, 384, 678,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 591, 0, 0, 0, 0, 0, 589, 0,
	0, 0, 0, 587, 588, 622, 611, 612, 609, 610,
	601, 0, 597, 0, 0, 0, 0, 0, 600, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 639,
	604, 0, 0, 0, 178, 179, 180, 331, 654, 333,
	655, 181, 656, 657, 0, 182, 337, 338, 183, 184,
	607, 638, 658, 659, 341, 0, 185, 650, 0, 630,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 684, 193, 194, 195, 0, 631, 632, 634, 0,
	633, 635, 196, 197, 393, 198, 660, 199, 661, 662,
	0, 200, 0, 201, 0, 202, 0, 0, 653, 204,
	0, 205, 0, 0, 0, 595, 206, 207, 208, 640,
	641, 618, 0, 0, 209, 210, 663, 664, 665, 0,
	211, 0, 212, 0, 0, 685, 0, 213, 651, 0,
	353, 0, 0, 214, 215, 216, 217, 647, 649, 687,
	0, 221, 0, 218, 0, 686, 219, 666, 220, 667,
	668, 669, 670, 671, 0, 629, 0, 688, 222, 223,
	224, 689, 225, 226, 227, 0, 229, 228, 0, 652,
	690, 230, 691, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 692, 238, 239, 241, 240,
	590, 0, 619, 648, 242, 672, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 693, 248, 694,
	642, 249, 250, 251, 252, 253, 0, 254, 643, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 673, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 695, 277, 278, 596,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 636, 291, 280, 281, 292, 696, 293, 674,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 675,
	298, 299, 644, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 676, 677, 0, 0, 310,
	311, 645, 646, 617, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 637, 320, 0, 383, 321, 322,
	323, 384, 678, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 591, 0, 0, 0, 0,
	0, 589, 0, 0, 0, 0, 587, 588, 622, 611,
	612, 609, 610, 601, 0, 597, 2028, 0, 0, 0,
	0, 600, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 639, 604, 0, 0, 0, 178, 179, 180,
	331, 654, 333, 655, 181, 656, 657, 0, 182, 337,
	338, 183, 184, 607, 638, 658, 659, 341, 0, 185,
	650, 0, 630, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 684, 193, 194, 195, 0, 631,
	632, 634, 0, 633, 635, 196, 197, 393, 198, 660,
	199, 661, 662, 0, 200, 0, 201, 0, 202, 0,
	0, 653, 204, 0, 205, 0, 0, 0, 595, 206,
	207, 208, 640, 641, 618, 0, 0, 209, 210, 663,
	664, 665, 0, 211, 0, 212, 0, 0, 685, 0,
	213, 651, 0, 353, 0, 0, 214, 215, 216, 217,
	647, 649, 687, 0, 221, 0, 218, 0, 686, 219,
	666, 220, 667, 668, 669, 670, 671, 0, 629, 0,
	688, 222, 223, 224, 689, 225, 226, 227, 0, 229,
	228, 0, 652, 690, 230, 691, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 236, 692, 238,
	239, 241, 240, 590, 0, 619, 648, 242, 672, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 367,
	693, 248, 694, 642, 249, 250, 251, 252, 253, 0,
	254, 643, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 673, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 695,
	277, 278, 596, 279, 0, 283, 284, 285, 286, 0,
	288, 373, 287, 289, 290, 636, 291, 280, 281, 292,
	696, 293, 674, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 675, 298, 299, 644, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 676, 677,
	0, 0, 310, 311, 645, 646, 617, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 637, 320, 0,
	383, 321, 322, 323, 384, 678, 1977, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 591, 0,
	0, 0, 0, 0, 589, 0, 0, 0, 0, 587,
	588, 622, 611, 612, 609, 610, 601, 0, 597, 0,
	0, 0, 0, 0, 600, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 639, 604, 0, 0, 0,
	178, 179, 180, 331, 654, 333, 655, 181, 656, 657,
	0, 182, 337, 338, 183, 184, 607, 638, 658, 659,
	341, 0, 185, 650, 0, 630, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 684, 193, 194,
	195, 0, 631, 632, 634, 0, 633, 635, 196, 197,
	393, 198, 660, 199, 661, 662, 0, 200, 0, 201,
	0, 202, 0, 0, 653, 204, 0, 205, 0, 0,
	0, 595, 206, 207, 208, 640, 641, 618, 0, 0,
	209, 210, 663, 664, 665, 0, 211, 0, 212, 0,
	0, 685, 0, 213, 651, 0, 353, 0, 0, 214,
	215, 216, 217, 647, 649, 687, 0, 221, 0, 218,
	0, 686, 219, 666, 220, 667, 668, 669, 670, 671,
	0, 629, 0, 688, 222, 223, 224, 689, 225, 226,
	227, 0, 229, 228, 0, 652, 690, 230, 691, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 692, 238, 239, 241, 240, 590, 0, 619, 648,
	242, 672, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 693, 248, 694, 642, 249, 250, 251,
	252, 253, 0, 254, 643, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 673, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 695, 277, 278, 596, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 636, 291,
	280, 281, 292, 696, 293, 674, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 675, 298, 299, 644, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 676, 677, 0, 0, 310, 311, 645, 646, 617,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	637, 320, 0, 383, 321, 322, 323, 384, 678, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 591, 0, 0, 0, 0, 0, 589, 0, 0,
	0, 0, 587, 588, 622, 611, 612, 609, 610, 601,
	0, 597, 1967, 0, 0, 0, 0, 600, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 639, 604,
	0, 0, 0, 178, 179, 180, 331, 654, 333, 655,
	181, 656, 657, 0, 182, 337, 338, 183, 184, 607,
	638, 658, 659, 341, 0, 185, 650, 0, 630, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	684, 193, 194, 195, 0, 631, 632, 634, 0, 633,
	635, 196, 197, 393, 198, 660, 199, 661, 662, 0,
	200, 0, 201, 0, 202, 0, 0, 653, 204, 0,
	205, 0, 0, 0, 595, 206, 207, 208, 640, 641,
	618, 0, 0, 209, 210, 663, 664, 665, 0, 211,
	0, 212, 0, 0, 685, 0, 213, 651, 0, 353,
	0, 0, 214, 215, 216, 217, 647, 649, 687, 0,
	221, 0, 218, 0, 686, 219, 666, 220, 667, 668,
	669, 670, 671, 0, 629, 0, 688, 222, 223, 224,
	689, 225, 226, 227, 0, 229, 228, 0, 652, 690,
	230, 691, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 364, 236, 692, 238, 239, 241, 240, 590,
	0, 619, 648, 242, 672, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 367, 693, 248, 694, 642,
	249, 250, 251, 252, 253, 0, 254, 643, 255, 370,
	256, 0, 257, 258, 259, 260, 261, 673, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 695, 277, 278, 596, 279,
	0, 283, 284, 285, 286, 0, 288, 373, 287, 289,
	290, 636, 291, 280, 281, 292, 696, 293, 674, 375,
	294, 0, 301, 295, 296, 282, 297, 300, 675, 298,
	299, 644, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 378, 676, 677, 0, 0, 310, 311,
	645, 646, 617, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 637, 320, 0, 383, 321, 322, 323,
	384, 678, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 591, 0, 0, 0, 0, 0,
	589, 0, 0, 0, 0, 587, 588, 1053, 622, 611,
	612, 609, 610, 601, 597, 0, 0, 0, 0, 0,
	600, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 639, 604, 0, 0, 0, 178, 179, 180,
	331, 654, 333, 655, 181, 656, 657, 0, 182, 337,
	338, 183, 184, 607, 638, 658, 659, 341, 0, 185,
	650, 0, 630, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 684, 193, 194, 195, 0, 631,
	632, 634, 0, 633, 635, 196, 197, 393, 198, 660,
	199, 661, 662, 0, 200, 0, 201, 0, 202, 0,
	0, 653, 204, 0, 205, 0, 0, 0, 595, 206,
	207, 208, 640, 641, 618, 0, 0, 209, 210, 663,
	664, 665, 0, 211, 0, 212, 0, 1516, 685, 0,
	213, 651, 0, 353, 0, 0, 214, 215, 216, 217,
	647, 649, 687, 0, 221, 0, 218, 0, 686, 219,
	666, 220, 667, 668, 669, 670, 671, 0, 629, 0,
	688, 222, 223, 224, 689, 225, 226, 227, 0, 229,
	228, 0, 652, 690, 230, 691, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 236, 692, 238,
	239, 241, 240, 590, 0, 619, 648, 242, 672, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 367,
	693, 248, 694, 642, 249, 250, 251, 252, 253, 0,
	254, 643, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 673, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 695,
	277, 278, 596, 279, 0, 283, 284, 285, 286, 0,
	288, 373, 287, 289, 290, 636, 291, 280, 281, 292,
	696, 293, 674, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 675, 298, 299, 644, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 676, 677,
	0, 0, 310, 311, 645, 646, 617, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 637, 320, 0,
	383, 321, 322, 323, 384, 678, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 591, 0,
	0, 0, 0, 0, 589, 0, 0, 0, 0, 587,
	588, 0, 0, 0, 0, 0, 0, 0, 597, 0,
	0, 0, 0, 1561, 600, 622, 611, 612, 609, 610,
	601, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 639,
	604, 0, 0, 0, 178, 179, 180, 331, 654, 333,
	655, 181, 656, 657, 0, 182, 337, 338, 183, 184,
	607, 638, 658, 659, 341, 0, 185, 650, 0, 630,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 684, 193, 194, 195, 0, 631, 632, 634, 0,
	633, 635, 196, 197, 393, 198, 660, 199, 661, 662,
	0, 200, 0, 201, 0, 202, 0, 0, 653, 204,
	0, 205, 0, 0, 0, 595, 206, 207, 208, 640,
	641, 618, 0, 0, 209, 210, 663, 664, 665, 0,
	211, 0, 212, 0, 0, 685, 0, 213, 651, 0,
	353, 0, 0, 214, 215, 216, 217, 647, 649, 687,
	0, 221, 0, 218, 0, 686, 219, 666, 220, 667,
	668, 669, 670, 671, 0, 629, 0, 688, 222, 223,
	224, 689, 225, 226, 227, 0, 229, 228, 0, 652,
	690, 230, 691, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 692, 238, 239, 241, 240,
	590, 0, 619, 648, 242, 672, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 693, 248, 694,
	642, 249, 250, 251, 252, 253, 0, 254, 643, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 673, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 695, 277, 278, 596,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 636, 291, 280, 281, 292, 696, 293, 674,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 675,
	298, 299, 644, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 676, 677, 0, 0, 310,
	311, 645, 646, 617, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 637, 320, 0, 383, 321, 322,
	323, 384, 678, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 591, 0, 0, 0, 0,
	0, 589, 0, 0, 0, 0, 587, 588, 0, 0,
	0, 0, 0, 0, 0, 597, 0, 0, 0, 0,
	1525, 600, 622, 611, 612, 609, 610, 601, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 639, 604, 0, 0,
	0, 178, 179, 180, 331, 654, 333, 655, 181, 656,
	657, 0, 182, 337, 338, 183, 184, 607, 638, 658,
	659, 341, 0, 185, 650, 0, 630, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 684, 193,
	194, 195, 0, 631, 632, 634, 0, 633, 635, 196,
	197, 393, 198, 660, 199, 661, 662, 0, 200, 0,
	201, 0, 202, 0, 0, 653, 204, 0, 205, 0,
	0, 0, 595, 206, 207, 208, 640, 641, 618, 0,
	0, 209, 210, 663, 664, 665, 0, 211, 0, 212,
	0, 0, 685, 0, 213, 651, 0, 353, 0, 0,
	214, 215, 216, 217, 647, 649, 687, 0, 221, 0,
	218, 0, 686, 219, 666, 220, 667, 668, 669, 670,
	671, 0, 629, 0, 688, 222, 223, 224, 689, 225,
	226, 227, 0, 229, 228, 0, 652, 690, 230, 691,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 692, 238, 239, 241, 240, 590, 0, 619,
	648, 242, 672, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 693, 248, 694, 642, 249, 250,
	251, 252, 253, 0, 254, 643, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 673, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 695, 277, 278, 596, 279, 0, 283,
	284, 285, 286, 0, 288, 373, 287, 289, 290, 636,
	291, 280, 281, 292, 696, 293, 674, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 675, 298, 299, 644,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 676, 677, 0, 0, 310, 311, 645, 646,
	617, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 637, 320, 0, 383, 321, 322, 323, 384, 678,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 591, 0, 0, 0, 0, 0, 589, 0,
	0, 0, 0, 587, 588, 0, 0, 0, 0, 0,
	0, 0, 597, 0, 0, 0, 0, 1523, 600, 622,
	611, 612, 609, 610, 601, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 639, 604, 0, 0, 0, 178, 179,
	180, 331, 654, 333, 655, 181, 656, 657, 0, 182,
	337, 338, 183, 184, 607, 638, 658, 659, 341, 0,
	185, 650, 0, 630, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 684, 193, 194, 195, 0,
	631, 632, 634, 0, 633, 635, 196, 197, 393, 198,
	660, 199, 661, 662, 0, 200, 0, 201, 0, 202,
	0, 0, 653, 204, 0, 205, 0, 0, 0, 595,
	206, 207, 208, 640, 641, 618, 0, 0, 209, 210,
	663, 664, 665, 0, 211, 0, 212, 0, 0, 685,
	0, 213, 651, 0, 353, 0, 0, 214, 215, 216,
	217, 647, 649, 687, 0, 221, 0, 218, 0, 686,
	219, 666, 220, 667, 668, 669, 670, 671, 0, 629,
	0, 688, 222, 223, 224, 689, 225, 226, 227, 0,
	229, 228, 0, 652, 690, 230, 691, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 692,
	238, 239, 241, 240, 590, 0, 619, 648, 242, 672,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 693, 248, 694, 642, 249, 250, 251, 252, 253,
	0, 254, 643, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 673, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	695, 277, 278, 596, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 636, 291, 280, 281,
	292, 696, 293, 674, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 675, 298, 299, 644, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 676,
	677, 0, 0, 310, 311, 645, 646, 617, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 637, 320,
	0, 383, 321, 322, 323, 384, 678, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 591,
	0, 0, 0, 0, 0, 589, 0, 0, 0, 0,
	587, 588, 0, 0, 0, 0, 0, 0, 0, 597,
	0, 0, 0, 0, 1507, 600, 622, 611, 612, 609,
	610, 601, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	639, 604, 0, 0, 0, 178, 179, 180, 331, 654,
	333, 655, 181, 656, 657, 0, 182, 337, 338, 183,
	184, 607, 638, 658, 659, 341, 0, 185, 650, 0,
	630, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 684, 193, 194, 195, 0, 631, 632, 634,
	0, 633, 635, 196, 197, 393, 198, 660, 199, 661,
	662, 0, 200, 0, 201, 0, 202, 0, 0, 653,
	204, 0, 205, 0, 0, 0, 595, 206, 207, 208,
	640, 641, 618, 0, 0, 209, 210, 663, 664, 665,
	0, 211, 0, 212, 0, 0, 685, 0, 213, 651,
	0, 353, 0, 0, 214, 215, 216, 217, 647, 649,
	687, 0, 221, 0, 218, 0, 686, 219, 666, 220,
	667, 668, 669, 670, 671, 0, 629, 0, 688, 222,
	223, 224, 689, 225, 226, 227, 0, 229, 228, 0,
	652, 690, 230, 691, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 692, 238, 239, 241,
	240, 590, 0, 619, 648, 242, 672, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 693, 248,
	694, 642, 249, 250, 251, 252, 253, 0, 254, 643,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 673,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 695, 277, 278,
	596, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 636, 291, 280, 281, 292, 696, 293,
	674, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	675, 298, 299, 644, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 676, 677, 0, 0,
	310, 311, 645, 646, 617, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 637, 320, 0, 383, 321,
	322, 323, 384, 678, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 591, 0, 0, 0,
	0, 0, 589, 0, 0, 0, 0, 587, 588, 0,
	0, 0, 0, 0, 0, 0, 597, 0, 0, 0,
	0, 1495, 600, 622, 611, 612, 609, 610, 601, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 639, 604, 0,
	0, 0, 178, 179, 180, 331, 654, 333, 655, 181,
	656, 657, 0, 182, 337, 338, 183, 184, 607, 638,
	658, 659, 341, 0, 185, 650, 0, 630, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 684,
	193, 194, 195, 0, 631, 632, 634, 0, 633, 635,
	196, 197, 393, 198, 660, 199, 661, 662, 0, 200,
	0, 201, 0, 202, 0, 0, 653, 204, 0, 205,
	0, 0, 0, 595, 206, 207, 208, 640, 641, 618,
	0, 0, 209, 210, 663, 664, 665, 0, 211, 0,
	212, 0, 0, 685, 0, 213, 651, 0, 353, 0,
	0, 214, 215, 216, 217, 647, 649, 687, 0, 221,
	0, 218, 0, 686, 219, 666, 220, 667, 668, 669,
	670, 671, 0, 629, 0, 688, 222, 223, 224, 689,
	225, 226, 227, 0, 229, 228, 0, 652, 690, 230,
	691, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 692, 238, 239, 241, 240, 590, 0,
	619, 648, 242, 672, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 367, 693, 248, 694, 642, 249,
	250, 251, 252, 253, 0, 254, 643, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 673, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 695, 277, 278, 596, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	636, 291, 280, 281, 292, 696, 293, 674, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 675, 298, 299,
	644, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 676, 677, 0, 0, 310, 311, 645,
	646, 617, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 637, 320, 0, 383, 321, 322, 323, 384,
	678, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 591, 0, 0, 0, 0, 0, 589,
	0, 0, 0, 0, 587, 588, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 0, 0, 0, 1493, 600,
	1485, 611, 612, 609, 610, 601, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 639, 604, 0, 0, 0, 178,
	179, 180, 331, 654, 333, 655, 181, 656, 657, 0,
	182, 337, 338, 183, 184, 607, 638, 658, 659, 341,
	0, 185, 650, 0, 630, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 684, 193, 194, 195,
	0, 631, 632, 634, 0, 633, 635, 196, 197, 393,
	198, 660, 1488, 661, 662, 0, 200, 0, 201, 0,
	202, 0, 0, 653, 204, 0, 205, 0, 0, 0,
	595, 206, 207, 208, 640, 641, 618, 0, 0, 209,
	210, 663, 664, 665, 0, 211, 0, 212, 0, 0,
	685, 0, 213, 651, 0, 353, 0, 0, 214, 1489,
	216, 217, 647, 649, 687, 0, 221, 0, 218, 0,
	686, 219, 666, 220, 667, 668, 669, 670, 671, 0,
	629, 0, 688, 222, 223, 224, 689, 225, 226, 227,
	0, 229, 228, 0, 652, 690, 230, 691, 0, 231,
	0, 0, 232, 0, 233, 1490, 1487, 237, 364, 236,
	692, 238, 239, 241, 240, 590, 0, 619, 648, 242,
	672, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 693, 248, 694, 642, 249, 250, 251, 252,
	253, 0, 254, 643, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 673, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 695, 277, 278, 596, 279, 0, 283, 284, 285,
	1491, 0, 288, 373, 287, 289, 290, 636, 291, 280,
	281, 292, 696, 293, 674, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 675, 298, 299, 644, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	676, 677, 0, 0, 310, 311, 645, 646, 617, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 637,
	320, 0, 383, 321, 322, 323, 384, 678, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 1486, 329,
	591, 0, 0, 0, 0, 0, 589, 0, 0, 0,
	0, 587, 588, 0, 0, 0, 0, 0, 0, 0,
	597, 0, 0, 0, 0, 1482, 600, 1485, 611, 612,
	609, 610, 601, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 639, 604, 0, 0, 0, 178, 179, 180, 331,
	654, 333, 655, 181, 656, 657, 0, 182, 337, 338,
	183, 184, 607, 638, 658, 659, 341, 0, 185, 650,
	0, 630, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 684, 193, 194, 195, 0, 631, 632,
	634, 0, 633, 635, 196, 197, 393, 198, 660, 1488,
	661, 662, 0, 200, 0, 201, 0, 202, 0, 0,
	653, 204, 0, 205, 0, 0, 0, 595, 206, 207,
	208, 640, 641, 618, 0, 0, 209, 210, 663, 664,
	665, 0, 211, 0, 212, 0, 0, 685, 0, 213,
	651, 0, 353, 0, 0, 214, 1489, 216, 217, 647,
	649, 687, 0, 221, 0, 218, 0, 686, 219, 666,
	220, 667, 668, 669, 670, 671, 0, 629, 0, 688,
	222, 223, 224, 689, 225, 226, 227, 0, 229, 228,
	0, 652, 690, 230, 691, 0, 231, 0, 0, 232,
	0, 233, 1490, 1487, 237, 364, 236, 692, 238, 239,
	241, 240, 590, 0, 619, 648, 242, 672, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 367, 693,
	248, 694, 642, 249, 250, 251, 252, 253, 0, 254,
	643, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	673, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 695, 277,
	278, 596, 279, 0, 283, 284, 285, 1491, 0, 288,
	373, 287, 289, 290, 636, 291, 280, 281, 292, 696,
	293, 674, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 675, 298, 299, 644, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 378, 676, 677, 0,
	0, 310, 311, 645, 646, 617, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 637, 320, 0, 383,
	321, 322, 323, 384, 678, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 1486, 329, 591, 0, 0,
	0, 0, 0, 589, 0, 0, 0, 0, 587, 588,
	622, 611, 612, 609, 610, 601, 0, 597, 0, 0,
	0, 0, 0, 600, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 639, 604, 0, 0, 0, 178,
	179, 180, 331, 654, 333, 655, 181, 656, 657, 0,
	182, 337, 338, 183, 184, 607, 638, 658, 659, 341,
	0, 185, 650, 0, 630, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 684, 193, 194, 195,
	0, 631, 632, 634, 0, 633, 635, 196, 197, 393,
	198, 660, 199, 661, 662, 0, 200, 0, 201, 0,
	202, 0, 0, 653, 204, 0, 205, 0, 0, 0,
	595, 206, 207, 208, 640, 641, 618, 0, 0, 209,
	210, 663, 664, 665, 0, 211, 0, 212, 0, 0,
	685, 0, 213, 651, 0, 353, 0, 0, 214, 215,
	216, 217, 647, 649, 687, 0, 221, 0, 218, 0,
	686, 219, 666, 220, 667, 668, 669, 670, 671, 0,
	629, 0, 688, 222, 223, 224, 689, 225, 226, 227,
	0, 229, 228, 0, 652, 690, 230, 691, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	692, 238, 239, 241, 240, 590, 0, 619, 648, 242,
	672, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 693, 248, 694, 642, 249, 250, 251, 252,
	253, 0, 254, 643, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 673, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 695, 277, 278, 596, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 636, 291, 280,
	281, 292, 696, 293, 674, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 675, 298, 299, 644, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	676, 677, 0, 0, 310, 311, 645, 646, 617, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 637,
	320, 0, 383, 321, 322, 323, 384, 678, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	591, 0, 0, 0, 0, 0, 589, 0, 0, 0,
	0, 587, 588, 622, 611, 612, 609, 610, 601, 0,
	597, 1441, 0, 0, 0, 0, 600, 0, 0, 175,
	176, 1357, 177, 0, 0, 0, 0, 639, 604, 0,
	0, 0, 178, 179, 180, 331, 654, 333, 655, 181,
	656, 657, 0, 182, 337, 338, 183, 184, 607, 638,
	658, 659, 341, 0, 185, 650, 0, 630, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 684,
	193, 194, 195, 0, 631, 632, 634, 0, 633, 635,
	196, 197, 393, 198, 660, 199, 661, 662, 0, 200,
	0, 201, 0, 202, 0, 0, 653, 204, 0, 205,
	0, 0, 0, 595, 206, 207, 208, 640, 641, 618,
	0, 0, 209, 210, 663, 664, 665, 0, 211, 0,
	212, 0, 0, 685, 0, 213, 651, 0, 353, 0,
	0, 214, 215, 216, 217, 647, 649, 687, 0, 221,
	0, 218, 0, 686, 219, 666, 220, 667, 668, 669,
	670, 671, 0, 629, 0, 688, 222, 223, 224, 689,
	225, 226, 227, 0, 229, 228, 0, 652, 690, 230,
	691, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 692, 238, 239, 241, 240, 590, 0,
	619, 648, 242, 672, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 367, 693, 248, 694, 642, 249,
	250, 251, 252, 253, 0, 254, 643, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 673, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 695, 277, 278, 596, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	636, 291, 280, 281, 292, 696, 293, 674, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 675, 298, 299,
	644, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 676, 677, 0, 0, 310, 311, 645,
	646, 617, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 637, 320, 0, 383, 321, 322, 323, 384,
	678, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 591, 0, 0, 0, 0, 0, 589,
	0, 0, 0, 0, 587, 588, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 0, 0, 0, 763, 600,
	622, 611, 612, 609, 610, 601, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 639, 604, 0, 0, 0, 178,
	179, 180, 331, 654, 333, 655, 181, 656, 657, 0,
	182, 337, 338, 183, 184, 607, 638, 658, 659, 341,
	0, 185, 650, 0, 630, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 684, 193, 194, 195,
	0, 631, 632, 634, 0, 633, 635, 196, 197, 393,
	198, 660, 199, 661, 662, 0, 200, 0, 201, 0,
	202, 0, 0, 653, 204, 0, 205, 0, 0, 0,
	595, 206, 207, 208, 640, 641, 618, 0, 0, 209,
	210, 663, 664, 665, 0, 211, 0, 212, 0, 0,
	685, 0, 213, 651, 0, 353, 0, 0, 214, 215,
	216, 217, 647, 649, 687, 0, 221, 0, 218, 0,
	686, 219, 666, 220, 667, 668, 669, 670, 671, 0,
	629, 0, 688, 222, 223, 224, 689, 225, 226, 227,
	0, 229, 228, 0, 652, 690, 230, 691, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	692, 238, 239, 241, 240, 590, 0, 619, 648, 242,
	672, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 693, 248, 694, 642, 249, 250, 251, 252,
	253, 0, 254, 643, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 673, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 695, 277, 278, 596, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 636, 291, 280,
	281, 292, 696, 293, 674, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 675, 298, 299, 644, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	676, 677, 0, 0, 310, 311, 645, 646, 617, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 637,
	320, 0, 383, 321, 322, 323, 384, 678, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	591, 0, 0, 0, 0, 0, 589, 0, 0, 0,
	0, 587, 588, 0, 0, 0, 0, 0, 0, 0,
	597, 0, 0, 0, 0, 761, 600, 622, 611, 612,
	609, 610, 601, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 639, 604, 0, 0, 0, 178, 179, 180, 331,
	654, 333, 655, 181, 656, 657, 0, 182, 337, 338,
	183, 184, 607, 638, 658, 659, 341, 0, 185, 650,
	0, 630, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 684, 193, 194, 195, 0, 631, 632,
	634, 0, 633, 635, 196, 197, 393, 198, 660, 199,
	661, 662, 0, 200, 0, 201, 0, 202, 0, 0,
	653, 204, 0, 205, 0, 0, 0, 595, 206, 207,
	208, 640, 641, 618, 0, 0, 209, 210, 663, 664,
	665, 0, 211, 0, 212, 0, 0, 685, 0, 213,
	651, 0, 353, 0, 0, 214, 215, 216, 217, 647,
	649, 687, 0, 221, 0, 218, 0, 686, 219, 666,
	220, 667, 668, 669, 670, 671, 0, 629, 0, 688,
	222, 223, 224, 689, 225, 226, 227, 0, 229, 228,
	0, 652, 690, 230, 691, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 236, 692, 238, 239,
	241, 240, 590, 0, 619, 648, 242, 672, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 367, 693,
	248, 694, 642, 249, 250, 251, 252, 253, 0, 254,
	643, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	673, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 695, 277,
	278, 596, 279, 0, 283, 284, 285, 286, 0, 288,
	373, 287, 289, 290, 636, 291, 280, 281, 292, 696,
	293, 674, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 675, 298, 299, 644, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 378, 676, 677, 0,
	0, 310, 311, 645, 646, 617, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 637, 320, 0, 383,
	321, 322, 323, 384, 678, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 591, 0, 0,
	0, 0, 0, 589, 0, 0, 0, 0, 587, 588,
	622, 611, 612, 609, 610, 601, 0, 597, 0, 0,
	0, 0, 0, 600, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 639, 604, 0, 0, 0, 178,
	179, 180, 331, 654, 333, 655, 181, 656, 657, 0,
	182, 337, 338, 183, 184, 607, 638, 658, 659, 341,
	0, 185, 650, 0, 630, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 684, 193, 194, 2430,
	0, 631, 632, 634, 0, 633, 635, 196, 197, 393,
	198, 660, 199, 661, 662, 0, 200, 0, 201, 0,
	202, 0, 0, 653, 204, 0, 205, 0, 0, 0,
	595, 206, 207, 208, 640, 641, 618, 0, 0, 209,
	210, 663, 664, 665, 0, 211, 0, 212, 0, 0,
	685, 0, 213, 651, 0, 353, 0, 0, 214, 215,
	216, 217, 647, 649, 687, 0, 221, 0, 218, 0,
	686, 219, 666, 220, 667, 668, 669, 670, 671, 0,
	629, 0, 688, 222, 223, 224, 689, 225, 226, 227,
	0, 229, 228, 0, 652, 690, 230, 691, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	692, 238, 239, 241, 240, 590, 0, 619, 648, 242,
	672, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 693, 248, 694, 642, 249, 250, 251, 252,
	253, 0, 254, 643, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 673, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 695, 277, 278, 596, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 636, 291, 280,
	281, 292, 696, 293, 674, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 675, 298, 299, 644, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	676, 677, 0, 0, 310, 311, 645, 646, 617, 312,
	313, 2429, 315, 0, 0, 316, 317, 318, 319, 637,
	320, 0, 383, 321, 322, 323, 384, 678, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	591, 0, 0, 0, 0, 0, 589, 0, 0, 0,
	0, 587, 588, 622, 611, 612, 609, 610, 601, 0,
	597, 0, 0, 0, 0, 0, 600, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 639, 604, 0,
	0, 0, 178, 179, 180, 331, 654, 333, 655, 181,
	656, 657, 0, 182, 337, 338, 183, 184, 607, 638,
	658, 659, 341, 0, 185, 650, 0, 630, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 684,
	193, 194, 195, 0, 631, 632, 634, 0, 633, 635,
	196, 197, 393, 198, 660, 199, 661, 662, 0, 200,
	0, 201, 0, 202, 0, 0, 653, 204, 0, 205,
	0, 0, 0, 595, 206, 207, 208, 640, 641, 618,
	0, 0, 209, 210, 663, 664, 665, 0, 211, 0,
	212, 0, 0, 685, 0, 213, 651, 0, 353, 0,
	0, 214, 215, 216, 217, 647, 649, 687, 0, 221,
	0, 218, 0, 686, 219, 666, 220, 667, 668, 669,
	670, 671, 0, 629, 0, 688, 222, 223, 224, 689,
	225, 226, 227, 0, 229, 228, 0, 652, 690, 230,
	691, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 692, 238, 239, 241, 240, 590, 0,
	619, 648, 242, 672, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 367, 693, 248, 694, 642, 249,
	250, 251, 252, 253, 0, 254, 643, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 673, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 695, 277, 278, 596, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	636, 291, 280, 281, 292, 696, 293, 674, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 675, 298, 299,
	644, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 676, 677, 0, 0, 310, 311, 645,
	646, 617, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 637, 320, 0, 383, 321, 322, 323, 384,
	678, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 591, 0, 0, 0, 0, 0, 589,
	0, 0, 0, 0, 587, 588, 622, 611, 612, 609,
	610, 601, 0, 597, 0, 0, 0, 0, 0, 600,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	639, 604, 0, 0, 0, 178, 179, 180, 2428, 654,
	333, 655, 181, 656, 657, 0, 182, 337, 338, 183,
	184, 607, 638, 658, 659, 341, 0, 185, 650, 0,
	630, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 684, 193, 194, 2430, 0, 631, 632, 634,
	0, 633, 635, 196, 197, 393, 198, 660, 199, 661,
	662, 0, 200, 0, 201, 0, 202, 0, 0, 653,
	204, 0, 205, 0, 0, 0, 595, 206, 207, 208,
	640, 641, 618, 0, 0, 209, 210, 663, 664, 665,
	0, 211, 0, 212, 0, 0, 685, 0, 213, 651,
	0, 353, 0, 0, 214, 215, 216, 217, 647, 649,
	687, 0, 221, 0, 218, 0, 686, 219, 666, 220,
	667, 668, 669, 670, 671, 0, 629, 0, 688, 222,
	223, 224, 689, 225, 226, 227, 0, 229, 228, 0,
	652, 690, 230, 691, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 692, 238, 239, 241,
	240, 590, 0, 619, 648, 242, 672, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 693, 248,
	694, 642, 249, 250, 251, 252, 253, 0, 254, 643,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 673,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 695, 277, 278,
	596, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 636, 291, 280, 281, 292, 696, 293,
	674, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	675, 298, 299, 644, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 676, 677, 0, 0,
	310, 311, 645, 646, 617, 312, 313, 2429, 315, 0,
	0, 316, 317, 318, 319, 637, 320, 0, 383, 321,
	322, 323, 384, 678, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 591, 0, 0, 0,
	0, 0, 589, 0, 0, 0, 0, 587, 588, 622,
	611, 612, 609, 610, 601, 0, 597, 0, 0, 0,
	0, 0, 600, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 639, 604, 0, 0, 0, 178, 179,
	180, 331, 654, 333, 655, 181, 656, 657, 0, 182,
	337, 338, 183, 184, 607, 638, 658, 659, 341, 0,
	185, 650, 0, 630, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 684, 193, 194, 195, 0,
	631, 632, 634, 0, 633, 635, 196, 197, 393, 198,
	660, 199, 661, 662, 0, 200, 0, 201, 0, 202,
	0, 0, 653, 204, 0, 205, 0, 0, 0, 595,
	206, 207, 208, 640, 641, 618, 0, 0, 209, 210,
	663, 664, 665, 0, 211, 0, 212, 0, 0, 685,
	0, 213, 651, 0, 353, 0, 0, 214, 215, 216,
	217, 647, 649, 687, 0, 221, 0, 218, 0, 686,
	219, 666, 220, 667, 668, 669, 670, 671, 0, 629,
	0, 688, 222, 223, 224, 689, 225, 226, 227, 0,
	229, 228, 0, 652, 690, 230, 691, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 692,
	238, 239, 241, 240, 0, 0, 619, 648, 242, 672,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 693, 248, 694, 642, 249, 250, 251, 252, 253,
	0, 254, 643, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 673, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	695, 277, 278, 1505, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 636, 291, 280, 281,
	292, 696, 293, 674, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 675, 298, 299, 644, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 676,
	677, 0, 0, 310, 311, 645, 646, 617, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 637, 320,
	0, 383, 321, 322, 323, 384, 678, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 622,
	611, 612, 609, 610, 601, 1503, 0, 0, 0, 0,
	1501, 1502, 0, 0, 0, 175, 176, 0, 177, 1504,
	0, 0, 0, 639, 604, 600, 0, 0, 178, 179,
	180, 0, 654, 333, 655, 181, 656, 657, 0, 182,
	337, 338, 183, 184, 607, 638, 658, 659, 341, 0,
	185, 650, 0, 630, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 684, 193, 194, 2430, 0,
	631, 632, 634, 0, 633, 635, 196, 197, 393, 198,
	660, 199, 661, 662, 0, 200, 0, 201, 0, 202,
	0, 0, 653, 204, 0, 205, 0, 0, 0, 595,
	206, 207, 208, 640, 641, 618, 0, 0, 209, 210,
	663, 664, 665, 0, 211, 0, 212, 0, 0, 685,
	0, 213, 651, 0, 353, 0, 0, 214, 215, 216,
	217, 647, 649, 0, 0, 221, 0, 218, 0, 686,
	219, 666, 220, 667, 668, 669, 670, 671, 0, 629,
	0, 0, 222, 223, 224, 689, 225, 226, 227, 0,
	229, 228, 0, 652, 690, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 692,
	238, 239, 241, 240, 590, 0, 619, 648, 242, 672,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 693, 248, 694, 642, 249, 250, 251, 252, 253,
	0, 254, 643, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 673, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	695, 277, 278, 596, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 636, 291, 280, 281,
	292, 0, 293, 674, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 675, 298, 299, 644, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 676,
	677, 0, 0, 310, 311, 645, 646, 617, 312, 313,
	2429, 315, 0, 0, 316, 317, 318, 319, 637, 320,
	0, 383, 321, 322, 323, 384, 678, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 622,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 588, 0, 0, 0, 175, 176, 0, 177, 597,
	0, 0, 0, 639, 0, 600, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 638, 339, 340, 341, 0,
	185, 650, 0, 630, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 684, 193, 194, 195, 0,
	631, 632, 634, 0, 633, 635, 196, 197, 393, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 640, 641, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 685,
	0, 213, 651, 0, 353, 0, 0, 214, 215, 216,
	217, 647, 649, 687, 0, 221, 0, 218, 0, 686,
	219, 356, 220, 357, 358, 359, 360, 361, 0, 362,
	0, 688, 222, 223, 224, 689, 225, 226, 227, 0,
	229, 228, 0, 652, 690, 230, 691, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 692,
	238, 239, 241, 240, 0, 0, 0, 648, 242, 366,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 693, 248, 694, 642, 249, 250, 251, 252, 253,
	0, 254, 643, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 371, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	695, 277, 278, 372, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 636, 291, 280, 281,
	292, 696, 293, 374, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 376, 298, 299, 644, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 379,
	380, 0, 0, 310, 311, 645, 646, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 637, 320,
	0, 383, 321, 322, 323, 384, 385, 0, 0, 324,
	812, 0, 815, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 2077,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 820, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 684, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 393, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 685, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 687, 0, 221, 0,
	218, 0, 686, 219, 356, 220, 357, 358, 359, 360,
	361, 0, 362, 0, 688, 222, 223, 224, 689, 225,
	226, 227, 0, 229, 228, 0, 363, 690, 230, 691,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 692, 238, 239, 241, 240, 0, 0, 0,
	365, 242, 366, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 693, 248, 694, 368, 249, 250,
	251, 252, 253, 0, 254, 369, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 371, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 695, 277, 278, 372, 279, 0, 283,
	284, 285, 286, 132, 288, 373, 287, 289, 290, 0,
	291, 280, 281, 292, 696, 293, 374, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 376, 298, 299, 377,
	0, 302, 134, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 379, 380, 0, 0, 310, 311, 381, 382,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 383, 321, 322, 323, 819, 385,
	0, 0, 324, 573, 0, 172, 126, 325, 326, 327,
	328, 329, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 118, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 393, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 221, 0, 218, 0, 0, 219, 356, 220, 357,
	358, 359, 360, 361, 0, 362, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 363,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 365, 242, 366, 243, 244, 0, 245,
	0, 736, 246, 0, 0, 247, 367, 0, 248, 0,
	368, 249, 250, 251, 252, 253, 0, 254, 369, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 371, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 372,
	279, 0, 283, 284, 285, 286, 132, 288, 373, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 374,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 376,
	298, 299, 377, 0, 302, 134, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 379, 380, 0, 0, 310,
	311, 381, 382, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 383, 321, 322,
	323, 819, 385, 0, 0, 324, 0, 172, 0, 126,
	325, 326, 327, 328, 329, 0, 127, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 730, 0, 1075, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 393, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 221, 0, 218, 0, 0, 219, 356,
	220, 357, 358, 359, 360, 361, 0, 362, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 363, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 365, 242, 366, 243, 244,
	0, 245, 0, 736, 246, 0, 0, 247, 367, 0,
	248, 0, 368, 249, 250, 251, 252, 253, 0, 254,
	369, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	371, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 372, 279, 0, 283, 284, 285, 286, 132, 288,
	373, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 374, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 376, 298, 299, 377, 0, 302, 134, 303, 304,
	305, 306, 307, 308, 309, 0, 378, 379, 380, 0,
	0, 310, 311, 381, 382, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 383,
	321, 322, 323, 819, 385, 0, 0, 324, 573, 0,
	172, 126, 325, 326, 327, 328, 329, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 730, 0, 1075, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 221, 0, 218, 0,
	0, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 363, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 0, 248, 0, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 132, 288, 373, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	134, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 819, 385, 0, 0,
	324, 1825, 0, 172, 126, 325, 326, 327, 328, 329,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	118, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 393, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 0, 0, 221,
	0, 218, 0, 0, 219, 356, 220, 357, 358, 359,
	360, 361, 0, 362, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 363, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 365, 242, 366, 243, 244, 0, 245, 0, 736,
	246, 0, 0, 247, 367, 0, 248, 0, 368, 249,
	250, 251, 252, 253, 0, 254, 369, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 371, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 372, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 374, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 376, 298, 299,
	377, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 379, 380, 0, 0, 310, 311, 381,
	382, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 383, 321, 322, 323, 384,
	385, 0, 0, 324, 729, 0, 172, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 730, 0, 735, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 393, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	0, 0, 221, 0, 218, 0, 0, 219, 356, 220,
	357, 358, 359, 360, 361, 0, 362, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	363, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 365, 242, 366, 243, 244, 0,
	245, 0, 736, 246, 0, 0, 247, 367, 0, 248,
	0, 368, 249, 250, 251, 252, 253, 0, 254, 369,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 371,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	372, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	374, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	376, 298, 299, 377, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 379, 380, 0, 0,
	310, 311, 381, 382, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 383, 321,
	322, 323, 384, 385, 0, 0, 324, 0, 172, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 730, 0, 735, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 393, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 0, 0, 221, 0, 218, 0, 0, 219,
	356, 220, 357, 358, 359, 360, 361, 0, 362, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 363, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 365, 242, 366, 243,
	244, 0, 245, 0, 736, 246, 0, 0, 247, 367,
	0, 248, 0, 368, 249, 250, 251, 252, 253, 0,
	254, 369, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 371, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 372, 279, 0, 283, 284, 285, 286, 0,
	288, 373, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 374, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 376, 298, 299, 377, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 379, 380,
	0, 0, 310, 311, 381, 382, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	383, 321, 322, 323, 384, 385, 0, 0, 324, 0,
	172, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 730, 0, 735, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 221, 0, 218, 0,
	0, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 363, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 0, 248, 0, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 384, 385, 0, 0,
	324, 0, 0, 172, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 1192, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 393, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 0, 0, 221,
	0, 218, 0, 0, 219, 356, 220, 357, 358, 359,
	360, 361, 0, 362, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 363, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 365, 242, 366, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 367, 0, 248, 0, 368, 249,
	250, 251, 252, 253, 0, 254, 369, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 371, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 372, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 374, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 376, 298, 299,
	377, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 379, 380, 0, 0, 310, 311, 381,
	382, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 383, 321, 322, 323, 384,
	385, 0, 0, 324, 0, 172, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 1643, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 393, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 221, 0, 218, 0, 0, 219, 356, 220, 357,
	358, 359, 360, 361, 0, 362, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 363,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 365, 242, 366, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 0, 248, 0,
	368, 249, 250, 251, 252, 253, 0, 254, 369, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 371, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 372,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 374,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 376,
	298, 299, 377, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 379, 380, 0, 0, 310,
	311, 381, 382, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 383, 321, 322,
	323, 384, 385, 0, 0, 324, 0, 172, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 1992, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 393, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 221, 0, 218, 0, 0, 219, 356,
	220, 357, 358, 359, 360, 361, 0, 362, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 363, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 365, 242, 366, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 367, 0,
	248, 0, 368, 249, 250, 251, 252, 253, 0, 254,
	369, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	371, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 372, 279, 0, 283, 284, 285, 286, 0, 288,
	373, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 374, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 376, 298, 299, 377, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 378, 379, 380, 0,
	0, 310, 311, 381, 382, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 383,
	321, 322, 323, 384, 385, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 622, 611, 612,
	609, 610, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 1078, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	654, 333, 655, 181, 656, 657, 0, 182, 337, 338,
	183, 184, 0, 0, 658, 659, 341, 0, 185, 342,
	0, 820, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 684, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 393, 198, 660, 199,
	661, 662, 0, 200, 0, 201, 0, 202, 0, 0,
	653, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 618, 0, 0, 209, 210, 663, 664,
	665, 0, 211, 0, 212, 0, 0, 685, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 687, 0, 221, 0, 218, 0, 686, 219, 666,
	220, 667, 668, 669, 670, 671, 0, 629, 0, 688,
	222, 223, 224, 689, 225, 226, 227, 0, 229, 228,
	0, 363, 690, 230, 691, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 236, 692, 238, 239,
	241, 240, 0, 0, 619, 365, 242, 672, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 367, 693,
	248, 694, 368, 249, 250, 251, 252, 253, 0, 254,
	369, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	673, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 695, 277,
	278, 372, 279, 0, 283, 284, 285, 286, 0, 288,
	373, 287, 289, 290, 0, 291, 280, 281, 292, 696,
	293, 674, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 675, 298, 299, 377, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 378, 676, 677, 0,
	0, 310, 311, 381, 382, 617, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 383,
	321, 322, 323, 384, 678, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 870, 0, 815,
	874, 0, 0, 0, 872, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 820, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 684, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 393, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 685,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 687, 0, 221, 0, 218, 0, 686,
	219, 356, 220, 357, 358, 359, 360, 361, 0, 362,
	0, 688, 222, 223, 224, 689, 225, 226, 227, 0,
	229, 228, 0, 363, 690, 230, 691, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 692,
	238, 239, 241, 240, 0, 0, 0, 365, 242, 366,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 693, 248, 694, 368, 249, 250, 251, 252, 253,
	0, 254, 369, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 371, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	695, 277, 278, 372, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 0, 291, 280, 281,
	292, 696, 293, 374, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 376, 298, 299, 377, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 379,
	380, 0, 0, 310, 311, 381, 382, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 383, 321, 322, 323, 384, 385, 0, 478, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 168,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 221, 0, 218, 0,
	0, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 363, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 0, 248, 0, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	167, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 384, 385, 0, 165,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 171, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	168, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 221, 0, 218,
	0, 0, 219, 356, 220, 357, 358, 359, 360, 361,
	0, 362, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 363, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 365,
	242, 366, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 0, 248, 0, 368, 249, 250, 251,
	252, 253, 0, 254, 369, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 371, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 372, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 374, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 376, 298, 299, 377, 0,
	302, 167, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 379, 380, 0, 0, 310, 311, 381, 382, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 383, 321, 322, 323, 384, 385, 815,
	874, 324, 0, 0, 872, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 171, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 820, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 684, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 393, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 685,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 687, 0, 221, 0, 218, 0, 686,
	219, 356, 220, 357, 358, 359, 360, 361, 0, 362,
	0, 688, 222, 223, 224, 689, 225, 226, 227, 0,
	229, 228, 0, 363, 690, 230, 691, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 692,
	238, 239, 241, 240, 0, 0, 0, 365, 242, 366,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 693, 248, 694, 368, 249, 250, 251, 252, 253,
	0, 254, 369, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 371, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	695, 277, 278, 372, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 0, 291, 280, 281,
	292, 696, 293, 374, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 376, 298, 299, 377, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 379,
	380, 0, 0, 310, 311, 381, 382, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 383, 321, 322, 323, 384, 385, 172, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 168, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 221, 0, 218, 0, 0, 219, 356,
	220, 357, 358, 359, 360, 361, 0, 362, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 363, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 365, 242, 366, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 367, 0,
	248, 0, 368, 249, 250, 251, 252, 253, 0, 254,
	369, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	371, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 372, 279, 0, 283, 284, 285, 286, 0, 288,
	373, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 374, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 376, 298, 299, 377, 0, 302, 167, 303, 304,
	305, 306, 307, 308, 309, 0, 378, 379, 380, 0,
	0, 310, 311, 381, 382, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 383,
	321, 322, 323, 384, 385, 815, 874, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	171, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 820,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 684, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 393, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 685, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 687,
	0, 221, 0, 218, 0, 686, 219, 356, 220, 357,
	358, 359, 360, 361, 0, 362, 0, 688, 222, 223,
	224, 689, 225, 226, 227, 0, 229, 228, 0, 363,
	690, 230, 691, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 692, 238, 239, 241, 240,
	0, 0, 0, 365, 242, 366, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 693, 248, 694,
	368, 249, 250, 251, 252, 253, 0, 254, 369, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 371, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 695, 277, 278, 372,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 0, 291, 280, 281, 292, 696, 293, 374,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 376,
	298, 299, 377, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 379, 380, 0, 0, 310,
	311, 381, 382, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 383, 321, 322,
	323, 384, 385, 172, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 393, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 0, 0, 221,
	0, 218, 0, 0, 219, 356, 220, 357, 358, 359,
	360, 361, 0, 362, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 363, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 365, 242, 366, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 367, 0, 248, 0, 368, 249,
	250, 251, 252, 253, 0, 254, 369, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 371, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 372, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 374, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 376, 298, 299,
	377, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 379, 380, 0, 0, 310, 311, 381,
	382, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 383, 321, 322, 323, 384,
	385, 815, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 171, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 820, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 684, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	393, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 685, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 687, 0, 221, 0, 218,
	0, 686, 219, 356, 220, 357, 358, 359, 360, 361,
	0, 362, 0, 688, 222, 223, 224, 689, 225, 226,
	227, 0, 229, 228, 0, 363, 690, 230, 691, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 692, 238, 239, 241, 240, 0, 0, 0, 365,
	242, 366, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 693, 248, 694, 368, 249, 250, 251,
	252, 253, 0, 254, 369, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 371, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 695, 277, 278, 372, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 0, 291,
	280, 281, 292, 696, 293, 374, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 376, 298, 299, 377, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 379, 380, 0, 0, 310, 311, 381, 382, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 383, 321, 322, 323, 384, 385, 172,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 1581,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	1579, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 393, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 1620, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 1584, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 0, 0, 221, 1618, 218, 0, 0,
	219, 356, 220, 357, 358, 359, 360, 361, 0, 362,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 363, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 365, 242, 366,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 0, 248, 0, 368, 249, 250, 251, 252, 253,
	0, 254, 369, 255, 370, 256, 1583, 257, 258, 259,
	260, 261, 371, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 372, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 374, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 376, 298, 299, 377, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 379,
	380, 0, 0, 310, 311, 381, 382, 0, 312, 313,
	314, 315, 0, 1619, 316, 317, 318, 319, 0, 320,
	0, 383, 321, 322, 323, 384, 385, 172, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 1581, 185, 342,
	0, 0, 1576, 186, 187, 188, 0, 189, 1579, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 393, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 1584, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 1575,
	355, 0, 0, 221, 0, 218, 0, 0, 219, 356,
	220, 357, 358, 359, 360, 361, 0, 362, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 363, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 365, 242, 366, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 367, 0,
	248, 0, 368, 249, 250, 251, 252, 253, 0, 254,
	369, 255, 370, 256, 1583, 257, 258, 259, 260, 261,
	371, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 372, 279, 0, 283, 284, 285, 286, 0, 288,
	373, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 374, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 376, 298, 299, 377, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 378, 379, 380, 0,
	0, 310, 311, 381, 382, 0, 312, 313, 314, 315,
	0, 1582, 316, 317, 318, 319, 0, 320, 0, 383,
	321, 322, 323, 384, 385, 0, 790, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 393, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 0, 0, 221, 0, 218, 0, 0, 219,
	356, 220, 357, 358, 359, 360, 361, 0, 362, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 363, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 365, 242, 366, 243,
	244, 0, 245, 0, 736, 246, 0, 0, 247, 367,
	0, 248, 0, 368, 249, 250, 251, 252, 253, 0,
	254, 369, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 371, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 372, 279, 0, 283, 284, 285, 286, 0,
	288, 373, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 374, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 376, 298, 299, 377, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 379, 380,
	0, 0, 310, 311, 381, 382, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	383, 321, 322, 323, 384, 385, 0, 742, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 393, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 744, 355, 0, 0, 221, 0, 218, 0, 0,
	219, 356, 220, 357, 358, 359, 360, 361, 0, 362,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 363, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 365, 242, 366,
	243, 244, 0, 245, 0, 736, 246, 0, 0, 247,
	367, 0, 248, 0, 368, 249, 250, 251, 252, 253,
	0, 254, 369, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 371, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 372, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 374, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 376, 298, 299, 377, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 379,
	380, 0, 0, 310, 311, 381, 382, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 383, 321, 322, 323, 384, 385, 0, 738, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 740, 355, 0, 0, 221, 0, 218, 0,
	0, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 363, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 736, 246, 0, 0,
	247, 367, 0, 248, 0, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 384, 385, 0, 410,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 409,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	393, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 221, 0, 218,
	0, 0, 219, 356, 220, 357, 358, 359, 360, 361,
	0, 362, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 363, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 365,
	242, 366, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 0, 248, 0, 368, 249, 250, 251,
	252, 253, 0, 254, 369, 255, 370, 408, 0, 257,
	258, 259, 260, 261, 371, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 372, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 374, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 376, 298, 299, 377, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 379, 380, 0, 0, 310, 311, 381, 382, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 383, 321, 322, 323, 384, 385, 172,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 1564, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 393, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 0, 0, 221, 0, 218, 0, 0,
	219, 356, 220, 357, 358, 359, 360, 361, 0, 362,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 363, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 365, 242, 366,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 0, 248, 0, 368, 249, 250, 251, 252, 253,
	0, 254, 369, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 371, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 372, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 374, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 376, 298, 299, 377, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 379,
	380, 0, 0, 310, 311, 381, 382, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 383, 321, 322, 323, 384, 385, 172, 2138, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 393, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 221, 0, 218, 0, 0, 219, 356,
	220, 357, 358, 359, 360, 361, 0, 362, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 363, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 365, 242, 366, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 367, 0,
	248, 0, 368, 249, 250, 251, 252, 253, 0, 254,
	369, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	371, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 372, 279, 0, 283, 284, 285, 286, 0, 288,
	373, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 374, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 376, 298, 299, 377, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 378, 379, 380, 0,
	0, 310, 311, 381, 382, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 383,
	321, 322, 323, 384, 385, 172, 2138, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 393, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 221, 0, 218, 0, 0, 219, 356, 220, 357,
	358, 359, 360, 361, 0, 362, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 363,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 365, 242, 366, 243, 244, 0, 245,
	0, 0, 2135, 0, 0, 247, 367, 0, 248, 0,
	368, 249, 250, 251, 252, 253, 0, 254, 369, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 371, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 372,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 374,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 376,
	298, 299, 377, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 379, 380, 0, 0, 310,
	311, 381, 382, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 383, 321, 322,
	323, 384, 385, 172, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 393, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 0, 0, 221,
	0, 218, 0, 0, 219, 356, 220, 357, 358, 359,
	360, 361, 0, 362, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 363, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 365, 242, 366, 243, 244, 0, 245, 0, 736,
	246, 0, 0, 247, 367, 0, 248, 0, 368, 249,
	250, 251, 252, 253, 0, 254, 369, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 371, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 372, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 374, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 376, 298, 299,
	377, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 379, 380, 0, 0, 310, 311, 381,
	382, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 383, 321, 322, 323, 384,
	385, 0, 1346, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 393, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	221, 0, 218, 0, 0, 219, 356, 220, 357, 358,
	359, 360, 361, 0, 362, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 363, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 364, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 365, 242, 366, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 367, 0, 248, 0, 368,
	249, 250, 251, 252, 253, 0, 254, 369, 255, 370,
	256, 0, 257, 258, 259, 260, 261, 371, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 372, 279,
	0, 283, 284, 285, 286, 0, 288, 373, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 374, 375,
	294, 0, 301, 295, 296, 282, 297, 300, 376, 298,
	299, 377, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 378, 379, 380, 0, 0, 310, 311,
	381, 382, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 383, 321, 322, 323,
	384, 385, 0, 1344, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 393, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 221, 0, 218, 0, 0, 219, 356, 220, 357,
	358, 359, 360, 361, 0, 362, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 363,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 365, 242, 366, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 0, 248, 0,
	368, 249, 250, 251, 252, 253, 0, 254, 369, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 371, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 372,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 374,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 376,
	298, 299, 377, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 379, 380, 0, 0, 310,
	311, 381, 382, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 383, 321, 322,
	323, 384, 385, 172, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 175,
	176, 1326, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 393, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 0, 0, 221,
	0, 218, 0, 0, 219, 356, 220, 357, 358, 359,
	360, 361, 0, 362, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 363, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 365, 242, 366, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 367, 0, 248, 0, 368, 249,
	250, 251, 252, 253, 0, 254, 369, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 371, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 372, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 374, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 376, 298, 299,
	377, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 379, 380, 0, 0, 310, 311, 381,
	382, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 383, 321, 322, 323, 384,
	385, 0, 504, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 849, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 393, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	221, 0, 218, 0, 0, 219, 356, 220, 357, 358,
	359, 360, 361, 0, 362, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 363, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 364, 506, 0, 238, 239, 241, 240, 0,
	0, 0, 365, 242, 366, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 367, 0, 248, 0, 368,
	249, 250, 251, 252, 253, 0, 254, 369, 255, 370,
	256, 0, 257, 258, 259, 260, 261, 371, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 372, 279,
	0, 283, 284, 285, 286, 0, 288, 373, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 374, 375,
	294, 0, 301, 295, 296, 282, 297, 300, 376, 298,
	299, 377, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 501, 379, 380, 0, 0, 310, 311,
	381, 382, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 383, 321, 322, 323,
	384, 385, 0, 1206, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 393, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 1205, 355, 0,
	0, 221, 0, 218, 0, 0, 219, 356, 220, 357,
	358, 359, 360, 361, 0, 362, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 363,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 365, 242, 366, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 0, 248, 0,
	368, 249, 250, 251, 252, 253, 0, 254, 369, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 371, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 372,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 374,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 376,
	298, 299, 377, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 379, 380, 0, 0, 310,
	311, 381, 382, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 383, 321, 322,
	323, 384, 385, 0, 504, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 849, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 393, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	0, 0, 221, 0, 218, 0, 0, 219, 356, 220,
	357, 358, 359, 360, 361, 0, 362, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	363, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 506, 0, 238, 239, 241,
	240, 0, 0, 0, 365, 242, 366, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 0, 248,
	0, 368, 249, 250, 251, 252, 253, 0, 254, 369,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 371,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	372, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	374, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	376, 298, 299, 377, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 501, 379, 380, 0, 0,
	310, 850, 381, 382, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 383, 321,
	322, 323, 384, 385, 0, 504, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 495, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 393, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 221, 0, 218, 0, 0, 219, 356,
	220, 357, 358, 359, 360, 361, 0, 362, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 363, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 506, 0, 238, 239,
	241, 240, 0, 0, 0, 365, 242, 366, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 367, 0,
	248, 0, 368, 249, 250, 251, 252, 253, 0, 254,
	369, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	371, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 372, 279, 0, 283, 284, 285, 286, 0, 288,
	373, 287, 833, 290, 0, 291, 280, 281, 292, 0,
	293, 374, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 376, 298, 299, 377, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 501, 379, 380, 0,
	0, 310, 311, 381, 382, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 383,
	321, 322, 323, 384, 385, 0, 808, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 393, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	807, 355, 0, 0, 221, 0, 218, 0, 0, 219,
	356, 220, 357, 358, 359, 360, 361, 0, 362, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 363, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 365, 242, 366, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 367,
	0, 248, 0, 368, 249, 250, 251, 252, 253, 0,
	254, 369, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 371, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 372, 279, 0, 283, 284, 285, 286, 0,
	288, 373, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 374, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 376, 298, 299, 377, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 379, 380,
	0, 0, 310, 311, 381, 382, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	383, 321, 322, 323, 384, 385, 0, 805, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 393, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 804, 355, 0, 0, 221, 0, 218, 0, 0,
	219, 356, 220, 357, 358, 359, 360, 361, 0, 362,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 363, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 365, 242, 366,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 0, 248, 0, 368, 249, 250, 251, 252, 253,
	0, 254, 369, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 371, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 372, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 374, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 376, 298, 299, 377, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 379,
	380, 0, 0, 310, 311, 381, 382, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 383, 321, 322, 323, 384, 385, 0, 801, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 800, 355, 0, 0, 221, 0, 218, 0,
	0, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 363, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 0, 248, 0, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 384, 385, 0, 798,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	393, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 797, 355, 0, 0, 221, 0, 218,
	0, 0, 219, 356, 220, 357, 358, 359, 360, 361,
	0, 362, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 363, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 365,
	242, 366, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 0, 248, 0, 368, 249, 250, 251,
	252, 253, 0, 254, 369, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 371, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 372, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 374, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 376, 298, 299, 377, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 379, 380, 0, 0, 310, 311, 381, 382, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 383, 321, 322, 323, 384, 385, 0,
	794, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 393, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 793, 355, 0, 0, 221, 0,
	218, 0, 0, 219, 356, 220, 357, 358, 359, 360,
	361, 0, 362, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 363, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	365, 242, 366, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 0, 248, 0, 368, 249, 250,
	251, 252, 253, 0, 254, 369, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 371, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 372, 279, 0, 283,
	284, 285, 286, 0, 288, 373, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 374, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 376, 298, 299, 377,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 379, 380, 0, 0, 310, 311, 381, 382,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 383, 321, 322, 323, 384, 385,
	172, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 175, 176, 782, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 221, 0, 218, 0,
	0, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 363, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 0, 248, 0, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 384, 385, 0, 780,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	393, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 779, 355, 0, 0, 221, 0, 218,
	0, 0, 219, 356, 220, 357, 358, 359, 360, 361,
	0, 362, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 363, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 365,
	242, 366, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 0, 248, 0, 368, 249, 250, 251,
	252, 253, 0, 254, 369, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 371, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 372, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 374, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 376, 298, 299, 377, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 379, 380, 0, 0, 310, 311, 381, 382, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 383, 321, 322, 323, 384, 385, 0,
	776, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 393, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 221, 0,
	218, 0, 0, 219, 356, 220, 357, 358, 359, 360,
	361, 0, 362, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 363, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	365, 242, 366, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 0, 248, 0, 368, 249, 250,
	251, 252, 253, 0, 254, 369, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 371, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 372, 279, 0, 283,
	284, 285, 286, 0, 288, 373, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 374, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 376, 298, 299, 377,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 379, 380, 0, 0, 310, 311, 381, 382,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 383, 321, 322, 323, 384, 385,
	0, 774, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 393, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 0, 0, 221,
	0, 218, 0, 0, 219, 356, 220, 357, 358, 359,
	360, 361, 0, 362, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 363, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 365, 242, 366, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 367, 0, 248, 0, 368, 249,
	250, 251, 252, 253, 0, 254, 369, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 371, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 372, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 374, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 376, 298, 299,
	377, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 379, 380, 0, 0, 310, 311, 381,
	382, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 383, 321, 322, 323, 384,
	385, 0, 770, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 393, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 772, 355, 0, 0,
	221, 0, 218, 0, 0, 219, 356, 220, 357, 358,
	359, 360, 361, 0, 362, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 363, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 364, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 365, 242, 366, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 367, 0, 248, 0, 368,
	249, 250, 251, 252, 253, 0, 254, 369, 255, 370,
	256, 0, 257, 258, 259, 260, 261, 371, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 372, 279,
	0, 283, 284, 285, 286, 0, 288, 373, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 374, 375,
	294, 0, 301, 295, 296, 282, 297, 300, 376, 298,
	299, 377, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 378, 379, 380, 0, 0, 310, 311,
	381, 382, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 383, 321, 322, 323,
	384, 385, 0, 748, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 393, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 750, 355, 0,
	0, 221, 0, 218, 0, 0, 219, 356, 220, 357,
	358, 359, 360, 361, 0, 362, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 363,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 365, 242, 366, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 0, 248, 0,
	368, 249, 250, 251, 252, 253, 0, 254, 369, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 371, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 372,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 374,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 376,
	298, 299, 377, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 379, 380, 0, 0, 310,
	311, 381, 382, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 383, 321, 322,
	323, 384, 385, 0, 746, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 393, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	0, 0, 221, 0, 218, 0, 0, 219, 356, 220,
	357, 358, 359, 360, 361, 0, 362, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	363, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 365, 242, 366, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 0, 248,
	0, 368, 249, 250, 251, 252, 253, 0, 254, 369,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 371,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	372, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	374, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	376, 298, 299, 377, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 379, 380, 0, 0,
	310, 311, 381, 382, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 383, 321,
	322, 323, 384, 385, 0, 504, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 495, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 393, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 221, 0, 218, 0, 0, 219, 356,
	220, 357, 358, 359, 360, 361, 0, 362, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 363, 0, 230, 0, 0, 494, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 506, 0, 238, 239,
	241, 240, 0, 0, 0, 365, 242, 366, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 367, 0,
	248, 0, 368, 249, 250, 251, 252, 253, 0, 254,
	369, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	371, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 496, 279, 0, 283, 284, 285, 286, 0, 288,
	373, 287, 497, 290, 0, 291, 280, 281, 292, 0,
	293, 374, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 376, 298, 299, 377, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 501, 379, 380, 0,
	0, 310, 499, 381, 382, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 383,
	321, 322, 323, 384, 385, 0, 486, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 393, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 0, 0, 221, 0, 218, 0, 0, 219,
	356, 220, 357, 358, 359, 360, 361, 0, 362, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 363, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 365, 242, 366, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 367,
	0, 248, 0, 368, 249, 250, 251, 252, 253, 0,
	254, 369, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 371, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 372, 279, 0, 487, 284, 285, 286, 0,
	288, 373, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 374, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 376, 298, 299, 377, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 379, 380,
	0, 0, 310, 311, 381, 382, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	383, 321, 322, 323, 384, 385, 0, 484, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 393, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 0, 0, 221, 0, 218, 0, 0,
	219, 356, 220, 357, 358, 359, 360, 361, 0, 362,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 363, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 365, 242, 366,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 0, 248, 0, 368, 249, 250, 251, 252, 253,
	0, 254, 369, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 371, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 372, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 374, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 376, 298, 299, 377, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 379,
	380, 0, 0, 310, 311, 381, 382, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 383, 321, 322, 323, 384, 385, 0, 476, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 221, 0, 218, 0,
	0, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 363, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 0, 248, 0, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 384, 385, 0, 433,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	393, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 221, 0, 218,
	0, 0, 219, 356, 220, 357, 358, 359, 360, 361,
	0, 362, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 363, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 365,
	242, 366, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 0, 248, 0, 368, 249, 250, 251,
	252, 253, 0, 254, 369, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 371, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 372, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 374, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 376, 298, 299, 377, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 379, 380, 0, 0, 310, 311, 381, 382, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 383, 321, 322, 323, 384, 385, 172,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 393, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 0, 0, 221, 0, 218, 0, 0,
	219, 356, 220, 357, 358, 359, 360, 361, 0, 362,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 363, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 365, 242, 366,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 0, 248, 0, 368, 249, 250, 251, 252, 253,
	0, 254, 369, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 371, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 372, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 374, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 376, 298, 299, 377, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 379,
	380, 0, 0, 310, 311, 381, 382, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 383, 321, 322, 323, 384, 385, 172, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 393, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 1872,
	355, 0, 0, 221, 0, 218, 0, 0, 219, 356,
	220, 357, 358, 359, 360, 361, 0, 362, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 363, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 365, 242, 366, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 367, 0,
	248, 0, 368, 249, 250, 251, 252, 253, 0, 254,
	369, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	371, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 372, 279, 0, 283, 284, 285, 286, 0, 288,
	373, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 374, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 376, 298, 299, 377, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 378, 379, 380, 0,
	0, 310, 311, 381, 382, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 383,
	321, 322, 323, 384, 385, 172, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 393, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 1870, 355, 0,
	0, 221, 0, 218, 0, 0, 219, 356, 220, 357,
	358, 359, 360, 361, 0, 362, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 363,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 365, 242, 366, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 0, 248, 0,
	368, 249, 250, 251, 252, 253, 0, 254, 369, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 371, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 372,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 374,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 376,
	298, 299, 377, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 379, 380, 0, 0, 310,
	311, 381, 382, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 383, 321, 322,
	323, 384, 385, 172, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 393, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 1859, 355, 0, 0, 221,
	0, 218, 0, 0, 219, 356, 220, 357, 358, 359,
	360, 361, 0, 362, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 363, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 365, 242, 366, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 367, 0, 248, 0, 368, 249,
	250, 251, 252, 253, 0, 254, 369, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 371, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 372, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 374, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 376, 298, 299,
	377, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 379, 380, 0, 0, 310, 311, 381,
	382, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 383, 321, 322, 323, 384,
	385, 172, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	393, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 221, 0, 218,
	0, 0, 219, 356, 220, 357, 358, 359, 360, 361,
	0, 362, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 363, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 365,
	242, 366, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 0, 248, 0, 368, 249, 250, 251,
	252, 253, 0, 254, 369, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 371, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 372, 279, 0, 487, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 374, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 376, 298, 299, 377, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 379, 380, 0, 0, 310, 311, 381, 382, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 383, 321, 322, 323, 384, 385, 172,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 1216, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 393, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 0, 0, 221, 0, 218, 0, 0,
	219, 356, 220, 357, 358, 359, 360, 361, 0, 362,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 363, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 365, 242, 366,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 0, 248, 0, 368, 249, 250, 251, 252, 253,
	0, 254, 369, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 371, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 372, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 0, 0, 280, 281,
	292, 0, 293, 374, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 376, 298, 299, 377, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 379,
	380, 0, 0, 310, 311, 381, 382, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 383, 321, 322, 323, 384, 385, 172, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 393, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 221, 0, 218, 0, 0, 219, 356,
	220, 357, 358, 359, 360, 361, 0, 362, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 363, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 365, 242, 366, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 367, 0,
	248, 0, 368, 249, 250, 251, 252, 253, 0, 254,
	369, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	371, 712, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 372, 279, 0, 283, 284, 285, 286, 0, 288,
	373, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 374, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 376, 298, 299, 377, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 378, 379, 380, 0,
	0, 310, 311, 381, 382, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 383,
	321, 322, 323, 384, 385, 172, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 393, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 221, 0, 218, 0, 0, 219, 356, 220, 357,
	358, 359, 360, 361, 0, 362, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 363,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 365, 242, 366, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 0, 248, 0,
	368, 249, 250, 0, 252, 253, 0, 254, 369, 255,
	370, 256, 0, 257, 258, 259, 0, 261, 371, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 372,
	0, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 374,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 376,
	298, 299, 377, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 379, 380, 0, 0, 310,
	311, 381, 382, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 38, 383, 321, 322,
	323, 384, 385, 0, 0, 324, 0, 39, 121, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	42, 0, 939, 940, 0, 959, 960, 961, 969, 970,
	971, 0, 0, 0, 123, 0, 0, 0, 962, 0,
	43, 0, 48, 0, 0, 942, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 0, 53, 0, 941,
	0, 59, 0, 0, 124, 956, 0, 0, 60, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 63, 939, 940,
	0, 959, 960, 961, 969, 970, 971, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	947, 942, 0, 0, 973, 0, 0, 939, 940, 0,
	959, 960, 961, 969, 970, 971, 0, 0, 0, 0,
	966, 974, 0, 962, 0, 941, 0, 0, 0, 0,
	942, 956, 0, 973, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 964, 941, 0, 0, 64, 0, 957,
	956, 0, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 119, 66, 963, 67, 947, 68, 0, 125,
	0, 0, 0, 0, 69, 0, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 80, 966, 974, 99, 0,
	0, 0, 0, 0, 0, 947, 0, 122, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 134, 0, 0,
	0, 0, 958, 0, 0, 966, 974, 0, 0, 964,
	0, 0, 0, 0, 0, 957, 103, 0, 967, 0,
	0, 0, 0, 972, 0, 120, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 964, 0,
	963, 126, 0, 0, 957, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 963,
	4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 958, 953,
	954, 955, 968, 0, 952, 950, 951, 943, 944, 945,
	946, 948, 949, 0, 967, 0, 0, 2401, 0, 0,
	0, 0, 0, 0, 0, 939, 940, 958, 959, 960,
	961, 969, 970, 971, 0, 0, 0, 0, 0, 0,
	0, 962, 0, 967, 0, 0, 0, 0, 942, 0,
	0, 973, 0, 939, 940, 0, 959, 960, 961, 969,
	970, 971, 0, 0, 0, 0, 0, 0, 0, 962,
	0, 0, 941, 0, 0, 0, 942, 0, 956, 973,
	0, 0, 965, 0, 0, 953, 954, 955, 968, 0,
	952, 950, 951, 943, 944, 945, 946, 948, 949, 0,
	941, 0, 0, 2354, 0, 0, 956, 0, 0, 0,
	0, 965, 0, 0, 953, 954, 955, 968, 0, 952,
	950, 951, 943, 944, 945, 946, 948, 949, 0, 0,
	0, 0, 2308, 947, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 939, 940, 0, 959, 960, 961,
	969, 970, 971, 966, 974, 0, 0, 0, 0, 0,
	962, 947, 0, 0, 0, 0, 0, 942, 0, 0,
	973, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 966, 974, 0, 0, 0, 964, 0, 0, 0,
	0, 941, 957, 0, 0, 0, 0, 956, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 0, 963, 0, 0,
	957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 0,
	0, 0, 947, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 966, 974, 0, 0, 0, 0, 0, 0,
	0, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 958, 939, 940, 0, 959, 960, 961,
	969, 970, 971, 0, 0, 964, 0, 0, 0, 967,
	962, 957, 0, 0, 0, 0, 0, 942, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 941, 0, 0, 0, 0, 0, 956, 0, 965,
	0, 0, 953, 954, 955, 968, 0, 952, 950, 951,
	943, 944, 945, 946, 948, 949, 0, 0, 0, 0,
	2278, 0, 0, 0, 0, 0, 0, 965, 0, 0,
	953, 954, 955, 968, 958, 952, 950, 951, 943, 944,
	945, 946, 948, 949, 0, 0, 0, 0, 2273, 0,
	967, 0, 947, 939, 940, 0, 959, 960, 961, 969,
	970, 971, 0, 0, 0, 0, 0, 0, 0, 962,
	0, 0, 966, 974, 0, 0, 942, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	941, 0, 0, 0, 0, 964, 956, 0, 0, 0,
	0, 957, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 953, 954, 955, 968, 0, 952, 950, 951, 943,
	944, 945, 946, 948, 949, 0, 963, 0, 0, 2269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 947, 939, 940, 0, 959, 960, 961, 969, 970,
	971, 0, 0, 0, 0, 0, 0, 0, 962, 0,
	0, 966, 974, 0, 958, 942, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 972,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 941,
	0, 0, 0, 0, 964, 956, 0, 0, 0, 0,
	957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	947, 953, 954, 955, 968, 0, 952, 950, 951, 943,
	944, 945, 946, 948, 949, 0, 0, 0, 0, 2211,
	966, 974, 0, 958, 0, 939, 940, 0, 959, 960,
	961, 969, 970, 971, 0, 0, 0, 0, 972, 967,
	0, 962, 0, 0, 0, 0, 0, 0, 942, 0,
	0, 973, 0, 964, 0, 0, 0, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 0, 0, 0, 956, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 965, 0, 0,
	953, 954, 955, 968, 0, 952, 950, 951, 943, 944,
	945, 946, 948, 949, 0, 0, 0, 0, 2177, 0,
	0, 0, 958, 947, 939, 940, 0, 959, 960, 961,
	969, 970, 971, 0, 0, 0, 0, 0, 967, 0,
	962, 0, 0, 966, 974, 0, 0, 942, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 0, 964, 956, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 963, 0, 953,
	954, 955, 968, 0, 952, 950, 951, 943, 944, 945,
	946, 948, 949, 0, 0, 0, 0, 2176, 0, 0,
	0, 0, 947, 939, 940, 0, 959, 960, 961, 969,
	970, 971, 0, 0, 0, 0, 0, 0, 0, 962,
	0, 0, 966, 974, 0, 958, 942, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	941, 0, 0, 0, 0, 964, 956, 0, 0, 0,
	0, 957, 435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 0, 39, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 42, 0, 965,
	0, 947, 953, 954, 955, 968, 0, 952, 950, 951,
	943, 944, 945, 946, 948, 949, 0, 0, 0, 48,
	2141, 966, 974, 0, 958, 0, 939, 940, 0, 959,
	960, 961, 969, 970, 971, 0, 0, 0, 0, 972,
	967, 0, 962, 0, 0, 0, 0, 0, 59, 942,
	0, 0, 973, 0, 964, 60, 0, 61, 0, 0,
	957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 0, 0, 0, 956,
	0, 0, 0, 0, 63, 963, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 953, 954, 955, 968, 0, 952, 950, 951, 943,
	944, 945, 946, 948, 949, 0, 0, 0, 0, 1995,
	0, 0, 0, 958, 947, 939, 940, 0, 959, 960,
	961, 969, 970, 971, 0, 0, 0, 0, 0, 967,
	0, 962, 0, 0, 966, 974, 0, 0, 942, 0,
	0, 973, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 0, 0, 964, 956, 119,
	66, 0, 67, 957, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 458, 0, 0, 99, 0, 965, 963, 0,
	953, 954, 955, 968, 0, 952, 950, 951, 943, 944,
	945, 946, 948, 949, 134, 0, 0, 0, 1971, 0,
	0, 0, 0, 947, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 966, 974, 0, 958, 0, 939, 940,
	133, 959, 960, 961, 969, 970, 971, 0, 126, 0,
	0, 972, 967, 0, 962, 127, 0, 0, 0, 0,
	0, 942, 0, 0, 973, 0, 964, 0, 0, 0,
	0, 0, 957, 0, 436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 953, 954, 955, 968, 0, 952, 950,
	951, 943, 944, 945, 946, 948, 949, 0, 0, 0,
	0, 1442, 0, 0, 0, 958, 947, 2461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 0, 0, 0, 0, 966, 974, 0, 939,
	940, 0, 959, 960, 961, 969, 970, 971, 0, 0,
	0, 0, 0, 0, 972, 962, 0, 0, 0, 0,
	0, 0, 942, 0, 0, 973, 0, 0, 0, 964,
	0, 0, 0, 0, 0, 957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 941, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 965,
	963, 0, 953, 954, 955, 968, 0, 952, 950, 951,
	943, 944, 945, 946, 948, 949, 2460, 0, 1729, 38,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	39, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 42, 0, 0, 0, 947, 958, 1799,
	0, 0, 1798, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 48, 0, 966, 974, 0,
	939, 940, 0, 959, 960, 961, 969, 970, 971, 0,
	0, 0, 0, 0, 0, 972, 962, 0, 0, 0,
	0, 1702, 0, 942, 59, 0, 973, 0, 0, 0,
	964, 60, 0, 61, 0, 0, 957, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	63, 963, 965, 0, 0, 953, 954, 955, 968, 0,
	952, 950, 951, 943, 944, 945, 946, 948, 949, 0,
	0, 0, 0, 1703, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 947, 958,
	1540, 0, 0, 0, 0, 0, 939, 940, 0, 959,
	960, 961, 969, 970, 971, 967, 0, 0, 966, 974,
	0, 0, 962, 0, 0, 0, 1539, 0, 0, 942,
	64, 0, 973, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 941, 0, 119, 66, 957, 67, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 458, 0,
	0, 99, 963, 965, 0, 0, 953, 954, 955, 968,
	0, 952, 950, 951, 943, 944, 945, 946, 948, 949,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 947, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	958, 0, 0, 0, 966, 974, 133, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 967, 0, 0, 0,
	0, 127, 972, 0, 0, 939, 940, 0, 959, 960,
	961, 969, 970, 971, 0, 0, 0, 964, 0, 0,
	118, 962, 0, 957, 0, 0, 0, 0, 942, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 941, 0, 0, 0, 0, 0, 956, 0,
	0, 0, 0, 0, 965, 0, 0, 953, 954, 955,
	968, 0, 952, 950, 951, 943, 944, 945, 946, 948,
	949, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 947, 939, 940, 0, 959, 960, 961,
	969, 970, 971, 0, 0, 0, 0, 0, 0, 0,
	962, 0, 0, 966, 974, 0, 0, 942, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 0, 964, 956, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 953, 954, 955, 968, 0, 952, 950,
	951, 943, 944, 945, 946, 948, 949, 963, 570, 0,
	1767, 1768, 0, 1785, 1786, 1787, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1963, 0, 0, 0,
	0, 0, 947, 939, 940, 0, 959, 960, 961, 969,
	970, 971, 0, 0, 0, 0, 0, 0, 0, 962,
	0, 0, 966, 974, 0, 958, 942, 1767, 1768, 973,
	1785, 1786, 1787, 1782, 0, 0, 0, 0, 0, 0,
	972, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	941, 0, 0, 0, 0, 964, 956, 0, 0, 0,
	0, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1782, 0, 0, 0, 0, 0, 963, 0, 1773, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	0, 947, 953, 954, 955, 968, 1805, 952, 950, 951,
	943, 944, 945, 946, 948, 949, 1788, 0, 0, 0,
	0, 966, 974, 0, 958, 1773, 939, 940, 0, 959,
	960, 961, 969, 970, 971, 0, 0, 1783, 0, 972,
	967, 0, 962, 0, 0, 0, 1800, 0, 0, 942,
	0, 0, 973, 0, 964, 0, 0, 0, 0, 0,
	957, 0, 0, 1788, 0, 0, 1975, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 0, 0, 0, 956,
	0, 0, 0, 0, 1783, 963, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	1784, 953, 954, 955, 968, 0, 952, 950, 951, 943,
	944, 945, 946, 948, 949, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 947, 939, 940, 0, 959, 960,
	961, 969, 970, 971, 0, 0, 0, 0, 0, 967,
	0, 962, 0, 0, 966, 974, 0, 1784, 942, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 0, 0, 964, 956, 0,
	0, 0, 0, 957, 0, 0, 0, 1779, 1780, 1781,
	0, 0, 1778, 1776, 1777, 1769, 1770, 1771, 1772, 1774,
	1775, 0, 0, 0, 0, 0, 0, 965, 963, 0,
	953, 954, 955, 968, 0, 952, 950, 951, 943, 944,
	945, 946, 948, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 947, 1779, 1780, 1781, 0, 0, 1778,
	1776, 1777, 1769, 1770, 1771, 1772, 1774, 1775, 0, 0,
	0, 0, 0, 966, 974, 0, 958, 0, 939, 940,
	0, 959, 960, 961, 969, 970, 971, 0, 0, 0,
	0, 972, 967, 0, 962, 0, 0, 0, 1758, 0,
	0, 942, 0, 0, 973, 0, 964, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 953, 954, 955, 968, 0, 952, 950,
	951, 943, 944, 945, 946, 948, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 947, 939, 940, 0,
	959, 960, 961, 969, 970, 971, 0, 0, 0, 0,
	0, 967, 0, 962, 0, 0, 966, 974, 0, 0,
	942, 0, 0, 973, 0, 939, 940, 0, 959, 960,
	961, 969, 970, 971, 972, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 941, 0, 0, 0, 942, 964,
	956, 973, 0, 0, 0, 957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 0, 0, 0, 956, 965,
	963, 0, 953, 954, 955, 968, 0, 952, 950, 951,
	943, 944, 945, 946, 948, 949, 0, 0, 0, 0,
	0, 0, 0, 1767, 1768, 947, 1785, 1786, 1787, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 966, 974, 0, 958, 0,
	0, 0, 0, 947, 939, 940, 0, 959, 960, 961,
	969, 970, 971, 972, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 966, 974, 0, 1782, 942, 964, 0,
	973, 0, 0, 0, 957, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 0, 964, 956, 0, 963,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1773, 965, 0, 0, 953, 954, 955, 968, 0,
	952, 950, 951, 943, 944, 945, 946, 948, 949, 0,
	0, 0, 1789, 0, 0, 0, 0, 958, 939, 940,
	0, 0, 947, 0, 969, 970, 971, 0, 0, 1788,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 942, 966, 974, 973, 958, 0, 0, 0, 0,
	1783, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 967, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 964, 0, 0, 0, 0,
	0, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 0, 0, 953, 954, 955, 968, 0, 952,
	950, 951, 943, 944, 945, 946, 948, 949, 0, 0,
	0, 0, 0, 1784, 0, 0, 947, 0, 0, 965,
	0, 0, 953, 954, 955, 968, 0, 952, 950, 951,
	943, 944, 945, 946, 948, 949, 966, 974, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 964,
	0, 0, 0, 0, 0, 957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1779, 1780, 1781, 0, 0, 1778, 1776, 1777, 1769, 1770,
	1771, 1772, 1774, 1775, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 953, 954, 955, 968, 0, 952, 950, 951, 943,
	944, 945, 946, 948, 949, 0, 0, 0, 958, 0,
	0, 1265, 1255, 1284, 1247, 1275, 1274, 0, 0, 1249,
	1248, 0, 0, 0, 967, 1286, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 1265, 1255, 1284, 1247, 1275,
	1274, 0, 0, 1249, 1248, 0, 0, 0, 0, 1286,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 1280,
	0, 1272, 1271, 0, 0, 0, 0, 0, 0, 0,
	0, 1270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1280, 0, 1272, 1271, 0, 0, 1269,
	1267, 1268, 965, 0, 0, 1270, 0, 0, 968, 0,
	952, 950, 951, 943, 944, 945, 946, 948, 949, 0,
	0, 0, 0, 1269, 1267, 1268, 0, 0, 0, 0,
	1258, 1257, 1259, 1260, 1261, 1262, 1263, 0, 1283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1258, 1257, 1259, 1260, 1261, 1262,
	1263, 0, 1283, 0, 0, 0, 1251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1273, 0,
	0, 0, 1256, 0, 0, 0, 0, 0, 0, 0,
	1251, 0, 525, 0, 551, 0, 0, 0, 0, 0,
	0, 0, 1273, 0, 0, 0, 1256, 0, 0, 0,
	0, 1266, 530, 0, 0, 1377, 1375, 1376, 1379, 1378,
	0, 0, 0, 0, 528, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1266, 0, 0, 0, 0,
	0, 1252, 0, 0, 0, 529, 0, 0, 0, 0,
	531, 0, 1264, 1253, 0, 537, 538, 0, 0, 547,
	0, 0, 1288, 0, 0, 1252, 0, 0, 0, 0,
	0, 0, 0, 552, 532, 1250, 1264, 1253, 1281, 1282,
	0, 0, 0, 0, 0, 0, 1288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 550, 0, 0, 1250,
	1254, 0, 1281, 1282, 0, 1287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 0, 0, 0,
	0, 0, 0, 0, 1254, 0, 0, 0, 0, 1287,
	0, 534, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 536, 543, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 527,
	544, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 545, 0, 0, 0, 549,
	0, 0, 0, 555, 0, 0, 0, 0, 542, 546,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 548,
}
var sqlPact = [...]int{

	37203, -1000, 6, -1000, -1000, -1000, 186, -1000, -1000, -1000,
	185, 181, 180, -1000, 179, 177, 176, 173, 171, 169,
	168, 167, 165, 164, 160, -1000, 158, -1000, -1000, -1000,
	-1000, 148, 147, 146, 145, 144, 142, 139, 1164, 21887,
	138, 134, 1311, 34685, 130, 129, 127, 126, 981, 124,
	122, 25397, 857, 1359, 120, 118, 107, 103, 100, 1109,
	34367, 38500, 2306, 1084, 1577, 34046, 21566, 1576, 1562, 33725,
	-1000, -1000, 33404, 98, 97, 96, 95, 91, -1000, -1000,
	33083, 90, 89, 88, 83, 82, 78, 69, 67, 64,
	62, 61, 59, 57, 55, -1000, 53, 40, 37, 40700,
	36, 35, 34, 1050, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 116, -1000, 864, 447, 1434,
	7658, 1023, 974, 968, 967, 956, 36593, 34685, 33, -45,
	31, -1000, 1887, 665, 18972, 37203, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	25076, 24755, 32762, 32441, 733, -1000, 1, 23159, 34685, -1000,
	188, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15003,
	14646, 517, 188, -1000, -1000, -1000, -1000, -1000, 32120, -1000,
	31799, 31478, 1428, 31157, -1000, -1000, -1000, -1000, 30836, -1000,
	-1000, 1869, 1589, 1560, 24434, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 30518, 30197, 29876,
	29555, 29234, 501, -1000, -1000, -1000, 17358, -1000, -1000, -1000,
	-1000, 30, -1000, 29, -1000, 27, 24, 23, 20, -1000,
	19, 18, -1000, 17, 15, -1000, 13, 10, 28913, 1160,
	-1000, -1000, 4, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 34685, -1000, 15689, -1000, 500, -1000, 1581, -1000, 15689,
	-1000, 1143, -1000, -1000, -1000, -1000, -1000, 34685, -1000, -1000,
	-1000, -1000, -1000, -1000, 2082, 1168, 497, 28592, -1000, 1546,
	-1000, 572, 694, -1000, -1000, -1000, 8688, 194, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1469, 21245, 1267,
	1884, 1837, 2079, 1362, 1809, 1802, 1791, 1734, 1708, 2078,
	872, 2077, 1707, 973, 2075, 1600, 1374, 638, 2074, 1579,
	1578, -1000, -1000, -1000, -1000, 899, -1000, -1000, -1000, 26669,
	-1000, -1000, 864, -1000, -1000, -1000, 1356, 1787, 1787, 1787,
	1918, 311, 307, -1000, 116, -1000, 1725, -1000, 1110, -1000,
	-1000, -1000, -1000, -1000, 40037, -1000, -1000, 15689, 15689, 15689,
	15689, 15689, 1028, 512, -1000, 495, 494, 6958, -1000, -1000,
	2057, -1000, -1000, -1000, 319, -1000, -1000, 15689, 188, -1000,
	-1000, -1000, -1000, 488, 2070, -1000, 590, -1000, -1000, -1000,
	580, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1597, 486, 485, 484, -1000, 468, -1000, -1000, 466, 462,
	461, 460, 453, 450, 449, 448, 446, 443, 442, 440,
	439, 437, 435, 962, -1000, 597, -1000, -1000, 597, 597,
	-1000, 405, 405, 407, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 405, -1000, -1000, -1000, 553, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 429, 1066, -1000,
	-1000, 1066, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 732,
	35957, -5, 34685, -1000, 422, -5, -1000, -1000, 420, -1000,
	10760, 10760, -1000, -1000, -1000, -1000, -1000, 9388, 1654, -1000,
	4128, -195, 316, 559, -1000, 18003, 20583, -1000, -1000, 1193,
	1687, 618, -1000, 940, 1683, 521, -1000, 938, -1000, 1169,
	1680, -168, 22205, 23159, 1, -14, -1000, -1000, -1000, 5598,
	40037, -1000, 40037, -1000, 794, 19616, 188, -1000, -1000, -1000,
	-1000, 411, 1246, 586, -1000, 318, -1000, 28271, 586, 1239,
	-1000, -1000, -1000, 26669, -1000, 34685, -1000, 34685, -1000, 826,
	-1000, 36275, 109, 1678, -1000, -1000, 109, 1677, -1000, 108,
	1672, -1000, -1000, 1124, 1667, -1000, -14, 1665, -1000, -1000,
	15689, -3, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 665,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 27950, 22523, 1396, 451, 40037, 1976, 40518,
	22205, 40037, 22523, -1000, -1000, 34685, -1000, 15689, -1000, 1975,
	1511, -4, -1000, -1000, -1000, -1000, -1000, 1294, 1331, 682,
	1099, 8688, 8688, 1786, -1000, 191, 5928, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 27629, -1000, -1000, -1000, 1108,
	34685, -1000, -1000, 1594, -1000, 22523, 34685, -1000, 34685, -1000,
	34685, -1000, 34685, -1000, 34685, -1000, -1000, -1000, -1000, -1000,
	3601, -1000, 1592, -1000, -1000, 34685, -1000, 1284, -1000, -1000,
	-1000, 27311, 26990, -1000, 902, 758, -1000, -1000, 110, -1000,
	-1000, 1356, -1000, 1126, 1343, 14289, 1408, 15689, 116, -1000,
	-1000, 116, 116, 8345, -1000, -1000, -1000, 34685, -1000, 40494,
	40518, 5928, 743, 15689, 15689, 15689, 15689, 15689, 15689, 15689,
	15689, 15689, 15689, 15689, 15689, 15689, 15689, 15689, 15689, 15689,
	15689, 15689, 15689, 15689, 15689, 1301, 15689, 730, 15689, 15689,
	15689, 15689, 1223, 1034, 404, 1107, -1000, 2025, 2025, 2025,
	40174, 40174, 373, 512, -1000, 15689, -1000, 341, 13946, 307,
	38566, 0, 6615, -1000, -1000, -1000, 9031, 594, 40037, 188,
	4576, -1000, 2053, 905, 1586, 1476, 410, 549, 547, 498,
	464, 15689, 15689, 13603, 13246, 12889, 16375, 12532, 15689, 7301,
	15689, 15689, 15689, 15689, 12175, 11818, -1000, 409, -1000, -1000,
	-1000, -1000, 2052, -1000, -1000, 2051, -1000, 741, 737, 2048,
	-1000, -4, -1000, 35957, -1000, 34685, -5, 1972, 34685, -1000,
	66, -1000, 39186, -1000, 66, -20, -1000, 1398, 1376, 19294,
	1529, 1035, 1035, 1035, -1000, 408, 508, 559, 4923, 11461,
	-1000, 25715, 1042, 213, 304, 17681, 1654, -1000, 34685, -27,
	972, -1000, 24113, 1925, 1894, 1818, 26669, 1932, 341, 1574,
	712, 26669, 707, 1913, 341, 1569, 705, 34685, 5928, 544,
	-1000, 34685, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1563, -22, -1000, -1000, 23795, 1971, 1661, -1000,
	1007, -1000, 1966, 34685, 1129, 1238, -1000, -1000, 754, 1660,
	591, 272, 1958, 272, 19939, -1000, 34685, -1000, 34685, -1000,
	-1000, 34685, -1000, 34685, -1000, 34685, 34685, -1000, 34685, 34685,
	-30, 40037, 39006, 23477, 703, -1000, 622, 23795, 143, -31,
	-1000, 831, -1000, -1000, -1000, -1000, 352, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 407,
	962, 405, 405, 405, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 553, -1000, -1000, 597, 597, 597, -1000, -1000, -29,
	-1000, 1558, 576, -46, 654, -4, -1000, 1066, -1000, 1153,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2060, -1000, 2035, -1000, -1000, 2047, -6,
	-1000, -6, -1000, 5928, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 34685, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3238, -1000, -1000, -1000, -1000, -1000, -1000, 34685, 34685, 34685,
	-1000, 26669, -1000, -1000, -1000, -1000, 40037, -1000, 362, -1000,
	-1000, 40037, 879, 1415, -1000, 1415, -12, -1000, 39070, 1394,
	34685, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 566, 423, 423, 788, 788, 788, 788, 2017,
	2604, 163, 863, 40278, 40278, 40278, 483, 332, 332, 40278,
	40278, 40278, 40174, 40065, 2645, 15689, 15689, 701, 1033, 404,
	2645, 15689, 2645, 2645, 2645, 2645, -1000, 1375, -1000, -1000,
	-1000, -1000, 1557, 402, 16375, 16375, -1000, -1000, -1000, 6958,
	15689, -1000, -1000, -1000, -1000, 398, 15689, -1000, 38675, -213,
	-49, -1000, -1000, 15689, -51, -111, -1000, -1000, 817, -1000,
	15689, -1000, -23, 15689, 15689, 15689, 303, -1000, 302, -1000,
	700, -1000, 693, 692, 690, -1000, 397, 1038, 395, 393,
	15689, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 39928,
	4086, 301, -1000, 1556, -159, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 286, -1000, 263, -1000, 39795, -159, 262, 40143,
	-1000, 16375, 16375, 16375, 6958, 381, 261, -1000, 38939, -159,
	39686, 11104, 11104, 11104, 260, 39553, 15689, -159, 3952, 3821,
	305, -54, -65, -1000, -67, -1000, 2042, -68, 259, 565,
	551, 258, -1000, -1000, 380, -70, 591, 10760, 18649, 5928,
	-1000, 591, 9388, -1000, 19294, 19294, 1360, 1363, 19294, -1000,
	-1000, -1000, -1000, 25715, 413, 559, 25715, -1000, 2040, 1346,
	-73, -1000, -1000, -1000, 34685, 378, -1000, 559, 257, 913,
	34685, 34685, 34685, -1000, -1000, 1236, 35639, 1231, 40518, 34685,
	-1000, 376, 375, 1373, 1345, 34685, 34685, 35321, 35003, 34685,
	1057, 341, -1000, 372, 34685, 933, 34685, 341, -1000, 371,
	34685, 924, -1000, 1457, 1165, -1000, 774, 1539, 34685, 255,
	-75, -13, 40518, -1000, -1000, -1000, -1000, -1000, 34685, 470,
	34685, 341, 34685, 2027, 341, 34685, 1659, 1699, 347, 34685,
	1343, 15689, 1000, -1000, 18326, 603, 34685, 877, 63, -1000,
	-1000, -1000, 540, 34685, -1000, -1000, 109, 109, -1000, 108,
	1124, -14, -1000, 15689, -1000, -1000, 34685, 22205, -76, -1000,
	-1000, 40518, -1000, 511, 721, -1000, 2038, 582, 22205, 34685,
	8688, 8688, -1000, 1403, -1000, -1000, 883, -1000, 935, -1000,
	-1000, -1000, -1000, 8688, -1000, -33, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 879, -1000, 15689, 2037, -1000, -1000, -1000,
	8345, -1000, -1000, -1000, 34685, -193, 15689, 2645, 2645, 15689,
	16375, 16375, -1000, 2645, -1000, -1000, -1000, -1000, -1000, 1518,
	369, 15689, 40518, 39530, 4201, -81, 483, 10417, -15, -1000,
	15689, -1000, 38433, -1000, -1000, 510, 1693, -1000, 15689, 39444,
	254, 10074, -1000, 39335, -32, -32, -1000, 2019, 1257, 1065,
	964, 851, 2033, -1000, 20261, 592, 1048, 38324, 40494, 40518,
	-1000, 15689, -1000, -1000, 1509, 15689, -1000, 40494, 40518, 16375,
	16375, 16375, 16375, 16375, 16375, 16375, 16375, 16375, 16375, 16375,
	16375, 16375, 16375, 16375, 16375, 16375, 16375, 16375, 1329, 16375,
	2009, 2009, 2009, -25, 9731, -1000, 1591, 1509, 15689, 15689,
	40518, 253, 250, 249, -1000, 15689, -159, 15689, 15689, 15689,
	-1000, -1000, -1000, 248, -1000, 2022, -1000, -1000, -1000, -1000,
	143, -1000, 1475, -1000, -112, -1000, 1654, -1000, 1475, -1000,
	-1000, 1360, -1000, 368, 15689, 19294, -1000, 506, -1000, -84,
	-1000, 25715, -1000, 505, -210, -1000, 539, -1000, 559, 367,
	34685, 25715, -1000, -1000, -1000, 689, 688, 1648, -1000, 1230,
	-1000, 610, -1000, 925, 15689, 17035, 366, 365, 977, -1000,
	1645, 1124, 1641, 1124, -1000, -27, 897, -1000, 15689, -1000,
	686, -1000, -1000, 15689, -1000, 681, 582, 1495, 762, -1000,
	772, -1000, 1442, -1000, 23795, 361, 34685, 360, -1000, 358,
	-1000, -1000, 356, 34685, 1317, 347, 22841, -1000, 586, 877,
	-1000, 40037, -1000, 877, 8001, 1810, -94, -1000, -1000, -1000,
	591, 19939, 19294, 9388, -95, -1000, -1000, -1000, -1000, 40037,
	-33, 1794, 1794, -1000, 2015, -1000, 503, 243, -1000, 26351,
	-1000, -33, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 34685,
	1054, 38215, -1000, 1902, 5928, 2028, 2645, 4127, 285, 15689,
	40518, 3418, -96, 15689, 15689, -1000, -110, -1000, 15689, 499,
	40037, -1000, -1000, -1000, 40037, 15689, 2011, 15689, 242, 236,
	220, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 217,
	-1000, -1000, 36911, 15689, 215, -1000, 214, 211, 40037, 1591,
	40037, -1000, -1000, 583, 583, 855, 855, 855, 855, 2009,
	1130, 1152, 914, 953, 953, 953, 396, 463, 463, 953,
	953, 953, 1488, 1297, 355, 39577, 15689, -116, -1000, -1000,
	-1000, 40037, 40037, 210, -1000, -1000, -1000, -159, 240, 38082,
	37973, -1000, 209, 208, 1464, 1914, -1000, 19294, 1464, -1000,
	34685, 40037, -1000, -195, -1000, 2006, -1000, -1000, 1346, -1000,
	5265, 25715, 34685, -119, -1000, 34685, 34685, 34685, 1637, -1000,
	1392, -1000, 37864, -121, -1000, 309, 1861, 15689, -1000, -1000,
	350, 17035, 34685, -1000, 1327, 1461, 642, 34685, -1000, 34685,
	-1000, 34685, 34685, 34685, -122, 34685, -124, 34685, -1000, 22205,
	685, -1000, -1000, 1435, -1000, 17035, 349, 34685, 23795, 1955,
	17035, 1118, 1340, 347, 22841, -1000, 754, -1000, -1000, -42,
	-1000, 266, 341, 877, -1000, -55, -1000, 538, 1776, -1000,
	1766, 465, -1000, -1000, -66, 345, -1000, 536, 530, -1000,
	-1000, -1000, -1000, 1902, 15689, 15689, 3418, -129, -1000, 2645,
	2645, -1000, 37714, -1000, 40037, -1000, 39335, -1000, -1000, -1000,
	-1000, 1016, -1000, 37623, -1000, -1000, -1000, -1000, 16375, 1483,
	344, 40518, 37595, -1000, -1000, 15689, -1000, -1000, -1000, -1000,
	584, 15689, 15689, 1654, 584, -132, 559, -1000, -1000, -1000,
	2003, -1000, -134, -1000, -1000, -1000, -1000, 34685, -1000, 34685,
	-1000, 5928, 34685, 1474, 1224, -1000, -1000, 1335, 343, 16375,
	34685, -1000, 1026, 17035, 1902, 188, 5928, 1902, 37357, 4576,
	-140, -142, 1218, -1000, 1186, 15689, -1000, 40518, 1124, 1124,
	-1000, 672, 664, 663, -1000, 659, -1000, -97, 20913, 1030,
	-145, 17035, -147, 206, 341, -150, 34685, -1000, 347, 22841,
	-1000, 1699, 1709, 34685, 1816, -1000, -1000, 342, 340, 339,
	-1000, 26033, 26033, 22205, 22205, -1000, 2645, 2645, -1000, -1000,
	204, 1048, 1905, -1000, 937, 16375, 40518, -153, -1000, 37328,
	-1000, 34685, 40037, -159, -1000, -1000, 25715, 424, -1000, -1000,
	1726, -1000, -1000, 34685, 1228, -1000, -1000, 15689, 39577, 338,
	1442, 337, -1000, -1000, -1000, -1000, -1000, -1000, 1861, -23,
	-1000, 920, -1000, -1000, 40037, 1859, -1000, -1000, 34685, 34685,
	336, 334, -1000, 333, 188, 34685, 1026, -156, -1000, 1442,
	-1000, 1026, 331, 22841, -1000, 1317, 751, -158, 34685, -1000,
	-1000, 6258, 22205, 22205, -1000, -161, -1000, -1000, -1000, 976,
	15689, 937, -164, -1000, -1000, -152, -1000, 1943, -1000, -1000,
	-1000, -1000, 1627, 37242, 1272, 34685, -1000, 34685, 1902, 203,
	34685, 613, 5928, -1000, -1000, 15689, 15689, 15689, 329, 1442,
	1026, -1000, 1442, 17035, -1000, 1340, 811, -1000, 591, -1000,
	-172, -174, -1000, 202, 16032, 16032, -159, -1000, 34685, 320,
	1615, -1000, 1078, 1271, 199, -177, -1000, -1000, 318, -1000,
	15689, -1000, -180, -183, -32, 34685, -1000, 1442, -1000, -189,
	-1000, 19939, -1000, 582, 582, -1000, -1000, -1000, 16705, 1123,
	873, 38808, -1000, -1000, -1000, 34685, -1000, 1091, 1079, 848,
	-1000, -1000, -1000, -1000, -1000, 1272, 40037, -1000, -1000, 198,
	-200, -1000, 1026, -175, -1000, -1000, 1981, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1714, -1000, 629, 1414, 1414, 1078,
	2011, 1105, 1442, -1000, 15346, -1000, 1989, -1000, -1000, 1321,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2452, 2450, 1634, 1963, 2446, 2445, 2444, 2443, 2442,
	2441, 2432, 2429, 2427, 2426, 2425, 2423, 2417, 2415, 2411,
	1951, 2410, 1942, 2409, 2407, 2406, 2405, 1937, 2400, 2397,
	2396, 2395, 2393, 2392, 1935, 2390, 1887, 2385, 2382, 2381,
	2380, 2379, 1885, 2378, 72, 106, 1879, 2377, 2376, 1868,
	1863, 1861, 2374, 1855, 2365, 2364, 1853, 1833, 2361, 96,
	2360, 2358, 2357, 1812, 1795, 2355, 2354, 2353, 139, 2351,
	1682, 2350, 2349, 2348, 2347, 2346, 2345, 2342, 2340, 2338,
	2331, 2327, 2324, 2322, 2318, 2317, 2315, 2314, 2312, 147,
	2311, 2309, 1671, 1607, 2305, 2301, 36, 29, 9, 54,
	21, 130, 2683, 125, 2300, 2299, 2296, 2295, 2291, 2290,
	22, 89, 87, 2283, 103, 2275, 2272, 50, 32, 23,
	17, 2271, 86, 2270, 2268, 954, 27, 2267, 2261, 133,
	2260, 35, 28, 2025, 143, 141, 104, 111, 2258, 2256,
	2253, 47, 102, 6, 2246, 2245, 11, 75, 13, 2244,
	24, 19, 2242, 2239, 118, 2238, 55, 84, 1495, 90,
	123, 373, 2235, 68, 15, 59, 2234, 2233, 146, 39,
	2232, 31, 65, 134, 2231, 58, 148, 116, 74, 117,
	121, 2230, 2229, 2228, 115, 2227, 107, 69, 2224, 2223,
	64, 2222, 85, 129, 2221, 2220, 2218, 83, 2216, 112,
	2215, 2214, 145, 136, 105, 3, 43, 62, 5, 1551,
	1493, 124, 71, 49, 51, 2213, 2011, 1357, 1144, 30,
	2212, 79, 53, 98, 46, 80, 131, 33, 2210, 2209,
	126, 2208, 2206, 2204, 2201, 2199, 88, 2197, 2195, 20,
	2194, 60, 42, 56, 82, 45, 94, 114, 108, 142,
	100, 2193, 77, 110, 2191, 160, 2190, 2188, 1642, 122,
	2185, 2177, 2175, 1625, 1598, 935, 395, 2174, 2165, 885,
	211, 2157, 2152, 78, 2150, 120, 99, 95, 132, 244,
	76, 2149, 109, 38, 2147, 16, 26, 0, 567, 252,
	2144, 113, 63, 2139, 2138, 2136, 2134, 25, 2, 10,
	7, 8, 4, 37, 34, 2133, 2131, 119, 92, 57,
	2129, 144, 2128, 2125, 2124, 41, 2123, 14, 2122, 12,
	2121, 2120, 18, 1, 2114, 2113, 137, 2112, 91, 2097,
	1898, 2091, 138, 2089, 2086, 1661, 48, 101,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 112, 112,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 109, 109, 114, 114, 114,
	116, 116, 113, 113, 108, 108, 20, 20, 57, 57,
	99, 50, 50, 50, 285, 285, 286, 286, 95, 95,
	96, 96, 96, 96, 97, 97, 98, 98, 98, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 34, 34, 35, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 41, 41, 41, 39, 39, 39,
	38, 38, 38, 37, 37, 37, 40, 40, 40, 160,
	160, 159, 159, 162, 162, 42, 42, 42, 42, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 45, 45, 45, 45, 45,
	45, 45, 254, 254, 253, 43, 43, 228, 228, 46,
	46, 185, 185, 47, 47, 47, 47, 47, 48, 48,
	58, 58, 326, 326, 326, 330, 330, 331, 331, 332,
	332, 332, 332, 332, 332, 332, 328, 328, 53, 53,
	53, 53, 54, 54, 54, 55, 55, 94, 94, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 64, 64,
	64, 66, 63, 63, 63, 65, 65, 65, 65, 67,
	67, 68, 68, 68, 68, 68, 69, 69, 279, 277,
	277, 278, 278, 139, 139, 139, 139, 139, 140, 140,
	140, 284, 284, 284, 284, 284, 284, 283, 283, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 82, 82, 82, 89, 89,
	89, 89, 89, 89, 89, 71, 71, 76, 76, 76,
	76, 76, 72, 72, 77, 77, 78, 78, 79, 79,
	79, 79, 79, 79, 73, 73, 73, 73, 81, 81,
	81, 81, 80, 80, 86, 86, 86, 86, 86, 86,
	83, 83, 83, 83, 84, 84, 84, 87, 87, 87,
	87, 74, 74, 75, 75, 88, 88, 85, 85, 85,
	327, 327, 329, 329, 51, 51, 30, 30, 31, 31,
	141, 141, 142, 142, 207, 207, 207, 207, 143, 143,
	115, 115, 115, 206, 295, 295, 296, 296, 296, 296,
	296, 296, 297, 297, 297, 297, 297, 297, 297, 293,
	293, 294, 291, 291, 292, 292, 292, 292, 333, 333,
	205, 205, 146, 146, 300, 300, 300, 300, 298, 298,
	298, 298, 298, 301, 299, 302, 302, 302, 302, 302,
	240, 240, 240, 91, 91, 32, 32, 121, 121, 33,
	33, 29, 29, 29, 189, 189, 150, 150, 245, 245,
	245, 132, 132, 110, 110, 110, 14, 11, 11, 11,
	11, 11, 11, 19, 19, 17, 17, 190, 190, 191,
	191, 52, 52, 56, 56, 61, 61, 90, 90, 90,
	90, 90, 90, 21, 21, 21, 21, 25, 25, 25,
	25, 60, 60, 335, 335, 128, 128, 128, 128, 129,
	129, 202, 202, 203, 203, 203, 204, 204, 204, 123,
	122, 124, 124, 28, 28, 28, 117, 117, 118, 118,
	119, 119, 120, 120, 336, 336, 49, 49, 49, 93,
	93, 135, 135, 199, 199, 199, 201, 201, 200, 200,
	200, 175, 175, 175, 92, 92, 155, 155, 164, 164,
	165, 165, 251, 166, 166, 59, 59, 102, 102, 100,
	100, 100, 100, 100, 100, 101, 101, 101, 103, 103,
	103, 103, 103, 103, 103, 106, 106, 106, 107, 107,
	107, 105, 105, 308, 308, 308, 311, 311, 307, 309,
	309, 310, 310, 334, 334, 176, 176, 176, 145, 144,
	144, 148, 148, 147, 149, 149, 244, 244, 244, 173,
	173, 173, 173, 194, 194, 192, 192, 193, 193, 195,
	195, 196, 196, 196, 197, 197, 198, 198, 172, 172,
	224, 224, 104, 104, 104, 154, 154, 154, 156, 156,
	214, 214, 214, 215, 215, 213, 213, 213, 213, 246,
	246, 246, 246, 246, 246, 246, 246, 324, 324, 324,
	325, 325, 243, 243, 247, 247, 247, 247, 247, 247,
	241, 241, 241, 241, 242, 242, 252, 252, 179, 179,
	179, 179, 177, 177, 178, 178, 248, 248, 248, 248,
	174, 174, 249, 249, 249, 208, 208, 255, 255, 255,
	273, 273, 153, 153, 153, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 257, 257, 257, 257, 259, 259, 259, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 272, 272, 272,
	272, 272, 260, 260, 267, 267, 268, 268, 269, 270,
	261, 261, 262, 262, 263, 264, 271, 271, 271, 271,
	275, 275, 265, 265, 265, 265, 265, 266, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 187, 187, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 218, 218, 218, 218,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 303, 303, 303, 303, 303, 303, 303, 303, 305,
	305, 306, 306, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 312, 312, 313, 313, 315, 315, 316,
	316, 317, 318, 318, 318, 319, 320, 320, 314, 314,
	321, 321, 321, 322, 322, 323, 323, 323, 323, 323,
	230, 230, 230, 231, 231, 232, 238, 238, 238, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 130, 130, 130, 130, 130,
	161, 161, 227, 227, 225, 225, 225, 229, 229, 180,
	180, 274, 274, 274, 274, 274, 274, 274, 181, 181,
	181, 188, 182, 182, 183, 183, 183, 183, 183, 183,
	221, 222, 184, 184, 184, 223, 223, 233, 237, 237,
	236, 235, 235, 234, 234, 211, 211, 212, 212, 210,
	209, 169, 169, 168, 168, 167, 167, 337, 337, 239,
	239, 170, 170, 171, 163, 163, 250, 250, 250, 250,
	157, 157, 137, 137, 158, 158, 133, 133, 136, 136,
	134, 134, 134, 134, 151, 151, 152, 152, 131, 131,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 276, 276, 276, 226, 125, 125, 125, 126, 126,
	127, 127, 281, 281, 281, 282, 282, 282, 282, 280,
	280, 280, 280, 280, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 3,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 4, 3, 5, 3, 4, 5,
	2, 3, 3, 3, 4, 2, 3, 4, 3, 3,
	3, 4, 4, 4, 4, 2, 3, 5, 5, 5,
	2, 0, 2, 0, 3, 2, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 2, 4, 3, 3, 0, 6,
	3, 11, 14, 4, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 2, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 3, 6,
	3, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 2, 0, 8, 3, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 2, 3, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 6, 3, 3, 1, 5, 5, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	1, 1, 2, 3, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 3, 3, 1, 3, 3,
	1, 3, 3, 1, 1, 3, 3, 1, 1, 6,
	6, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 357, -4, -20, -22, -26, -27,
	-47, -34, -35, -36, -46, -42, -48, -49, -50, -51,
	-43, -57, -56, -58, -61, -59, -52, -53, -62, -70,
	-90, -91, -92, -93, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -310, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 134, 214, 220, 240, 242, 244, 251,
	-100, -102, 238, -54, -55, -63, -64, -65, -66, -94,
	262, -71, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, 265,
	-21, -25, -60, 303, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -308, -103, -101, 354, 239,
	312, 35, 274, 61, 101, 246, 328, 335, -106, -104,
	-105, -107, 255, 320, 284, 358, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 2,
	284, 323, 83, 141, -326, 2, -158, 284, 83, -134,
	-125, 347, 4, -287, -289, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 64,
	66, 67, 68, 71, 72, 73, 81, 82, 84, 86,
	90, 92, 94, 97, 98, 100, 105, 106, 107, 113,
	114, 119, 121, 126, 132, 133, 134, 135, 142, 145,
	147, 140, 157, 158, 159, 161, 162, 163, 166, 165,
	170, 173, 176, 178, 179, 180, 183, 181, 185, 186,
	188, 187, 193, 195, 196, 198, 201, 204, 207, 210,
	211, 212, 213, 214, 216, 218, 220, 222, 223, 224,
	225, 226, 228, 229, 231, 232, 233, 234, 235, 238,
	236, 237, 239, 240, 241, 242, 244, 246, 247, 249,
	263, 264, 275, 251, 252, 253, 254, 258, 256, 259,
	260, 262, 265, 267, 270, 273, 274, 276, 279, 280,
	277, 272, 283, 285, 286, 287, 288, 289, 290, 291,
	298, 299, 303, 304, 305, 306, 309, 310, 311, 312,
	314, 317, 318, 319, 324, 329, 330, 331, 332, 333,
	28, 36, 37, 38, 39, 41, 42, 45, 46, 51,
	52, 53, 56, 85, 87, 88, 104, 108, 109, 115,
	116, 117, 127, 129, 136, 137, 146, 148, 149, 150,
	151, 152, 154, 168, 182, 192, 194, 205, 209, 217,
	219, 227, 248, 257, 268, 269, 278, 281, 293, 294,
	295, 300, 301, 316, 320, 321, 357, 357, 2, 158,
	224, -133, -125, 83, 357, 357, 357, 357, 284, 2,
	313, 323, -189, 83, 308, 357, 357, -125, 220, 22,
	2, 92, 145, 311, 310, 22, 216, 256, 286, 288,
	2, 357, 357, 357, 357, 357, 2, 323, 284, 141,
	83, 313, -125, 2, -45, 2, 354, -44, -4, -27,
	-36, -46, -42, -20, -22, -34, -50, -49, -51, -53,
	-57, -56, -59, -63, -64, -70, -92, -93, 262, -330,
	2, 22, -331, -332, 69, 98, 125, 255, 145, 92,
	310, 284, 2, 158, 2, -125, 2, -326, 2, 158,
	2, -330, 2, -125, 2, -129, 2, 251, -125, 357,
	357, 357, 357, 357, 173, 55, 248, 259, -68, 299,
	-67, 293, -279, -69, 2, -159, 183, -125, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 2, -89, 259, 34, 55,
	22, 60, 84, 126, 141, 142, 162, 65, 66, 223,
	173, 159, 298, 163, 260, 285, 299, 69, 314, 289,
	106, 4, 83, 183, 261, 293, 357, 357, 357, -334,
	2, 284, -101, -103, -102, -147, -148, 307, 153, 103,
	203, -100, -102, 2, -308, -89, 259, 2, 55, 22,
	-277, 2, -239, 199, -216, 89, -218, 345, 346, 340,
	189, 334, -230, -220, -233, 104, 248, 354, -133, -219,
	360, 9, -305, -102, 29, -231, -232, 49, -125, 7,
	8, 5, 6, -131, -257, -226, -266, 302, 110, 191,
	-303, -304, 4, -287, -281, -258, -268, -262, -265, 154,
	58, 75, 76, 79, 77, 80, 261, 313, 50, 28,
	108, 109, 209, 217, 281, 300, 301, 136, 192, 137,
	56, 127, 168, 97, 37, 39, 41, 42, 51, 52,
	85, 87, 88, 115, 116, 117, 146, 148, 149, 150,
	151, 152, 194, 227, 268, 278, 294, 295, 321, -288,
	-269, -270, -263, -264, 70, 124, 144, 138, 156, 160,
	169, 171, 184, 206, 208, 245, 266, -271, -335, 2,
	299, 299, 2, -335, 2, -335, 2, -128, 2, 299,
	296, -311, 228, -307, -125, -311, 357, 357, 359, 357,
	-144, -145, 2, 22, 95, -171, 2, 354, -246, 2,
	352, -248, -133, -102, -247, 354, 200, -3, 2, -248,
	136, -133, 2, -248, 136, -133, 2, -125, 2, -136,
	136, -133, 296, 359, -158, -151, -125, -210, -209, 356,
	-216, 2, -216, 2, 123, 354, -168, -169, -209, -210,
	2, -159, 136, -125, 2, -159, 2, 141, -125, 136,
	2, -125, 22, 123, 2, 155, 2, 155, 2, -249,
	2, -248, -160, 136, 2, -159, -160, 136, 2, -137,
	136, 2, -136, -125, 136, 2, -151, 136, 2, -185,
	354, -254, 2, -253, -282, 4, -287, -289, -288, 320,
	58, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 259, 199, 359, -159, -216, -228, 354,
	123, -216, 199, -125, 2, 263, 2, 354, -68, 53,
	299, -203, 2, -204, -122, -123, -124, 157, 222, 226,
	333, 296, 339, 123, -277, -162, 356, -89, 2, -285,
	2, -283, 9, -282, 5, 263, 2, 223, 260, 55,
	123, 2, 2, -327, 2, 199, 123, 2, 123, 2,
	123, 2, 123, 2, 123, 2, 2, 223, 260, 2,
	120, 2, 298, 2, 2, 123, 2, 157, 222, 275,
	2, 284, 323, 2, 123, 123, 333, 2, -174, -248,
	-147, -148, -173, -192, -193, 172, 112, 197, -176, 22,
	95, -176, -176, 44, 355, 355, -89, 263, 2, 10,
	11, 57, 33, 345, 346, 347, 348, 118, 349, 350,
	343, 344, 342, 337, 338, 339, 63, 177, 250, 13,
	14, 15, 26, 202, 171, 334, 138, 266, 340, 16,
	17, 18, 156, 36, 139, -130, -138, -216, -216, -216,
	-216, -216, 208, -167, -211, 352, -102, 354, 354, -102,
	-216, -161, 354, 7, -102, -225, 352, -234, -216, -168,
	354, 5, 354, 5, -312, 329, 120, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 219, -275, 324, -275,
	-275, -259, 354, -259, -260, 354, -259, 330, 335, 354,
	-202, -203, -202, 296, -129, 359, -311, -152, 354, -171,
	-163, -250, -216, 347, -163, -170, -239, 70, -179, 160,
	184, 124, 169, 245, 144, 7, -45, -213, 360, 354,
	347, -243, 335, -102, -247, 354, -246, -133, 354, -112,
	236, -111, 21, 23, 98, 318, 104, 272, 290, 252,
	236, 104, 236, 272, 290, 252, 236, 104, 360, -285,
	-134, 359, -280, 347, 4, -287, -289, -288, -290, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 43, 49,
	50, 54, 57, 59, 65, 69, 74, 75, 77, 76,
	78, 79, 80, 89, 91, 93, 95, 96, 99, 101,
	103, 110, 111, 112, 120, 122, 123, 125, 128, 130,
	139, 141, 143, 153, 155, 164, 167, 172, 174, 175,
	189, 190, 191, 197, 199, 200, 202, 203, 215, 221,
	230, 243, 255, 261, 271, 282, 284, 292, 296, 297,
	302, 307, 308, 313, 315, 322, 323, 325, 326, 327,
	328, 276, 355, -157, -133, -169, 354, -146, 189, -121,
	-309, 328, -146, 354, -126, 136, 2, -125, -309, 189,
	-249, -135, -133, -135, 262, -125, 30, -114, 359, 48,
	241, 104, -114, 104, -114, 359, 104, -114, 104, 104,
	-161, -216, 355, 359, -326, -332, 69, 354, 30, -227,
	-255, -256, -258, -267, -261, -265, -266, 40, 46, 45,
	291, 182, 257, 269, 316, 38, 198, 147, 146, 148,
	149, 150, 151, 152, 268, 37, 227, 116, 117, 115,
	97, 88, 87, 194, 42, 41, -269, -270, -263, -264,
	85, 294, 295, 154, 39, 52, 51, 321, 278, -286,
	-285, -326, -279, -161, 30, -203, 2, 359, -204, 170,
	-140, 176, 188, 132, 200, 331, -284, 5, 4, -226,
	-240, 89, 173, -266, 8, 346, -276, 7, 345, -278,
	-277, -278, 73, 356, -280, -159, 22, 264, 2, -279,
	-329, 120, -326, -279, -279, -279, -279, -279, 259, -45,
	120, -125, 170, -279, 2, -279, 2, 284, 141, 284,
	-114, 359, -173, -193, -192, -195, -216, 22, -198, 114,
	185, -216, -218, -101, -101, -101, -149, -244, -216, 221,
	141, -279, -273, -255, -272, 232, 233, 231, 235, 234,
	-255, -280, 293, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, 171, 138, 266, 36, 139,
	-216, 296, -216, -216, -216, -216, 181, 189, 191, 302,
	110, 309, 95, 195, -337, 282, 32, -223, -102, 354,
	-238, 27, 271, 22, -230, 248, 354, -211, -216, -212,
	-161, 355, 355, 359, -161, -229, 353, -225, -237, -236,
	325, 355, -161, 322, 22, 95, 347, 2, 7, -186,
	332, 180, 86, 133, 179, -187, 254, -313, 113, 128,
	354, 355, 2, 355, 2, 355, 2, 355, 2, -216,
	-216, -180, 2, -274, -161, 4, 332, 180, 86, 133,
	179, 254, -180, 2, -181, 2, -216, -161, -182, -217,
	-218, 345, 346, 340, 354, 248, -183, 2, -216, -161,
	-216, 43, 167, 297, -184, -216, 123, -161, -216, -216,
	-216, -161, -161, 2, -161, 2, 354, 7, 7, 293,
	293, 7, -129, -307, 30, -151, -154, 359, 123, 30,
	4, -154, 359, 355, 160, 160, -246, -179, 160, -177,
	206, -177, -177, -324, 354, 353, -243, -280, 352, 361,
	-161, 2, -242, -241, 30, -125, 204, 355, -133, 359,
	296, -190, 65, 59, -206, 136, 59, -291, -125, 65,
	-292, 54, 308, 221, 122, -190, 65, -190, 65, 65,
	-248, 33, -59, 123, 296, -248, 296, 33, -59, 123,
	296, -136, -280, -252, 336, -125, 123, 355, 359, -141,
	-151, -142, -125, -207, -206, -293, -294, -291, 141, 308,
	111, 30, 104, 213, 30, 199, 189, -117, 287, 104,
	-208, 326, -199, -59, 354, 89, 30, -199, -164, -165,
	-251, -166, -133, 354, -125, -159, -160, -160, -136, -137,
	-125, -151, 355, 359, -45, -253, 296, 315, -142, -44,
	355, 359, -153, 29, 352, -186, 354, -252, 359, 123,
	339, 296, 355, 299, -204, -139, 226, 270, 237, 258,
	8, 7, 7, 359, -280, -328, -125, 259, -45, -133,
	-136, -133, -248, -196, -276, 354, 346, -197, 248, 249,
	359, -110, 31, 93, 161, -133, 333, -216, -216, 296,
	-337, 282, -223, -216, 181, 191, 302, 110, 309, 95,
	195, 123, 354, -217, -217, -161, -216, 354, -161, 353,
	363, 355, -216, 353, 353, 359, -235, -236, 99, -216,
	-148, 359, -147, -216, -161, -161, 355, 355, 296, 296,
	296, 296, 354, -318, 207, 354, 354, -216, 30, 359,
	355, 123, 355, 355, -188, 215, 355, 10, 11, 345,
	346, 347, 348, 118, 349, 350, 343, 344, 342, 337,
	338, 339, 63, 177, 250, 13, 14, 15, 156, 139,
	-217, -217, -217, -161, 354, 355, -221, -222, 123, 120,
	30, -184, -184, -184, 355, 123, -161, 359, 359, 359,
	355, 355, 355, 7, 355, 359, 355, 333, 333, 355,
	354, 355, -208, -250, -156, 2, -246, -280, -208, -239,
	-246, -246, -178, 315, 199, 160, -246, -241, 355, -325,
	7, -243, -242, 7, -215, -214, 121, 187, 355, -125,
	354, -243, 355, -111, -133, -125, -125, 189, -206, 136,
	-116, 189, -255, -125, 354, 354, 161, 161, -125, -125,
	136, -125, 136, -125, -125, -112, 236, -59, 354, -133,
	236, -125, -59, 354, -125, 236, -95, 135, 195, 276,
	123, -133, 355, 355, 359, -126, 141, -126, -59, -159,
	5, -59, -133, 104, -118, 100, -336, 339, -125, -194,
	-192, -216, -175, -201, 243, 199, -157, 320, -125, -175,
	-155, 359, 123, 339, -157, -114, -114, -114, -114, -216,
	-328, -285, 355, -255, 352, 353, 7, 7, -98, 328,
	-285, -328, -277, -277, -122, 306, 62, 226, -277, 359,
	-197, -216, -244, -133, 360, -216, -216, -217, -217, 123,
	354, -216, -227, 26, 26, 355, -161, 355, 359, -212,
	-216, 355, -225, 101, -216, 292, 355, 322, -148, -148,
	-148, 5, 180, 133, 179, -187, 179, -187, -187, 7,
	-319, -125, 354, 326, -147, 355, -273, -255, -216, -221,
	-216, -273, -255, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, 95, 189, 195, -217, 359, -161, 355, -222,
	-221, -216, -216, -255, 355, 355, 355, -161, -216, -216,
	-216, 355, 7, -44, -172, 128, -252, 359, -172, -178,
	354, -216, -246, 353, 355, 359, -242, 353, 359, 362,
	339, -243, 354, -151, -241, 296, 296, 104, 189, 317,
	-295, -292, -216, -150, -245, -125, -306, 354, -303, -304,
	-131, 354, 354, -109, 98, 262, -191, 104, -114, 104,
	-114, 296, -190, 65, -161, 296, -161, 296, -98, 123,
	283, 276, -143, 140, -207, 354, -126, 354, 354, -146,
	354, -125, -119, 166, -336, -283, -309, -175, -175, -163,
	190, 64, 355, -208, -165, -156, -239, 355, -99, 71,
	-99, 7, 353, 355, -97, 201, -96, -125, 5, -125,
	200, 355, -110, -280, 26, 26, -216, -227, 355, -216,
	-216, 355, -216, 353, -216, 5, -216, 355, 355, 355,
	355, -320, -125, -216, 355, 355, 355, -222, 123, 95,
	195, 354, -216, 355, 355, 359, 355, 355, 355, 355,
	-224, 130, 44, -246, -224, -151, -213, 7, -214, -280,
	352, -242, -151, 355, -125, -125, -206, 104, -296, 65,
	-297, 57, 111, 69, 189, 191, 308, 221, 54, 89,
	230, 355, 355, 359, -132, -168, 57, -132, -216, 354,
	-150, -151, 189, 89, 189, 89, 82, 304, -125, -125,
	-133, -125, -125, 355, -133, 355, -125, -286, 293, 139,
	-150, 354, -151, -141, 30, -150, 199, -120, 165, -336,
	-283, -117, -200, 354, 199, -59, -175, 339, 82, 82,
	353, 359, 354, 339, 339, -110, -216, -216, 355, 355,
	-148, -314, 212, 355, -217, 123, 354, -227, 355, -216,
	-315, 327, -216, -161, -315, 355, -243, 7, 355, -206,
	-125, -280, -125, 111, 136, 191, 161, 354, -217, -133,
	-205, -333, 68, 280, -245, -110, -280, -110, 355, -161,
	355, 355, 191, 191, -216, -255, -114, -114, 296, 296,
	296, 296, -219, -131, -125, 210, 355, -150, 355, 355,
	-59, 355, -133, -336, -283, -118, 96, -151, 65, -171,
	-102, 354, 354, 354, -96, -97, -285, -285, 355, -148,
	44, -217, -227, 355, 355, -316, -317, -125, -242, 353,
	-297, -126, 189, -216, -127, 354, -143, 354, -132, -148,
	230, -113, 57, -125, -125, 354, 354, 354, -133, -205,
	355, -143, -205, 354, -283, -119, 310, 190, 355, -125,
	-286, -286, 355, -321, 225, 249, -161, 355, 359, 30,
	104, 355, -300, 178, -125, -151, -110, 355, -133, -108,
	315, -280, -161, -161, -161, 354, -143, -205, -143, -150,
	-120, 262, -208, 355, 355, 355, -322, -323, 36, 305,
	73, -216, -322, -317, -319, 111, -298, -301, -299, 199,
	124, 211, 267, 355, 355, -146, -216, 355, 355, -148,
	-151, -143, 355, -164, -98, -98, -323, 218, 119, 248,
	218, 119, -125, -299, 199, -301, 199, 310, 92, -300,
	355, 355, -205, -208, 26, -302, 186, 241, 48, 262,
	-302, -298, -115, 48, 241, -143, -323, 20, 191, 89,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 0, 0, 151, 153, 155, 157, -2, 160,
	162, 0, 0, 0, 173, 175, 177, 179, 181, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	635, -2, 0, 278, 280, 289, 291, 293, 295, 296,
	0, 339, 341, 343, 345, 347, 349, 351, 353, 355,
	357, 359, 361, 363, 365, 367, 368, 370, 372, 0,
	557, 559, 561, -2, 63, 64, 65, 66, 67, 73,
	74, 75, 76, 69, 71, 671, -2, 682, 0, 0,
	0, -2, 0, -2, -2, -2, 0, 0, 648, 650,
	652, 654, -2, 0, 0, -2, 7, 12, 14, 16,
	19, 21, 23, 25, 27, 29, 31, 33, 35, 37,
	39, 42, 48, 50, 52, 55, 57, 59, 61, 62,
	0, 0, 0, 0, 0, 117, 262, 0, 1237, 1164,
	1170, 1171, 1195, 1196, 1197, 1214, 1215, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
	1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
	1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
	1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
	1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
	1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
	1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349,
	1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
	1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
	1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
	1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
	1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
	1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
	1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
	1420, 1421, 1422, 1423, 1424, 1425, 143, 145, 146, 0,
	0, 0, 1166, 1237, 152, 154, 156, 158, 0, 164,
	0, 0, 0, 0, 524, 161, 163, 253, 1296, 255,
	257, 0, 0, 0, 0, 167, 168, 169, 170, 171,
	172, 174, 176, 178, 180, 182, 183, 0, 0, 0,
	0, 0, 252, 250, 205, 206, 0, 235, 236, 237,
	238, 239, 241, 209, 211, 212, 214, 216, 218, 220,
	221, 223, 225, 226, 228, 230, 231, 233, 0, 0,
	259, 265, 266, 267, 269, 270, 271, 272, 273, 274,
	275, 0, 123, 0, 445, 248, 246, 0, 119, 0,
	554, 0, 261, 555, 556, 551, 552, 1323, 580, 279,
	281, 290, 292, 294, -2, -2, 1412, -2, 303, -2,
	311, 1418, 0, 314, 315, 318, -2, 201, 340, 342,
	344, 346, 348, 350, 352, 354, 356, 358, 360, 362,
	364, 366, 369, 371, 373, 374, 375, 0, 0, 0,
	379, 0, -2, -2, 0, 0, 0, 0, 0, -2,
	0, -2, 0, 0, -2, -2, 0, 0, -2, 0,
	0, 378, 380, 381, 382, 0, 558, 560, 562, 0,
	514, 673, -2, 646, 647, -2, 0, 677, 677, 677,
	0, 0, 647, 645, 0, 282, 0, 284, 0, 379,
	287, 288, 319, 320, 1149, 1150, 874, 0, 0, 0,
	0, 0, 0, 966, 968, 1386, 1412, 0, 970, 971,
	0, 973, 975, 976, 0, 979, 980, 1134, 1166, 1180,
	1181, 1182, 1183, 0, 0, 1186, 0, 1188, 1189, 1190,
	1034, 990, -2, -2, 1178, 802, 803, 804, 805, -2,
	1426, 994, 997, 1000, 1003, 1004, 1007, 1008, 0, 1370,
	1387, 1388, 1408, 1409, 1417, 1421, 1422, 1394, 1405, 1395,
	1382, 1392, 1403, 1243, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1204,
	836, 837, 842, 843, 1427, 1428, 1429, 1430, 1431, 1432,
	1433, 1434, 1435, 1436, 1437, 1438, 1439, 845, 582, 564,
	573, 582, 566, 567, 568, 569, 570, 571, 572, 575,
	0, 663, 1302, 666, 1177, 664, 649, 651, 0, 653,
	0, 0, 657, 679, 678, 712, 713, 0, 661, 662,
	672, 728, 766, 743, 734, 0, 0, 2, 68, 0,
	1394, 766, 70, 0, 1394, 766, 72, 0, 77, 0,
	1394, 1169, 0, 0, 263, 264, 1174, 1172, 1173, 0,
	147, 148, 149, 150, 0, 0, 1167, 1143, 1141, 1142,
	159, 493, 1394, -2, 516, 493, 520, -2, 670, 1394,
	595, 254, 256, 0, 166, 0, 608, 0, 610, 0,
	625, 772, 109, 1394, 186, 199, 109, 1394, 189, 109,
	1394, 192, 1162, 109, 1394, 195, 196, 1394, 198, 249,
	0, 0, -2, 242, 244, 1205, 1206, 1207, 1208, -2,
	1426, 240, 210, 213, 215, 217, 219, 222, 224, 227,
	229, 232, 234, -2, 0, 0, 0, 444, 0, 0,
	0, 553, 0, 579, 297, 0, 300, 0, 302, 1381,
	-2, 305, 306, 583, 586, 587, 588, 0, 0, 0,
	0, 0, 0, 0, 316, 202, 0, 376, 377, 385,
	386, 124, 125, 337, 338, 0, 389, 410, 422, 0,
	0, 393, 395, 443, 397, 0, 0, 399, 0, 401,
	0, 403, 0, 405, 0, 407, 409, 411, 423, 413,
	672, 415, 0, 417, 421, 0, 426, 0, 428, 429,
	430, 0, 0, 436, 0, 0, 383, 384, 109, 770,
	-2, 0, 641, 691, 692, 0, 0, 0, 0, 675,
	676, 0, 0, 0, 637, 638, 283, 0, 286, 0,
	0, 0, 0, 1069, 1070, 1071, 1072, 1073, 1074, 1077,
	1078, 1075, 1076, 1079, 1080, 1081, 0, 0, 0, 1082,
	1083, 1084, 0, 0, 1086, 0, 1088, 0, 0, 0,
	0, 0, 0, 1148, 0, 0, 1085, 879, 880, 881,
	903, 904, 0, 967, 1145, 1138, 969, 0, 0, -2,
	1090, 0, 0, 972, 977, 978, 0, 0, 1133, -2,
	0, 1185, 0, 871, 1036, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 821, 839, 850, 847,
	846, 823, 0, 822, 820, 0, 824, 0, 0, 0,
	563, 581, 565, 0, 577, 0, 665, 0, 0, 714,
	717, 1154, 1158, 1159, 717, 0, 1151, 0, 0, 0,
	0, 763, 763, 763, 761, 737, 0, 743, 0, 0,
	767, 755, 0, -2, 734, 0, 0, 768, 0, 78,
	548, 88, 0, 548, 548, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 757,
	1165, 0, 1139, 1140, 1209, 1210, 1211, 1212, 1213, 1440,
	1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
	1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
	1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
	1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
	1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510,
	1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520,
	1521, 139, 0, 0, 1160, 1144, 451, 0, 0, 515,
	0, 669, 0, 0, 0, 1394, 523, 1198, 597, 0,
	776, 0, 611, 0, 0, 773, 0, 184, 0, 107,
	108, 0, 187, 0, 190, 0, 0, 193, 0, 0,
	0, 1090, 672, 0, 0, 268, 0, 0, 672, 0,
	1092, 784, 785, 786, 787, 788, 871, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 833,
	0, 808, 808, 808, 825, 826, 834, 835, 840, 841,
	852, 853, 855, 857, 851, 851, 851, 848, 849, 757,
	126, 0, 0, 0, 0, 307, 308, 0, 585, 0,
	589, 328, 329, 330, 591, 592, 312, 331, 332, 333,
	334, 335, 336, 0, 510, 0, 512, 1191, 0, 309,
	321, 310, 313, 0, 203, 387, 388, 390, 391, 392,
	396, 0, 440, 398, 400, 402, 404, 406, 414, 418,
	672, 424, 427, 431, 432, 433, 434, 0, 0, 0,
	513, 0, 644, 689, 690, 695, 699, 700, 703, 706,
	707, 697, 874, 658, 659, 660, 683, 684, 535, 0,
	0, 285, 875, 780, 781, 827, 828, 829, 830, 831,
	876, 877, 0, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, -2, -2, -2, 895, 896, 897, -2,
	-2, -2, 901, 902, -2, 1087, 1089, 0, 1148, 0,
	-2, 0, -2, -2, -2, -2, 915, 0, 917, 920,
	922, 924, 0, 0, 0, 0, 1147, 934, 1125, 0,
	0, 1066, 1067, 1068, 919, 0, 0, 1146, 1137, 0,
	0, -2, 974, 0, 0, 0, 1096, 1097, 1132, 1128,
	0, 981, 682, 0, 0, 0, 0, 988, 0, 1194,
	858, 859, 860, 861, 862, 863, 872, 1044, 0, 0,
	0, 995, 996, 998, 999, 1001, 1002, 1005, 1006, 0,
	0, 0, 1012, 0, 1100, -2, -2, -2, -2, -2,
	-2, -2, 0, 1014, 0, 1016, 1090, 1110, 0, 0,
	937, 0, 0, 0, 0, 1412, 0, 1019, 1090, 1118,
	0, 0, 0, 0, 0, 1090, 0, 1124, 0, 0,
	0, 0, 0, 1030, 0, 1032, 0, 0, 0, 0,
	0, 0, 576, 667, 0, 0, 776, 0, 0, 0,
	1157, 776, 0, 1153, 0, 0, 0, 0, 0, 758,
	762, 759, 760, 0, 0, 743, 755, 725, 0, 0,
	0, 732, 733, 754, 0, 753, 742, -2, 0, 0,
	0, 0, 0, 547, 90, 1394, 0, 111, 0, 0,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 83, 0,
	0, 0, 1168, 129, 0, 1175, 0, 0, 0, 0,
	0, 450, 1174, 452, 454, 455, 456, 457, 1199, 0,
	1199, 0, 0, 0, 0, 0, 0, 599, 605, 0,
	694, 0, 623, 613, 0, 0, 0, 623, 627, 628,
	630, 631, 0, 0, 774, 200, 109, 109, 1163, 109,
	109, 197, 251, 0, 207, 243, 0, 0, 0, 245,
	247, 0, 777, 779, 0, 789, 0, 138, 0, 0,
	0, 0, 301, 0, 584, 590, 0, 325, 0, 327,
	511, 1193, 1192, 0, 204, 442, 276, 416, 419, 437,
	438, 439, 771, 0, 701, 0, 0, 698, 704, 705,
	0, 686, 533, 534, 0, 0, 0, -2, -2, 0,
	0, 0, 935, -2, 916, 918, 921, 923, 925, 0,
	0, 0, 0, 0, 0, 0, 936, 0, 0, 1135,
	1138, -2, 1091, 1094, 1095, 0, 0, 1129, 0, 0,
	0, 0, 681, 682, 682, 682, 987, 0, 0, 0,
	0, 0, 0, 989, 0, 0, 0, 0, 0, 0,
	1011, 0, 1013, 1015, 0, 0, 1017, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	940, 941, 942, 0, 0, 1018, 1116, 1117, 0, 0,
	0, 0, 0, 0, 1024, 0, 1123, 0, 0, 0,
	1028, 1029, 1031, 0, 806, 0, 832, 854, 856, 844,
	672, 1176, 709, 1155, 757, 716, 718, 1156, 709, 1152,
	745, 0, 747, 0, 0, 0, 749, 0, 738, 0,
	740, 755, 730, 0, 0, 723, 0, 722, 743, 751,
	0, 0, 769, 89, 537, 0, 0, 0, 92, 1394,
	100, 0, 465, 0, 0, 0, 0, 0, 550, 101,
	1394, 109, 1394, 109, 102, 79, 548, 80, 0, 543,
	0, 536, 81, 0, 545, 0, 138, 0, 0, 140,
	0, 1161, 459, 492, 0, 0, 1199, 0, 448, 493,
	517, 519, 0, 0, 601, 605, 0, 604, 670, 623,
	693, 775, 606, 623, 0, 0, 0, 615, 612, 609,
	776, 0, 0, 0, 0, 185, 188, 191, 194, 1091,
	258, 0, 0, 1093, 0, 782, 0, 0, 118, 0,
	127, 260, 298, 299, 304, 323, 324, 326, 322, 0,
	0, 0, 685, 535, 0, 878, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1126, 0, 1061, 0, 0,
	1137, -2, 1098, 1127, 1131, 0, 982, 0, 0, 0,
	0, 1187, 864, 865, 866, 867, 868, 869, 870, 0,
	1042, 1043, 1047, 0, 0, 993, 0, 0, 1099, 1109,
	1111, 938, 939, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, -2, -2, -2, 956, 957, 958, -2,
	-2, -2, 0, 0, 0, 1112, 0, 0, 1064, 1114,
	1115, 1120, 1121, 0, 1021, 1022, 1023, 1122, 0, 0,
	0, 838, 0, 0, 711, 0, 715, 0, 711, 746,
	0, 765, 748, 728, 739, 0, 736, 726, 0, 727,
	0, 755, 0, 0, 735, 0, 0, 0, 0, 110,
	463, 482, 0, 0, 526, 532, 532, 0, 991, 992,
	0, 0, 0, 94, 0, 0, 0, 0, 98, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 141, 446, 0, 453, 0, 0, 0, 451, 0,
	0, 0, 603, 605, 0, 596, 597, 165, 607, 621,
	622, 620, 0, 623, 629, 626, 632, 0, 0, 120,
	0, 0, 783, 790, 136, 1286, 134, 131, 133, 277,
	696, 702, 687, 535, 0, 0, -2, 0, 928, -2,
	-2, 1060, 1091, 1136, 1130, 1184, 682, 983, 985, 986,
	873, 1049, 1046, 0, 1033, 1009, 1010, 1108, 0, 0,
	0, 0, 1091, 1063, 1020, 0, 1026, 1027, 807, 668,
	1038, 0, 0, 719, 1038, 0, 743, 741, 724, 720,
	0, 731, 0, 752, 539, 541, 91, 0, 464, 0,
	467, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 484, 491, 0, 535, 1179, 0, 535, 0, 0,
	0, 0, 0, 106, 0, 0, 549, 0, 109, 109,
	538, 0, 0, 0, 544, 0, 546, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 593, 605, 0,
	598, 599, 0, 0, 0, 614, 624, 0, 0, 0,
	778, 0, 0, 0, 0, 688, -2, -2, 929, 1062,
	0, 682, 0, 1035, -2, 0, 0, 0, 1065, 0,
	655, 0, 710, 708, 656, 764, 755, 0, 750, 93,
	0, 468, 469, 1199, 0, 472, 475, 0, 477, 1201,
	459, 0, 488, 489, 527, 528, 531, 529, 532, 682,
	486, 0, 95, 96, 105, 113, 97, 103, 0, 0,
	0, 0, 756, 0, 0, 0, 491, 0, 481, 459,
	449, 491, 0, 0, 600, 601, 0, 0, 0, 633,
	634, 0, 0, 0, 135, 0, 130, 132, 984, 1052,
	0, -2, 0, 964, 1025, 1037, 1039, 0, 729, 721,
	466, 470, 0, 0, 497, 0, 485, 0, 535, 0,
	0, 115, 0, 540, 542, 0, 0, 0, 0, 459,
	491, 447, 459, 0, 602, 603, 0, 617, 776, 619,
	0, 0, 137, 0, 0, 0, 1048, 965, 0, 0,
	0, 476, 502, 0, 0, 0, 530, 982, 493, 99,
	0, 112, 0, 0, 682, 0, 479, 459, 521, 0,
	594, 0, 618, 138, 138, 1045, 1050, 1053, -2, 1354,
	1234, 0, 1051, 1040, 1041, 0, 478, 498, 499, 0,
	494, 495, 496, 1200, 490, 497, 114, 85, 87, 0,
	0, 480, 491, 776, 121, 122, 0, 1055, 1056, 1057,
	1058, 1059, 471, 500, 0, 501, 0, 0, 0, 502,
	0, 462, 459, 616, 0, 503, 0, 506, 507, 0,
	504, 487, 458, 460, 461, 522, 1054, 505, 508, 509,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 359, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 363, 358,
	337, 339, 338, 3, 360, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 361, 342, 362, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 57681, 357, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:859
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:865
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:871
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:880
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:882
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:983
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1003
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1029
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1035
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1124
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1196
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1197
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1200
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1201
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1228
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1254
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1361
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			return helpWith(sqllex, "DELETE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "DROP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1555
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			return helpWith(sqllex, "INSERT")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1643
		{ /* SKIP DOC */
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "GRANT")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return helpWith(sqllex, "RESET")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			return helpWith(sqllex, "RESET")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1875
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1887
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1888
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{ /* SKIP DOC */
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1891
		{ /* SKIP DOC */
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			return unimplemented(sqllex, "set local")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			return unimplemented(sqllex, "set from current")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = Low
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = Normal
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = High
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.str = "client_encoding"
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2164
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2169
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2336
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2358
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2369
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2384
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2388
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2392
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2398
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2426
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2529
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = DropDefault
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2744
		{
			return unimplemented(sqllex, "match full")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			return unimplemented(sqllex, "match partial")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			return unimplemented(sqllex, "match simple")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2747
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2754
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2755
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2757
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			return unimplemented(sqllex, "no action")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			return unimplemented(sqllex, "action set null")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			return unimplemented(sqllex, "action set default")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2797
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2812
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2873
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = true
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = false
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2904
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2907
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2908
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = Ascending
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = Descending
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2948
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2950
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = true
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = false
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2983
		{
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2984
		{
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3006
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3021
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3046
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3082
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3083
		{
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.str = ""
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.str = ""
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3130
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[2].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = ReadOnly
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = ReadWrite
		}
	case 593:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3209
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.str = ""
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.str = ""
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.str = ""
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.str = ""
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3252
		{
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3253
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			return helpWith(sqllex, "INSERT")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3294
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3336
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3348
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 624:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3371
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3375
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3376
		{
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3505
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3540
		{
			return helpWith(sqllex, "SELECT")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3541
		{
			return helpWith(sqllex, "VALUES")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3542
		{
			return helpWith(sqllex, "TABLE")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3588
		{
			return helpWith(sqllex, "SELECT")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3632
		{
			return helpWith(sqllex, "TABLE")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3643
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3644
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3645
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3648
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3649
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3652
		{
			return unimplemented(sqllex, "cte")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3655
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3656
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3659
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3660
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3664
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = true
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = false
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = false
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = true
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3688
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3735
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3759
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3812
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3816
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3874
		{
			return helpWith(sqllex, "VALUES")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3891
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &From{}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3913
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3931
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3958
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3995
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = nil
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4061
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = false
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.str = astFullJoin
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.str = astLeftJoin
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.str = astRightJoin
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.str = astInnerJoin
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4178
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4179
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4265
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4279
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4287
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4311
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4322
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4385
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4394
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = nil
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4459
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4555
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4587
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4626
		{
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4627
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 854:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 856:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = year
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = month
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = day
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = hour
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = minute
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = month
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = hour
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = minute
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = minute
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = nil
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = second
		}
	case 873:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4722
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4757
		{
			return unimplemented(sqllex, "at tz")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4925
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4991
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5164
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5217
		{
			return unimplemented(sqllex, "variadic")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5218
		{
			return unimplemented(sqllex, "variadic")
		}
	case 985:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5242
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5258
		{
			return unimplemented(sqllex, "func_application")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5259
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5263
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5272
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5290
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5291
		{
			return unimplemented(sqllex, "current role")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5300
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5321
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5326
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5331
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5340
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5341
		{
			return unimplemented(sqllex, "treat")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5378
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5383
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5387
		{
			return unimplemented(sqllex, "within group")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5388
		{
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5423
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.str = ""
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5471
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5475
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5485
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5486
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5487
		{
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5490
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5491
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5497
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5498
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5499
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5500
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5501
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = Any
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = Some
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = All
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = Plus
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = Minus
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5557
		{
			sqlVAL.union.val = Mult
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = Div
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = Mod
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5561
		{
			sqlVAL.union.val = Bitand
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = Bitor
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = Pow
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = Bitxor
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5565
		{
			sqlVAL.union.val = LT
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = GT
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = EQ
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = LE
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5569
		{
			sqlVAL.union.val = GE
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = NE
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = Like
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = NotLike
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = ILike
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = NotILike
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5636
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5720
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5774
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5807
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5811
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5865
		{
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5866
		{
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5875
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5894
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5935
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5970
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5984
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6028
		{
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6064
		{
			return unimplemented(sqllex, "func const")
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6073
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6079
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = DNull
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6100
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6135
		{
			sqlVAL.str = ""
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
