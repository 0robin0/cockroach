// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *TableNameWithIndex {
	tn := u.val.(TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() TableNameWithIndex {
	return u.val.(TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:494
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALL_EXISTENCE = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const IMPORT = 57486
const INCREMENTAL = 57487
const IF = 57488
const IFNULL = 57489
const ILIKE = 57490
const IN = 57491
const INET = 57492
const INTERLEAVE = 57493
const INDEX = 57494
const INDEXES = 57495
const INITIALLY = 57496
const INNER = 57497
const INSERT = 57498
const INT = 57499
const INT2VECTOR = 57500
const INT2 = 57501
const INT4 = 57502
const INT8 = 57503
const INT64 = 57504
const INTEGER = 57505
const INTERSECT = 57506
const INTERVAL = 57507
const INTO = 57508
const IS = 57509
const ISOLATION = 57510
const JOB = 57511
const JOBS = 57512
const JOIN = 57513
const JSON = 57514
const JSONB = 57515
const KEY = 57516
const KEYS = 57517
const KV = 57518
const LATERAL = 57519
const LC_CTYPE = 57520
const LC_COLLATE = 57521
const LEADING = 57522
const LEAST = 57523
const LEFT = 57524
const LESS = 57525
const LEVEL = 57526
const LIKE = 57527
const LIMIT = 57528
const LIST = 57529
const LOCAL = 57530
const LOCALTIME = 57531
const LOCALTIMESTAMP = 57532
const LOW = 57533
const LSHIFT = 57534
const MATCH = 57535
const MAXVALUE = 57536
const MINUTE = 57537
const MONTH = 57538
const NAN = 57539
const NAME = 57540
const NAMES = 57541
const NATURAL = 57542
const NEXT = 57543
const NO = 57544
const NO_INDEX_JOIN = 57545
const NORMAL = 57546
const NOT = 57547
const NOTHING = 57548
const NULL = 57549
const NULLIF = 57550
const NULLS = 57551
const NUMERIC = 57552
const OF = 57553
const OFF = 57554
const OFFSET = 57555
const OID = 57556
const ON = 57557
const ONLY = 57558
const OPTIONS = 57559
const OR = 57560
const ORDER = 57561
const ORDINALITY = 57562
const OUT = 57563
const OUTER = 57564
const OVER = 57565
const OVERLAPS = 57566
const OVERLAY = 57567
const PARENT = 57568
const PARTIAL = 57569
const PARTITION = 57570
const PASSWORD = 57571
const PAUSE = 57572
const PHYSICAL = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCES = 57617
const SERIAL = 57618
const SERIALIZABLE = 57619
const SESSION = 57620
const SESSIONS = 57621
const SESSION_USER = 57622
const SET = 57623
const SETTING = 57624
const SETTINGS = 57625
const SHOW = 57626
const SIMILAR = 57627
const SIMPLE = 57628
const SMALLINT = 57629
const SMALLSERIAL = 57630
const SNAPSHOT = 57631
const SOME = 57632
const SOME_EXISTENCE = 57633
const SPLIT = 57634
const SQL = 57635
const START = 57636
const STATUS = 57637
const STDIN = 57638
const STRICT = 57639
const STRING = 57640
const STORE = 57641
const STORING = 57642
const SUBSTRING = 57643
const SYMMETRIC = 57644
const SYSTEM = 57645
const TABLE = 57646
const TABLES = 57647
const TEMP = 57648
const TEMPLATE = 57649
const TEMPORARY = 57650
const TESTING_RANGES = 57651
const TESTING_RELOCATE = 57652
const TEXT = 57653
const THAN = 57654
const THEN = 57655
const TIME = 57656
const TIMESTAMP = 57657
const TIMESTAMPTZ = 57658
const TO = 57659
const TRAILING = 57660
const TRACE = 57661
const TRANSACTION = 57662
const TREAT = 57663
const TRIM = 57664
const TRUE = 57665
const TRUNCATE = 57666
const TYPE = 57667
const UNBOUNDED = 57668
const UNCOMMITTED = 57669
const UNION = 57670
const UNIQUE = 57671
const UNKNOWN = 57672
const UPDATE = 57673
const UPSERT = 57674
const USE = 57675
const USER = 57676
const USERS = 57677
const USING = 57678
const UUID = 57679
const VALID = 57680
const VALIDATE = 57681
const VALUE = 57682
const VALUES = 57683
const VARCHAR = 57684
const VARIADIC = 57685
const VIEW = 57686
const VARYING = 57687
const WHEN = 57688
const WHERE = 57689
const WINDOW = 57690
const WITH = 57691
const WITHIN = 57692
const WITHOUT = 57693
const WRITE = 57694
const YEAR = 57695
const ZONE = 57696
const NOT_LA = 57697
const WITH_LA = 57698
const AS_LA = 57699
const CONTAINED_BY = 57700
const POSTFIXOP = 57701
const UMINUS = 57702
const HELPTOKEN = 57703

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6929

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	381, 54,
	-2, 728,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	152, 577,
	-2, 0,
	-1, 54,
	97, 728,
	156, 728,
	331, 728,
	332, 728,
	-2, 0,
	-1, 64,
	1, 690,
	215, 690,
	261, 690,
	376, 690,
	378, 690,
	380, 690,
	381, 690,
	-2, 703,
	-1, 97,
	4, 730,
	20, 730,
	21, 730,
	24, 730,
	29, 730,
	34, 730,
	35, 730,
	36, 730,
	37, 730,
	38, 730,
	39, 730,
	40, 730,
	41, 730,
	42, 730,
	43, 730,
	45, 730,
	46, 730,
	47, 730,
	48, 730,
	49, 730,
	52, 730,
	53, 730,
	54, 730,
	56, 730,
	57, 730,
	61, 730,
	62, 730,
	63, 730,
	65, 730,
	66, 730,
	67, 730,
	68, 730,
	70, 730,
	72, 730,
	73, 730,
	76, 730,
	77, 730,
	78, 730,
	86, 730,
	87, 730,
	88, 730,
	89, 730,
	90, 730,
	91, 730,
	92, 730,
	93, 730,
	95, 730,
	97, 730,
	99, 730,
	102, 730,
	103, 730,
	105, 730,
	109, 730,
	110, 730,
	111, 730,
	112, 730,
	113, 730,
	114, 730,
	115, 730,
	123, 730,
	124, 730,
	125, 730,
	126, 730,
	127, 730,
	129, 730,
	131, 730,
	136, 730,
	137, 730,
	139, 730,
	142, 730,
	143, 730,
	144, 730,
	145, 730,
	146, 730,
	147, 730,
	150, 730,
	151, 730,
	153, 730,
	156, 730,
	157, 730,
	158, 730,
	159, 730,
	160, 730,
	161, 730,
	162, 730,
	163, 730,
	165, 730,
	168, 730,
	169, 730,
	170, 730,
	172, 730,
	173, 730,
	174, 730,
	175, 730,
	176, 730,
	178, 730,
	179, 730,
	181, 730,
	183, 730,
	184, 730,
	187, 730,
	188, 730,
	191, 730,
	193, 730,
	195, 730,
	196, 730,
	197, 730,
	198, 730,
	199, 730,
	201, 730,
	202, 730,
	203, 730,
	204, 730,
	208, 730,
	209, 730,
	210, 730,
	211, 730,
	212, 730,
	214, 730,
	216, 730,
	217, 730,
	220, 730,
	221, 730,
	223, 730,
	225, 730,
	226, 730,
	227, 730,
	228, 730,
	229, 730,
	230, 730,
	231, 730,
	233, 730,
	234, 730,
	235, 730,
	236, 730,
	237, 730,
	239, 730,
	240, 730,
	241, 730,
	242, 730,
	243, 730,
	244, 730,
	245, 730,
	246, 730,
	248, 730,
	249, 730,
	250, 730,
	251, 730,
	252, 730,
	254, 730,
	255, 730,
	256, 730,
	257, 730,
	258, 730,
	259, 730,
	260, 730,
	262, 730,
	264, 730,
	265, 730,
	266, 730,
	267, 730,
	269, 730,
	270, 730,
	271, 730,
	272, 730,
	273, 730,
	275, 730,
	276, 730,
	277, 730,
	278, 730,
	279, 730,
	281, 730,
	282, 730,
	283, 730,
	284, 730,
	286, 730,
	287, 730,
	288, 730,
	289, 730,
	292, 730,
	293, 730,
	294, 730,
	295, 730,
	296, 730,
	297, 730,
	298, 730,
	299, 730,
	300, 730,
	301, 730,
	303, 730,
	305, 730,
	306, 730,
	307, 730,
	308, 730,
	309, 730,
	310, 730,
	311, 730,
	312, 730,
	314, 730,
	315, 730,
	316, 730,
	319, 730,
	320, 730,
	321, 730,
	322, 730,
	324, 730,
	325, 730,
	326, 730,
	327, 730,
	330, 730,
	331, 730,
	332, 730,
	333, 730,
	335, 730,
	337, 730,
	338, 730,
	339, 730,
	340, 730,
	341, 730,
	342, 730,
	345, 730,
	350, 730,
	351, 730,
	352, 730,
	353, 730,
	354, 730,
	-2, 0,
	-1, 115,
	1, 693,
	215, 693,
	261, 693,
	376, 693,
	378, 693,
	380, 693,
	381, 693,
	-2, 702,
	-1, 120,
	1, 628,
	168, 628,
	239, 628,
	243, 628,
	380, 628,
	381, 628,
	-2, 0,
	-1, 122,
	1, 628,
	380, 628,
	381, 628,
	-2, 0,
	-1, 123,
	1, 628,
	380, 628,
	381, 628,
	-2, 0,
	-1, 124,
	1, 632,
	380, 632,
	381, 632,
	-2, 0,
	-1, 145,
	4, 736,
	5, 736,
	6, 736,
	7, 736,
	8, 736,
	9, 736,
	20, 736,
	21, 736,
	24, 736,
	29, 736,
	30, 736,
	34, 736,
	35, 736,
	36, 736,
	37, 736,
	38, 736,
	39, 736,
	40, 736,
	41, 736,
	42, 736,
	43, 736,
	45, 736,
	46, 736,
	47, 736,
	48, 736,
	49, 736,
	50, 736,
	51, 736,
	52, 736,
	53, 736,
	54, 736,
	56, 736,
	57, 736,
	59, 736,
	61, 736,
	62, 736,
	63, 736,
	65, 736,
	66, 736,
	67, 736,
	68, 736,
	70, 736,
	72, 736,
	73, 736,
	75, 736,
	76, 736,
	77, 736,
	78, 736,
	80, 736,
	81, 736,
	82, 736,
	84, 736,
	85, 736,
	86, 736,
	87, 736,
	88, 736,
	89, 736,
	90, 736,
	91, 736,
	92, 736,
	93, 736,
	94, 736,
	95, 736,
	97, 736,
	99, 736,
	102, 736,
	103, 736,
	105, 736,
	109, 736,
	110, 736,
	111, 736,
	112, 736,
	113, 736,
	114, 736,
	115, 736,
	116, 736,
	117, 736,
	123, 736,
	124, 736,
	125, 736,
	126, 736,
	127, 736,
	129, 736,
	131, 736,
	134, 736,
	136, 736,
	137, 736,
	139, 736,
	142, 736,
	143, 736,
	144, 736,
	145, 736,
	146, 736,
	147, 736,
	148, 736,
	150, 736,
	151, 736,
	153, 736,
	155, 736,
	156, 736,
	157, 736,
	158, 736,
	159, 736,
	160, 736,
	161, 736,
	162, 736,
	163, 736,
	165, 736,
	167, 736,
	168, 736,
	169, 736,
	170, 736,
	171, 736,
	172, 736,
	173, 736,
	174, 736,
	175, 736,
	176, 736,
	178, 736,
	179, 736,
	181, 736,
	182, 736,
	183, 736,
	184, 736,
	185, 736,
	187, 736,
	188, 736,
	191, 736,
	193, 736,
	194, 736,
	195, 736,
	196, 736,
	197, 736,
	198, 736,
	199, 736,
	200, 736,
	201, 736,
	202, 736,
	203, 736,
	204, 736,
	205, 736,
	207, 736,
	208, 736,
	209, 736,
	210, 736,
	211, 736,
	212, 736,
	214, 736,
	217, 736,
	220, 736,
	221, 736,
	222, 736,
	223, 736,
	224, 736,
	225, 736,
	226, 736,
	227, 736,
	228, 736,
	229, 736,
	230, 736,
	231, 736,
	233, 736,
	234, 736,
	235, 736,
	236, 736,
	237, 736,
	239, 736,
	240, 736,
	241, 736,
	242, 736,
	243, 736,
	244, 736,
	245, 736,
	246, 736,
	248, 736,
	249, 736,
	250, 736,
	251, 736,
	252, 736,
	254, 736,
	255, 736,
	256, 736,
	257, 736,
	258, 736,
	259, 736,
	260, 736,
	262, 736,
	263, 736,
	264, 736,
	265, 736,
	266, 736,
	267, 736,
	269, 736,
	270, 736,
	271, 736,
	272, 736,
	273, 736,
	275, 736,
	276, 736,
	277, 736,
	278, 736,
	279, 736,
	280, 736,
	281, 736,
	282, 736,
	283, 736,
	284, 736,
	285, 736,
	286, 736,
	287, 736,
	288, 736,
	289, 736,
	292, 736,
	293, 736,
	294, 736,
	295, 736,
	296, 736,
	297, 736,
	298, 736,
	299, 736,
	300, 736,
	301, 736,
	303, 736,
	305, 736,
	306, 736,
	307, 736,
	308, 736,
	309, 736,
	310, 736,
	311, 736,
	312, 736,
	314, 736,
	315, 736,
	316, 736,
	319, 736,
	320, 736,
	321, 736,
	322, 736,
	323, 736,
	324, 736,
	325, 736,
	326, 736,
	327, 736,
	330, 736,
	331, 736,
	332, 736,
	333, 736,
	334, 736,
	335, 736,
	337, 736,
	338, 736,
	339, 736,
	340, 736,
	341, 736,
	342, 736,
	345, 736,
	350, 736,
	351, 736,
	352, 736,
	353, 736,
	354, 736,
	355, 736,
	363, 736,
	368, 736,
	369, 736,
	370, 736,
	377, 736,
	383, 736,
	-2, 0,
	-1, 148,
	1, 54,
	381, 54,
	-2, 728,
	-1, 516,
	133, 1346,
	317, 1346,
	360, 1346,
	379, 1346,
	-2, 0,
	-1, 517,
	133, 1293,
	317, 1293,
	360, 1293,
	379, 1293,
	-2, 0,
	-1, 519,
	133, 1406,
	317, 1406,
	360, 1406,
	379, 1406,
	-2, 0,
	-1, 521,
	133, 1429,
	317, 1429,
	360, 1429,
	379, 1429,
	-2, 0,
	-1, 528,
	133, 1351,
	317, 1351,
	360, 1351,
	379, 1351,
	-2, 346,
	-1, 554,
	1, 424,
	376, 424,
	378, 424,
	380, 424,
	381, 424,
	-2, 0,
	-1, 555,
	1, 476,
	130, 476,
	376, 476,
	378, 476,
	380, 476,
	381, 476,
	-2, 0,
	-1, 561,
	1, 438,
	376, 438,
	378, 438,
	380, 438,
	381, 438,
	-2, 0,
	-1, 563,
	1, 442,
	376, 442,
	378, 442,
	380, 442,
	381, 442,
	-2, 0,
	-1, 566,
	1, 450,
	376, 450,
	378, 450,
	380, 450,
	381, 450,
	-2, 0,
	-1, 567,
	1, 455,
	376, 455,
	378, 455,
	380, 455,
	381, 455,
	-2, 0,
	-1, 570,
	1, 465,
	376, 465,
	378, 465,
	380, 465,
	381, 465,
	-2, 0,
	-1, 595,
	118, 738,
	130, 738,
	186, 738,
	213, 738,
	-2, 697,
	-1, 602,
	118, 737,
	130, 737,
	186, 737,
	213, 737,
	-2, 694,
	-1, 658,
	377, 1271,
	-2, 1264,
	-1, 659,
	377, 1272,
	-2, 1265,
	-1, 665,
	5, 922,
	377, 922,
	-2, 1481,
	-1, 690,
	5, 881,
	-2, 1450,
	-1, 691,
	5, 916,
	377, 916,
	-2, 1452,
	-1, 692,
	5, 891,
	-2, 1453,
	-1, 693,
	5, 890,
	-2, 1454,
	-1, 694,
	5, 916,
	377, 916,
	-2, 1457,
	-1, 695,
	5, 916,
	377, 916,
	-2, 1458,
	-1, 696,
	5, 917,
	-2, 1461,
	-1, 697,
	5, 873,
	-2, 1462,
	-1, 698,
	5, 873,
	-2, 1463,
	-1, 699,
	5, 898,
	-2, 1467,
	-1, 700,
	5, 883,
	-2, 1468,
	-1, 701,
	5, 884,
	-2, 1469,
	-1, 702,
	5, 874,
	-2, 1475,
	-1, 703,
	5, 875,
	-2, 1476,
	-1, 704,
	5, 876,
	-2, 1477,
	-1, 705,
	5, 877,
	-2, 1478,
	-1, 706,
	5, 878,
	-2, 1479,
	-1, 707,
	5, 879,
	-2, 1480,
	-1, 708,
	5, 873,
	-2, 1487,
	-1, 709,
	5, 882,
	-2, 1492,
	-1, 710,
	5, 880,
	-2, 1495,
	-1, 711,
	5, 914,
	377, 914,
	-2, 1497,
	-1, 712,
	5, 918,
	-2, 1500,
	-1, 713,
	5, 920,
	-2, 1501,
	-1, 714,
	5, 913,
	377, 913,
	-2, 1506,
	-1, 909,
	229, 726,
	-2, 570,
	-1, 914,
	215, 1268,
	-2, 0,
	-1, 950,
	1, 223,
	376, 223,
	378, 223,
	380, 223,
	381, 223,
	-2, 701,
	-1, 953,
	4, 1505,
	10, 1505,
	11, 1505,
	13, 1505,
	14, 1505,
	15, 1505,
	16, 1505,
	17, 1505,
	18, 1505,
	20, 1505,
	21, 1505,
	23, 1505,
	24, 1505,
	27, 1505,
	29, 1505,
	31, 1505,
	34, 1505,
	35, 1505,
	36, 1505,
	37, 1505,
	38, 1505,
	39, 1505,
	40, 1505,
	41, 1505,
	42, 1505,
	43, 1505,
	45, 1505,
	46, 1505,
	47, 1505,
	48, 1505,
	49, 1505,
	52, 1505,
	53, 1505,
	54, 1505,
	56, 1505,
	57, 1505,
	58, 1505,
	61, 1505,
	62, 1505,
	63, 1505,
	64, 1505,
	65, 1505,
	66, 1505,
	67, 1505,
	68, 1505,
	70, 1505,
	71, 1505,
	72, 1505,
	73, 1505,
	75, 1505,
	76, 1505,
	77, 1505,
	78, 1505,
	86, 1505,
	87, 1505,
	88, 1505,
	89, 1505,
	90, 1505,
	91, 1505,
	92, 1505,
	93, 1505,
	95, 1505,
	97, 1505,
	99, 1505,
	102, 1505,
	103, 1505,
	105, 1505,
	109, 1505,
	110, 1505,
	111, 1505,
	112, 1505,
	113, 1505,
	114, 1505,
	115, 1505,
	119, 1505,
	120, 1505,
	121, 1505,
	122, 1505,
	123, 1505,
	124, 1505,
	125, 1505,
	126, 1505,
	127, 1505,
	128, 1505,
	129, 1505,
	131, 1505,
	134, 1505,
	136, 1505,
	137, 1505,
	139, 1505,
	142, 1505,
	143, 1505,
	144, 1505,
	145, 1505,
	146, 1505,
	147, 1505,
	148, 1505,
	149, 1505,
	150, 1505,
	151, 1505,
	153, 1505,
	155, 1505,
	156, 1505,
	157, 1505,
	158, 1505,
	159, 1505,
	160, 1505,
	161, 1505,
	162, 1505,
	163, 1505,
	165, 1505,
	167, 1505,
	168, 1505,
	169, 1505,
	170, 1505,
	171, 1505,
	172, 1505,
	173, 1505,
	174, 1505,
	175, 1505,
	176, 1505,
	178, 1505,
	179, 1505,
	181, 1505,
	182, 1505,
	183, 1505,
	184, 1505,
	185, 1505,
	187, 1505,
	188, 1505,
	191, 1505,
	192, 1505,
	193, 1505,
	195, 1505,
	196, 1505,
	197, 1505,
	198, 1505,
	199, 1505,
	200, 1505,
	201, 1505,
	202, 1505,
	203, 1505,
	204, 1505,
	208, 1505,
	209, 1505,
	210, 1505,
	211, 1505,
	212, 1505,
	214, 1505,
	217, 1505,
	218, 1505,
	220, 1505,
	221, 1505,
	223, 1505,
	225, 1505,
	226, 1505,
	227, 1505,
	228, 1505,
	229, 1505,
	230, 1505,
	231, 1505,
	233, 1505,
	234, 1505,
	235, 1505,
	236, 1505,
	237, 1505,
	239, 1505,
	240, 1505,
	241, 1505,
	242, 1505,
	243, 1505,
	244, 1505,
	245, 1505,
	246, 1505,
	248, 1505,
	249, 1505,
	250, 1505,
	251, 1505,
	252, 1505,
	253, 1505,
	254, 1505,
	255, 1505,
	256, 1505,
	257, 1505,
	258, 1505,
	259, 1505,
	260, 1505,
	262, 1505,
	263, 1505,
	264, 1505,
	265, 1505,
	266, 1505,
	267, 1505,
	268, 1505,
	269, 1505,
	270, 1505,
	271, 1505,
	272, 1505,
	273, 1505,
	275, 1505,
	276, 1505,
	277, 1505,
	278, 1505,
	279, 1505,
	281, 1505,
	282, 1505,
	283, 1505,
	284, 1505,
	285, 1505,
	286, 1505,
	287, 1505,
	288, 1505,
	289, 1505,
	291, 1505,
	292, 1505,
	293, 1505,
	294, 1505,
	295, 1505,
	296, 1505,
	297, 1505,
	298, 1505,
	299, 1505,
	300, 1505,
	301, 1505,
	303, 1505,
	305, 1505,
	306, 1505,
	307, 1505,
	308, 1505,
	309, 1505,
	310, 1505,
	311, 1505,
	312, 1505,
	314, 1505,
	315, 1505,
	316, 1505,
	319, 1505,
	320, 1505,
	321, 1505,
	322, 1505,
	324, 1505,
	325, 1505,
	326, 1505,
	327, 1505,
	330, 1505,
	331, 1505,
	332, 1505,
	333, 1505,
	335, 1505,
	337, 1505,
	338, 1505,
	339, 1505,
	340, 1505,
	341, 1505,
	342, 1505,
	345, 1505,
	350, 1505,
	351, 1505,
	352, 1505,
	353, 1505,
	354, 1505,
	355, 1505,
	356, 1505,
	358, 1505,
	359, 1505,
	360, 1505,
	361, 1505,
	362, 1505,
	363, 1505,
	365, 1505,
	366, 1505,
	367, 1505,
	368, 1505,
	369, 1505,
	370, 1505,
	371, 1505,
	372, 1505,
	373, 1505,
	375, 1505,
	378, 1505,
	379, 1505,
	382, 1505,
	383, 1505,
	-2, 0,
	-1, 969,
	133, 1406,
	317, 1406,
	360, 1406,
	379, 1406,
	-2, 0,
	-1, 986,
	133, 1429,
	317, 1429,
	360, 1429,
	379, 1429,
	-2, 0,
	-1, 987,
	168, 640,
	239, 640,
	243, 640,
	-2, 334,
	-1, 1055,
	118, 737,
	130, 737,
	186, 737,
	213, 737,
	-2, 698,
	-1, 1136,
	108, 703,
	118, 703,
	130, 703,
	164, 703,
	186, 703,
	213, 703,
	219, 703,
	328, 703,
	-2, 1052,
	-1, 1146,
	377, 1248,
	-2, 1236,
	-1, 1164,
	378, 1165,
	-2, 0,
	-1, 1188,
	168, 640,
	239, 640,
	243, 640,
	-2, 635,
	-1, 1216,
	378, 1165,
	-2, 0,
	-1, 1220,
	108, 703,
	118, 703,
	130, 703,
	164, 703,
	186, 703,
	213, 703,
	219, 703,
	328, 703,
	-2, 804,
	-1, 1364,
	168, 640,
	239, 640,
	243, 640,
	-2, 336,
	-1, 1472,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 957,
	-1, 1473,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 958,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 959,
	-1, 1475,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 960,
	-1, 1476,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 961,
	-1, 1477,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 962,
	-1, 1478,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 963,
	-1, 1479,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 964,
	-1, 1488,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 973,
	-1, 1489,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 974,
	-1, 1490,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 975,
	-1, 1493,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 980,
	-1, 1499,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 982,
	-1, 1501,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 986,
	-1, 1502,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 987,
	-1, 1503,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 988,
	-1, 1504,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 989,
	-1, 1573,
	133, 1176,
	377, 1271,
	-2, 1264,
	-1, 1574,
	133, 1177,
	-2, 1446,
	-1, 1575,
	133, 1178,
	-2, 1350,
	-1, 1576,
	133, 1179,
	-2, 1311,
	-1, 1577,
	133, 1180,
	-2, 1328,
	-1, 1578,
	133, 1181,
	-2, 1349,
	-1, 1579,
	133, 1182,
	-2, 1403,
	-1, 1656,
	1, 805,
	75, 805,
	108, 805,
	118, 805,
	130, 805,
	134, 805,
	138, 805,
	140, 805,
	155, 805,
	164, 805,
	171, 805,
	182, 805,
	186, 805,
	200, 805,
	213, 805,
	215, 805,
	219, 805,
	261, 805,
	263, 805,
	328, 805,
	336, 805,
	347, 805,
	348, 805,
	357, 805,
	376, 805,
	378, 805,
	380, 805,
	381, 805,
	382, 805,
	-2, 804,
	-1, 1809,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 981,
	-1, 1810,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 983,
	-1, 1815,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 984,
	-1, 1833,
	224, 1136,
	-2, 1138,
	-1, 2009,
	229, 726,
	-2, 570,
	-1, 2067,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 985,
	-1, 2072,
	167, 0,
	-2, 1001,
	-1, 2081,
	224, 1137,
	-2, 1139,
	-1, 2123,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1029,
	-1, 2124,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1030,
	-1, 2125,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1031,
	-1, 2129,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1035,
	-1, 2130,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1036,
	-1, 2131,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1037,
	-1, 2269,
	167, 0,
	-2, 1002,
	-1, 2272,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1005,
	-1, 2273,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1007,
	-1, 2397,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1006,
	-1, 2398,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1008,
	-1, 2405,
	167, 0,
	-2, 1038,
	-1, 2482,
	167, 0,
	-2, 1039,
	-1, 2564,
	37, 0,
	148, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1449,
	-1, 2649,
	377, 1517,
	-2, 510,
}

const sqlPrivate = 57344

const sqlLast = 44024

var sqlAct = [...]int{

	659, 2632, 2646, 2365, 2364, 2647, 2630, 2572, 2563, 2613,
	2536, 2573, 2375, 2431, 2574, 2046, 2228, 2323, 2337, 1733,
	1262, 1725, 943, 2100, 2562, 603, 2487, 2252, 1803, 2257,
	1270, 2217, 2015, 1305, 903, 1651, 786, 946, 1516, 185,
	2183, 1708, 2250, 1218, 185, 1703, 2013, 1214, 185, 2411,
	657, 649, 1722, 1948, 185, 2303, 2244, 1899, 2021, 185,
	185, 1734, 2182, 185, 1927, 656, 185, 1197, 1265, 1707,
	801, 1669, 1935, 1264, 185, 1660, 2153, 611, 110, 470,
	26, 1697, 1898, 1844, 1553, 635, 1652, 1451, 1529, 452,
	1528, 1142, 1446, 1799, 1389, 990, 1198, 1226, 1782, 1228,
	1513, 1427, 1537, 1223, 1602, 1429, 989, 768, 652, 1385,
	1174, 1178, 449, 1547, 936, 788, 1705, 1727, 939, 1711,
	771, 1704, 1258, 951, 1638, 1625, 1131, 507, 1205, 751,
	627, 115, 110, 1060, 929, 1430, 1569, 1061, 176, 1388,
	185, 185, 116, 651, 1188, 520, 1428, 485, 185, 1277,
	926, 181, 527, 749, 63, 1187, 548, 2338, 1065, 2167,
	1832, 2662, 2168, 607, 1726, 2655, 1285, 1283, 1285, 1285,
	2366, 185, 185, 791, 185, 185, 803, 607, 2661, 2654,
	185, 185, 2655, 2655, 2366, 2609, 2608, 2607, 2589, 1253,
	1253, 1253, 2336, 2584, 1215, 2065, 1249, 1632, 499, 2030,
	602, 2583, 2580, 2560, 2559, 1632, 1253, 1295, 1295, 2531,
	784, 2526, 2525, 1759, 617, 1253, 2389, 2521, 2513, 2484,
	2462, 1253, 2336, 1759, 2336, 2459, 110, 2457, 26, 1253,
	2442, 2336, 2441, 2419, 1253, 2416, 2336, 1253, 1698, 1253,
	2399, 2360, 596, 2357, 1759, 1632, 1306, 1632, 2335, 2667,
	2316, 765, 2336, 595, 1253, 2271, 2243, 2238, 2163, 1759,
	1702, 1702, 2164, 2156, 2076, 2040, 2031, 2001, 1632, 2002,
	2653, 1253, 608, 1869, 1870, 612, 717, 1924, 776, 780,
	1923, 1632, 1916, 1914, 1253, 37, 1917, 1632, 1913, 1076,
	1077, 1912, 1632, 798, 753, 1632, 38, 120, 1836, 1769,
	1698, 1758, 891, 1632, 1837, 1759, 1748, 1550, 1701, 41,
	1632, 1627, 1702, 1079, 1869, 1870, 1631, 1887, 1888, 1889,
	1632, 1632, 2532, 122, 2663, 1295, 1632, 1884, 1298, 1295,
	2393, 2268, 1299, 43, 755, 46, 756, 1078, 2643, 2389,
	1843, 2156, 1730, 1626, 2056, 1658, 2136, 2078, 2002, 1802,
	1780, 145, 1367, 1192, 1532, 1253, 47, 889, 971, 1551,
	49, 148, 145, 968, 52, 967, 2339, 123, 1884, 966,
	1386, 53, 1530, 104, 54, 965, 1286, 964, 1286, 1286,
	963, 147, 962, 961, 960, 959, 958, 957, 956, 955,
	954, 1875, 147, 757, 754, 186, 55, 601, 1869, 1870,
	600, 599, 598, 716, 594, 56, 593, 1084, 592, 591,
	590, 1552, 1549, 587, 586, 585, 584, 580, 146, 579,
	578, 185, 791, 185, 610, 185, 139, 546, 185, 146,
	545, 544, 1875, 140, 185, 543, 542, 541, 664, 540,
	539, 538, 537, 185, 185, 185, 185, 791, 536, 535,
	477, 534, 791, 533, 117, 1885, 532, 1943, 531, 909,
	530, 38, 515, 524, 514, 117, 513, 512, 1566, 511,
	440, 1890, 418, 411, 41, 410, 168, 167, 166, 165,
	185, 164, 163, 162, 161, 160, 159, 158, 157, 1554,
	156, 57, 155, 154, 185, 153, 1885, 895, 58, 1291,
	476, 1284, 1420, 152, 151, 150, 149, 1392, 1076, 1077,
	185, 1219, 1564, 1002, 2636, 2030, 1875, 65, 118, 59,
	185, 60, 145, 61, 1562, 124, 2634, 1560, 2579, 478,
	62, 1886, 1079, 1072, 2561, 145, 53, 2546, 480, 54,
	2541, 928, 73, 2631, 2479, 93, 2460, 2382, 2302, 2301,
	2394, 791, 147, 2297, 2296, 121, 1078, 2289, 2288, 2287,
	1626, 2283, 2282, 2281, 2280, 147, 2274, 952, 792, 1548,
	56, 804, 1886, 907, 902, 912, 2249, 2150, 933, 2145,
	2144, 2143, 185, 2086, 2000, 97, 2004, 1955, 1005, 146,
	1869, 1870, 1951, 1764, 119, 932, 932, 139, 1921, 1918,
	1906, 1897, 146, 1755, 140, 1868, 608, 1865, 1864, 1862,
	139, 1849, 1848, 1833, 38, 1656, 1072, 140, 764, 1302,
	1071, 1056, 1524, 1000, 1150, 1729, 1084, 41, 1880, 1878,
	1879, 1871, 1872, 1873, 1874, 1876, 1877, 1217, 117, 2656,
	1143, 4, 1134, 2641, 1216, 2621, 972, 1080, 1081, 1082,
	1083, 1085, 1086, 1756, 2620, 1269, 57, 2102, 2551, 2550,
	2549, 2516, 1881, 1882, 1883, 984, 987, 2508, 900, 1880,
	1878, 1879, 1871, 1872, 1873, 1874, 1876, 1877, 2507, 1055,
	2498, 2490, 1757, 118, 59, 2388, 60, 895, 2496, 1051,
	1099, 480, 2652, 2472, 1076, 1077, 145, 2471, 1518, 2428,
	145, 1869, 1870, 2407, 1784, 477, 1003, 479, 1875, 2381,
	93, 2390, 2369, 2356, 2342, 2294, 38, 2226, 1079, 2223,
	2222, 2220, 2191, 56, 2190, 715, 147, 2171, 2159, 41,
	147, 1387, 1798, 1525, 1869, 1870, 2071, 1203, 2044, 1057,
	1797, 1990, 1078, 596, 1982, 1968, 1967, 1953, 1922, 185,
	1058, 185, 1896, 1858, 595, 476, 1871, 1872, 1873, 1874,
	1876, 1877, 1857, 146, 1068, 1069, 1100, 146, 1854, 1829,
	1073, 139, 1885, 185, 185, 139, 1824, 1179, 140, 1182,
	1643, 1614, 140, 1558, 478, 1261, 1196, 1195, 608, 1186,
	1172, 53, 1171, 480, 54, 1170, 1169, 1377, 1376, 117,
	1386, 1383, 1146, 117, 1168, 1176, 1177, 1076, 1077, 57,
	1180, 1968, 1084, 1167, 1166, 1165, 1164, 792, 1163, 1875,
	1183, 1162, 1161, 1160, 1159, 56, 1158, 1201, 1941, 1157,
	1156, 1079, 1155, 1154, 1147, 1135, 118, 59, 1134, 60,
	983, 975, 792, 2276, 1565, 110, 948, 792, 1886, 2248,
	2166, 2162, 1875, 145, 1835, 1078, 1644, 619, 1143, 1761,
	479, 1869, 1870, 93, 1087, 1088, 1080, 1081, 1082, 1083,
	1085, 1086, 2042, 1217, 1132, 999, 1191, 2016, 2392, 2391,
	1213, 1768, 1054, 147, 2385, 1236, 2169, 1380, 1563, 791,
	185, 2032, 1184, 1221, 1698, 1189, 803, 1185, 793, 1219,
	1561, 805, 185, 1559, 1193, 2395, 1993, 1049, 1987, 1981,
	1920, 57, 901, 1919, 1808, 185, 1885, 1424, 1152, 996,
	146, 185, 1303, 185, 1767, 185, 1251, 608, 139, 185,
	1373, 2047, 1266, 1268, 1986, 140, 1790, 1260, 118, 59,
	1240, 60, 2412, 1550, 1726, 2103, 792, 1879, 1871, 1872,
	1873, 1874, 1876, 1877, 1538, 145, 117, 1840, 1353, 1407,
	1175, 1043, 479, 2639, 1229, 93, 1254, 1230, 2638, 1229,
	185, 185, 1230, 2026, 2178, 2544, 1752, 791, 446, 185,
	421, 1381, 185, 172, 1274, 147, 2604, 1431, 2605, 2350,
	424, 2520, 1886, 763, 1770, 1551, 1149, 2053, 744, 1359,
	441, 1044, 2453, 803, 2452, 2450, 1138, 2449, 185, 2211,
	2207, 746, 742, 185, 1035, 1662, 2175, 1662, 185, 185,
	2174, 185, 146, 185, 2202, 185, 1661, 185, 928, 1853,
	139, 2363, 1229, 740, 737, 1230, 1852, 140, 185, 1851,
	1850, 1252, 419, 1237, 185, 185, 1231, 1552, 1549, 1811,
	719, 1231, 1751, 185, 1082, 1083, 1085, 1086, 117, 997,
	1693, 1873, 1874, 1876, 1877, 1234, 1374, 1689, 1684, 1500,
	1190, 1276, 888, 1393, 1279, 185, 1618, 1617, 430, 803,
	1461, 1670, 2650, 1235, 1312, 1723, 445, 2059, 718, 1880,
	1878, 1879, 1871, 1872, 1873, 1874, 1876, 1877, 582, 1418,
	1052, 1288, 998, 494, 1290, 1382, 2215, 2043, 1293, 1300,
	110, 661, 445, 2216, 1231, 984, 2519, 1360, 1997, 1301,
	1256, 1515, 589, 1773, 173, 1554, 1515, 2557, 424, 588,
	2193, 1364, 1397, 2596, 1029, 1775, 1202, 431, 1390, 1554,
	1378, 1992, 589, 1217, 1280, 1408, 2023, 793, 2433, 1460,
	444, 896, 898, 1984, 1075, 982, 1401, 1776, 1673, 169,
	1394, 1387, 1384, 1238, 2528, 1522, 1821, 1800, 1801, 1774,
	1086, 1520, 793, 1030, 2501, 2623, 444, 793, 2096, 2024,
	2054, 1260, 1819, 1173, 2633, 1312, 1312, 1417, 174, 2529,
	2258, 185, 1425, 185, 1285, 1433, 185, 596, 1432, 1538,
	596, 596, 1979, 1426, 1762, 1548, 420, 185, 1442, 2208,
	2631, 1443, 1444, 1717, 1053, 1686, 803, 1042, 1419, 185,
	1076, 1077, 2604, 185, 1877, 2023, 185, 1076, 1077, 2403,
	185, 425, 1533, 973, 185, 1535, 421, 1129, 1639, 977,
	185, 2058, 791, 2366, 1079, 173, 422, 1869, 1870, 185,
	803, 1079, 1347, 1597, 185, 606, 1554, 1526, 1645, 1048,
	1523, 2052, 185, 1816, 1672, 1227, 619, 621, 1078, 2259,
	185, 1663, 2200, 1817, 1659, 1078, 793, 1822, 175, 1687,
	1365, 185, 1232, 185, 792, 185, 1646, 1232, 185, 608,
	185, 804, 185, 185, 608, 185, 791, 791, 1580, 2456,
	791, 1856, 443, 2060, 185, 1649, 1674, 1676, 2194, 174,
	1635, 605, 433, 432, 1242, 1681, 738, 1623, 1620, 1747,
	1695, 1297, 1621, 1452, 1459, 1691, 748, 1630, 443, 747,
	738, 1034, 446, 1746, 1640, 1641, 1636, 2576, 1084, 1416,
	170, 1679, 442, 1221, 420, 1084, 607, 1685, 1655, 1666,
	1232, 739, 738, 1347, 1347, 1671, 1362, 1728, 446, 1728,
	1124, 1125, 1126, 1127, 1128, 1875, 607, 1694, 442, 425,
	172, 1137, 792, 573, 421, 2434, 110, 608, 1008, 1346,
	171, 1145, 110, 1039, 422, 2624, 412, 1247, 2057, 1818,
	1813, 616, 439, 803, 1754, 1514, 1820, 1732, 804, 175,
	583, 185, 1099, 1246, 1286, 493, 2263, 1744, 2331, 1099,
	1743, 1749, 434, 1396, 1311, 952, 2093, 185, 185, 185,
	1753, 185, 1741, 1750, 1742, 1244, 1763, 993, 2509, 1885,
	2577, 1587, 1064, 1521, 1074, 981, 2575, 1740, 1016, 2603,
	932, 1765, 932, 1245, 1511, 1361, 993, 2332, 2595, 2601,
	185, 2374, 2132, 1180, 1040, 1183, 1243, 574, 1720, 978,
	1509, 170, 970, 1781, 1996, 2444, 1177, 1176, 2094, 2443,
	486, 2426, 2493, 1771, 804, 604, 1398, 2177, 1100, 2616,
	1346, 1346, 1402, 2510, 1403, 1100, 1404, 110, 1405, 2578,
	1406, 172, 1964, 491, 1960, 1721, 1199, 1199, 994, 487,
	2629, 171, 995, 1275, 1063, 1886, 1063, 1412, 1414, 1267,
	1041, 2292, 1138, 2346, 1263, 1311, 1311, 994, 1059, 1208,
	1540, 995, 1785, 1949, 2092, 1438, 2537, 1793, 1789, 1411,
	1368, 488, 1794, 1572, 1572, 1585, 1787, 1814, 1450, 1605,
	1211, 1505, 988, 1609, 1610, 1612, 1554, 1796, 2642, 1506,
	1063, 1507, 490, 413, 2594, 1512, 1637, 2133, 2327, 905,
	2328, 1204, 2229, 2134, 1938, 2376, 1842, 1209, 575, 1624,
	178, 904, 1062, 2427, 1062, 1089, 1087, 1088, 1080, 1081,
	1082, 1083, 1085, 1086, 1088, 1080, 1081, 1082, 1083, 1085,
	1086, 2330, 1970, 993, 1969, 1950, 1806, 1634, 1812, 1064,
	2333, 1064, 1439, 1878, 1879, 1871, 1872, 1873, 1874, 1876,
	1877, 804, 1633, 2628, 793, 502, 1009, 496, 1062, 605,
	1208, 805, 2293, 435, 2345, 414, 2349, 914, 185, 803,
	1869, 1870, 2614, 2348, 185, 185, 2218, 792, 185, 1839,
	2367, 1211, 925, 185, 3, 804, 185, 1925, 1210, 576,
	923, 1017, 1931, 1995, 185, 1010, 2304, 1206, 1007, 2154,
	185, 185, 185, 1497, 2424, 436, 185, 1508, 1209, 185,
	489, 1372, 1557, 608, 1510, 185, 185, 185, 185, 185,
	1901, 1945, 2329, 577, 2406, 185, 1207, 791, 1944, 2615,
	185, 792, 792, 2425, 803, 792, 437, 2291, 438, 1930,
	1954, 2214, 793, 185, 1903, 1904, 1905, 1961, 993, 1900,
	2070, 2617, 1998, 185, 1863, 185, 1823, 185, 791, 791,
	1370, 185, 1766, 1926, 1985, 185, 1700, 492, 805, 1940,
	185, 1929, 185, 1371, 1692, 619, 619, 1933, 1934, 185,
	1683, 1939, 893, 2003, 2347, 2005, 1033, 608, 1875, 1210,
	890, 1038, 185, 791, 894, 2008, 2009, 1047, 1956, 1027,
	1980, 1025, 1023, 1021, 1991, 1046, 976, 185, 475, 34,
	1989, 474, 33, 1059, 1495, 1498, 1312, 1978, 1556, 994,
	1791, 1409, 501, 995, 495, 473, 30, 1400, 804, 1153,
	2039, 2028, 2571, 774, 1250, 2006, 2534, 472, 69, 2010,
	1435, 2320, 1440, 2198, 805, 2196, 924, 185, 1447, 471,
	68, 1494, 1885, 2176, 922, 1312, 1019, 2012, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493,
	2038, 1499, 2025, 1501, 1502, 1503, 1504, 185, 2073, 2019,
	1724, 2033, 2049, 2050, 1718, 2048, 2051, 1013, 1312, 2007,
	1527, 2088, 2089, 2090, 1032, 2055, 1716, 1137, 468, 22,
	469, 23, 1037, 921, 608, 1296, 1294, 1292, 1886, 2061,
	1026, 1827, 1024, 1022, 1020, 2063, 1567, 1568, 1830, 1289,
	1584, 1287, 1596, 1598, 1603, 1606, 1607, 1608, 1248, 2034,
	2035, 1496, 2036, 2037, 1965, 1846, 1847, 34, 2077, 1241,
	33, 467, 28, 2079, 1239, 466, 20, 464, 19, 2082,
	736, 465, 18, 1312, 30, 1233, 2095, 2097, 2098, 185,
	2083, 805, 2104, 2014, 1347, 185, 69, 1018, 2106, 2109,
	456, 15, 2467, 1965, 185, 185, 2138, 2111, 68, 2605,
	457, 16, 463, 51, 1804, 1895, 1066, 793, 1391, 1312,
	1312, 2387, 1605, 1605, 1605, 805, 2386, 1908, 1312, 1312,
	2165, 2245, 2139, 1347, 2469, 2137, 1678, 1662, 1871, 1872,
	1873, 1874, 1876, 1877, 2237, 2170, 1677, 1696, 1012, 1792,
	110, 1688, 1682, 185, 2503, 185, 2041, 2158, 2157, 2155,
	2213, 1312, 2152, 185, 920, 2339, 791, 760, 1011, 2188,
	2189, 793, 793, 2481, 804, 793, 1349, 22, 2224, 23,
	1805, 185, 185, 2204, 2187, 2221, 1347, 761, 2180, 2204,
	1662, 2173, 2161, 2455, 1067, 2204, 2305, 2230, 185, 1675,
	481, 2239, 2231, 741, 743, 2201, 1070, 185, 1690, 803,
	185, 185, 455, 50, 1348, 1680, 803, 2203, 462, 12,
	28, 1346, 2219, 2209, 20, 2172, 19, 2233, 2533, 2212,
	18, 2234, 792, 2225, 1422, 1423, 2232, 1308, 2372, 804,
	1731, 2235, 2240, 2265, 461, 44, 2241, 2246, 1719, 15,
	1715, 1347, 1622, 185, 1363, 2270, 1311, 1452, 2107, 16,
	1346, 51, 503, 792, 792, 762, 1452, 2112, 805, 454,
	45, 1076, 1077, 1304, 2612, 2627, 2418, 1349, 1349, 2260,
	614, 2310, 573, 1869, 1870, 1929, 2266, 1347, 1347, 460,
	7, 2247, 2197, 2151, 2199, 1311, 1347, 1347, 792, 2142,
	616, 2099, 459, 6, 458, 36, 1778, 185, 453, 35,
	185, 2045, 1004, 1346, 573, 1348, 1348, 2290, 1946, 1078,
	803, 185, 185, 1076, 1077, 185, 185, 185, 1915, 1347,
	1312, 1779, 616, 1619, 615, 1778, 1777, 1616, 1308, 1308,
	1615, 1546, 185, 1140, 2278, 1204, 2091, 185, 1311, 185,
	1150, 185, 185, 185, 2340, 1148, 2314, 1045, 185, 791,
	2309, 50, 803, 2307, 1036, 791, 574, 12, 2319, 1031,
	1028, 2311, 1014, 185, 185, 980, 1366, 581, 1346, 2432,
	484, 791, 1809, 1810, 1399, 1015, 1942, 2362, 1815, 1642,
	2312, 2188, 2189, 44, 2527, 2284, 2359, 1855, 574, 2486,
	2402, 1555, 1151, 2343, 1208, 48, 2187, 1828, 2185, 638,
	2306, 2321, 2377, 1311, 1346, 1346, 2179, 2378, 45, 2371,
	1834, 2188, 2189, 1346, 1346, 1211, 1841, 2188, 2189, 1845,
	2146, 2308, 2361, 2368, 1710, 2379, 2187, 1709, 7, 2373,
	806, 1206, 2187, 2315, 1375, 2396, 1859, 660, 2384, 1311,
	1311, 6, 1209, 36, 1571, 2401, 1346, 35, 1311, 1311,
	1453, 735, 662, 2344, 1309, 663, 1310, 1181, 2383, 650,
	1207, 185, 1307, 185, 949, 803, 185, 575, 2408, 1735,
	1137, 1379, 1441, 1519, 185, 1937, 1536, 1603, 1603, 1603,
	803, 1311, 1838, 1144, 2370, 630, 642, 641, 1347, 1534,
	1076, 1077, 974, 2417, 805, 2206, 629, 2415, 1947, 575,
	2022, 2380, 2420, 2210, 1199, 1437, 2436, 1795, 1434, 2438,
	1932, 2018, 2195, 1260, 1079, 185, 423, 2435, 791, 1866,
	947, 1594, 185, 1210, 1586, 1582, 1050, 2188, 2189, 1130,
	185, 185, 791, 791, 1736, 2422, 185, 1001, 1078, 2029,
	1760, 1194, 2187, 1312, 1445, 759, 613, 758, 576, 2464,
	2437, 792, 793, 185, 2465, 2204, 2640, 2473, 185, 805,
	2188, 2189, 1369, 2477, 2470, 185, 2466, 1772, 2480, 2475,
	2476, 1588, 2458, 2474, 1123, 2187, 1122, 745, 2495, 2491,
	576, 2483, 577, 793, 793, 992, 991, 1963, 2622, 2454,
	185, 185, 2461, 2489, 804, 2492, 1936, 185, 2499, 1312,
	2502, 804, 2192, 2497, 2020, 791, 2500, 2543, 144, 141,
	185, 2512, 791, 791, 577, 1346, 2515, 2506, 793, 143,
	142, 1994, 644, 2518, 72, 32, 31, 92, 91, 90,
	89, 88, 2514, 87, 2523, 2524, 86, 185, 85, 185,
	84, 2517, 185, 2468, 803, 619, 619, 83, 82, 81,
	1311, 80, 79, 78, 77, 76, 1312, 2478, 619, 2447,
	2448, 182, 75, 74, 525, 522, 416, 2553, 2540, 71,
	426, 2556, 70, 185, 29, 2062, 447, 25, 96, 24,
	1447, 497, 182, 2558, 2552, 505, 2066, 2554, 510, 2067,
	185, 185, 185, 67, 2568, 634, 529, 2570, 185, 2569,
	66, 2072, 27, 2581, 17, 804, 11, 2188, 2189, 21,
	2080, 1347, 185, 2593, 2545, 2591, 2592, 2590, 2084, 2555,
	114, 1932, 2187, 113, 112, 2588, 2602, 111, 2600, 14,
	13, 109, 2606, 108, 107, 106, 105, 2446, 10, 415,
	9, 2108, 95, 2610, 792, 2110, 2256, 804, 42, 8,
	792, 40, 2611, 504, 2619, 2618, 39, 94, 135, 132,
	2539, 2626, 752, 752, 134, 131, 792, 1347, 133, 103,
	416, 137, 803, 483, 803, 136, 129, 127, 2140, 2141,
	128, 130, 2625, 126, 2644, 2645, 125, 2147, 2148, 2149,
	2651, 138, 102, 416, 416, 2657, 796, 416, 101, 2660,
	2658, 2659, 182, 892, 100, 2666, 2664, 2665, 99, 2668,
	98, 2585, 2586, 2587, 5, 2160, 2, 1, 2414, 0,
	0, 0, 0, 0, 1347, 486, 0, 0, 0, 0,
	0, 482, 0, 0, 0, 0, 1869, 1870, 1346, 1887,
	1888, 1889, 2635, 769, 2637, 2181, 0, 0, 491, 0,
	0, 483, 0, 2267, 487, 2440, 0, 0, 1349, 0,
	804, 0, 0, 0, 0, 0, 778, 782, 0, 2451,
	800, 0, 0, 1311, 0, 804, 0, 0, 0, 0,
	0, 793, 0, 0, 0, 0, 488, 0, 0, 0,
	1884, 1076, 1077, 0, 1346, 0, 1348, 1349, 0, 0,
	0, 1199, 0, 486, 0, 0, 0, 490, 0, 0,
	2242, 0, 0, 792, 0, 1079, 0, 0, 0, 1308,
	0, 1588, 1588, 0, 805, 0, 491, 792, 792, 1311,
	0, 805, 487, 0, 0, 1348, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 0, 0, 2269, 0,
	1349, 1346, 2272, 2273, 1875, 0, 2275, 0, 1308, 0,
	0, 0, 0, 2277, 488, 2279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2286, 0, 0, 0, 490, 1311, 2331, 1348, 0,
	2324, 0, 0, 1890, 2530, 0, 0, 1588, 1588, 1588,
	792, 2322, 0, 0, 0, 0, 2326, 792, 792, 1084,
	0, 1308, 0, 0, 2295, 1349, 0, 0, 1885, 0,
	2547, 2548, 0, 0, 0, 489, 2332, 0, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 804,
	0, 0, 0, 529, 0, 529, 0, 915, 0, 2325,
	918, 1349, 1349, 1348, 0, 0, 416, 0, 0, 0,
	1349, 1349, 0, 0, 2341, 529, 529, 416, 940, 0,
	639, 64, 0, 1099, 793, 0, 1308, 805, 0, 0,
	793, 0, 492, 0, 0, 1825, 1826, 0, 0, 1348,
	1348, 0, 0, 1349, 1886, 0, 793, 0, 1348, 1348,
	0, 0, 529, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 1308, 1308, 0, 0, 529, 0, 0, 0,
	0, 1308, 1308, 0, 0, 64, 0, 0, 0, 782,
	0, 1348, 979, 0, 0, 0, 0, 2327, 0, 2328,
	800, 0, 529, 0, 0, 2397, 2398, 0, 0, 1100,
	0, 0, 0, 0, 1308, 0, 0, 0, 0, 0,
	492, 1892, 1893, 1894, 0, 0, 0, 804, 0, 804,
	2330, 0, 0, 0, 0, 0, 2410, 0, 0, 2333,
	0, 597, 2413, 0, 1881, 1882, 1883, 0, 609, 0,
	805, 1880, 1878, 1879, 1871, 1872, 1873, 1874, 1876, 1877,
	0, 0, 0, 0, 416, 805, 1869, 1870, 0, 1887,
	1888, 1889, 0, 0, 0, 0, 0, 0, 770, 64,
	1588, 1588, 0, 2075, 0, 0, 2445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 793, 0, 0, 0, 0, 0, 1080,
	1081, 1082, 1083, 1085, 1086, 0, 0, 793, 793, 0,
	1884, 2329, 1349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 782, 0, 1588,
	1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
	1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 0, 1588,
	1348, 0, 0, 0, 0, 0, 2494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1308, 1875, 0, 0, 0, 0, 0,
	793, 0, 0, 0, 0, 0, 0, 793, 793, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1869, 1870, 0,
	1887, 1888, 1889, 1890, 0, 0, 0, 0, 0, 805,
	0, 510, 0, 752, 2074, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2068, 2069, 0, 0, 1885, 0,
	0, 0, 0, 0, 0, 416, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2567, 2567, 0, 0,
	0, 1884, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2582, 0, 0, 0, 0, 0, 0, 0,
	1869, 1870, 0, 1887, 1888, 1889, 0, 0, 0, 0,
	0, 0, 2567, 2113, 2114, 2115, 2116, 2117, 2118, 2119,
	2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129,
	2130, 2131, 0, 2135, 1886, 0, 0, 0, 769, 1224,
	0, 0, 0, 0, 0, 1875, 0, 1212, 0, 0,
	0, 0, 0, 0, 1884, 1349, 0, 0, 0, 0,
	2567, 0, 0, 0, 477, 0, 0, 805, 0, 805,
	0, 0, 0, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 182, 0, 1890, 0, 0, 0, 41, 2648,
	0, 0, 609, 1348, 416, 0, 0, 0, 0, 0,
	2648, 0, 0, 2648, 2648, 0, 0, 1273, 0, 1885,
	0, 1349, 0, 416, 476, 416, 1308, 416, 1875, 0,
	0, 1281, 0, 0, 1881, 1882, 1883, 0, 0, 0,
	0, 1880, 1878, 1879, 1871, 1872, 1873, 1874, 1876, 1877,
	0, 0, 0, 478, 0, 0, 0, 0, 0, 1348,
	53, 0, 480, 54, 0, 0, 0, 1890, 0, 0,
	0, 0, 529, 182, 0, 0, 0, 1259, 1349, 0,
	0, 182, 1308, 0, 529, 0, 0, 0, 0, 0,
	0, 0, 1885, 0, 56, 1886, 782, 0, 1278, 0,
	1278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	529, 0, 0, 0, 0, 529, 1348, 0, 0, 0,
	182, 529, 0, 529, 0, 529, 0, 529, 0, 529,
	0, 0, 0, 0, 0, 1076, 1077, 0, 0, 1308,
	1410, 0, 0, 0, 0, 0, 529, 529, 0, 0,
	0, 0, 0, 0, 0, 416, 0, 0, 0, 1079,
	0, 0, 597, 0, 0, 0, 0, 0, 1886, 0,
	0, 0, 0, 0, 0, 0, 0, 529, 0, 1588,
	57, 0, 1133, 1078, 1136, 1881, 1882, 1883, 0, 1098,
	0, 1141, 1880, 1878, 1879, 1871, 1872, 1873, 1874, 1876,
	1877, 0, 0, 0, 0, 0, 0, 118, 59, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1588, 0, 0, 0, 145, 0, 0, 0, 1421, 0,
	0, 479, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1102, 1103, 1104, 0, 0,
	0, 0, 0, 1084, 147, 0, 0, 0, 1881, 1882,
	1883, 0, 0, 0, 0, 1880, 1878, 1879, 1871, 1872,
	1873, 1874, 1876, 1877, 0, 0, 0, 0, 0, 0,
	0, 1869, 1870, 0, 1887, 1888, 1889, 0, 0, 0,
	0, 146, 0, 510, 1588, 752, 0, 0, 892, 139,
	0, 0, 0, 0, 0, 0, 140, 1076, 1077, 416,
	1106, 1107, 1108, 1116, 1117, 1118, 0, 1099, 64, 0,
	1094, 1654, 0, 1220, 1109, 416, 0, 117, 416, 0,
	0, 1079, 1667, 0, 1120, 1884, 416, 0, 0, 0,
	0, 0, 416, 2405, 0, 0, 0, 0, 0, 0,
	0, 416, 0, 0, 0, 1078, 1699, 0, 0, 0,
	0, 1098, 0, 0, 1706, 0, 0, 0, 1095, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 1105, 0,
	0, 0, 769, 416, 2429, 1739, 0, 529, 0, 0,
	529, 0, 529, 1100, 416, 416, 0, 1745, 769, 1875,
	0, 1657, 0, 0, 0, 0, 1667, 0, 0, 782,
	0, 0, 0, 0, 0, 782, 1101, 1102, 1103, 1104,
	1891, 0, 0, 0, 800, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1890, 0,
	0, 0, 0, 0, 0, 1113, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1737, 0, 2482, 0,
	0, 0, 0, 1885, 1119, 0, 0, 800, 800, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 1099,
	1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0,
	0, 0, 0, 1783, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1110, 0, 0, 0, 416,
	416, 416, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1886,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1105, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 1869, 1870,
	0, 1887, 1888, 1889, 0, 0, 0, 0, 0, 0,
	0, 0, 1114, 64, 0, 0, 0, 0, 1093, 0,
	0, 0, 1786, 800, 1788, 0, 782, 0, 0, 0,
	0, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 597, 0, 0, 597,
	597, 0, 1884, 477, 0, 1807, 0, 0, 0, 1881,
	1882, 1883, 0, 0, 38, 0, 1880, 1878, 1879, 1871,
	1872, 1873, 1874, 1876, 1877, 0, 0, 41, 0, 0,
	0, 0, 1112, 0, 0, 1090, 1091, 1097, 1096, 1092,
	1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085,
	1086, 0, 1517, 476, 0, 0, 0, 0, 0, 2298,
	0, 0, 0, 0, 0, 609, 1875, 0, 0, 0,
	1136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 0, 0, 53,
	0, 480, 54, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	416, 0, 0, 0, 0, 0, 416, 416, 0, 0,
	416, 0, 0, 56, 0, 1654, 0, 0, 1654, 0,
	1885, 0, 0, 0, 0, 0, 1952, 770, 0, 0,
	0, 0, 416, 1958, 1959, 0, 0, 0, 1667, 0,
	0, 1966, 0, 1220, 0, 0, 0, 1971, 1972, 1974,
	1976, 1977, 0, 0, 0, 0, 64, 416, 0, 0,
	0, 0, 1988, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 769, 0, 416, 0, 0, 0, 769,
	769, 0, 0, 769, 0, 1273, 0, 1273, 0, 529,
	0, 0, 0, 416, 0, 0, 1886, 2017, 64, 57,
	64, 0, 416, 0, 2027, 1957, 0, 0, 0, 0,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 1783, 64, 118, 59, 0, 60,
	1983, 0, 0, 0, 0, 0, 0, 0, 0, 1783,
	0, 0, 0, 145, 0, 0, 0, 0, 1999, 0,
	479, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 477, 0, 0, 0, 0, 2011, 0, 0, 0,
	0, 0, 38, 147, 0, 1259, 0, 0, 0, 416,
	0, 0, 0, 0, 1259, 41, 1881, 1882, 1883, 0,
	0, 0, 0, 1880, 1878, 1879, 1871, 1872, 1873, 1874,
	1876, 1877, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 476, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 2101,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 0, 451, 53, 0, 480,
	54, 0, 2064, 0, 0, 0, 0, 0, 0, 0,
	1076, 1077, 0, 1106, 1107, 1108, 1116, 1117, 1118, 0,
	0, 0, 0, 1094, 0, 0, 0, 1109, 0, 0,
	0, 56, 0, 0, 1079, 0, 0, 1120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 416, 0, 0, 1098, 0, 0, 1654, 0, 1517,
	0, 1095, 0, 0, 0, 0, 892, 1654, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1136,
	0, 2184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2205, 0, 0, 0, 0, 0,
	2205, 0, 0, 0, 0, 0, 2205, 57, 0, 1101,
	1102, 1103, 1104, 0, 0, 1667, 0, 1273, 1084, 0,
	0, 0, 0, 0, 769, 2227, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 59, 0, 60, 1113, 1121,
	0, 0, 0, 416, 416, 0, 0, 0, 0, 0,
	0, 145, 0, 1136, 0, 0, 0, 1119, 479, 0,
	2253, 93, 0, 0, 0, 0, 0, 0, 0, 2255,
	0, 0, 2261, 416, 0, 1111, 0, 0, 0, 0,
	0, 147, 1099, 0, 0, 0, 0, 0, 770, 0,
	0, 0, 0, 0, 770, 770, 0, 0, 770, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1110, 0,
	0, 0, 0, 0, 0, 2285, 1737, 769, 146, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	0, 64, 0, 1105, 0, 0, 2262, 0, 0, 0,
	0, 64, 0, 0, 117, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 892, 0, 0, 1114, 64, 0, 0, 0,
	64, 1093, 0, 1654, 892, 0, 0, 2317, 2318, 1667,
	609, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2184, 892, 0, 0, 0, 0, 2351,
	0, 2352, 0, 416, 2354, 2355, 1076, 1077, 0, 0,
	416, 0, 1116, 1117, 1118, 0, 0, 0, 0, 0,
	0, 0, 0, 2184, 0, 892, 1706, 0, 0, 2184,
	1079, 0, 769, 1120, 0, 1112, 0, 0, 1090, 1091,
	1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081,
	1082, 1083, 1085, 1086, 1078, 0, 0, 0, 0, 0,
	1098, 0, 1911, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2353, 0, 0, 0,
	0, 0, 0, 2358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1102, 1103, 1104, 0,
	0, 0, 0, 1667, 1084, 2421, 0, 0, 2423, 0,
	0, 0, 0, 0, 0, 0, 416, 0, 0, 2184,
	0, 0, 0, 0, 1113, 1121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2205, 0, 0, 0,
	0, 0, 2184, 64, 0, 0, 0, 416, 0, 0,
	0, 1111, 0, 0, 892, 0, 0, 0, 1099, 770,
	0, 0, 2253, 2253, 0, 0, 0, 0, 892, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2430,
	0, 0, 0, 0, 0, 2488, 0, 0, 0, 0,
	1654, 0, 0, 0, 0, 0, 0, 1273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1105,
	2463, 0, 2504, 2505, 0, 0, 0, 0, 0, 416,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 2522, 0, 0, 0, 0, 0, 0, 0,
	0, 1114, 770, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2538,
	0, 892, 0, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2511, 0, 0, 2488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1112, 892, 892, 892, 0, 0, 0, 0, 1115,
	416, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086,
	0, 0, 0, 0, 2599, 0, 0, 2542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 770, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1737, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 802,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 807, 0, 189,
	808, 809, 810, 811, 351, 812, 813, 814, 815, 190,
	191, 192, 352, 353, 354, 355, 193, 356, 357, 816,
	194, 358, 359, 195, 196, 817, 818, 360, 361, 362,
	819, 197, 363, 820, 794, 821, 198, 199, 200, 0,
	202, 203, 204, 201, 822, 205, 0, 206, 207, 823,
	720, 208, 209, 210, 824, 825, 827, 826, 828, 829,
	830, 211, 212, 417, 213, 364, 214, 365, 366, 831,
	215, 832, 216, 833, 217, 834, 835, 218, 219, 836,
	220, 837, 0, 838, 367, 221, 223, 222, 224, 368,
	369, 839, 721, 840, 0, 0, 0, 0, 225, 226,
	370, 371, 372, 64, 227, 841, 228, 842, 843, 722,
	844, 229, 373, 845, 374, 846, 1517, 230, 231, 232,
	233, 375, 376, 724, 847, 377, 237, 848, 234, 849,
	723, 235, 378, 236, 379, 380, 381, 382, 383, 850,
	384, 851, 725, 238, 239, 240, 726, 385, 386, 241,
	242, 243, 852, 245, 244, 853, 387, 727, 246, 247,
	728, 854, 248, 249, 855, 856, 250, 0, 251, 729,
	252, 253, 255, 388, 254, 730, 256, 257, 259, 258,
	857, 858, 859, 389, 260, 390, 261, 262, 860, 263,
	861, 862, 264, 863, 864, 265, 391, 731, 266, 732,
	392, 267, 268, 269, 270, 271, 272, 865, 273, 393,
	274, 394, 275, 866, 276, 277, 278, 279, 280, 395,
	281, 282, 867, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 868, 295, 733, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 869,
	308, 397, 307, 309, 310, 870, 311, 299, 300, 312,
	734, 313, 398, 399, 314, 871, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 872, 322, 873,
	323, 324, 325, 326, 327, 328, 329, 330, 874, 402,
	403, 404, 875, 876, 331, 332, 405, 406, 877, 333,
	334, 335, 336, 878, 879, 337, 338, 339, 340, 880,
	341, 881, 407, 342, 343, 344, 408, 409, 882, 883,
	345, 884, 885, 886, 887, 346, 347, 348, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	802, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1647, 0, 0, 0, 0, 0, 187, 188, 807, 1648,
	189, 808, 809, 810, 811, 351, 812, 813, 814, 815,
	190, 191, 192, 352, 353, 354, 355, 193, 356, 357,
	816, 194, 358, 359, 195, 196, 817, 818, 360, 361,
	362, 819, 197, 363, 820, 794, 821, 198, 199, 200,
	0, 202, 203, 204, 201, 822, 205, 0, 206, 207,
	823, 720, 208, 209, 210, 824, 825, 827, 826, 828,
	829, 830, 211, 212, 417, 213, 364, 214, 365, 366,
	831, 215, 832, 216, 833, 217, 834, 835, 218, 219,
	836, 220, 837, 0, 838, 367, 221, 223, 222, 224,
	368, 369, 839, 721, 840, 0, 0, 0, 0, 225,
	226, 370, 371, 372, 0, 227, 841, 228, 842, 843,
	722, 844, 229, 373, 845, 374, 846, 0, 230, 231,
	232, 233, 375, 376, 724, 847, 377, 237, 848, 234,
	849, 723, 235, 378, 236, 379, 380, 381, 382, 383,
	850, 384, 851, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 852, 245, 244, 853, 387, 727, 246,
	247, 728, 854, 248, 249, 855, 856, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 857, 858, 859, 389, 260, 390, 261, 262, 860,
	263, 861, 862, 264, 863, 864, 265, 391, 731, 266,
	732, 392, 267, 268, 269, 270, 271, 272, 865, 273,
	393, 274, 394, 275, 866, 276, 277, 278, 279, 280,
	395, 281, 282, 867, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 868, 295, 733,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	869, 308, 397, 307, 309, 310, 870, 311, 299, 300,
	312, 734, 313, 398, 399, 314, 871, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 872, 322,
	873, 323, 324, 325, 326, 327, 328, 329, 330, 874,
	402, 403, 404, 875, 876, 331, 332, 405, 406, 877,
	333, 334, 335, 336, 878, 879, 337, 338, 339, 340,
	880, 341, 881, 407, 342, 343, 344, 408, 409, 882,
	883, 345, 884, 885, 886, 887, 346, 347, 348, 349,
	350, 0, 802, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	807, 2313, 189, 808, 809, 810, 811, 351, 812, 813,
	814, 815, 190, 191, 192, 352, 353, 354, 355, 193,
	356, 357, 816, 194, 358, 359, 195, 196, 817, 818,
	360, 361, 362, 819, 197, 363, 820, 794, 821, 198,
	199, 200, 0, 202, 203, 204, 201, 822, 205, 0,
	206, 207, 823, 720, 208, 209, 210, 824, 825, 827,
	826, 828, 829, 830, 211, 212, 417, 213, 364, 214,
	365, 366, 831, 215, 832, 216, 833, 217, 834, 835,
	218, 219, 836, 220, 837, 0, 838, 367, 221, 223,
	222, 224, 368, 369, 839, 721, 840, 0, 0, 0,
	0, 225, 226, 370, 371, 372, 0, 227, 841, 228,
	842, 843, 722, 844, 229, 373, 845, 374, 846, 0,
	230, 231, 232, 233, 375, 376, 724, 847, 377, 237,
	848, 234, 849, 723, 235, 378, 236, 379, 380, 381,
	382, 383, 850, 384, 851, 725, 238, 239, 240, 726,
	385, 386, 241, 242, 243, 852, 245, 244, 853, 387,
	727, 246, 247, 728, 854, 248, 249, 855, 856, 250,
	0, 251, 729, 252, 253, 255, 388, 254, 730, 256,
	257, 259, 258, 857, 858, 859, 389, 260, 390, 261,
	262, 860, 263, 861, 862, 264, 863, 864, 265, 391,
	731, 266, 732, 392, 267, 268, 269, 270, 271, 272,
	865, 273, 393, 274, 394, 275, 866, 276, 277, 278,
	279, 280, 395, 281, 282, 867, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 868,
	295, 733, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 869, 308, 397, 307, 309, 310, 870, 311,
	299, 300, 312, 734, 313, 398, 399, 314, 871, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	872, 322, 873, 323, 324, 325, 326, 327, 328, 329,
	330, 874, 402, 403, 404, 875, 876, 331, 332, 405,
	406, 877, 333, 334, 335, 336, 878, 879, 337, 338,
	339, 340, 880, 341, 881, 407, 342, 343, 344, 408,
	409, 882, 883, 345, 884, 885, 886, 887, 346, 347,
	348, 349, 350, 802, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1255, 187,
	188, 807, 0, 189, 808, 809, 810, 811, 351, 812,
	813, 814, 815, 190, 191, 192, 352, 353, 354, 355,
	193, 356, 357, 816, 194, 358, 359, 195, 196, 817,
	818, 360, 361, 362, 819, 197, 363, 820, 794, 821,
	198, 199, 200, 0, 202, 203, 204, 201, 822, 205,
	0, 206, 207, 823, 720, 208, 209, 210, 824, 825,
	827, 826, 828, 829, 830, 211, 212, 417, 213, 364,
	214, 365, 366, 831, 215, 832, 216, 833, 217, 834,
	835, 218, 219, 836, 220, 837, 0, 838, 367, 221,
	223, 222, 224, 368, 369, 839, 721, 840, 0, 0,
	0, 0, 225, 226, 370, 371, 372, 0, 227, 841,
	228, 842, 843, 722, 844, 229, 373, 845, 374, 846,
	0, 230, 231, 232, 233, 375, 376, 724, 847, 377,
	237, 848, 234, 849, 723, 235, 378, 236, 379, 380,
	381, 382, 383, 850, 384, 851, 725, 238, 239, 240,
	726, 385, 386, 241, 242, 243, 852, 245, 244, 853,
	387, 727, 246, 247, 728, 854, 248, 249, 855, 856,
	250, 0, 251, 729, 252, 253, 255, 388, 254, 730,
	256, 257, 259, 258, 857, 858, 859, 389, 260, 390,
	261, 262, 860, 263, 861, 862, 264, 863, 864, 265,
	391, 731, 266, 732, 392, 267, 268, 269, 270, 271,
	272, 865, 273, 393, 274, 394, 275, 866, 276, 277,
	278, 279, 280, 395, 281, 282, 867, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	868, 295, 733, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 869, 308, 397, 307, 309, 310, 870,
	311, 299, 300, 312, 734, 313, 398, 399, 314, 871,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 872, 322, 873, 323, 324, 325, 326, 327, 328,
	329, 330, 874, 402, 403, 404, 875, 876, 331, 332,
	405, 406, 877, 333, 334, 335, 336, 878, 879, 337,
	338, 339, 340, 880, 341, 881, 407, 342, 343, 344,
	408, 409, 882, 883, 345, 884, 885, 886, 887, 346,
	347, 348, 349, 350, 1545, 0, 658, 647, 648, 645,
	646, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 1542, 0, 189, 0, 0, 0,
	0, 675, 640, 0, 0, 0, 190, 191, 192, 352,
	690, 354, 691, 193, 692, 693, 0, 194, 358, 359,
	195, 196, 643, 674, 694, 695, 362, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	417, 213, 696, 214, 697, 698, 628, 215, 0, 216,
	0, 217, 1543, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 374, 0, 0, 230, 231, 232, 233, 683, 685,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	388, 254, 730, 256, 257, 259, 258, 625, 0, 655,
	684, 260, 708, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 1541, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 626, 0, 0,
	0, 0, 0, 0, 0, 624, 0, 0, 0, 0,
	622, 623, 1544, 0, 0, 0, 0, 0, 0, 633,
	1539, 0, 0, 0, 610, 636, 658, 647, 648, 645,
	646, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 675, 640, 0, 0, 0, 190, 191, 192, 352,
	690, 354, 691, 193, 692, 693, 0, 194, 358, 359,
	195, 196, 643, 674, 694, 695, 362, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	417, 213, 696, 214, 697, 698, 628, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 374, 0, 0, 230, 231, 232, 233, 683, 685,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	388, 254, 730, 256, 257, 259, 258, 625, 0, 655,
	684, 260, 708, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 306, 145, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 147, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 953, 714, 0, 0, 345, 0, 0,
	0, 139, 346, 347, 348, 349, 350, 626, 140, 0,
	0, 0, 0, 0, 0, 624, 0, 0, 0, 0,
	622, 623, 658, 647, 648, 645, 646, 637, 0, 1139,
	0, 0, 0, 0, 0, 636, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 675, 640, 0,
	0, 0, 190, 191, 192, 352, 690, 354, 691, 193,
	692, 693, 0, 194, 358, 359, 195, 196, 643, 674,
	694, 695, 362, 0, 197, 686, 0, 666, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 667, 668,
	670, 0, 669, 671, 211, 212, 417, 213, 696, 214,
	697, 698, 628, 215, 0, 216, 0, 217, 0, 0,
	689, 219, 0, 220, 0, 0, 0, 631, 221, 223,
	222, 224, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 225, 226, 699, 700, 701, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 687, 0, 374, 0, 0,
	230, 231, 232, 233, 683, 685, 724, 0, 377, 237,
	0, 234, 0, 723, 235, 702, 236, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 238, 239, 240, 726,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 688,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 729, 252, 253, 255, 388, 254, 730, 256,
	257, 259, 258, 625, 0, 655, 684, 260, 708, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	731, 266, 732, 678, 267, 268, 269, 270, 271, 272,
	0, 273, 679, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 709, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 733, 296, 297, 632, 298, 0, 302, 303, 304,
	305, 306, 145, 308, 397, 307, 309, 310, 672, 311,
	299, 300, 312, 734, 313, 710, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 711, 318, 319, 680,
	0, 322, 147, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 712, 713, 0, 0, 331, 332, 681,
	682, 653, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 673, 341, 0, 407, 342, 343, 344, 953,
	714, 0, 0, 345, 0, 0, 0, 139, 346, 347,
	348, 349, 350, 626, 140, 0, 0, 0, 0, 0,
	0, 624, 0, 0, 0, 0, 622, 623, 658, 647,
	648, 645, 646, 637, 0, 1139, 0, 0, 0, 0,
	0, 636, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 675, 640, 0, 0, 0, 190, 191,
	192, 352, 690, 354, 691, 193, 692, 693, 1599, 194,
	358, 359, 195, 196, 643, 674, 694, 695, 362, 0,
	197, 686, 0, 666, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 720,
	208, 209, 210, 0, 667, 668, 670, 0, 669, 671,
	211, 212, 417, 213, 696, 214, 697, 698, 628, 215,
	0, 216, 0, 217, 0, 0, 689, 219, 0, 220,
	0, 0, 0, 631, 221, 223, 222, 224, 676, 677,
	654, 721, 0, 0, 0, 0, 0, 225, 226, 699,
	700, 701, 0, 227, 0, 228, 0, 1604, 722, 0,
	229, 687, 0, 374, 0, 0, 230, 231, 232, 233,
	683, 685, 724, 0, 377, 237, 0, 234, 0, 723,
	235, 702, 236, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 238, 239, 240, 726, 385, 386, 241, 242,
	243, 0, 245, 244, 1600, 688, 727, 246, 247, 728,
	0, 248, 249, 0, 0, 250, 0, 251, 729, 252,
	253, 255, 388, 254, 730, 256, 257, 259, 258, 625,
	0, 655, 684, 260, 708, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 731, 266, 732, 678,
	267, 268, 269, 270, 271, 272, 0, 273, 679, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 709, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	632, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 672, 311, 299, 300, 312, 734,
	313, 710, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 711, 318, 319, 680, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 712,
	713, 0, 1601, 331, 332, 681, 682, 653, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 673, 341,
	0, 407, 342, 343, 344, 408, 714, 0, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 626,
	658, 647, 648, 645, 646, 637, 0, 624, 0, 0,
	0, 0, 622, 623, 0, 0, 187, 188, 0, 0,
	189, 633, 0, 0, 0, 675, 640, 636, 0, 0,
	190, 191, 192, 352, 690, 354, 691, 193, 692, 693,
	0, 194, 358, 359, 195, 196, 643, 674, 694, 695,
	362, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 417, 213, 696, 214, 697, 698,
	628, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 374, 0, 0, 230, 231,
	232, 233, 683, 685, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 625, 2236, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 626, 658, 647, 648, 645, 646, 637, 0, 624,
	0, 0, 0, 0, 622, 623, 1200, 0, 187, 188,
	0, 0, 189, 633, 0, 0, 0, 675, 640, 636,
	0, 0, 190, 191, 192, 352, 690, 354, 691, 193,
	692, 693, 0, 194, 358, 359, 195, 196, 643, 674,
	694, 695, 362, 0, 197, 686, 0, 666, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 667, 668,
	670, 0, 669, 671, 211, 212, 417, 213, 696, 214,
	697, 698, 628, 215, 0, 216, 0, 217, 0, 0,
	689, 219, 0, 220, 0, 0, 0, 631, 221, 223,
	222, 224, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 225, 226, 699, 700, 701, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 687, 0, 374, 0, 0,
	230, 231, 232, 233, 683, 685, 724, 0, 377, 237,
	1449, 234, 0, 723, 235, 702, 236, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 238, 239, 240, 726,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 688,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 729, 252, 253, 255, 388, 254, 730, 256,
	257, 259, 258, 625, 0, 655, 684, 260, 708, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	731, 266, 732, 678, 267, 268, 269, 270, 271, 272,
	0, 273, 679, 274, 394, 275, 1448, 276, 277, 278,
	279, 280, 709, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 733, 296, 297, 632, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 672, 311,
	299, 300, 312, 734, 313, 710, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 711, 318, 319, 680,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 712, 713, 0, 0, 331, 332, 681,
	682, 653, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 673, 341, 0, 407, 342, 343, 344, 408,
	714, 0, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 626, 0, 0, 0, 0, 0, 0,
	0, 624, 0, 0, 0, 0, 622, 623, 0, 0,
	0, 0, 0, 0, 0, 633, 0, 0, 0, 0,
	618, 636, 658, 647, 648, 645, 646, 637, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 675, 640, 0,
	0, 0, 190, 191, 192, 352, 690, 354, 691, 193,
	692, 693, 0, 194, 358, 359, 195, 196, 643, 674,
	694, 695, 362, 0, 197, 686, 0, 666, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 667, 668,
	670, 0, 669, 671, 211, 212, 417, 213, 696, 214,
	697, 698, 628, 215, 0, 216, 0, 217, 0, 0,
	689, 219, 0, 220, 0, 0, 0, 631, 221, 223,
	222, 224, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 225, 226, 699, 700, 701, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 687, 0, 374, 0, 0,
	230, 231, 232, 233, 683, 685, 724, 0, 377, 237,
	0, 234, 0, 723, 235, 702, 236, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 238, 239, 240, 726,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 688,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 729, 252, 253, 255, 388, 254, 730, 256,
	257, 259, 258, 625, 0, 655, 684, 260, 708, 261,
	262, 0, 263, 620, 0, 264, 0, 0, 265, 391,
	731, 266, 732, 678, 267, 268, 269, 270, 271, 272,
	0, 273, 679, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 709, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 733, 296, 297, 632, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 672, 311,
	299, 300, 312, 734, 313, 710, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 711, 318, 319, 680,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 712, 713, 0, 0, 331, 332, 681,
	682, 653, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 673, 341, 0, 407, 342, 343, 344, 408,
	714, 0, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 626, 658, 647, 648, 645, 646, 637,
	0, 624, 0, 0, 0, 0, 622, 623, 0, 0,
	187, 188, 0, 0, 189, 633, 0, 0, 0, 675,
	640, 636, 0, 0, 190, 191, 192, 352, 690, 354,
	691, 193, 692, 693, 0, 194, 358, 359, 195, 196,
	643, 674, 694, 695, 362, 0, 197, 686, 0, 666,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 720, 208, 209, 210, 0,
	667, 668, 670, 0, 669, 671, 211, 212, 417, 213,
	696, 214, 697, 698, 628, 215, 0, 216, 0, 217,
	0, 0, 689, 219, 0, 220, 0, 0, 0, 631,
	221, 223, 222, 224, 676, 677, 654, 721, 0, 0,
	0, 0, 0, 225, 226, 699, 700, 701, 0, 227,
	0, 228, 0, 0, 722, 0, 229, 687, 0, 374,
	0, 0, 230, 231, 232, 233, 683, 685, 724, 0,
	377, 237, 0, 234, 0, 723, 235, 702, 236, 703,
	704, 705, 706, 707, 0, 665, 0, 725, 238, 239,
	240, 726, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 688, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 252, 253, 255, 388, 254,
	730, 256, 257, 259, 258, 625, 0, 655, 684, 260,
	708, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 731, 266, 732, 678, 267, 268, 269, 270,
	271, 272, 0, 273, 679, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 709, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 733, 296, 297, 632, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	672, 311, 299, 300, 312, 734, 313, 710, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 711, 318,
	319, 680, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 712, 713, 0, 0, 331,
	332, 681, 682, 653, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 673, 341, 0, 407, 342, 343,
	344, 408, 714, 2087, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 626, 658, 647, 648, 645,
	646, 637, 0, 624, 0, 0, 0, 0, 622, 623,
	0, 0, 187, 188, 0, 0, 189, 633, 0, 0,
	0, 675, 640, 636, 0, 0, 190, 191, 192, 352,
	690, 354, 691, 193, 692, 693, 0, 194, 358, 359,
	195, 196, 643, 674, 694, 695, 362, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	417, 213, 696, 214, 697, 698, 628, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 374, 0, 0, 230, 231, 232, 233, 683, 685,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	388, 254, 730, 256, 257, 259, 258, 625, 0, 655,
	684, 260, 708, 261, 262, 0, 263, 620, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 626, 658, 647,
	648, 645, 646, 637, 0, 624, 0, 0, 0, 0,
	622, 623, 0, 0, 187, 188, 0, 0, 189, 633,
	0, 0, 0, 675, 640, 636, 0, 0, 190, 191,
	192, 352, 690, 354, 691, 193, 692, 693, 0, 194,
	358, 359, 195, 196, 643, 674, 694, 695, 362, 0,
	197, 686, 0, 666, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 720,
	208, 209, 210, 0, 667, 668, 670, 0, 669, 671,
	211, 212, 417, 213, 696, 214, 697, 698, 628, 215,
	0, 216, 0, 217, 0, 0, 689, 219, 0, 220,
	0, 0, 0, 631, 221, 223, 222, 224, 676, 677,
	654, 721, 0, 0, 0, 0, 0, 225, 226, 699,
	700, 701, 0, 227, 0, 228, 0, 0, 722, 0,
	229, 687, 0, 374, 0, 0, 230, 231, 232, 233,
	683, 685, 724, 0, 377, 237, 0, 234, 0, 723,
	235, 702, 236, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 238, 239, 240, 726, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 688, 727, 246, 247, 728,
	0, 248, 249, 0, 0, 250, 0, 251, 729, 252,
	253, 255, 388, 254, 730, 256, 257, 259, 258, 625,
	0, 655, 684, 260, 708, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 731, 266, 732, 678,
	267, 268, 269, 270, 271, 272, 0, 273, 679, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 709, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	632, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 672, 311, 299, 300, 312, 734,
	313, 710, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 711, 318, 319, 680, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 712,
	713, 0, 0, 331, 332, 681, 682, 653, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 673, 341,
	0, 407, 342, 343, 344, 408, 714, 0, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 626,
	658, 647, 648, 645, 646, 637, 0, 624, 0, 0,
	0, 0, 622, 623, 1200, 0, 187, 188, 0, 0,
	189, 633, 0, 0, 0, 675, 640, 636, 0, 0,
	190, 191, 192, 352, 690, 354, 691, 193, 692, 693,
	0, 194, 358, 359, 195, 196, 643, 674, 694, 695,
	362, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 417, 213, 696, 214, 697, 698,
	628, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 1604,
	722, 0, 229, 687, 0, 374, 0, 0, 230, 231,
	232, 233, 683, 685, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 625, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 626, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 0, 0, 0, 622, 623, 0, 0, 0, 0,
	0, 0, 0, 633, 0, 0, 0, 0, 1650, 636,
	658, 647, 648, 645, 646, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 675, 640, 0, 0, 0,
	190, 191, 192, 352, 690, 354, 691, 193, 692, 693,
	0, 194, 358, 359, 195, 196, 643, 674, 694, 695,
	362, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 417, 213, 696, 214, 697, 698,
	628, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 374, 0, 0, 230, 231,
	232, 233, 683, 685, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 625, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 626, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 0, 0, 0, 622, 623, 0, 0, 0, 0,
	0, 0, 0, 633, 0, 0, 0, 0, 1613, 636,
	658, 647, 648, 645, 646, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 675, 640, 0, 0, 0,
	190, 191, 192, 352, 690, 354, 691, 193, 692, 693,
	0, 194, 358, 359, 195, 196, 643, 674, 694, 695,
	362, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 417, 213, 696, 214, 697, 698,
	628, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 374, 0, 0, 230, 231,
	232, 233, 683, 685, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 625, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 626, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 0, 0, 0, 622, 623, 0, 0, 0, 0,
	0, 0, 0, 633, 0, 0, 0, 0, 1611, 636,
	658, 647, 648, 645, 646, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 675, 640, 0, 0, 0,
	190, 191, 192, 352, 690, 354, 691, 193, 692, 693,
	0, 194, 358, 359, 195, 196, 643, 674, 694, 695,
	362, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 417, 213, 696, 214, 697, 698,
	628, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 374, 0, 0, 230, 231,
	232, 233, 683, 685, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 625, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 626, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 0, 0, 0, 622, 623, 0, 0, 0, 0,
	0, 0, 0, 633, 0, 0, 0, 0, 1595, 636,
	658, 647, 648, 645, 646, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 675, 640, 0, 0, 0,
	190, 191, 192, 352, 690, 354, 691, 193, 692, 693,
	0, 194, 358, 359, 195, 196, 643, 674, 694, 695,
	362, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 417, 213, 696, 214, 697, 698,
	628, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 374, 0, 0, 230, 231,
	232, 233, 683, 685, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 625, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 626, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 0, 0, 0, 622, 623, 0, 0, 0, 0,
	0, 0, 0, 633, 0, 0, 0, 0, 1583, 636,
	658, 647, 648, 645, 646, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 675, 640, 0, 0, 0,
	190, 191, 192, 352, 690, 354, 691, 193, 692, 693,
	0, 194, 358, 359, 195, 196, 643, 674, 694, 695,
	362, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 417, 213, 696, 214, 697, 698,
	628, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 374, 0, 0, 230, 231,
	232, 233, 683, 685, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 625, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 626, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 0, 0, 0, 622, 623, 0, 0, 0, 0,
	0, 0, 0, 633, 0, 0, 0, 0, 1581, 636,
	1573, 647, 648, 645, 646, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 675, 640, 0, 0, 0,
	190, 191, 192, 352, 690, 354, 691, 193, 692, 693,
	0, 194, 358, 359, 195, 196, 643, 674, 694, 695,
	362, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 417, 213, 696, 1576, 697, 698,
	628, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 374, 0, 0, 230, 1577,
	232, 233, 683, 685, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 1578, 1575, 255, 388, 254, 730, 256, 257, 259,
	258, 625, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 1579,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 1574,
	350, 626, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 0, 0, 0, 622, 623, 0, 0, 0, 0,
	0, 0, 0, 633, 0, 0, 0, 0, 1570, 636,
	1573, 647, 648, 645, 646, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 675, 640, 0, 0, 0,
	190, 191, 192, 352, 690, 354, 691, 193, 692, 693,
	0, 194, 358, 359, 195, 196, 643, 674, 694, 695,
	362, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 417, 213, 696, 1576, 697, 698,
	628, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 374, 0, 0, 230, 1577,
	232, 233, 683, 685, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 1578, 1575, 255, 388, 254, 730, 256, 257, 259,
	258, 625, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 1579,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 1574,
	350, 626, 658, 647, 648, 645, 646, 637, 0, 624,
	0, 0, 0, 0, 622, 623, 0, 0, 187, 188,
	0, 0, 189, 633, 0, 0, 0, 675, 640, 636,
	0, 0, 190, 191, 192, 352, 690, 354, 691, 193,
	692, 693, 0, 194, 358, 359, 195, 196, 643, 674,
	694, 695, 362, 0, 197, 686, 0, 666, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 667, 668,
	670, 0, 669, 671, 211, 212, 417, 213, 696, 214,
	697, 698, 628, 215, 0, 216, 0, 217, 0, 0,
	689, 219, 0, 220, 0, 0, 0, 631, 221, 223,
	222, 224, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 225, 226, 699, 700, 701, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 687, 0, 374, 0, 0,
	230, 231, 232, 233, 683, 685, 724, 0, 377, 237,
	0, 234, 0, 723, 235, 702, 236, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 238, 239, 240, 726,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 688,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 729, 252, 253, 255, 388, 254, 730, 256,
	257, 259, 258, 625, 0, 655, 684, 260, 708, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	731, 266, 732, 678, 267, 268, 269, 270, 271, 272,
	0, 273, 679, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 709, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 733, 296, 297, 632, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 672, 311,
	299, 300, 312, 734, 313, 710, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 711, 318, 319, 680,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 712, 713, 0, 0, 331, 332, 681,
	682, 653, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 673, 341, 0, 407, 342, 343, 344, 408,
	714, 0, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 626, 658, 647, 648, 645, 646, 637,
	0, 624, 0, 0, 0, 0, 622, 623, 0, 0,
	187, 188, 1436, 1143, 189, 633, 0, 0, 0, 675,
	640, 636, 0, 0, 190, 191, 192, 352, 690, 354,
	691, 193, 692, 693, 0, 194, 358, 359, 195, 196,
	643, 674, 694, 695, 362, 0, 197, 686, 0, 666,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 720, 208, 209, 210, 0,
	667, 668, 670, 0, 669, 671, 211, 212, 417, 213,
	696, 214, 697, 698, 628, 215, 0, 216, 0, 217,
	0, 0, 689, 219, 0, 220, 0, 0, 0, 631,
	221, 223, 222, 224, 676, 677, 654, 721, 0, 0,
	0, 0, 0, 225, 226, 699, 700, 701, 0, 227,
	0, 228, 0, 0, 722, 0, 229, 687, 0, 374,
	0, 0, 230, 231, 232, 233, 683, 685, 724, 0,
	377, 237, 0, 234, 0, 723, 235, 702, 236, 703,
	704, 705, 706, 707, 0, 665, 0, 725, 238, 239,
	240, 726, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 688, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 252, 253, 255, 388, 254,
	730, 256, 257, 259, 258, 625, 0, 655, 684, 260,
	708, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 731, 266, 732, 678, 267, 268, 269, 270,
	271, 272, 0, 273, 679, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 709, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 733, 296, 297, 632, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	672, 311, 299, 300, 312, 734, 313, 710, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 711, 318,
	319, 680, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 712, 713, 0, 0, 331,
	332, 681, 682, 653, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 673, 341, 0, 407, 342, 343,
	344, 408, 714, 0, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 626, 0, 0, 0, 0,
	0, 0, 0, 624, 0, 0, 0, 0, 622, 623,
	0, 0, 0, 0, 0, 0, 0, 633, 0, 0,
	0, 0, 899, 636, 658, 647, 648, 645, 646, 637,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 675,
	640, 0, 0, 0, 190, 191, 192, 352, 690, 354,
	691, 193, 692, 693, 0, 194, 358, 359, 195, 196,
	643, 674, 694, 695, 362, 0, 197, 686, 0, 666,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 720, 208, 209, 210, 0,
	667, 668, 670, 0, 669, 671, 211, 212, 417, 213,
	696, 214, 697, 698, 628, 215, 0, 216, 0, 217,
	0, 0, 689, 219, 0, 220, 0, 0, 0, 631,
	221, 223, 222, 224, 676, 677, 654, 721, 0, 0,
	0, 0, 0, 225, 226, 699, 700, 701, 0, 227,
	0, 228, 0, 0, 722, 0, 229, 687, 0, 374,
	0, 0, 230, 231, 232, 233, 683, 685, 724, 0,
	377, 237, 0, 234, 0, 723, 235, 702, 236, 703,
	704, 705, 706, 707, 0, 665, 0, 725, 238, 239,
	240, 726, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 688, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 252, 253, 255, 388, 254,
	730, 256, 257, 259, 258, 625, 0, 655, 684, 260,
	708, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 731, 266, 732, 678, 267, 268, 269, 270,
	271, 272, 0, 273, 679, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 709, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 733, 296, 297, 632, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	672, 311, 299, 300, 312, 734, 313, 710, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 711, 318,
	319, 680, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 712, 713, 0, 0, 331,
	332, 681, 682, 653, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 673, 341, 0, 407, 342, 343,
	344, 408, 714, 0, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 626, 0, 0, 0, 0,
	0, 0, 0, 624, 0, 0, 0, 0, 622, 623,
	0, 0, 0, 0, 0, 0, 0, 633, 0, 0,
	0, 0, 897, 636, 658, 647, 648, 645, 646, 637,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 675,
	640, 0, 0, 0, 190, 191, 192, 352, 690, 354,
	691, 193, 692, 693, 0, 194, 358, 359, 195, 196,
	643, 674, 694, 695, 362, 0, 197, 686, 0, 666,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 720, 208, 209, 210, 0,
	667, 668, 670, 0, 669, 671, 211, 212, 417, 213,
	696, 214, 697, 698, 628, 215, 0, 216, 0, 217,
	0, 0, 689, 219, 0, 220, 0, 0, 0, 631,
	221, 223, 222, 224, 676, 677, 654, 721, 0, 0,
	0, 0, 0, 225, 226, 699, 700, 701, 0, 227,
	0, 228, 0, 0, 722, 0, 229, 687, 0, 374,
	0, 0, 230, 231, 232, 233, 683, 685, 724, 0,
	377, 237, 0, 234, 0, 723, 235, 702, 236, 703,
	704, 705, 706, 707, 0, 665, 0, 725, 238, 239,
	240, 726, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 688, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 252, 253, 255, 388, 254,
	730, 256, 257, 259, 258, 625, 0, 655, 684, 260,
	708, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 731, 266, 732, 678, 267, 268, 269, 270,
	271, 272, 0, 273, 679, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 709, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 733, 296, 297, 632, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	672, 311, 299, 300, 312, 734, 313, 710, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 711, 318,
	319, 680, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 712, 713, 0, 0, 331,
	332, 681, 682, 653, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 673, 341, 0, 407, 342, 343,
	344, 408, 714, 0, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 626, 658, 647, 648, 645,
	646, 637, 0, 624, 0, 0, 0, 0, 622, 623,
	0, 0, 187, 188, 0, 0, 189, 633, 0, 0,
	0, 675, 640, 636, 0, 0, 190, 191, 192, 352,
	690, 354, 691, 193, 692, 693, 0, 194, 358, 359,
	195, 196, 643, 674, 694, 695, 362, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	417, 213, 696, 214, 697, 698, 628, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 374, 0, 0, 230, 231, 232, 233, 683, 685,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 2649, 252, 253, 255,
	388, 254, 730, 256, 257, 259, 258, 625, 0, 655,
	684, 260, 708, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 626, 658, 647,
	648, 645, 646, 637, 0, 624, 0, 0, 0, 0,
	622, 623, 0, 0, 187, 188, 0, 0, 189, 633,
	0, 0, 0, 675, 640, 636, 0, 0, 190, 191,
	192, 352, 690, 354, 691, 193, 692, 693, 0, 194,
	358, 359, 195, 196, 643, 674, 694, 695, 362, 0,
	197, 686, 0, 666, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 720,
	208, 209, 2566, 0, 667, 668, 670, 0, 669, 671,
	211, 212, 417, 213, 696, 214, 697, 698, 628, 215,
	0, 216, 0, 217, 0, 0, 689, 219, 0, 220,
	0, 0, 0, 631, 221, 223, 222, 224, 676, 677,
	654, 721, 0, 0, 0, 0, 0, 225, 226, 699,
	700, 701, 0, 227, 0, 228, 0, 0, 722, 0,
	229, 687, 0, 374, 0, 0, 230, 231, 232, 233,
	683, 685, 724, 0, 377, 237, 0, 234, 0, 723,
	235, 702, 236, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 238, 239, 240, 726, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 688, 727, 246, 247, 728,
	0, 248, 249, 0, 0, 250, 0, 251, 729, 252,
	253, 255, 388, 254, 730, 256, 257, 259, 258, 625,
	0, 655, 684, 260, 708, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 731, 266, 732, 678,
	267, 268, 269, 270, 271, 272, 0, 273, 679, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 709, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	632, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 672, 311, 299, 300, 312, 734,
	313, 710, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 711, 318, 319, 680, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 712,
	713, 0, 0, 331, 332, 681, 682, 653, 333, 334,
	2565, 336, 0, 0, 337, 338, 339, 340, 673, 341,
	0, 407, 342, 343, 344, 408, 714, 0, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 626,
	658, 647, 648, 645, 646, 637, 0, 624, 0, 0,
	0, 0, 622, 623, 0, 0, 187, 188, 0, 0,
	189, 633, 0, 0, 0, 675, 640, 636, 0, 0,
	190, 191, 192, 352, 690, 354, 691, 193, 692, 693,
	0, 194, 358, 359, 195, 196, 643, 674, 694, 695,
	362, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 417, 213, 696, 214, 697, 698,
	628, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 374, 0, 0, 230, 231,
	232, 233, 683, 685, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 625, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 626, 658, 647, 648, 645, 646, 637, 0, 624,
	0, 0, 0, 0, 622, 623, 0, 0, 187, 188,
	0, 0, 189, 633, 0, 0, 0, 675, 640, 636,
	0, 0, 190, 191, 192, 2564, 690, 354, 691, 193,
	692, 693, 0, 194, 358, 359, 195, 196, 643, 674,
	694, 695, 362, 0, 197, 686, 0, 666, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 2566, 0, 667, 668,
	670, 0, 669, 671, 211, 212, 417, 213, 696, 214,
	697, 698, 628, 215, 0, 216, 0, 217, 0, 0,
	689, 219, 0, 220, 0, 0, 0, 631, 221, 223,
	222, 224, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 225, 226, 699, 700, 701, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 687, 0, 374, 0, 0,
	230, 231, 232, 233, 683, 685, 724, 0, 377, 237,
	0, 234, 0, 723, 235, 702, 236, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 238, 239, 240, 726,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 688,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 729, 252, 253, 255, 388, 254, 730, 256,
	257, 259, 258, 625, 0, 655, 684, 260, 708, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	731, 266, 732, 678, 267, 268, 269, 270, 271, 272,
	0, 273, 679, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 709, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 733, 296, 297, 632, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 672, 311,
	299, 300, 312, 734, 313, 710, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 711, 318, 319, 680,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 712, 713, 0, 0, 331, 332, 681,
	682, 653, 333, 334, 2565, 336, 0, 0, 337, 338,
	339, 340, 673, 341, 0, 407, 342, 343, 344, 408,
	714, 0, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 626, 658, 647, 648, 645, 646, 637,
	0, 624, 0, 0, 0, 0, 622, 623, 0, 0,
	187, 188, 0, 0, 189, 633, 0, 0, 0, 675,
	640, 636, 0, 0, 190, 191, 192, 352, 690, 354,
	691, 193, 692, 693, 0, 194, 358, 359, 195, 196,
	643, 674, 694, 695, 362, 0, 197, 686, 0, 666,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 720, 208, 209, 210, 0,
	667, 668, 670, 0, 669, 671, 211, 212, 417, 213,
	696, 214, 697, 698, 0, 215, 0, 216, 0, 217,
	0, 0, 689, 219, 0, 220, 0, 0, 0, 631,
	221, 223, 222, 224, 676, 677, 654, 721, 0, 0,
	0, 0, 0, 225, 226, 699, 700, 701, 0, 227,
	0, 228, 0, 0, 722, 0, 229, 687, 0, 374,
	0, 0, 230, 231, 232, 233, 683, 685, 724, 0,
	377, 237, 0, 234, 0, 723, 235, 702, 236, 703,
	704, 705, 706, 707, 0, 665, 0, 725, 238, 239,
	240, 726, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 688, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 252, 253, 255, 388, 254,
	730, 256, 257, 259, 258, 0, 0, 655, 684, 260,
	708, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 731, 266, 732, 678, 267, 268, 269, 270,
	271, 272, 0, 273, 679, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 709, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 733, 296, 297, 1593, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	672, 311, 299, 300, 312, 734, 313, 710, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 711, 318,
	319, 680, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 712, 713, 0, 0, 331,
	332, 681, 682, 653, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 673, 341, 0, 407, 342, 343,
	344, 408, 714, 0, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 658, 647, 648, 645, 646,
	637, 0, 0, 1591, 0, 0, 0, 0, 1589, 1590,
	0, 187, 188, 0, 0, 189, 0, 1592, 0, 0,
	675, 640, 0, 636, 0, 190, 191, 192, 0, 690,
	354, 691, 193, 692, 693, 0, 194, 358, 359, 195,
	196, 643, 674, 694, 695, 362, 0, 197, 686, 0,
	666, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 720, 208, 209, 2566,
	0, 667, 668, 670, 0, 669, 671, 211, 212, 417,
	213, 696, 214, 697, 698, 628, 215, 0, 216, 0,
	217, 0, 0, 689, 219, 0, 220, 0, 0, 0,
	631, 221, 223, 222, 224, 676, 677, 654, 721, 0,
	0, 0, 0, 0, 225, 226, 699, 700, 701, 0,
	227, 0, 228, 0, 0, 722, 0, 229, 687, 0,
	374, 0, 0, 230, 231, 232, 233, 683, 685, 0,
	0, 377, 237, 0, 234, 0, 723, 235, 702, 236,
	703, 704, 705, 706, 707, 0, 665, 0, 0, 238,
	239, 240, 726, 385, 386, 241, 242, 243, 0, 245,
	244, 0, 688, 727, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 729, 252, 253, 255, 388,
	254, 730, 256, 257, 259, 258, 625, 0, 655, 684,
	260, 708, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 391, 731, 266, 732, 678, 267, 268, 269,
	270, 271, 272, 0, 273, 679, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 709, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 733, 296, 297, 632, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 309,
	310, 672, 311, 299, 300, 312, 0, 313, 710, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 711,
	318, 319, 680, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 712, 713, 0, 0,
	331, 332, 681, 682, 653, 333, 334, 2565, 336, 0,
	0, 337, 338, 339, 340, 673, 341, 0, 407, 342,
	343, 344, 408, 714, 0, 0, 345, 0, 0, 0,
	0, 346, 347, 348, 349, 350, 658, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	623, 0, 187, 188, 0, 0, 189, 0, 633, 0,
	0, 675, 0, 0, 636, 0, 190, 191, 192, 352,
	353, 354, 355, 193, 356, 357, 0, 194, 358, 359,
	195, 196, 0, 674, 360, 361, 362, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	417, 213, 364, 214, 365, 366, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 367, 221, 223, 222, 224, 676, 677, 0, 721,
	0, 0, 0, 0, 0, 225, 226, 370, 371, 372,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 374, 0, 0, 230, 231, 232, 233, 683, 685,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 378,
	236, 379, 380, 381, 382, 383, 0, 384, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	388, 254, 730, 256, 257, 259, 258, 0, 0, 0,
	684, 260, 390, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 681, 682, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 409, 0, 0, 345, 950, 0,
	790, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 351, 0, 0, 0, 2186,
	190, 191, 192, 352, 353, 354, 355, 193, 356, 357,
	0, 194, 358, 359, 195, 196, 0, 0, 360, 361,
	362, 0, 197, 363, 0, 794, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 417, 213, 364, 214, 365, 366,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 367, 221, 223, 222, 224,
	368, 369, 0, 721, 0, 0, 0, 0, 0, 225,
	226, 370, 371, 372, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 373, 0, 374, 0, 0, 230, 231,
	232, 233, 375, 376, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 378, 236, 379, 380, 381, 382, 383,
	0, 384, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 387, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 0, 0, 0, 389, 260, 390, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 392, 267, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	145, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 734, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	147, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 953, 409, 0,
	0, 345, 610, 0, 184, 139, 346, 347, 348, 349,
	350, 0, 140, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 351,
	0, 0, 0, 117, 190, 191, 192, 352, 353, 354,
	355, 193, 356, 357, 0, 194, 358, 359, 195, 196,
	0, 0, 360, 361, 362, 0, 197, 363, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 417, 213,
	364, 214, 365, 366, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 367,
	221, 223, 222, 224, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 370, 371, 372, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 373, 0, 374,
	0, 0, 230, 231, 232, 233, 375, 376, 0, 0,
	377, 237, 0, 234, 0, 0, 235, 378, 236, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 238, 239,
	240, 0, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 387, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 388, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 389, 260,
	390, 261, 262, 0, 263, 0, 773, 264, 0, 0,
	265, 391, 0, 266, 0, 392, 267, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 145, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 147, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 953, 409, 0, 0, 345, 0, 0, 184, 139,
	346, 347, 348, 349, 350, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 351, 0, 767, 0, 1222, 190, 191,
	192, 352, 353, 354, 355, 193, 356, 357, 0, 194,
	358, 359, 195, 196, 0, 0, 360, 361, 362, 0,
	197, 363, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 417, 213, 364, 214, 365, 366, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 367, 221, 223, 222, 224, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 370,
	371, 372, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 373, 0, 374, 0, 0, 230, 231, 232, 233,
	375, 376, 0, 0, 377, 237, 0, 234, 0, 0,
	235, 378, 236, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 238, 239, 240, 0, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 387, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 388, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 389, 260, 390, 261, 262, 0, 263, 0,
	773, 264, 0, 0, 265, 391, 0, 266, 0, 392,
	267, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 145, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 147, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 953, 409, 0, 0, 345,
	610, 0, 184, 139, 346, 347, 348, 349, 350, 0,
	140, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 351, 0, 767,
	0, 1222, 190, 191, 192, 352, 353, 354, 355, 193,
	356, 357, 0, 194, 358, 359, 195, 196, 0, 0,
	360, 361, 362, 0, 197, 363, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 417, 213, 364, 214,
	365, 366, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 367, 221, 223,
	222, 224, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 370, 371, 372, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 373, 0, 374, 0, 0,
	230, 231, 232, 233, 375, 376, 0, 0, 377, 237,
	0, 234, 0, 0, 235, 378, 236, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 238, 239, 240, 0,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 387,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 388, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 389, 260, 390, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	0, 266, 0, 392, 267, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 145, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 147, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 953,
	409, 0, 0, 345, 1928, 0, 184, 139, 346, 347,
	348, 349, 350, 0, 140, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 351, 0, 0, 0, 117, 190, 191, 192, 352,
	353, 354, 355, 193, 356, 357, 0, 194, 358, 359,
	195, 196, 0, 0, 360, 361, 362, 0, 197, 363,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	417, 213, 364, 214, 365, 366, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 367, 221, 223, 222, 224, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 370, 371, 372,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 373,
	0, 374, 0, 0, 230, 231, 232, 233, 375, 376,
	0, 0, 377, 237, 0, 234, 0, 0, 235, 378,
	236, 379, 380, 381, 382, 383, 0, 384, 0, 0,
	238, 239, 240, 0, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 387, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	388, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	389, 260, 390, 261, 262, 0, 263, 0, 773, 264,
	0, 0, 265, 391, 0, 266, 0, 392, 267, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 0, 0, 345, 766, 0,
	184, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 351, 0, 767, 0, 772,
	190, 191, 192, 352, 353, 354, 355, 193, 356, 357,
	0, 194, 358, 359, 195, 196, 0, 0, 360, 361,
	362, 0, 197, 363, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 417, 213, 364, 214, 365, 366,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 367, 221, 223, 222, 224,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 370, 371, 372, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 373, 0, 374, 0, 0, 230, 231,
	232, 233, 375, 376, 0, 0, 377, 237, 0, 234,
	0, 0, 235, 378, 236, 379, 380, 381, 382, 383,
	0, 384, 0, 0, 238, 239, 240, 0, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 387, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 388, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 389, 260, 390, 261, 262, 0,
	263, 0, 773, 264, 0, 0, 265, 391, 0, 266,
	0, 392, 267, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 0,
	0, 345, 0, 0, 184, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 351,
	0, 767, 0, 772, 190, 191, 192, 352, 353, 354,
	355, 193, 356, 357, 0, 194, 358, 359, 195, 196,
	0, 0, 360, 361, 362, 0, 197, 363, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 417, 213,
	364, 214, 365, 366, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 367,
	221, 223, 222, 224, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 370, 371, 372, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 373, 0, 374,
	0, 0, 230, 231, 232, 233, 375, 376, 0, 0,
	377, 237, 0, 234, 0, 0, 235, 378, 236, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 238, 239,
	240, 0, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 387, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 388, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 389, 260,
	390, 261, 262, 0, 263, 0, 773, 264, 0, 0,
	265, 391, 0, 266, 0, 392, 267, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 0, 0, 345, 0, 0, 184, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 351, 0, 767, 0, 772, 190, 191,
	192, 352, 353, 354, 355, 193, 356, 357, 0, 194,
	358, 359, 195, 196, 0, 0, 360, 361, 362, 0,
	197, 363, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 417, 213, 364, 214, 365, 366, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 367, 221, 223, 222, 224, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 370,
	371, 372, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 373, 0, 374, 0, 0, 230, 231, 232, 233,
	375, 376, 0, 0, 377, 237, 0, 234, 0, 0,
	235, 378, 236, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 238, 239, 240, 0, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 387, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 388, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 389, 260, 390, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 0, 266, 0, 392,
	267, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 0, 0, 345,
	0, 0, 0, 184, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 351, 0,
	0, 0, 1257, 190, 191, 192, 352, 353, 354, 355,
	193, 356, 357, 0, 194, 358, 359, 195, 196, 0,
	0, 360, 361, 362, 0, 197, 363, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 417, 213, 364,
	214, 365, 366, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 367, 221,
	223, 222, 224, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 370, 371, 372, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 373, 0, 374, 0,
	0, 230, 231, 232, 233, 375, 376, 0, 0, 377,
	237, 0, 234, 0, 0, 235, 378, 236, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 238, 239, 240,
	0, 385, 386, 241, 242, 243, 0, 245, 244, 0,
	387, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 388, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 389, 260, 390,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	391, 0, 266, 0, 392, 267, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 0, 0, 345, 0, 0, 184, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 351, 0, 0, 0, 1738, 190, 191, 192,
	352, 353, 354, 355, 193, 356, 357, 0, 194, 358,
	359, 195, 196, 0, 0, 360, 361, 362, 0, 197,
	363, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 417, 213, 364, 214, 365, 366, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 367, 221, 223, 222, 224, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 370, 371,
	372, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	373, 0, 374, 0, 0, 230, 231, 232, 233, 375,
	376, 0, 0, 377, 237, 0, 234, 0, 0, 235,
	378, 236, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 238, 239, 240, 0, 385, 386, 241, 242, 243,
	0, 245, 244, 0, 387, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 388, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 389, 260, 390, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 391, 0, 266, 0, 392, 267,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 0, 0, 345, 0,
	0, 184, 0, 346, 347, 348, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 351, 0, 0, 0,
	2102, 190, 191, 192, 352, 353, 354, 355, 193, 356,
	357, 0, 194, 358, 359, 195, 196, 0, 0, 360,
	361, 362, 0, 197, 363, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 417, 213, 364, 214, 365,
	366, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 367, 221, 223, 222,
	224, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 370, 371, 372, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 373, 0, 374, 0, 0, 230,
	231, 232, 233, 375, 376, 0, 0, 377, 237, 0,
	234, 0, 0, 235, 378, 236, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 238, 239, 240, 0, 385,
	386, 241, 242, 243, 0, 245, 244, 0, 387, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 0, 252, 253, 255, 388, 254, 0, 256, 257,
	259, 258, 0, 0, 0, 389, 260, 390, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 391, 0,
	266, 0, 392, 267, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 0, 345, 0, 0, 0, 0, 346, 347, 348,
	349, 350, 658, 647, 648, 645, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 1225, 0, 0, 351, 0, 0,
	0, 0, 190, 191, 192, 352, 690, 354, 691, 193,
	692, 693, 0, 194, 358, 359, 195, 196, 0, 0,
	694, 695, 362, 0, 197, 363, 0, 794, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 417, 213, 696, 214,
	697, 698, 0, 215, 0, 216, 0, 217, 0, 0,
	689, 219, 0, 220, 0, 0, 0, 367, 221, 223,
	222, 224, 368, 369, 654, 721, 0, 0, 0, 0,
	0, 225, 226, 699, 700, 701, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 373, 0, 374, 0, 0,
	230, 231, 232, 233, 375, 376, 724, 0, 377, 237,
	0, 234, 0, 723, 235, 702, 236, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 238, 239, 240, 726,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 387,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 729, 252, 253, 255, 388, 254, 730, 256,
	257, 259, 258, 0, 0, 655, 389, 260, 708, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	731, 266, 732, 392, 267, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 709, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 733, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 734, 313, 710, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 711, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 712, 713, 0, 0, 331, 332, 405,
	406, 653, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	714, 0, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 1006, 0, 790, 789, 0, 0, 0,
	787, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 190, 191, 192, 352, 353,
	354, 355, 193, 356, 357, 0, 194, 358, 359, 195,
	196, 0, 0, 360, 361, 362, 0, 197, 363, 0,
	794, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 720, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 417,
	213, 364, 214, 365, 366, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	367, 221, 223, 222, 224, 368, 369, 0, 721, 0,
	0, 0, 0, 0, 225, 226, 370, 371, 372, 0,
	227, 0, 228, 0, 0, 722, 0, 229, 373, 0,
	374, 0, 0, 230, 231, 232, 233, 375, 376, 724,
	0, 377, 237, 0, 234, 0, 723, 235, 378, 236,
	379, 380, 381, 382, 383, 0, 384, 0, 725, 238,
	239, 240, 726, 385, 386, 241, 242, 243, 0, 245,
	244, 0, 387, 727, 246, 247, 728, 0, 248, 249,
	0, 0, 250, 0, 251, 729, 252, 253, 255, 388,
	254, 730, 256, 257, 259, 258, 0, 0, 0, 389,
	260, 390, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 391, 731, 266, 732, 392, 267, 268, 269,
	270, 271, 272, 0, 273, 393, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 395, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 733, 296, 297, 396, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 309,
	310, 0, 311, 299, 300, 312, 734, 313, 398, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 400,
	318, 319, 401, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 403, 404, 0, 0,
	331, 332, 405, 406, 0, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 0, 407, 342,
	343, 344, 408, 409, 0, 0, 345, 0, 0, 0,
	0, 346, 347, 348, 349, 350, 945, 0, 790, 789,
	0, 0, 0, 787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 190, 191,
	192, 352, 353, 354, 355, 193, 356, 357, 0, 194,
	358, 359, 195, 196, 0, 0, 360, 361, 362, 0,
	197, 363, 0, 794, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 720,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 417, 213, 364, 214, 365, 366, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 367, 221, 223, 222, 224, 368, 369,
	0, 721, 0, 0, 0, 0, 0, 225, 226, 370,
	371, 372, 0, 227, 0, 228, 0, 0, 722, 0,
	229, 373, 0, 374, 0, 0, 230, 231, 232, 233,
	944, 376, 724, 0, 377, 237, 0, 234, 0, 723,
	235, 378, 236, 379, 380, 381, 382, 383, 0, 384,
	0, 725, 238, 239, 240, 726, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 387, 727, 246, 247, 728,
	0, 248, 249, 0, 0, 250, 0, 251, 729, 252,
	253, 255, 388, 254, 730, 256, 257, 259, 258, 0,
	0, 0, 389, 260, 390, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 731, 266, 732, 392,
	267, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 734,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 0, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 911,
	0, 790, 789, 0, 0, 0, 787, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 190, 191, 192, 352, 353, 354, 355, 193, 356,
	357, 0, 194, 358, 359, 195, 196, 0, 0, 360,
	361, 362, 0, 197, 363, 0, 794, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 720, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 417, 213, 364, 214, 365,
	366, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 367, 221, 223, 222,
	224, 368, 369, 0, 721, 0, 0, 0, 0, 0,
	225, 226, 370, 371, 372, 0, 227, 0, 228, 0,
	0, 722, 0, 229, 373, 0, 374, 0, 0, 230,
	231, 232, 233, 910, 376, 724, 0, 377, 237, 0,
	234, 0, 723, 235, 378, 236, 379, 380, 381, 382,
	383, 0, 384, 0, 725, 238, 239, 240, 726, 385,
	386, 241, 242, 243, 0, 245, 244, 0, 387, 727,
	246, 247, 728, 0, 248, 249, 0, 0, 250, 0,
	251, 729, 252, 253, 255, 388, 254, 730, 256, 257,
	259, 258, 0, 0, 0, 389, 260, 390, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 391, 731,
	266, 732, 392, 267, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	733, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 734, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 0, 345, 0, 0, 0, 0, 346, 347, 348,
	349, 350, 783, 0, 790, 789, 0, 0, 0, 787,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 190, 191, 192, 352, 353, 354,
	355, 193, 356, 357, 0, 194, 358, 359, 195, 196,
	0, 0, 360, 361, 362, 0, 197, 363, 0, 794,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 720, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 417, 213,
	364, 214, 365, 366, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 367,
	221, 223, 222, 224, 368, 369, 0, 721, 0, 0,
	0, 0, 0, 225, 226, 370, 371, 372, 0, 227,
	0, 228, 0, 0, 722, 0, 229, 373, 0, 374,
	0, 0, 230, 231, 232, 233, 785, 376, 724, 0,
	377, 237, 0, 234, 0, 723, 235, 378, 236, 379,
	380, 381, 382, 383, 0, 384, 0, 725, 238, 239,
	240, 726, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 387, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 252, 253, 255, 388, 254,
	730, 256, 257, 259, 258, 0, 0, 0, 389, 260,
	390, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 731, 266, 732, 392, 267, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 733, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 734, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 0, 500, 345, 184, 0, 0, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 190, 191, 192, 352,
	353, 354, 355, 193, 356, 357, 0, 194, 358, 359,
	195, 196, 0, 0, 360, 361, 362, 0, 197, 363,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	180, 213, 364, 214, 365, 366, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 367, 221, 223, 222, 224, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 370, 371, 372,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 373,
	0, 374, 0, 0, 230, 231, 232, 233, 375, 376,
	0, 0, 377, 237, 0, 234, 0, 0, 235, 378,
	236, 379, 380, 381, 382, 383, 0, 384, 0, 0,
	238, 239, 240, 0, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 387, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	388, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	389, 260, 390, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 0, 266, 0, 392, 267, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 179, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 0, 177, 345, 184, 0,
	0, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 183, 351, 0, 0, 0, 0, 190, 191,
	192, 352, 353, 354, 355, 193, 356, 357, 0, 194,
	358, 359, 195, 196, 0, 0, 360, 361, 362, 0,
	197, 363, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 180, 213, 364, 214, 365, 366, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 367, 221, 223, 222, 224, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 370,
	371, 372, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 373, 0, 374, 0, 0, 230, 231, 232, 233,
	375, 376, 0, 0, 377, 237, 0, 234, 0, 0,
	235, 378, 236, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 238, 239, 240, 0, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 387, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 388, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 389, 260, 390, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 0, 266, 0, 392,
	267, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 179, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 790, 789, 345,
	0, 0, 787, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 351, 0, 183, 0, 0, 190, 191, 192,
	352, 353, 354, 355, 193, 356, 357, 0, 194, 358,
	359, 195, 196, 0, 0, 360, 361, 362, 0, 197,
	363, 0, 794, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 720, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 417, 213, 364, 214, 365, 366, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 367, 221, 223, 222, 224, 368, 369, 0,
	721, 0, 0, 0, 0, 0, 225, 226, 370, 371,
	372, 0, 227, 0, 228, 0, 0, 722, 0, 229,
	373, 0, 374, 0, 0, 230, 231, 232, 233, 375,
	376, 724, 0, 377, 237, 0, 234, 0, 723, 235,
	378, 236, 379, 380, 381, 382, 383, 0, 384, 0,
	725, 238, 239, 240, 726, 385, 386, 241, 242, 243,
	0, 245, 244, 0, 387, 727, 246, 247, 728, 0,
	248, 249, 0, 0, 250, 0, 251, 729, 252, 253,
	255, 388, 254, 730, 256, 257, 259, 258, 0, 0,
	0, 389, 260, 390, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 391, 731, 266, 732, 392, 267,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 733, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 734, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 184, 0, 345, 0,
	0, 0, 0, 346, 347, 348, 349, 350, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 190, 191, 192, 352,
	353, 354, 355, 193, 356, 357, 0, 194, 358, 359,
	195, 196, 0, 0, 360, 361, 362, 0, 197, 363,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	180, 213, 364, 214, 365, 366, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 367, 221, 223, 222, 224, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 370, 371, 372,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 373,
	0, 374, 0, 0, 230, 231, 232, 233, 375, 376,
	0, 0, 377, 237, 0, 234, 0, 0, 235, 378,
	236, 379, 380, 381, 382, 383, 0, 384, 0, 0,
	238, 239, 240, 0, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 387, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	388, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	389, 260, 390, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 0, 266, 0, 392, 267, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 179, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 790, 789, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	351, 0, 183, 0, 0, 190, 191, 192, 352, 353,
	354, 355, 193, 356, 357, 0, 194, 358, 359, 195,
	196, 0, 0, 360, 361, 362, 0, 197, 363, 0,
	794, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 720, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 417,
	213, 364, 214, 365, 366, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	367, 221, 223, 222, 224, 368, 369, 0, 721, 0,
	0, 0, 0, 0, 225, 226, 370, 371, 372, 0,
	227, 0, 228, 0, 0, 722, 0, 229, 373, 0,
	374, 0, 0, 230, 231, 232, 233, 375, 376, 724,
	0, 377, 237, 0, 234, 0, 723, 235, 378, 236,
	379, 380, 381, 382, 383, 0, 384, 0, 725, 238,
	239, 240, 726, 385, 386, 241, 242, 243, 0, 245,
	244, 0, 387, 727, 246, 247, 728, 0, 248, 249,
	0, 0, 250, 0, 251, 729, 252, 253, 255, 388,
	254, 730, 256, 257, 259, 258, 0, 0, 0, 389,
	260, 390, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 391, 731, 266, 732, 392, 267, 268, 269,
	270, 271, 272, 0, 273, 393, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 395, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 733, 296, 297, 396, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 309,
	310, 0, 311, 299, 300, 312, 734, 313, 398, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 400,
	318, 319, 401, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 403, 404, 0, 0,
	331, 332, 405, 406, 0, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 0, 407, 342,
	343, 344, 408, 409, 184, 0, 345, 0, 0, 0,
	0, 346, 347, 348, 349, 350, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 190, 191, 192, 352, 353, 354,
	355, 193, 356, 357, 0, 194, 358, 359, 195, 196,
	0, 0, 360, 361, 362, 0, 197, 363, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 417, 213,
	364, 214, 365, 366, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 367,
	221, 223, 222, 224, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 370, 371, 372, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 373, 0, 374,
	0, 0, 230, 231, 232, 233, 375, 376, 0, 0,
	377, 237, 0, 234, 0, 0, 235, 378, 236, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 238, 239,
	240, 0, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 387, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 388, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 389, 260,
	390, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 0, 266, 0, 392, 267, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 790, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 351, 0,
	183, 0, 0, 190, 191, 192, 352, 353, 354, 355,
	193, 356, 357, 0, 194, 358, 359, 195, 196, 0,
	0, 360, 361, 362, 0, 197, 363, 0, 794, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 720, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 417, 213, 364,
	214, 365, 366, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 367, 221,
	223, 222, 224, 368, 369, 0, 721, 0, 0, 0,
	0, 0, 225, 226, 370, 371, 372, 0, 227, 0,
	228, 0, 0, 722, 0, 229, 373, 0, 374, 0,
	0, 230, 231, 232, 233, 375, 376, 724, 0, 377,
	237, 0, 234, 0, 723, 235, 378, 236, 379, 380,
	381, 382, 383, 0, 384, 0, 725, 238, 239, 240,
	726, 385, 386, 241, 242, 243, 0, 245, 244, 0,
	387, 727, 246, 247, 728, 0, 248, 249, 0, 0,
	250, 0, 251, 729, 252, 253, 255, 388, 254, 730,
	256, 257, 259, 258, 0, 0, 0, 389, 260, 390,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	391, 731, 266, 732, 392, 267, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 733, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 734, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 184, 0, 345, 0, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 190, 191, 192, 352, 353, 354, 355, 193,
	356, 357, 0, 194, 358, 359, 195, 196, 0, 0,
	360, 361, 362, 1670, 197, 363, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 1668, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 417, 213, 364, 214,
	365, 366, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 367, 221, 223,
	222, 224, 368, 369, 0, 1714, 0, 0, 0, 0,
	0, 225, 226, 370, 371, 372, 0, 227, 0, 228,
	1673, 0, 0, 0, 229, 373, 0, 374, 0, 0,
	230, 231, 232, 233, 375, 376, 0, 0, 377, 237,
	1712, 234, 0, 0, 235, 378, 236, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 238, 239, 240, 0,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 387,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 388, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 389, 260, 390, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	0, 266, 0, 392, 267, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 1672, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 1713, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 184, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 190, 191, 192, 352, 353, 354, 355, 193, 356,
	357, 0, 194, 358, 359, 195, 196, 0, 0, 360,
	361, 362, 1670, 197, 363, 0, 0, 1665, 198, 199,
	200, 0, 202, 203, 204, 201, 1668, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 417, 213, 364, 214, 365,
	366, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 367, 221, 223, 222,
	224, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 370, 371, 372, 0, 227, 0, 228, 1673,
	0, 0, 0, 229, 373, 0, 374, 0, 0, 230,
	231, 232, 233, 1664, 376, 0, 0, 377, 237, 0,
	234, 0, 0, 235, 378, 236, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 238, 239, 240, 0, 385,
	386, 241, 242, 243, 0, 245, 244, 0, 387, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 0, 252, 253, 255, 388, 254, 0, 256, 257,
	259, 258, 0, 0, 0, 389, 260, 390, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 391, 0,
	266, 0, 392, 267, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 1672, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 1671, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 927, 345, 184, 0, 0, 0, 346, 347, 348,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 190, 191, 192, 352, 353, 354, 355,
	193, 356, 357, 0, 194, 358, 359, 195, 196, 0,
	0, 360, 361, 362, 0, 197, 363, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 417, 213, 364,
	214, 365, 366, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 367, 221,
	223, 222, 224, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 370, 371, 372, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 373, 0, 374, 0,
	0, 230, 231, 232, 233, 375, 376, 0, 0, 377,
	237, 0, 234, 0, 0, 235, 378, 236, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 238, 239, 240,
	0, 385, 386, 241, 242, 243, 0, 245, 244, 0,
	387, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 388, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 389, 260, 390,
	261, 262, 0, 263, 0, 773, 264, 0, 0, 265,
	391, 0, 266, 0, 392, 267, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 0, 779, 345, 184, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 190, 191, 192, 352, 353,
	354, 355, 193, 356, 357, 0, 194, 358, 359, 195,
	196, 0, 0, 360, 361, 362, 0, 197, 363, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 417,
	213, 364, 214, 365, 366, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	367, 221, 223, 222, 224, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 370, 371, 372, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 373, 0,
	374, 0, 0, 230, 231, 232, 233, 781, 376, 0,
	0, 377, 237, 0, 234, 0, 0, 235, 378, 236,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 238,
	239, 240, 0, 385, 386, 241, 242, 243, 0, 245,
	244, 0, 387, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 388,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 389,
	260, 390, 261, 262, 0, 263, 0, 773, 264, 0,
	0, 265, 391, 0, 266, 0, 392, 267, 268, 269,
	270, 271, 272, 0, 273, 393, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 395, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 396, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 398, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 400,
	318, 319, 401, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 403, 404, 0, 0,
	331, 332, 405, 406, 0, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 0, 407, 342,
	343, 344, 408, 409, 0, 775, 345, 184, 0, 0,
	0, 346, 347, 348, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 190, 191, 192,
	352, 353, 354, 355, 193, 356, 357, 0, 194, 358,
	359, 195, 196, 0, 0, 360, 361, 362, 0, 197,
	363, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 417, 213, 364, 214, 365, 366, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 367, 221, 223, 222, 224, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 370, 371,
	372, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	373, 0, 374, 0, 0, 230, 231, 232, 233, 777,
	376, 0, 0, 377, 237, 0, 234, 0, 0, 235,
	378, 236, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 238, 239, 240, 0, 385, 386, 241, 242, 243,
	0, 245, 244, 0, 387, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 388, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 389, 260, 390, 261, 262, 0, 263, 0, 773,
	264, 0, 0, 265, 391, 0, 266, 0, 392, 267,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 0, 429, 345, 184,
	0, 0, 0, 346, 347, 348, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 428, 0, 189,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 190,
	191, 192, 352, 353, 354, 355, 193, 356, 357, 0,
	194, 358, 359, 195, 196, 0, 0, 360, 361, 362,
	0, 197, 363, 0, 0, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	0, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 417, 213, 364, 214, 365, 366, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 367, 221, 223, 222, 224, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	370, 371, 372, 0, 227, 0, 228, 0, 0, 0,
	0, 229, 373, 0, 374, 0, 0, 230, 231, 232,
	233, 375, 376, 0, 0, 377, 237, 0, 234, 0,
	0, 235, 378, 236, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 238, 239, 240, 0, 385, 386, 241,
	242, 243, 0, 245, 244, 0, 387, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 388, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 389, 260, 390, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 391, 0, 266, 0,
	392, 267, 268, 269, 270, 271, 272, 0, 273, 393,
	274, 394, 427, 0, 276, 277, 278, 279, 280, 395,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 398, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	403, 404, 0, 0, 331, 332, 405, 406, 0, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 0, 407, 342, 343, 344, 408, 409, 184, 0,
	345, 0, 0, 0, 0, 346, 347, 348, 349, 350,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 351, 0, 1653, 0, 0, 190, 191,
	192, 352, 353, 354, 355, 193, 356, 357, 0, 194,
	358, 359, 195, 196, 0, 0, 360, 361, 362, 0,
	197, 363, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 417, 213, 364, 214, 365, 366, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 367, 221, 223, 222, 224, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 370,
	371, 372, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 373, 0, 374, 0, 0, 230, 231, 232, 233,
	375, 376, 0, 0, 377, 237, 0, 234, 0, 0,
	235, 378, 236, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 238, 239, 240, 0, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 387, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 388, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 389, 260, 390, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 0, 266, 0, 392,
	267, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 184, 2254, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 190, 191, 192,
	352, 353, 354, 355, 193, 356, 357, 0, 194, 358,
	359, 195, 196, 0, 0, 360, 361, 362, 0, 197,
	363, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 417, 213, 364, 214, 365, 366, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 367, 221, 223, 222, 224, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 370, 371,
	372, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	373, 0, 374, 0, 0, 230, 231, 232, 233, 375,
	376, 0, 0, 377, 237, 0, 234, 0, 0, 235,
	378, 236, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 238, 239, 240, 0, 385, 386, 241, 242, 243,
	0, 245, 244, 0, 387, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 388, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 389, 260, 390, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 391, 0, 266, 0, 392, 267,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 184, 2254, 345, 0,
	0, 0, 0, 346, 347, 348, 349, 350, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 190, 191, 192, 352,
	353, 354, 355, 193, 356, 357, 0, 194, 358, 359,
	195, 196, 0, 0, 360, 361, 362, 0, 197, 363,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	417, 213, 364, 214, 365, 366, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 367, 221, 223, 222, 224, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 370, 371, 372,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 373,
	0, 374, 0, 0, 230, 231, 232, 233, 375, 376,
	0, 0, 377, 237, 0, 234, 0, 0, 235, 378,
	236, 379, 380, 381, 382, 383, 0, 384, 0, 0,
	238, 239, 240, 0, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 387, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	388, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	389, 260, 390, 261, 262, 0, 263, 0, 0, 2251,
	0, 0, 265, 391, 0, 266, 0, 392, 267, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 184, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 190, 191, 192, 352, 353,
	354, 355, 193, 356, 357, 0, 194, 358, 359, 195,
	196, 0, 0, 360, 361, 362, 0, 197, 363, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 417,
	213, 364, 214, 365, 366, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	367, 221, 223, 222, 224, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 370, 371, 372, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 373, 0,
	374, 0, 0, 230, 231, 232, 233, 375, 376, 0,
	0, 377, 237, 0, 234, 0, 0, 235, 378, 236,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 238,
	239, 240, 0, 385, 386, 241, 242, 243, 0, 245,
	244, 0, 387, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 388,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 389,
	260, 390, 261, 262, 0, 263, 0, 773, 264, 0,
	0, 265, 391, 0, 266, 0, 392, 267, 268, 269,
	270, 271, 272, 0, 273, 393, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 395, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 396, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 398, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 400,
	318, 319, 401, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 403, 404, 0, 0,
	331, 332, 405, 406, 0, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 0, 407, 342,
	343, 344, 408, 409, 0, 1415, 345, 184, 0, 0,
	0, 346, 347, 348, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 190, 191, 192,
	352, 353, 354, 355, 193, 356, 357, 0, 194, 358,
	359, 195, 196, 0, 0, 360, 361, 362, 0, 197,
	363, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 417, 213, 364, 214, 365, 366, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 367, 221, 223, 222, 224, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 370, 371,
	372, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	373, 0, 374, 0, 0, 230, 231, 232, 233, 375,
	376, 0, 0, 377, 237, 0, 234, 0, 0, 235,
	378, 236, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 238, 239, 240, 0, 385, 386, 241, 242, 243,
	0, 245, 244, 0, 387, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 388, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 389, 260, 390, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 391, 0, 266, 0, 392, 267,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 0, 1413, 345, 184,
	0, 0, 0, 346, 347, 348, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 0, 0, 189,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 190,
	191, 192, 352, 353, 354, 355, 193, 356, 357, 0,
	194, 358, 359, 195, 196, 0, 0, 360, 361, 362,
	0, 197, 363, 0, 0, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	0, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 417, 213, 364, 214, 365, 366, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 367, 221, 223, 222, 224, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	370, 371, 372, 0, 227, 0, 228, 0, 0, 0,
	0, 229, 373, 0, 374, 0, 0, 230, 231, 232,
	233, 375, 376, 0, 0, 377, 237, 0, 234, 0,
	0, 235, 378, 236, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 238, 239, 240, 0, 385, 386, 241,
	242, 243, 0, 245, 244, 0, 387, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 388, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 389, 260, 390, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 391, 0, 266, 0,
	392, 267, 268, 269, 270, 271, 272, 0, 273, 393,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 395,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 398, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	403, 404, 0, 0, 331, 332, 405, 406, 0, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 0, 407, 342, 343, 344, 408, 409, 184, 0,
	345, 0, 0, 0, 0, 346, 347, 348, 349, 350,
	0, 0, 0, 0, 187, 188, 1395, 0, 189, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 190, 191,
	192, 352, 353, 354, 355, 193, 356, 357, 0, 194,
	358, 359, 195, 196, 0, 0, 360, 361, 362, 0,
	197, 363, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 417, 213, 364, 214, 365, 366, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 367, 221, 223, 222, 224, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 370,
	371, 372, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 373, 0, 374, 0, 0, 230, 231, 232, 233,
	375, 376, 0, 0, 377, 237, 0, 234, 0, 0,
	235, 378, 236, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 238, 239, 240, 0, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 387, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 388, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 389, 260, 390, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 0, 266, 0, 392,
	267, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 0, 526, 345,
	184, 0, 0, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 351, 0, 0, 0, 0,
	190, 191, 192, 352, 353, 354, 355, 193, 356, 357,
	0, 194, 358, 359, 195, 196, 0, 0, 360, 361,
	985, 0, 197, 363, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 417, 213, 364, 214, 365, 366,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 367, 221, 223, 222, 224,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 370, 371, 372, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 373, 0, 374, 0, 0, 230, 231,
	232, 233, 375, 376, 0, 0, 377, 237, 0, 234,
	0, 0, 235, 378, 236, 379, 380, 381, 382, 383,
	0, 384, 0, 0, 238, 239, 240, 0, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 387, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 388, 528, 0, 256, 257, 259,
	258, 0, 0, 0, 389, 260, 390, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 0, 266,
	0, 392, 267, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	523, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 0,
	1272, 345, 184, 0, 0, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 190, 191, 192, 352, 353, 354, 355, 193,
	356, 357, 0, 194, 358, 359, 195, 196, 0, 0,
	360, 361, 362, 0, 197, 363, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 417, 213, 364, 214,
	365, 366, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 367, 221, 223,
	222, 224, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 370, 371, 372, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 373, 0, 374, 0, 0,
	230, 231, 232, 233, 1271, 376, 0, 0, 377, 237,
	0, 234, 0, 0, 235, 378, 236, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 238, 239, 240, 0,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 387,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 388, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 389, 260, 390, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	0, 266, 0, 392, 267, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 0, 526, 345, 184, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 190, 191, 192, 352, 353, 354,
	355, 193, 356, 357, 0, 194, 358, 359, 195, 196,
	0, 0, 360, 361, 985, 0, 197, 363, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 417, 213,
	364, 214, 365, 366, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 367,
	221, 223, 222, 224, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 370, 371, 372, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 373, 0, 374,
	0, 0, 230, 231, 232, 233, 375, 376, 0, 0,
	377, 237, 0, 234, 0, 0, 235, 378, 236, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 238, 239,
	240, 0, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 387, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 388, 528,
	0, 256, 257, 259, 258, 0, 0, 0, 389, 260,
	390, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 0, 266, 0, 392, 267, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 523, 403, 404, 0, 0, 331,
	986, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 0, 526, 345, 184, 0, 0, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 190, 191, 192, 352,
	353, 354, 355, 193, 356, 357, 0, 194, 358, 359,
	195, 196, 0, 0, 360, 361, 362, 0, 517, 363,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	417, 213, 364, 214, 365, 366, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 367, 221, 223, 222, 224, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 370, 371, 372,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 373,
	0, 374, 0, 0, 230, 231, 232, 233, 375, 376,
	0, 0, 377, 237, 0, 234, 0, 0, 235, 378,
	236, 379, 380, 381, 382, 383, 0, 384, 0, 0,
	238, 239, 240, 0, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 387, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	388, 528, 0, 256, 257, 259, 258, 0, 0, 0,
	389, 260, 390, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 0, 266, 0, 392, 267, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	969, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 523, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 0, 942, 345, 184, 0,
	0, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 190, 191,
	192, 352, 353, 354, 355, 193, 356, 357, 0, 194,
	358, 359, 195, 196, 0, 0, 360, 361, 362, 0,
	197, 363, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 417, 213, 364, 214, 365, 366, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 367, 221, 223, 222, 224, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 370,
	371, 372, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 373, 0, 374, 0, 0, 230, 231, 232, 233,
	941, 376, 0, 0, 377, 237, 0, 234, 0, 0,
	235, 378, 236, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 238, 239, 240, 0, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 387, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 388, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 389, 260, 390, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 0, 266, 0, 392,
	267, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 0, 938, 345,
	184, 0, 0, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 351, 0, 0, 0, 0,
	190, 191, 192, 352, 353, 354, 355, 193, 356, 357,
	0, 194, 358, 359, 195, 196, 0, 0, 360, 361,
	362, 0, 197, 363, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 417, 213, 364, 214, 365, 366,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 367, 221, 223, 222, 224,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 370, 371, 372, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 373, 0, 374, 0, 0, 230, 231,
	232, 233, 937, 376, 0, 0, 377, 237, 0, 234,
	0, 0, 235, 378, 236, 379, 380, 381, 382, 383,
	0, 384, 0, 0, 238, 239, 240, 0, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 387, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 388, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 389, 260, 390, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 0, 266,
	0, 392, 267, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 0,
	935, 345, 184, 0, 0, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 190, 191, 192, 352, 353, 354, 355, 193,
	356, 357, 0, 194, 358, 359, 195, 196, 0, 0,
	360, 361, 362, 0, 197, 363, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 417, 213, 364, 214,
	365, 366, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 367, 221, 223,
	222, 224, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 370, 371, 372, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 373, 0, 374, 0, 0,
	230, 231, 232, 233, 934, 376, 0, 0, 377, 237,
	0, 234, 0, 0, 235, 378, 236, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 238, 239, 240, 0,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 387,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 388, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 389, 260, 390, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	0, 266, 0, 392, 267, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 0, 931, 345, 184, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 190, 191, 192, 352, 353, 354,
	355, 193, 356, 357, 0, 194, 358, 359, 195, 196,
	0, 0, 360, 361, 362, 0, 197, 363, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 417, 213,
	364, 214, 365, 366, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 367,
	221, 223, 222, 224, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 370, 371, 372, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 373, 0, 374,
	0, 0, 230, 231, 232, 233, 930, 376, 0, 0,
	377, 237, 0, 234, 0, 0, 235, 378, 236, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 238, 239,
	240, 0, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 387, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 388, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 389, 260,
	390, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 0, 266, 0, 392, 267, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 184, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 187,
	188, 919, 0, 189, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 190, 191, 192, 352, 353, 354, 355,
	193, 356, 357, 0, 194, 358, 359, 195, 196, 0,
	0, 360, 361, 362, 0, 197, 363, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 417, 213, 364,
	214, 365, 366, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 367, 221,
	223, 222, 224, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 370, 371, 372, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 373, 0, 374, 0,
	0, 230, 231, 232, 233, 375, 376, 0, 0, 377,
	237, 0, 234, 0, 0, 235, 378, 236, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 238, 239, 240,
	0, 385, 386, 241, 242, 243, 0, 245, 244, 0,
	387, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 388, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 389, 260, 390,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	391, 0, 266, 0, 392, 267, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 0, 917, 345, 184, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 190, 191, 192, 352, 353,
	354, 355, 193, 356, 357, 0, 194, 358, 359, 195,
	196, 0, 0, 360, 361, 362, 0, 197, 363, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 417,
	213, 364, 214, 365, 366, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	367, 221, 223, 222, 224, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 370, 371, 372, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 373, 0,
	374, 0, 0, 230, 231, 232, 233, 916, 376, 0,
	0, 377, 237, 0, 234, 0, 0, 235, 378, 236,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 238,
	239, 240, 0, 385, 386, 241, 242, 243, 0, 245,
	244, 0, 387, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 388,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 389,
	260, 390, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 391, 0, 266, 0, 392, 267, 268, 269,
	270, 271, 272, 0, 273, 393, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 395, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 396, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 398, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 400,
	318, 319, 401, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 403, 404, 0, 0,
	331, 332, 405, 406, 0, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 0, 407, 342,
	343, 344, 408, 409, 0, 913, 345, 184, 0, 0,
	0, 346, 347, 348, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 190, 191, 192,
	352, 353, 354, 355, 193, 356, 357, 0, 194, 358,
	359, 195, 196, 0, 0, 360, 361, 362, 0, 197,
	363, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 417, 213, 364, 214, 365, 366, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 367, 221, 223, 222, 224, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 370, 371,
	372, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	373, 0, 374, 0, 0, 230, 231, 232, 233, 375,
	376, 0, 0, 377, 237, 0, 234, 0, 0, 235,
	378, 236, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 238, 239, 240, 0, 385, 386, 241, 242, 243,
	0, 245, 244, 0, 387, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 388, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 389, 260, 390, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 391, 0, 266, 0, 392, 267,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 0, 906, 345, 184,
	0, 0, 0, 346, 347, 348, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 0, 0, 189,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 190,
	191, 192, 352, 353, 354, 355, 193, 356, 357, 0,
	194, 358, 359, 195, 196, 0, 0, 360, 361, 362,
	0, 197, 363, 0, 0, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	0, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 417, 213, 364, 214, 365, 366, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 367, 221, 223, 222, 224, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	370, 371, 372, 0, 227, 0, 228, 0, 0, 0,
	0, 229, 373, 0, 374, 0, 0, 230, 231, 232,
	233, 908, 376, 0, 0, 377, 237, 0, 234, 0,
	0, 235, 378, 236, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 238, 239, 240, 0, 385, 386, 241,
	242, 243, 0, 245, 244, 0, 387, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 388, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 389, 260, 390, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 391, 0, 266, 0,
	392, 267, 268, 269, 270, 271, 272, 0, 273, 393,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 395,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 398, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	403, 404, 0, 0, 331, 332, 405, 406, 0, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 0, 407, 342, 343, 344, 408, 409, 0, 797,
	345, 184, 0, 0, 0, 346, 347, 348, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 190, 191, 192, 352, 353, 354, 355, 193, 356,
	357, 0, 194, 358, 359, 195, 196, 0, 0, 360,
	361, 362, 0, 197, 363, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 417, 213, 364, 214, 365,
	366, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 367, 221, 223, 222,
	224, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 370, 371, 372, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 373, 0, 374, 0, 0, 230,
	231, 232, 233, 799, 376, 0, 0, 377, 237, 0,
	234, 0, 0, 235, 378, 236, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 238, 239, 240, 0, 385,
	386, 241, 242, 243, 0, 245, 244, 0, 387, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 0, 252, 253, 255, 388, 254, 0, 256, 257,
	259, 258, 0, 0, 0, 389, 260, 390, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 391, 0,
	266, 0, 392, 267, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 795, 345, 184, 0, 0, 0, 346, 347, 348,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 190, 191, 192, 352, 353, 354, 355,
	193, 356, 357, 0, 194, 358, 359, 195, 196, 0,
	0, 360, 361, 362, 0, 197, 363, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 417, 213, 364,
	214, 365, 366, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 367, 221,
	223, 222, 224, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 370, 371, 372, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 373, 0, 374, 0,
	0, 230, 231, 232, 233, 375, 376, 0, 0, 377,
	237, 0, 234, 0, 0, 235, 378, 236, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 238, 239, 240,
	0, 385, 386, 241, 242, 243, 0, 245, 244, 0,
	387, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 388, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 389, 260, 390,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	391, 0, 266, 0, 392, 267, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 0, 526, 345, 184, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 190, 191, 192, 352, 353,
	354, 355, 193, 356, 357, 0, 194, 358, 359, 195,
	196, 0, 0, 360, 361, 362, 0, 517, 363, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 417,
	213, 364, 214, 365, 366, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	367, 221, 223, 222, 224, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 370, 371, 372, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 373, 0,
	374, 0, 0, 230, 231, 232, 233, 375, 376, 0,
	0, 377, 237, 0, 234, 0, 0, 235, 378, 236,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 238,
	239, 240, 0, 385, 386, 241, 242, 243, 0, 245,
	244, 0, 387, 0, 246, 247, 0, 0, 248, 516,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 388,
	528, 0, 256, 257, 259, 258, 0, 0, 0, 389,
	260, 390, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 391, 0, 266, 0, 392, 267, 268, 269,
	270, 271, 272, 0, 273, 393, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 395, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 518, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 519,
	310, 0, 311, 299, 300, 312, 0, 313, 398, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 400,
	318, 319, 401, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 523, 403, 404, 0, 0,
	331, 521, 405, 406, 0, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 0, 407, 342,
	343, 344, 408, 409, 0, 508, 345, 184, 0, 0,
	0, 346, 347, 348, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 190, 191, 192,
	352, 353, 354, 355, 193, 356, 357, 0, 194, 358,
	359, 195, 196, 0, 0, 360, 361, 362, 0, 197,
	363, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 417, 213, 364, 214, 365, 366, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 367, 221, 223, 222, 224, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 370, 371,
	372, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	373, 0, 374, 0, 0, 230, 231, 232, 233, 375,
	376, 0, 0, 377, 237, 0, 234, 0, 0, 235,
	378, 236, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 238, 239, 240, 0, 385, 386, 241, 242, 243,
	0, 245, 244, 0, 387, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 388, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 389, 260, 390, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 391, 0, 266, 0, 392, 267,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 396,
	298, 0, 509, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 0, 506, 345, 184,
	0, 0, 0, 346, 347, 348, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 0, 0, 189,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 190,
	191, 192, 352, 353, 354, 355, 193, 356, 357, 0,
	194, 358, 359, 195, 196, 0, 0, 360, 361, 362,
	0, 197, 363, 0, 0, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	0, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 417, 213, 364, 214, 365, 366, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 367, 221, 223, 222, 224, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	370, 371, 372, 0, 227, 0, 228, 0, 0, 0,
	0, 229, 373, 0, 374, 0, 0, 230, 231, 232,
	233, 375, 376, 0, 0, 377, 237, 0, 234, 0,
	0, 235, 378, 236, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 238, 239, 240, 0, 385, 386, 241,
	242, 243, 0, 245, 244, 0, 387, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 388, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 389, 260, 390, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 391, 0, 266, 0,
	392, 267, 268, 269, 270, 271, 272, 0, 273, 393,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 395,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 398, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	403, 404, 0, 0, 331, 332, 405, 406, 0, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 0, 407, 342, 343, 344, 408, 409, 0, 498,
	345, 184, 0, 0, 0, 346, 347, 348, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 190, 191, 192, 352, 353, 354, 355, 193, 356,
	357, 0, 194, 358, 359, 195, 196, 0, 0, 360,
	361, 362, 0, 197, 363, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 417, 213, 364, 214, 365,
	366, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 367, 221, 223, 222,
	224, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 370, 371, 372, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 373, 0, 374, 0, 0, 230,
	231, 232, 233, 375, 376, 0, 0, 377, 237, 0,
	234, 0, 0, 235, 378, 236, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 238, 239, 240, 0, 385,
	386, 241, 242, 243, 0, 245, 244, 0, 387, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 0, 252, 253, 255, 388, 254, 0, 256, 257,
	259, 258, 0, 0, 0, 389, 260, 390, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 391, 0,
	266, 0, 392, 267, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 448, 345, 184, 0, 0, 0, 346, 347, 348,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 190, 191, 192, 352, 353, 354, 355,
	193, 356, 357, 0, 194, 358, 359, 195, 196, 0,
	0, 360, 361, 362, 0, 197, 363, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 417, 213, 364,
	214, 365, 366, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 367, 221,
	223, 222, 224, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 370, 371, 372, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 373, 0, 374, 0,
	0, 230, 231, 232, 233, 375, 376, 0, 0, 377,
	237, 0, 234, 0, 0, 235, 378, 236, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 238, 239, 240,
	0, 385, 386, 241, 242, 243, 0, 245, 244, 0,
	387, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 388, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 389, 260, 390,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	391, 0, 266, 0, 392, 267, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 184, 0, 345, 0, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 190, 191, 192, 352, 353, 354, 355, 193,
	356, 357, 0, 194, 358, 359, 195, 196, 0, 0,
	360, 361, 362, 0, 197, 363, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 417, 213, 364, 214,
	365, 366, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 367, 221, 223,
	222, 224, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 370, 371, 372, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 373, 0, 374, 0, 0,
	230, 231, 232, 233, 375, 376, 0, 0, 377, 237,
	0, 234, 0, 0, 235, 378, 236, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 238, 239, 240, 0,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 387,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 388, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 389, 260, 390, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	0, 266, 0, 392, 267, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 184, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 190, 191, 192, 352, 353, 354, 355, 193, 356,
	357, 0, 194, 358, 359, 195, 196, 0, 0, 360,
	361, 362, 0, 197, 363, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 417, 213, 364, 214, 365,
	366, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 367, 221, 223, 222,
	224, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 370, 371, 372, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 373, 0, 374, 0, 0, 230,
	231, 232, 233, 1975, 376, 0, 0, 377, 237, 0,
	234, 0, 0, 235, 378, 236, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 238, 239, 240, 0, 385,
	386, 241, 242, 243, 0, 245, 244, 0, 387, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 0, 252, 253, 255, 388, 254, 0, 256, 257,
	259, 258, 0, 0, 0, 389, 260, 390, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 391, 0,
	266, 0, 392, 267, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	184, 0, 345, 0, 0, 0, 0, 346, 347, 348,
	349, 350, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 351, 0, 0, 0, 0,
	190, 191, 192, 352, 353, 354, 355, 193, 356, 357,
	0, 194, 358, 359, 195, 196, 0, 0, 360, 361,
	362, 0, 197, 363, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 417, 213, 364, 214, 365, 366,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 367, 221, 223, 222, 224,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 370, 371, 372, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 373, 0, 374, 0, 0, 230, 231,
	232, 233, 1973, 376, 0, 0, 377, 237, 0, 234,
	0, 0, 235, 378, 236, 379, 380, 381, 382, 383,
	0, 384, 0, 0, 238, 239, 240, 0, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 387, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 388, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 389, 260, 390, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 0, 266,
	0, 392, 267, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 184,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 187, 188, 0, 0, 189,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 190,
	191, 192, 352, 353, 354, 355, 193, 356, 357, 0,
	194, 358, 359, 195, 196, 0, 0, 360, 361, 362,
	0, 197, 363, 0, 0, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	0, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 417, 213, 364, 214, 365, 366, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 367, 221, 223, 222, 224, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	370, 371, 372, 0, 227, 0, 228, 0, 0, 0,
	0, 229, 373, 0, 374, 0, 0, 230, 231, 232,
	233, 1962, 376, 0, 0, 377, 237, 0, 234, 0,
	0, 235, 378, 236, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 238, 239, 240, 0, 385, 386, 241,
	242, 243, 0, 245, 244, 0, 387, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 388, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 389, 260, 390, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 391, 0, 266, 0,
	392, 267, 268, 269, 270, 271, 272, 0, 273, 393,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 395,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 398, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	403, 404, 0, 0, 331, 332, 405, 406, 0, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 0, 407, 342, 343, 344, 408, 409, 184, 0,
	345, 0, 0, 0, 0, 346, 347, 348, 349, 350,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 190, 191,
	192, 352, 353, 354, 355, 193, 356, 357, 0, 194,
	358, 359, 195, 196, 0, 0, 360, 361, 362, 0,
	197, 363, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 417, 213, 364, 214, 365, 366, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 367, 221, 223, 222, 224, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 370,
	371, 372, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 373, 0, 374, 0, 0, 230, 231, 232, 233,
	375, 376, 0, 0, 377, 237, 0, 234, 0, 0,
	235, 378, 236, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 238, 239, 240, 0, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 387, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 388, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 389, 260, 390, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 0, 266, 0, 392,
	267, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 509, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 184, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 351, 0, 1282, 0, 0, 190, 191, 192,
	352, 353, 354, 355, 193, 356, 357, 0, 194, 358,
	359, 195, 196, 0, 0, 360, 361, 362, 0, 197,
	363, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 417, 213, 364, 214, 365, 366, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 367, 221, 223, 222, 224, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 370, 371,
	372, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	373, 0, 374, 0, 0, 230, 231, 232, 233, 375,
	376, 0, 0, 377, 237, 0, 234, 0, 0, 235,
	378, 236, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 238, 239, 240, 0, 385, 386, 241, 242, 243,
	0, 245, 244, 0, 387, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 388, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 389, 260, 390, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 391, 0, 266, 0, 392, 267,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 0, 299, 300, 312, 0, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 184, 0, 345, 0,
	0, 0, 0, 346, 347, 348, 349, 350, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 190, 191, 192, 352,
	353, 354, 355, 193, 356, 357, 0, 194, 358, 359,
	195, 196, 0, 0, 360, 361, 362, 0, 197, 363,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	417, 213, 364, 214, 365, 366, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 367, 221, 223, 222, 224, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 370, 371, 372,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 373,
	0, 374, 0, 0, 230, 231, 232, 233, 375, 376,
	0, 0, 377, 237, 0, 234, 0, 0, 235, 378,
	236, 379, 380, 381, 382, 383, 0, 384, 0, 0,
	238, 239, 240, 0, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 387, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	388, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	389, 260, 390, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 0, 266, 0, 392, 267, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 750, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 184, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 190, 191, 192, 352, 353,
	354, 355, 193, 356, 357, 0, 194, 358, 359, 195,
	196, 0, 0, 360, 361, 362, 0, 197, 363, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 417,
	213, 364, 214, 365, 366, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	367, 221, 223, 222, 224, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 370, 371, 372, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 373, 0,
	374, 0, 0, 230, 231, 232, 233, 375, 376, 0,
	0, 377, 237, 0, 234, 0, 0, 235, 378, 236,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 238,
	239, 240, 0, 385, 386, 241, 242, 243, 0, 245,
	244, 0, 387, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 388,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 389,
	260, 390, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 391, 0, 266, 0, 392, 267, 268, 0,
	270, 271, 272, 0, 273, 393, 274, 394, 275, 0,
	276, 277, 278, 0, 280, 395, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 396, 0, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 398, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 400,
	318, 319, 401, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 403, 404, 0, 0,
	331, 332, 405, 406, 0, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 0, 407, 342,
	343, 344, 408, 409, 0, 0, 345, 0, 0, 0,
	0, 346, 347, 348, 349, 350, 1076, 1077, 0, 1106,
	1107, 1108, 1116, 1117, 1118, 0, 0, 0, 0, 1094,
	0, 0, 0, 1109, 0, 0, 0, 0, 0, 0,
	1079, 0, 0, 1120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 1076, 1077,
	1098, 1106, 1107, 1108, 1116, 1117, 1118, 1095, 0, 0,
	0, 1094, 0, 0, 0, 1109, 0, 0, 0, 0,
	0, 0, 1079, 0, 0, 1120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 1098, 0, 0, 1101, 1102, 1103, 1104, 1095,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1113, 1121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1119, 0, 0, 0, 1101, 1102, 1103,
	1104, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 1111, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 1113, 1121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1110, 1119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1111, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 1105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 1110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1114, 0, 0, 0, 0, 0, 1093, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 1076, 1077, 0, 1106, 1107, 1108, 1116,
	1117, 1118, 0, 1114, 0, 0, 1094, 0, 0, 1093,
	1109, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	1120, 1112, 0, 0, 1090, 1091, 1097, 1096, 1092, 1115,
	0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086,
	0, 1078, 0, 0, 0, 0, 0, 1098, 1910, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 0, 0, 1090, 1091, 1097, 1096,
	1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083,
	1085, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	1909, 0, 1101, 1102, 1103, 1104, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 1076, 1077, 0, 1106,
	1107, 1108, 1116, 1117, 1118, 0, 0, 0, 0, 1094,
	0, 1113, 1121, 1109, 0, 0, 0, 0, 0, 0,
	1079, 0, 0, 1120, 0, 0, 0, 0, 0, 0,
	1119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 1111, 0,
	1098, 0, 0, 0, 0, 1099, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1102, 1103, 1104, 0,
	0, 0, 0, 0, 1084, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1113, 1121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1114, 0,
	0, 0, 0, 1119, 1093, 1076, 1077, 0, 1106, 1107,
	1108, 1116, 1117, 1118, 0, 0, 0, 0, 1094, 0,
	0, 1111, 1109, 0, 0, 0, 0, 0, 1099, 1079,
	0, 0, 1120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 1110, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 1095, 0, 1112, 0,
	0, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087,
	1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 0, 1105,
	0, 0, 0, 0, 0, 1861, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1102, 1103, 1104, 0, 0,
	0, 1114, 0, 1084, 0, 0, 0, 1093, 1076, 1077,
	0, 1106, 1107, 1108, 1116, 1117, 1118, 0, 0, 0,
	0, 1094, 0, 1113, 1121, 1109, 0, 0, 0, 0,
	0, 0, 1079, 0, 0, 1120, 0, 0, 0, 0,
	0, 0, 1119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	1111, 0, 1098, 0, 0, 0, 0, 1099, 0, 1095,
	0, 1112, 0, 0, 1090, 1091, 1097, 1096, 1092, 1115,
	0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086,
	0, 0, 0, 1110, 2535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 1102, 1103,
	1104, 0, 0, 0, 0, 0, 1084, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 1113, 1121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1114, 0, 0, 0, 0, 1119, 1093, 1076, 1077, 0,
	1106, 1107, 1108, 1116, 1117, 1118, 0, 0, 0, 0,
	1094, 0, 0, 1111, 1109, 0, 0, 0, 0, 0,
	1099, 1079, 0, 0, 1120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 1110, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 1095, 0,
	1112, 0, 0, 1090, 1091, 1097, 1096, 1092, 1115, 0,
	1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0,
	0, 1105, 0, 2485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1102, 1103, 1104,
	0, 0, 0, 1114, 0, 1084, 0, 0, 0, 1093,
	1076, 1077, 0, 1106, 1107, 1108, 1116, 1117, 1118, 0,
	0, 0, 0, 1094, 0, 1113, 1121, 1109, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 1120, 0, 0,
	0, 0, 0, 0, 1119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 1111, 0, 1098, 0, 0, 0, 0, 1099,
	0, 1095, 0, 1112, 0, 0, 1090, 1091, 1097, 1096,
	1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083,
	1085, 1086, 0, 0, 0, 1110, 2439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1102, 1103, 1104, 0, 0, 0, 0, 0, 1084, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 1113, 1121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1114, 0, 0, 0, 0, 1119, 1093, 1076,
	1077, 0, 1106, 1107, 1108, 1116, 1117, 1118, 0, 0,
	0, 0, 1094, 0, 0, 1111, 1109, 0, 0, 0,
	0, 0, 1099, 1079, 0, 0, 1120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 1110, 0,
	0, 0, 0, 1098, 0, 0, 0, 0, 0, 0,
	1095, 0, 1112, 0, 0, 1090, 1091, 1097, 1096, 1092,
	1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085,
	1086, 0, 0, 1105, 0, 2409, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 1102,
	1103, 1104, 0, 0, 0, 1114, 0, 1084, 0, 0,
	0, 1093, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117,
	1118, 0, 0, 0, 0, 1094, 0, 1113, 1121, 1109,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 1120,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 1111, 0, 1098, 0, 0, 0,
	0, 1099, 0, 1095, 0, 1112, 0, 0, 1090, 1091,
	1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081,
	1082, 1083, 1085, 1086, 0, 0, 0, 1110, 2404, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1102, 1103, 1104, 0, 0, 0, 0, 0,
	1084, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	1113, 1121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1114, 0, 0, 0, 0, 1119,
	1093, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117, 1118,
	0, 0, 0, 0, 1094, 0, 0, 1111, 1109, 0,
	0, 0, 0, 0, 1099, 1079, 0, 0, 1120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	1110, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 1095, 0, 1112, 0, 0, 1090, 1091, 1097,
	1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082,
	1083, 1085, 1086, 0, 0, 1105, 0, 2400, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 1102, 1103, 1104, 0, 0, 0, 1114, 0, 1084,
	0, 0, 0, 1093, 1076, 1077, 0, 1106, 1107, 1108,
	1116, 1117, 1118, 0, 0, 0, 0, 1094, 0, 1113,
	1121, 1109, 0, 0, 0, 0, 0, 0, 1079, 0,
	0, 1120, 0, 0, 0, 0, 0, 0, 1119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 1111, 0, 1098, 0,
	0, 0, 0, 1099, 0, 1095, 0, 1112, 0, 0,
	1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088,
	1080, 1081, 1082, 1083, 1085, 1086, 0, 0, 0, 1110,
	2334, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 1102, 1103, 1104, 0, 0, 0,
	0, 0, 1084, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 1113, 1121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1114, 0, 0, 0,
	0, 1119, 1093, 1076, 1077, 0, 1106, 1107, 1108, 1116,
	1117, 1118, 0, 0, 0, 0, 1094, 0, 0, 1111,
	1109, 0, 0, 0, 0, 0, 1099, 1079, 0, 0,
	1120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1078, 1110, 0, 0, 0, 0, 1098, 0, 0,
	0, 0, 0, 0, 1095, 0, 1112, 0, 0, 1090,
	1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080,
	1081, 1082, 1083, 1085, 1086, 0, 0, 1105, 0, 2300,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 1102, 1103, 1104, 0, 0, 0, 1114,
	0, 1084, 0, 0, 0, 1093, 1076, 1077, 0, 1106,
	1107, 1108, 1116, 1117, 1118, 0, 0, 0, 0, 1094,
	0, 1113, 1121, 1109, 0, 0, 0, 0, 0, 0,
	1079, 0, 0, 1120, 0, 0, 0, 0, 0, 0,
	1119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 1111, 0,
	1098, 0, 0, 0, 0, 1099, 0, 1095, 0, 1112,
	0, 0, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089,
	1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 0,
	0, 1110, 2299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1102, 1103, 1104, 0,
	0, 0, 0, 0, 1084, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1113, 1121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1114, 0,
	0, 0, 0, 1119, 1093, 1076, 1077, 0, 1106, 1107,
	1108, 1116, 1117, 1118, 0, 0, 0, 0, 1094, 0,
	0, 1111, 1109, 0, 0, 0, 0, 0, 1099, 1079,
	0, 0, 1120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 1110, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 1095, 0, 1112, 0,
	0, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087,
	1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 0, 1105,
	0, 2264, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1102, 1103, 1104, 0, 0,
	0, 1114, 0, 1084, 0, 0, 0, 1093, 1076, 1077,
	0, 1106, 1107, 1108, 1116, 1117, 1118, 0, 0, 0,
	0, 1094, 0, 1113, 1121, 1109, 0, 0, 0, 0,
	0, 0, 1079, 0, 0, 1120, 0, 0, 0, 0,
	0, 0, 1119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	1111, 0, 1098, 0, 0, 0, 0, 1099, 0, 1095,
	0, 1112, 0, 0, 1090, 1091, 1097, 1096, 1092, 1115,
	0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086,
	0, 0, 0, 1110, 2105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 1102, 1103,
	1104, 0, 0, 0, 0, 0, 1084, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 1113, 1121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1114, 0, 0, 0, 0, 1119, 1093, 1076, 1077, 0,
	1106, 1107, 1108, 1116, 1117, 1118, 0, 0, 0, 0,
	1094, 0, 0, 1111, 1109, 0, 0, 0, 0, 0,
	1099, 1079, 0, 0, 1120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 1110, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 1095, 0,
	1112, 0, 0, 1090, 1091, 1097, 1096, 1092, 1115, 0,
	1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0,
	0, 1105, 0, 2081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1102, 1103, 1104,
	0, 0, 0, 1114, 0, 1084, 0, 0, 0, 1093,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1113, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 1112, 0, 0, 1090, 1091, 1097, 1096,
	1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083,
	1085, 1086, 0, 0, 0, 1110, 1531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 1076, 1077, 0, 1106,
	1107, 1108, 1116, 1117, 1118, 0, 0, 0, 0, 1094,
	0, 0, 1114, 1109, 0, 0, 0, 0, 1093, 0,
	1079, 0, 0, 1120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1112, 0, 0, 1090, 1091, 1097, 1096, 1092,
	1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085,
	1086, 0, 0, 1831, 0, 1101, 1102, 1103, 1104, 0,
	0, 0, 0, 0, 1084, 2598, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 1077, 0, 1106, 1107,
	1108, 1116, 1117, 1118, 1113, 1121, 0, 0, 1094, 0,
	0, 0, 1109, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 1120, 1119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1111, 0, 1078, 0, 0, 0, 0, 1099, 1098,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1102, 1103, 1104, 0, 1105,
	0, 0, 0, 1084, 0, 1901, 0, 0, 1900, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 1113, 1121, 0, 0, 0, 0, 0,
	0, 1114, 0, 0, 0, 0, 0, 1093, 0, 0,
	0, 0, 1119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1111, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 1076, 1077, 0, 1106, 1107,
	1108, 1116, 1117, 1118, 0, 0, 0, 0, 1094, 0,
	0, 0, 1109, 1110, 0, 0, 0, 1804, 0, 1079,
	0, 1112, 1120, 0, 1090, 1091, 1097, 1096, 1092, 1115,
	0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086,
	0, 0, 0, 1078, 0, 0, 0, 0, 1105, 1098,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1114, 0, 0, 1805, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1102, 1103, 1104, 0, 0,
	0, 0, 0, 1084, 0, 0, 0, 0, 1629, 0,
	0, 0, 0, 0, 1076, 1077, 0, 1106, 1107, 1108,
	1116, 1117, 1118, 1113, 1121, 0, 0, 1094, 0, 0,
	0, 1109, 0, 0, 0, 1628, 0, 0, 1079, 0,
	1112, 1120, 1119, 1090, 1091, 1097, 1096, 1092, 1115, 0,
	1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0,
	1111, 0, 1078, 0, 0, 0, 0, 1099, 1098, 0,
	0, 0, 0, 0, 0, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 1102, 1103, 1104, 0, 1105, 0,
	0, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1121, 0, 0, 0, 0, 0, 0,
	1114, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 1119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1111,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 1076, 1077, 0, 1106, 1107, 1108,
	1116, 1117, 1118, 0, 0, 0, 0, 1094, 0, 0,
	0, 1109, 1110, 0, 0, 0, 0, 0, 1079, 0,
	1112, 1120, 0, 1090, 1091, 1097, 1096, 1092, 1115, 0,
	1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0,
	0, 0, 1078, 0, 0, 0, 0, 1105, 1098, 0,
	0, 0, 0, 0, 0, 1095, 0, 0, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
	0, 0, 0, 1076, 1077, 1093, 1106, 1107, 1108, 1116,
	1117, 1118, 0, 0, 0, 0, 1094, 0, 0, 0,
	1109, 0, 0, 1101, 1102, 1103, 1104, 1079, 0, 0,
	1120, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1078, 1113, 1121, 0, 0, 0, 1098, 0, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 1112,
	0, 1119, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089,
	1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 1111,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 1102, 1103, 1104, 0, 0, 0, 0,
	0, 1084, 1110, 607, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1113, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	1119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 1111, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 1114,
	0, 0, 0, 1076, 1077, 1093, 1106, 1107, 1108, 1116,
	1117, 1118, 0, 0, 0, 0, 1094, 0, 0, 0,
	1109, 1110, 0, 0, 0, 0, 0, 1079, 0, 0,
	1120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 1105, 1098, 0, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 1112,
	0, 1100, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089,
	1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 1114, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 1102, 1103, 1104, 2085, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 1907, 0, 0, 0,
	0, 0, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117,
	1118, 1113, 1121, 0, 0, 1094, 0, 0, 0, 1109,
	0, 0, 0, 1902, 0, 0, 1079, 0, 1112, 1120,
	1119, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087,
	1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 1111, 0,
	1078, 0, 0, 0, 0, 1099, 1098, 0, 0, 0,
	0, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1102, 1103, 1104, 0, 1105, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 1121, 0, 0, 0, 0, 0, 0, 1114, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 0, 1119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1111, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 0, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117,
	1118, 0, 0, 0, 0, 1094, 0, 0, 0, 1109,
	1110, 0, 0, 0, 0, 0, 1079, 0, 1112, 1120,
	0, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087,
	1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 0, 0,
	1078, 0, 0, 0, 0, 1105, 1098, 0, 0, 0,
	0, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1114, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1102, 1103, 1104, 0, 0, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117, 1118,
	1113, 1121, 0, 0, 1094, 0, 0, 0, 1109, 0,
	0, 0, 1860, 0, 0, 1079, 0, 1112, 1120, 1119,
	1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088,
	1080, 1081, 1082, 1083, 1085, 1086, 0, 1111, 0, 1078,
	0, 0, 0, 0, 1099, 1098, 0, 0, 0, 0,
	0, 0, 1095, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 1102, 1103, 1104, 0, 1105, 0, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	1121, 0, 0, 0, 0, 0, 0, 1114, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 0, 1119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1111, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	0, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117, 1118,
	0, 0, 0, 0, 1094, 0, 0, 0, 1109, 1110,
	0, 0, 0, 0, 0, 1079, 0, 1112, 1120, 0,
	1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088,
	1080, 1081, 1082, 1083, 1085, 1086, 0, 0, 0, 1078,
	0, 0, 0, 0, 1105, 1098, 0, 0, 0, 0,
	0, 0, 1095, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1114, 0, 0, 0,
	1076, 1077, 1093, 1106, 1107, 1108, 1116, 1117, 1118, 0,
	0, 0, 0, 1094, 0, 0, 0, 1109, 0, 0,
	1101, 1102, 1103, 1104, 1079, 0, 0, 1120, 0, 1084,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1078, 1113,
	1121, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 1112, 0, 1119, 1090,
	1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080,
	1081, 1082, 1083, 1085, 1086, 0, 1111, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1102, 1103, 1104, 0, 0, 0, 0, 0, 1084, 1110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1113, 1121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1105, 0, 0, 1119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 1114, 0, 0, 0,
	1076, 1077, 1093, 1106, 1107, 1108, 1116, 1117, 1118, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 1120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 1105, 1098, 0, 0, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 1112, 0, 1100, 1090,
	1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080,
	1081, 1082, 1083, 1085, 1086, 1114, 0, 0, 0, 1076,
	1077, 1093, 1106, 1107, 1108, 1116, 1117, 1118, 0, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 1101,
	1102, 1103, 1104, 1079, 0, 0, 1120, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 1113, 1121,
	0, 0, 0, 1098, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 1112, 0, 1119, 1090, 1091,
	1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081,
	1082, 1083, 1085, 1086, 0, 1111, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 1102,
	1103, 1104, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 1114, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1105, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 0, 0, 0, 1112, 0, 1100, 1090, 1091,
	1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081,
	1082, 1083, 1085, 1086, 1114, 0, 0, 0, 0, 0,
	1093, 1335, 1324, 1354, 1313, 1345, 1344, 0, 0, 1315,
	1314, 0, 0, 0, 0, 1356, 1355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1350, 0, 1342, 1341, 0, 0, 0,
	0, 0, 0, 0, 1112, 1340, 0, 1090, 1091, 1097,
	1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082,
	1083, 1085, 1086, 0, 0, 0, 0, 0, 1339, 1337,
	1338, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	1328, 1326, 1329, 1330, 1331, 1332, 1333, 0, 1353, 0,
	0, 0, 0, 0, 0, 1317, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1327, 1319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1335, 1324, 1354, 1313, 1345, 1344,
	0, 0, 1315, 1314, 0, 0, 0, 1336, 1356, 1355,
	0, 1456, 1454, 1455, 1458, 1457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1320,
	547, 0, 573, 0, 0, 0, 1350, 0, 1342, 1341,
	1334, 1321, 0, 0, 0, 0, 0, 0, 1340, 0,
	552, 1358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 550, 1318, 0, 0, 0, 1351, 1352,
	0, 1339, 1337, 1338, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 551, 0, 0, 0, 0, 553,
	1322, 0, 0, 0, 0, 1357, 1323, 559, 560, 0,
	0, 0, 569, 1328, 1326, 1329, 1330, 1331, 1332, 1333,
	0, 1353, 0, 0, 0, 0, 574, 554, 1317, 1316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 572,
	0, 0, 0, 0, 1319, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1343, 0, 0, 0,
	1325, 0, 0, 0, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	556, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 0, 563, 0,
	0, 0, 0, 558, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 0, 0, 0,
	0, 0, 1320, 0, 0, 0, 0, 575, 0, 0,
	0, 0, 0, 1334, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1358, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1318, 0, 0,
	0, 1351, 1352, 0, 0, 0, 0, 0, 561, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 0, 0, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 566, 576, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 567, 0, 0, 0, 571, 0, 0,
	0, 0, 577, 0, 0, 0, 0, 564, 568, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 570,
}
var sqlPact = [...]int{

	261, -1000, -20, -1000, -1000, -1000, 126, -1000, -1000, -1000,
	-1000, 125, 124, 123, -1000, 115, 113, 112, 110, 108,
	107, 106, 105, 104, 103, 102, -1000, 101, -1000, -1000,
	-1000, -1000, 99, 98, 97, -1000, 96, 1157, 23014, 95,
	93, 1384, -1000, 35968, 92, -1000, 1040, 26755, 981, 1390,
	-1000, 90, 998, 35629, 3979, 2689, 1101, 1615, 35287, 22672,
	1613, 2611, 34945, -1000, -1000, 34603, 89, 87, 86, 84,
	82, -1000, -1000, 34261, 80, 78, 76, 73, 71, 69,
	68, 62, 61, 60, 59, 57, 56, 55, -1000, 51,
	50, 47, -1000, 43688, 40, 39, 37, 1096, 36, 35,
	34, 33, -1000, -1000, 858, 30, 29, 28, 26, 24,
	88, 22, 21, 20, 17, -1000, 1147, 422, 2128, 8788,
	1032, 1031, 1010, 996, 1009, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 38002,
	35968, 14, -46, 13, -1000, 2015, 616, 18846, 261, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26413, 26071, 22330, 33919, 33577, 6239, 755, -1000, -25, 24370,
	35968, -1000, 118, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14320, 13940, 535, 118, -1000, -1000, -1000,
	33235, 21977, 32893, 1475, 32551, -1000, -1000, 32209, -1000, -1000,
	1881, 1648, 1640, 25729, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 31870, 31528, 31186, 30844, 21624, 469, -1000, -1000,
	-1000, 17126, -1000, -1000, -1000, -1000, 10, -1000, 9, 8,
	-1000, 7, 6, 5, 4, 3, 2, -1000, 0, -3,
	-1000, -5, -11, -1000, -15, -17, 902, 1036, 1024, 30502,
	838, 1247, -1000, -1000, -24, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35968, -1000, 15376, -1000, 464, -1000, 1633,
	-1000, 15376, -1000, 1244, -1000, -1000, -1000, -1000, -1000, 35968,
	-1000, -1000, -1000, -1000, -1000, -1000, 2223, 1153, 463, 30160,
	-1000, 1540, -1000, 565, 742, -1000, -1000, -1000, 9492, 134,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2160,
	21271, 1376, 1962, 1865, 2220, 1436, 1814, 1761, 1760, 1759,
	1757, 2218, 894, 2217, 1744, 1012, 2212, 1749, 1215, 657,
	2205, 1632, 1624, -1000, -1000, -1000, -1000, 905, -1000, -1000,
	-1000, 28111, -1000, -1000, -1000, -1000, -1000, -1000, 796, 860,
	-1000, -1000, -1000, -1000, -1000, 1147, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1388, 1944, 1944, 1944, 2011, 242, 238,
	-1000, 88, -1000, 1369, -1000, 1152, -1000, -1000, -1000, 42791,
	-1000, -1000, 15376, 15376, 15376, 15376, 15376, 1013, -1000, 499,
	-1000, 461, 458, 7338, -1000, -1000, 2186, -1000, -1000, -1000,
	265, -1000, -1000, 15376, 118, -1000, -1000, -1000, -1000, 457,
	2200, -1000, 619, -1000, -1000, -1000, 568, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1659, 456, 455, 453,
	-1000, 452, -1000, -1000, 449, 447, 446, 445, 444, 441,
	439, 438, 437, 436, 427, 419, 418, 415, 413, 947,
	-1000, 615, -1000, -1000, 615, 615, -1000, 400, 400, 402,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 400, -1000,
	-1000, -1000, 541, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 412, 1259, -1000, -1000, 1259,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 753, 37324, -29,
	35968, -1000, 410, -29, -1000, -1000, 409, -1000, 9844, 9844,
	-1000, -1000, -1000, 15376, -1000, 1486, -1000, 3330, -189, 267,
	543, -1000, 17814, 20567, -1000, -1000, 1011, 1826, 773, -1000,
	909, 1815, 503, -1000, 591, 1810, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1202, -1000, 1133, 1799,
	-187, 1682, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 23353, 24370,
	-25, -27, -1000, -1000, -1000, 5888, 42791, -1000, 42791, -1000,
	824, 19534, 118, -1000, -1000, -1000, -1000, 408, 1309, 583,
	1304, -1000, 278, -1000, 29818, 583, 1298, -1000, -1000, -1000,
	28111, -1000, 35968, -1000, 35968, -1000, 863, -1000, 37663, 119,
	1792, -1000, -1000, 119, 1790, -1000, 117, 1778, -1000, -1000,
	1145, 1777, -1000, -53, 1776, -1000, -1000, -1000, 15376, -50,
	-1000, -1000, -1000, 616, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 29476,
	23692, 1396, 545, 42791, 2092, 43606, 23353, 42791, 23692, -1000,
	-1000, 35968, -1000, 15376, -1000, 2073, 1278, -30, -1000, -1000,
	-1000, -1000, -1000, 1346, 1529, 714, 793, 9492, 9492, 1890,
	-1000, 128, 6239, -1000, -1000, -1000, -1000, 29134, -1000, -1000,
	-1000, 1130, 35968, -1000, -1000, 1657, -1000, 23692, 35968, -1000,
	35968, -1000, 35968, -1000, 35968, -1000, 35968, -1000, -1000, -1000,
	-1000, -1000, 681, -1000, 1651, -1000, -1000, 35968, -1000, 1345,
	-1000, -1000, -1000, 28795, 28453, -1000, 1035, 795, -1000, -1000,
	120, -1000, 35968, 2019, 563, -1000, 1388, 1386, 1643, 656,
	1219, 1432, 13560, 1401, 15376, 88, -1000, -1000, 88, 88,
	8408, -1000, -1000, -1000, 35968, -1000, 43413, 43606, 6239, 766,
	15376, 15376, 15376, 15376, 15376, 15376, 15376, 15376, 15376, 15376,
	15376, 15376, 15376, 15376, 15376, 15376, 15376, 15376, 15376, 15376,
	15376, 15376, 15376, 15376, 15376, 15376, 15376, 15376, 15376, 15376,
	15376, 15376, 1626, 15376, 752, 15376, 15376, 15376, 15376, 1344,
	1093, 321, 1143, -1000, 2163, 2163, 2163, 43070, 43070, 356,
	499, -1000, 15376, -1000, 77, 15376, 238, 40818, -28, 6972,
	-1000, -1000, -1000, 13208, 608, 42791, 118, 6592, -1000, 2184,
	852, 1655, 1534, 406, 525, 522, 510, 466, 15376, 15376,
	12856, 12476, 12096, 16080, 11716, 15376, 7704, 15376, 15376, 15376,
	15376, 11336, 10956, -1000, 404, -1000, -1000, -1000, -1000, 2183,
	-1000, -1000, 2180, -1000, 763, 762, 2176, -1000, -30, -1000,
	37324, -1000, 35968, -29, 2071, 35968, 15376, 178, -1000, 41684,
	-1000, 178, -62, 42791, 1441, 1426, 19190, 1385, 1016, 1016,
	1016, -1000, 403, 480, 543, 5175, 10576, -1000, 27094, 1128,
	155, 237, 17470, 1486, -1000, 35968, -37, 957, -1000, 25387,
	1980, 1927, 1917, 28111, 2031, 77, 1935, 1607, 751, 28111,
	986, 23353, 1934, 750, 2024, 77, 1601, 743, 35968, 6239,
	1930, 537, -1000, 35968, -1000, -1000, -1000, 1593, -70, -1000,
	-1000, 25048, 2069, 1767, -1000, 984, -1000, 1755, 2067, 35968,
	1243, 1290, -1000, -1000, 778, 1751, 597, 248, 2059, 248,
	19879, -1000, 35968, -1000, 35968, -1000, -1000, 35968, -1000, 35968,
	-1000, 35968, 35968, -1000, 35968, 23353, 23353, -72, 4247, 24709,
	735, -1000, 640, 25048, 579, -77, -1000, 829, -1000, -1000,
	-1000, -1000, 216, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 402,
	947, 400, 400, 400, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 541, -1000, -1000, 615, 615, 615, -1000, -1000, -57,
	1589, 564, -79, 674, -30, -1000, 1259, -1000, 880, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2195, -1000, 2178, -1000, -1000, 2174, -32, -1000,
	-32, -1000, 6239, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35968, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 426,
	-1000, -1000, -1000, -1000, -1000, -1000, 35968, 35968, 35968, -1000,
	28111, 587, 1650, -1000, 1933, 1386, 1643, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 42791, -1000, 363, -1000, -1000,
	42791, 901, 1455, -1000, 1455, -33, -1000, 41555, 1422, 35968,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 560, 684, 684, 797, 797, 797, 797, 2340, 1217,
	2741, 498, 4676, 4676, 4676, 4676, 4676, 4676, 4676, 4676,
	1210, 279, 279, 1210, 1210, 1210, 1210, 1210, 4676, 4676,
	4676, 43070, 42880, 3505, 15376, 15376, 732, 1088, 321, 3505,
	15376, 3505, 3505, 3505, 3505, -1000, 1066, -1000, -1000, -1000,
	-1000, 1583, 399, 16080, 16080, -1000, -1000, -1000, 7338, 15376,
	-1000, -1000, -1000, -1000, 392, 15376, -1000, 40977, -226, 235,
	-61, -1000, 15376, 478, -78, -1000, 853, -1000, 15376, -1000,
	-42, 15376, 15376, 15376, 234, -1000, 233, -1000, 723, -1000,
	722, 719, 712, -1000, 391, 1078, 385, 376, 15376, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 42601, 39003, 231,
	-1000, 1581, -61, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	230, -1000, 229, -1000, 42472, -61, 227, 3651, -1000, 16080,
	16080, 16080, 7338, 375, 223, -1000, 41365, -1000, 42282, 10196,
	10196, 10196, 222, 42153, 15376, -61, 38738, 38686, 4360, -87,
	-90, -1000, -95, -1000, 2171, -96, 221, 559, 556, 220,
	-1000, -1000, 371, -98, -101, 597, 9844, 18502, 6239, -1000,
	597, -1000, 15376, 19190, 19190, 2120, 1393, 19190, -1000, -1000,
	-1000, -1000, 27094, 450, 543, 27094, -1000, 2161, 1392, 214,
	-1000, -1000, -1000, 35968, 370, -1000, 543, 209, 943, 35968,
	35968, 35968, -1000, -1000, 1289, 36985, 1287, 43606, 35968, -1000,
	369, 368, 1420, 1418, 35968, 35968, 36646, 36307, 35968, 948,
	77, -1000, 555, 367, 35968, 899, 23353, 585, 554, 35968,
	77, -1000, 364, 6239, 887, -1000, 552, 1508, 1253, -1000,
	822, 1579, 35968, 206, -111, -34, 43606, -1000, -1000, -1000,
	-1000, -1000, 35968, 434, 35968, 77, 35968, 23353, 23353, 77,
	35968, 1708, 1838, 517, 35968, 1432, 15376, 964, -1000, 18158,
	632, 35968, 885, 133, -1000, -1000, -1000, 531, 35968, -1000,
	-1000, 119, 119, -1000, 117, 1145, -1000, -53, -1000, -1000,
	-1000, 35968, 23353, -113, -1000, 649, 646, 644, -1000, 43606,
	-1000, 497, 731, -1000, 2154, 582, 35968, 9492, 9492, -1000,
	1425, -1000, -1000, 934, -1000, 937, -1000, -1000, -1000, -1000,
	9492, -1000, -38, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1171, 999, -1000, -1000, -1000, 901, -1000, 15376, 2149, -1000,
	-1000, -1000, 8408, -1000, -1000, -1000, 35968, -188, 15376, 3505,
	3505, 15376, 16080, 16080, -1000, 3505, -1000, -1000, -1000, -1000,
	-1000, 1577, 359, 15376, 43606, 3207, 3056, -114, 1210, 15376,
	-35, -1000, 15376, -1000, 40695, -1000, -1000, 483, 1834, -1000,
	15376, 41963, 205, 9140, -1000, 41874, -56, -56, -1000, 2191,
	1328, 1273, 983, 866, 2144, -1000, 20223, 598, 1127, 40536,
	43413, 43606, -1000, 15376, -1000, -1000, 1576, 15376, -1000, 43413,
	43606, 16080, 16080, 16080, 16080, 16080, 16080, 16080, 16080, 16080,
	16080, 16080, 16080, 16080, 16080, 16080, 16080, 16080, 16080, 16080,
	1352, 16080, 2123, 2123, 2123, -36, 15376, -1000, 1550, 1576,
	15376, 15376, 43606, 203, 202, 201, -1000, 15376, -61, 15376,
	15376, 15376, -1000, -1000, -1000, 199, -1000, 2136, -1000, -1000,
	-1000, -1000, 579, -1000, -1000, 1521, -1000, -119, -1000, 1486,
	-1000, 1521, 42791, -1000, 2120, -1000, 351, 15376, 19190, -1000,
	475, -1000, -120, -1000, 27094, -1000, 474, -223, -1000, 526,
	-1000, 543, 350, 35968, 27094, -1000, -1000, -1000, 703, 699,
	1704, -1000, 1272, -1000, 636, -1000, 1026, 15376, 16782, 347,
	345, 1027, -1000, 1696, 1145, 1694, 1145, -1000, -37, 955,
	-1000, 20918, 15376, -1000, 693, -1000, 980, 20918, -1000, -1000,
	15376, -1000, 692, 20918, 582, 1568, 803, -1000, 817, -1000,
	1485, -1000, 25048, 344, 35968, 343, -1000, 342, -1000, 583,
	-1000, 340, 35968, 1383, 517, 24031, -1000, 583, 885, -1000,
	42791, -1000, 885, 8056, 1926, -121, -1000, -1000, -1000, 597,
	19879, 19190, 15376, -122, -1000, -1000, -1000, -1000, -38, 1905,
	1905, -1000, 2134, -1000, 473, 198, -1000, 27772, -38, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 35968, 1038, 6239, 35968,
	35968, 1190, 40413, -1000, 1932, 6239, 2111, 3505, 2686, 304,
	15376, 43606, 43159, -123, 15376, 15376, -1000, 188, 15376, 467,
	42791, -1000, -1000, -1000, 42791, 15376, 2189, 15376, 186, 185,
	184, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 183,
	-1000, -1000, 38341, 15376, 181, -1000, 180, 179, 42791, 1550,
	42791, -1000, -1000, 691, 691, 851, 851, 851, 851, 2123,
	580, 1620, 1237, 263, 263, 263, 724, 388, 388, 263,
	263, 263, 1564, 1411, 338, 3280, 15376, 176, -1000, -1000,
	42791, 42791, 175, -1000, -1000, -1000, -61, 3677, 40254, 40131,
	-1000, 171, 170, 1516, 2001, -1000, 19190, 1516, -1000, 35968,
	42791, -1000, -189, -1000, 2124, -1000, -1000, 1392, -1000, 5536,
	27094, 35968, -128, -1000, 35968, 35968, 35968, 1692, -1000, 2792,
	-1000, 39972, -130, -1000, 308, 1957, 15376, -1000, -1000, 337,
	16782, 35968, -1000, 1419, 1539, 664, 35968, -1000, 35968, -1000,
	35968, 35968, 35968, -1000, 336, 118, -135, 35968, 23353, -1000,
	-137, 6239, -1000, -1000, 23353, 717, -1000, 1015, 1491, -1000,
	16782, 335, 35968, 25048, 2057, -1000, 16782, 1236, 1387, 517,
	24031, -1000, 778, -1000, -1000, -39, -1000, 332, 77, 885,
	-1000, -41, 42791, 524, 1889, -1000, 1884, 309, -1000, -1000,
	-43, 334, -1000, 519, 518, -1000, -52, -1000, 528, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1932, 15376, 15376, 43159,
	-138, -1000, 3505, 3505, -1000, 39849, -1000, 42791, -1000, 41874,
	-1000, -1000, -1000, -1000, 1001, -1000, 39690, -1000, -1000, -1000,
	-1000, 16080, 1551, 326, 43606, 39567, -1000, -1000, 15376, -1000,
	-1000, -1000, -1000, 594, 15376, 15376, 1486, 594, -143, 543,
	-1000, -1000, -1000, 2119, -1000, -145, -1000, -1000, -1000, -1000,
	35968, -1000, 35968, -1000, 6239, 35968, 1547, 1264, -1000, -1000,
	1399, 322, 16080, 35968, -1000, 1075, 16782, 1932, 118, 6239,
	1932, 39408, 6592, -146, -148, 1262, -1000, 1258, 15376, -1000,
	43606, 1145, 1145, -1000, 690, 688, 15376, 687, -1000, -1000,
	685, -1000, -53, 20918, -1000, -1000, 1998, 1073, -151, 16782,
	-153, 168, 77, -158, 35968, -1000, 517, 24031, -1000, 1838,
	1851, 35968, 1915, -1000, -1000, 321, 320, 316, -1000, 27433,
	27433, 23353, 23353, 1038, -1000, 35968, -1000, 3505, 3505, -1000,
	-1000, 166, 1127, 1978, -1000, 3938, 16080, 43606, -159, -1000,
	39285, -1000, 35968, 42791, -61, -1000, -1000, 27094, 305, -1000,
	-1000, 1353, -1000, -1000, 35968, 1267, -1000, -1000, 15376, 3280,
	311, 1485, 303, -1000, -1000, -1000, -1000, -1000, -1000, 1957,
	-42, -1000, 927, -1000, -1000, 42791, 1946, -1000, -1000, 35968,
	35968, -56, 301, 290, -1000, 1241, 35968, 1075, -160, -1000,
	1485, -1000, 1075, 284, 24031, -1000, 1383, 785, -161, 35968,
	-1000, 23353, 23353, -1000, -166, -1000, -1000, -1000, -167, -1000,
	922, 15376, 3938, -169, -1000, -1000, -60, -1000, 2047, -1000,
	-1000, -1000, -1000, 1687, 39126, 1333, 35968, -1000, 35968, 1932,
	162, 35968, 639, 6239, -1000, -1000, 159, 15376, 15376, 283,
	282, 281, 1485, 1075, -1000, 1485, 16782, -1000, 1387, 846,
	-1000, 597, -1000, -174, -175, -1000, -1000, 156, 15728, 15728,
	-61, -1000, 35968, 280, 1675, -1000, 1221, 1203, 150, -176,
	-1000, -1000, 278, -1000, 15376, -1000, 2189, -177, -185, 35968,
	35968, 35968, -1000, 1485, -1000, -190, -1000, 19879, -1000, 582,
	582, -1000, -1000, -1000, 16431, 1319, 867, 41236, -1000, -1000,
	-1000, 35968, -1000, 1234, 1224, 891, -1000, -1000, -1000, -1000,
	-1000, 1333, 42791, -1000, -1000, -191, -192, -193, -1000, 1075,
	-183, -1000, -1000, 2097, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1862, -1000, 655, 1430, 1430, 1221, 277, 268, 1126,
	1485, -1000, 15024, -1000, 2105, -1000, -1000, 1406, -1000, -1000,
	982, 956, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	148, 6239, 136, 6239, -1000, 627, -1000, 622, 266, 1365,
	-44, 14672, 770, 315, -112, -1000, -199, -1000, 42791, -1000,
	262, -1000, 14672, 982, -1000, 14672, 14672, -200, -1000, -1000,
	-217, -1000, -58, 956, -133, -1000, -1000, 956, -1000,
}
var sqlPgo = [...]int{

	0, 2677, 2676, 1644, 2674, 2158, 2670, 2668, 2664, 2658,
	2154, 2652, 2651, 2646, 2643, 2641, 2640, 2637, 2636, 2635,
	2631, 2629, 2628, 2625, 2624, 2619, 2618, 2152, 2617, 2139,
	2616, 2611, 2609, 2608, 2606, 29, 2602, 2600, 2598, 2119,
	2596, 2595, 2594, 2593, 2094, 2591, 2068, 2590, 2589, 2062,
	2587, 2584, 2583, 1962, 2580, 1960, 2569, 89, 112, 1950,
	2566, 2564, 1931, 1927, 1925, 2562, 1921, 2560, 2553, 1880,
	1878, 2539, 79, 2538, 2537, 2534, 1809, 1797, 2532, 2529,
	2525, 145, 2524, 1785, 2523, 2522, 2515, 2514, 2513, 2512,
	2511, 2509, 2508, 2507, 2500, 2498, 2496, 2493, 2491, 2490,
	2489, 2488, 2487, 156, 2486, 2485, 1771, 1768, 2484, 2481,
	27, 42, 15, 56, 154, 142, 2930, 131, 2480, 2479,
	2469, 2468, 2467, 2462, 28, 99, 97, 2460, 167, 2448,
	2447, 52, 46, 16, 12, 73, 95, 2446, 2445, 2482,
	30, 2438, 2437, 127, 2436, 51, 18, 2555, 151, 149,
	118, 114, 2434, 2427, 2422, 45, 116, 31, 4, 3,
	6, 1, 2416, 2, 5, 2407, 2405, 20, 83, 25,
	2404, 62, 121, 2401, 2400, 125, 2399, 64, 122, 1570,
	152, 134, 372, 88, 2397, 67, 19, 61, 2394, 2389,
	157, 34, 76, 146, 101, 2386, 58, 158, 124, 72,
	128, 136, 2385, 2384, 2381, 104, 2380, 113, 84, 2379,
	2376, 75, 2372, 133, 137, 2371, 135, 105, 2368, 2367,
	93, 2365, 117, 2361, 2360, 155, 144, 106, 13, 41,
	69, 21, 1571, 1559, 126, 90, 47, 53, 2358, 737,
	1431, 1267, 85, 2356, 82, 57, 38, 55, 91, 143,
	33, 2352, 2349, 130, 2347, 2346, 2345, 2343, 2342, 102,
	2336, 2333, 2331, 86, 35, 43, 92, 40, 103, 120,
	107, 150, 96, 2329, 81, 123, 2324, 246, 2322, 2319,
	1111, 111, 2317, 2316, 2315, 1088, 1050, 438, 108, 2314,
	2312, 403, 276, 2311, 2310, 87, 2304, 110, 109, 94,
	139, 463, 70, 2297, 115, 36, 2294, 37, 22, 0,
	725, 395, 2290, 119, 71, 2287, 2284, 2266, 2261, 17,
	10, 7, 9, 14, 11, 65, 50, 2259, 2258, 129,
	77, 68, 2255, 153, 2252, 2251, 2250, 49, 2249, 26,
	2247, 23, 2245, 2244, 24, 8, 2239, 2236, 138, 2235,
	98, 2234, 2050, 2230, 147, 2229, 2227, 1930, 2226, 32,
	100,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 13, 13,
	14, 23, 17, 25, 12, 20, 18, 16, 16, 22,
	22, 126, 126, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 123, 123,
	128, 128, 128, 130, 130, 127, 127, 122, 122, 27,
	27, 70, 70, 113, 63, 63, 63, 307, 307, 308,
	308, 109, 109, 110, 110, 110, 110, 111, 111, 112,
	112, 112, 37, 37, 37, 29, 29, 29, 29, 29,
	30, 30, 31, 31, 38, 38, 38, 38, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 46,
	46, 47, 47, 47, 47, 47, 47, 48, 48, 48,
	48, 49, 49, 49, 49, 49, 49, 49, 49, 54,
	54, 54, 52, 52, 52, 51, 51, 51, 50, 50,
	50, 53, 53, 53, 181, 181, 180, 180, 184, 184,
	55, 55, 55, 55, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 58, 58, 58, 58,
	58, 58, 58, 276, 276, 275, 56, 56, 251, 251,
	59, 59, 206, 206, 60, 60, 60, 60, 60, 61,
	61, 71, 71, 348, 348, 348, 352, 352, 353, 353,
	354, 354, 354, 354, 354, 354, 354, 350, 350, 66,
	66, 66, 66, 67, 67, 67, 68, 68, 108, 108,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 32,
	33, 33, 34, 34, 35, 35, 35, 77, 77, 77,
	79, 76, 76, 76, 78, 78, 78, 78, 80, 80,
	81, 81, 81, 81, 81, 82, 82, 301, 299, 299,
	300, 300, 153, 153, 153, 153, 153, 154, 154, 154,
	306, 306, 306, 306, 306, 306, 305, 305, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 95, 95, 95, 103, 103,
	103, 103, 103, 103, 103, 84, 84, 89, 89, 89,
	89, 89, 85, 85, 90, 90, 91, 91, 92, 92,
	92, 92, 92, 92, 86, 86, 86, 86, 94, 94,
	94, 94, 93, 93, 99, 99, 99, 99, 99, 99,
	96, 96, 96, 96, 97, 97, 97, 100, 100, 100,
	100, 87, 87, 88, 88, 101, 101, 102, 102, 102,
	102, 102, 98, 98, 98, 349, 349, 351, 351, 64,
	64, 42, 42, 43, 43, 155, 155, 156, 156, 230,
	230, 230, 230, 157, 157, 129, 129, 129, 158, 158,
	159, 159, 160, 160, 160, 162, 162, 163, 163, 164,
	164, 161, 161, 161, 229, 317, 317, 318, 318, 318,
	318, 318, 318, 319, 319, 319, 319, 319, 319, 319,
	315, 315, 316, 313, 313, 314, 314, 314, 314, 355,
	355, 228, 228, 167, 167, 320, 320, 320, 320, 321,
	321, 321, 321, 321, 324, 323, 322, 322, 322, 322,
	322, 262, 262, 262, 105, 105, 44, 44, 44, 135,
	135, 45, 45, 41, 41, 41, 210, 210, 171, 171,
	267, 267, 267, 146, 146, 124, 124, 124, 19, 21,
	21, 15, 15, 15, 15, 15, 15, 26, 26, 24,
	24, 211, 211, 212, 212, 65, 65, 69, 69, 74,
	74, 104, 104, 104, 104, 104, 104, 28, 28, 28,
	28, 36, 36, 36, 36, 73, 73, 357, 357, 142,
	142, 142, 142, 143, 143, 225, 225, 226, 226, 358,
	358, 227, 227, 227, 137, 136, 138, 138, 40, 40,
	40, 131, 131, 132, 132, 133, 133, 134, 134, 359,
	359, 62, 62, 62, 107, 107, 149, 149, 222, 222,
	222, 224, 224, 223, 223, 223, 196, 196, 196, 106,
	106, 176, 176, 186, 186, 187, 187, 273, 188, 72,
	72, 116, 116, 114, 114, 114, 114, 114, 114, 114,
	114, 115, 115, 115, 117, 117, 117, 117, 117, 117,
	117, 120, 120, 120, 121, 121, 121, 119, 119, 330,
	330, 330, 333, 333, 329, 331, 331, 332, 332, 356,
	356, 197, 197, 197, 166, 165, 165, 169, 169, 168,
	170, 170, 266, 266, 266, 194, 194, 193, 193, 193,
	193, 215, 215, 213, 213, 214, 214, 218, 218, 219,
	219, 219, 220, 220, 221, 221, 192, 192, 247, 247,
	217, 217, 216, 118, 118, 118, 175, 175, 175, 177,
	177, 237, 237, 237, 238, 238, 236, 236, 236, 236,
	268, 268, 268, 268, 268, 268, 268, 268, 346, 346,
	346, 347, 347, 265, 265, 269, 269, 269, 269, 269,
	269, 263, 263, 263, 263, 264, 264, 274, 274, 200,
	200, 200, 200, 198, 198, 199, 199, 270, 270, 270,
	270, 195, 195, 271, 271, 271, 231, 231, 277, 277,
	277, 295, 295, 174, 174, 174, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 279, 279, 279,
	279, 281, 281, 281, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 294, 294, 294, 294, 294, 282, 282, 289,
	289, 290, 290, 291, 292, 283, 283, 284, 284, 285,
	286, 293, 293, 293, 293, 297, 297, 287, 287, 287,
	287, 287, 288, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 208, 208, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 241, 241, 241, 241, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 325, 325, 325,
	325, 325, 325, 325, 325, 327, 327, 328, 328, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 334,
	334, 335, 335, 337, 337, 338, 338, 339, 340, 340,
	340, 341, 342, 342, 336, 336, 343, 343, 343, 344,
	344, 345, 345, 345, 345, 345, 253, 253, 254, 255,
	261, 261, 261, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 144,
	144, 144, 144, 144, 183, 183, 182, 182, 250, 250,
	248, 248, 252, 252, 201, 201, 296, 296, 296, 296,
	296, 296, 296, 202, 202, 202, 209, 203, 203, 204,
	204, 204, 204, 204, 244, 245, 205, 205, 205, 246,
	246, 256, 260, 260, 259, 258, 258, 257, 257, 234,
	234, 235, 235, 233, 232, 191, 191, 190, 190, 189,
	189, 360, 360, 185, 185, 272, 272, 272, 272, 178,
	178, 151, 151, 179, 179, 147, 147, 150, 150, 148,
	148, 148, 148, 172, 172, 173, 173, 145, 145, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	298, 298, 298, 249, 139, 139, 139, 140, 140, 141,
	141, 303, 303, 303, 304, 304, 304, 304, 302, 302,
	302, 302, 302, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 7, 7, 7, 4, 12, 4,
	12, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 7,
	2, 6, 2, 1, 12, 12, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 4, 6, 7, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 2, 7,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 3, 5, 3, 1, 3, 1, 2, 2, 3,
	2, 2, 5, 3, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 1, 5, 2, 3, 0,
	3, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	2, 6, 2, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 1,
	4, 7, 1, 3, 2, 4, 1, 6, 6, 3,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 3,
	1, 3, 3, 1, 1, 2, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 4, 3, 5, 3, 4, 5,
	2, 3, 3, 3, 4, 2, 3, 4, 3, 3,
	3, 4, 4, 4, 4, 2, 3, 7, 7, 7,
	4, 5, 5, 5, 5, 2, 0, 2, 0, 3,
	2, 8, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 1, 0,
	9, 9, 6, 7, 5, 3, 5, 1, 3, 1,
	1, 10, 11, 9, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 2, 4, 7, 3, 3,
	0, 6, 3, 11, 14, 4, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	3, 2, 0, 1, 3, 1, 1, 3, 5, 1,
	1, 3, 3, 1, 2, 4, 4, 2, 3, 5,
	5, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 1, 0, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	1, 0, 2, 4, 2, 5, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	8, 4, 6, 3, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 3, 3, 1, 3, 3, 1, 3, 3, 1,
	1, 3, 3, 1, 1, 6, 6, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 5, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 380, -4, -27, -29, -32, -37,
	-38, -60, -46, -47, -48, -59, -55, -61, -62, -63,
	-64, -56, -70, -69, -71, -74, -72, -65, -66, -75,
	-83, -104, -105, -106, -107, -5, -10, 24, 35, -30,
	-31, 48, -33, 72, -44, -39, 74, 95, -332, 99,
	-49, -53, 103, 110, 113, 135, 144, 230, 237, 258,
	260, 262, 269, -114, -116, 256, -67, -68, -76, -77,
	-78, -79, -108, 281, -84, -85, -86, -87, -88, -89,
	-90, -91, -92, -93, -94, -95, -96, -97, -98, -99,
	-100, -101, -102, 284, -28, -36, -73, 324, -6, -7,
	-8, -9, -11, -21, 112, -40, -41, -42, -43, -45,
	-330, -50, -51, -52, -54, -117, -115, 377, 257, 333,
	36, 294, 62, 106, 264, -13, -14, -17, -16, -18,
	-15, -23, -25, -22, -24, -26, -19, -20, -12, 349,
	356, -120, -118, -119, -121, 274, 341, 304, 381, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 2,
	304, 344, 334, 88, 152, 242, -348, 2, -179, 304,
	88, -148, -139, 370, 4, -309, -311, 20, 21, 24,
	34, 35, 36, 41, 45, 48, 49, 56, 61, 62,
	63, 68, 65, 66, 67, 70, 72, 73, 76, 77,
	78, 86, 87, 89, 91, 95, 97, 99, 102, 103,
	105, 110, 112, 111, 113, 123, 124, 129, 131, 136,
	142, 143, 144, 145, 153, 156, 158, 151, 168, 169,
	170, 174, 175, 176, 179, 178, 183, 184, 187, 188,
	191, 193, 195, 196, 199, 197, 201, 202, 204, 203,
	209, 211, 212, 214, 217, 220, 223, 226, 227, 228,
	229, 230, 231, 233, 235, 237, 239, 240, 241, 242,
	243, 245, 246, 248, 249, 250, 251, 252, 256, 254,
	255, 257, 258, 259, 260, 262, 264, 265, 267, 282,
	283, 295, 269, 270, 271, 272, 273, 277, 275, 278,
	279, 281, 284, 286, 289, 293, 294, 296, 299, 300,
	297, 292, 303, 305, 306, 307, 308, 309, 310, 311,
	312, 319, 320, 324, 325, 326, 327, 330, 331, 332,
	333, 335, 338, 339, 340, 345, 350, 351, 352, 353,
	354, 29, 37, 38, 39, 40, 42, 43, 46, 47,
	52, 53, 54, 57, 90, 92, 93, 109, 114, 115,
	125, 126, 127, 137, 139, 146, 147, 150, 157, 159,
	160, 161, 162, 163, 165, 172, 173, 181, 198, 208,
	210, 221, 225, 234, 236, 244, 266, 276, 287, 288,
	298, 301, 314, 315, 316, 321, 322, 337, 341, 342,
	380, 380, 2, 169, 241, -147, -139, 88, 380, 2,
	304, 334, 344, -210, 88, 329, -139, 237, 22, 2,
	97, 156, 332, 331, 22, 233, 275, 306, 308, 2,
	380, 2, 344, 304, 152, 88, 334, -139, 2, -58,
	2, 377, -57, -5, -39, -49, -59, -55, -10, -27,
	-29, -44, -46, -53, -63, -62, -64, -66, -70, -69,
	-72, -76, -77, -83, -106, -107, 74, 24, 103, 281,
	112, -352, 2, 22, -353, -354, 74, 103, 135, 274,
	156, 97, 331, 304, 2, 169, 2, -139, 2, -348,
	2, 169, 2, -352, 2, -139, 2, -143, 2, 269,
	-139, 380, 380, 380, 380, 380, 188, 56, 266, 278,
	-81, 320, -80, 314, -301, -82, 2, -180, 199, -139,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 2, -103, 278,
	35, 56, 22, 61, 89, 136, 152, 153, 175, 69,
	70, 240, 188, 170, 319, 176, 279, 305, 320, 74,
	335, 309, 111, 4, 88, 199, 280, 314, 380, 380,
	380, -356, 2, 304, 380, 380, 380, 380, 271, 284,
	380, 380, 380, 380, 380, -115, -117, -116, 380, 380,
	380, 380, -168, -169, 328, 164, 108, 219, -114, -116,
	2, -330, -103, 278, 2, 56, 22, -299, 2, -239,
	215, -241, 368, 369, 363, 205, 355, -253, 94, -243,
	-256, 109, 266, 377, -147, -242, 383, 9, -327, -116,
	30, -254, -255, 50, -139, 7, 8, 5, 6, -145,
	-279, -249, -288, 323, 116, 207, -325, -326, 4, -309,
	-303, -280, -290, -284, -287, 165, 59, 80, 81, 84,
	82, 85, 280, 334, 51, 29, 114, 115, 225, 234,
	301, 321, 322, 146, 208, 147, 57, 137, 181, 102,
	38, 40, 42, 43, 52, 53, 90, 92, 93, 125,
	126, 127, 157, 159, 160, 161, 162, 163, 210, 244,
	287, 298, 315, 316, 342, -310, -291, -292, -285, -286,
	75, 117, 134, 155, 148, 167, 171, 182, 185, 194,
	200, 222, 224, 263, 285, -293, -357, 2, 320, 320,
	2, -357, 2, -357, 2, -142, 2, 320, 317, -333,
	245, -329, -139, -333, 380, 380, 382, 380, -165, -166,
	2, 22, 100, 377, 2, -268, 2, 375, -270, -147,
	-116, -269, 377, 216, -3, 2, -270, 146, -147, 2,
	-270, 146, -147, 2, -307, 146, -305, 9, -304, 5,
	4, -309, -311, -310, 59, 2, -139, 2, -150, 146,
	-147, -302, 4, -309, -311, -310, -312, 22, 25, 26,
	27, 28, 30, 31, 32, 33, 44, 50, 51, 55,
	58, 60, 69, 74, 79, 80, 82, 81, 83, 84,
	85, 94, 96, 98, 100, 101, 104, 106, 108, 116,
	118, 130, 132, 133, 135, 138, 140, 149, 152, 154,
	164, 166, 177, 180, 186, 189, 190, 205, 206, 207,
	213, 215, 216, 218, 219, 232, 238, 247, 261, 274,
	280, 290, 302, 304, 313, 317, 318, 323, 328, 329,
	334, 336, 343, 344, 346, 347, 348, 349, 317, 382,
	-179, -172, -139, -233, -232, 379, -239, 2, -239, 2,
	133, 377, -190, -191, -232, -233, 2, -180, 146, -307,
	146, 2, -180, 2, 152, -139, 146, 2, -139, 22,
	133, 2, 166, 2, 166, 2, -271, 2, -270, -181,
	146, 2, -180, -181, 146, 2, -151, 146, 2, -150,
	-139, 146, 2, -308, 146, 2, -307, -206, 377, -276,
	2, -275, -304, 341, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 278,
	215, 382, -180, -239, -251, 377, 133, -239, 215, -139,
	2, 282, 2, 377, -81, 54, 320, -226, 2, -227,
	-136, -137, -138, 168, 239, 243, 354, 317, 360, 133,
	-299, -184, 379, -103, 2, -307, 2, 282, 2, 240,
	279, 56, 133, 2, 2, -349, 2, 215, 133, 2,
	133, 2, 133, 2, 133, 2, 133, 2, 2, 240,
	279, 2, 130, 2, 319, 2, 2, 133, 2, 168,
	239, 295, 2, 304, 344, 2, 133, 133, 354, 2,
	-195, -270, 304, 354, 22, -168, -169, -216, -193, 130,
	-213, -214, 186, 118, 213, -197, 22, 100, -197, -197,
	45, 378, 378, -103, 282, 2, 10, 11, 58, 34,
	368, 369, 370, 371, 128, 372, 373, 366, 367, 365,
	358, 359, 362, 291, 23, 71, 361, 360, 64, 192,
	268, 119, 120, 121, 122, 253, 13, 14, 15, 27,
	218, 185, 355, 148, 285, 363, 16, 17, 18, 167,
	37, 149, -144, -152, -239, -239, -239, -239, -239, 224,
	-189, -234, 375, -116, 377, 377, -116, -239, -182, 377,
	7, -116, -248, 375, -257, -239, -190, 377, 5, 377,
	5, -334, 350, 130, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 236, -297, 345, -297, -297, -281, 377,
	-281, -282, 377, -281, 351, 356, 377, -225, -226, -225,
	317, -143, 382, -333, -173, 377, 377, -185, -272, -239,
	370, -185, -182, -239, 75, -200, 171, 200, 134, 182,
	263, 155, 7, -58, -236, 383, 377, 370, -265, 356,
	-116, -269, 377, -268, -147, 377, -126, 254, -125, 21,
	24, 103, 339, 109, 292, 310, 112, 270, 254, 109,
	349, 109, 112, 254, 292, 310, 270, 254, 109, 383,
	112, -307, -148, 382, -302, 370, 296, 378, -178, -147,
	-191, 377, -167, 205, -135, -331, 349, 205, -167, 377,
	-140, 146, 2, -139, -331, 205, -271, -149, -147, -149,
	281, -139, 31, -128, 382, 49, 259, 109, -128, 109,
	-128, 382, 109, -128, 109, 382, 109, -182, 378, 382,
	-348, -354, 74, 377, 31, -250, -277, -278, -280, -289,
	-283, -287, -288, 41, 47, 46, 173, 172, 311, 198,
	276, 288, 337, 150, 39, 214, 158, 4, 157, 159,
	160, 161, 162, 163, 287, 38, 244, 126, 127, 125,
	102, 93, 92, 210, 43, 42, -291, -292, -285, -286,
	90, 315, 316, 165, 40, 53, 52, 342, 298, -308,
	-348, -301, -182, 31, -226, 2, -358, 382, 184, -154,
	191, 204, 142, 216, 352, -306, 5, 4, -249, -262,
	94, 188, -288, 8, 369, -298, 7, 368, -300, -299,
	-300, 78, 379, -302, -180, 22, 283, 2, -301, -351,
	130, -348, -301, -301, -301, -301, -301, 278, -58, 130,
	-139, 184, -301, 2, -301, 2, 304, 152, 304, -128,
	382, -147, 65, 66, 354, -216, -193, -194, -193, -217,
	-216, 331, -214, -213, -218, -239, 22, -221, 124, 201,
	-239, -241, -115, -115, -115, -170, -266, -239, 238, 152,
	-301, -295, -277, -294, 249, 250, 248, 252, 251, -277,
	-302, 314, -239, -239, -239, -239, -239, -239, -239, -239,
	-239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
	-239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
	-239, -239, -239, -239, 185, 148, 285, 37, 149, -239,
	317, -239, -239, -239, -239, 197, 205, 207, 323, 116,
	330, 100, 211, -360, 302, 33, -246, -116, 377, -261,
	28, 290, 22, -253, 266, 377, -234, -239, -235, -183,
	-182, 378, 382, -183, -252, -248, -260, -259, 346, 378,
	-182, 343, 22, 100, 370, 2, 7, -207, 353, 196,
	91, 143, 195, -208, 273, -335, 123, 138, 377, 378,
	2, 378, 2, 378, 2, 378, 2, -239, -239, -201,
	2, -296, -182, 4, 353, 196, 91, 143, 195, 273,
	-201, 2, -202, 2, -239, -182, -203, -240, -241, 368,
	369, 363, 377, 266, -204, 2, -239, -183, -239, 44,
	180, 318, -205, -239, 133, -182, -239, -239, -239, -182,
	-182, 2, -182, 2, 377, 7, 7, 314, 314, 7,
	-143, -329, 31, -172, -182, -175, 382, 133, 31, 4,
	-175, 378, 382, 171, 171, -268, -200, 171, -198, 222,
	-198, -198, -346, 377, 376, -265, -302, 375, 384, -183,
	2, -264, -263, 31, -139, 220, 378, -147, 382, 317,
	-211, 69, 60, -229, 146, 60, -313, -139, 69, -314,
	55, 329, 238, 132, -211, 69, -211, 69, 69, -270,
	34, -72, 67, 133, 317, -270, 229, -307, 67, 317,
	34, -72, 133, 317, -150, -302, 67, -274, 357, -139,
	133, 378, 382, -155, -172, -156, -139, -230, -229, -315,
	-316, -313, 152, 329, 117, 31, 109, 229, 109, 31,
	215, 205, -131, 307, 109, -231, 347, -222, -72, 377,
	94, 31, -222, -186, -187, -273, -188, -147, 377, -139,
	-180, -181, -181, -150, -151, -139, -307, -308, 378, -58,
	-275, 317, 336, -156, -57, 24, 74, 103, 378, 382,
	-174, 30, 375, -207, 377, -274, 133, 360, 317, 378,
	320, -227, -153, 243, 289, 255, 277, 8, 7, 7,
	382, -302, -350, -139, 278, -58, -147, -150, -147, -270,
	349, 130, 66, -194, -217, -219, -298, 377, 369, -220,
	266, 267, 382, -124, 32, 98, 174, -147, 354, -239,
	-239, 317, -360, 302, -246, -239, 197, 207, 323, 116,
	330, 100, 211, 133, 377, -240, -240, -182, -239, 377,
	-182, 376, 386, 378, -239, 376, 376, 382, -258, -259,
	104, -239, -169, 382, -168, -239, -182, -182, 378, 378,
	317, 317, 317, 317, 377, -340, 223, 377, 377, -239,
	31, 382, 378, 133, 378, 378, -209, 232, 378, 10,
	11, 368, 369, 370, 371, 128, 372, 373, 366, 367,
	365, 358, 359, 360, 64, 192, 268, 13, 14, 15,
	167, 149, -240, -240, -240, -182, 377, 378, -244, -245,
	133, 130, 31, -205, -205, -205, 378, 133, -182, 382,
	382, 382, 378, 378, 378, 7, 378, 382, 378, 354,
	354, 378, 377, 378, 378, -231, -272, -177, 2, -268,
	-302, -231, -239, -268, -268, -199, 336, 215, 171, -268,
	-263, 378, -347, 7, -265, -264, 7, -238, -237, 131,
	203, 378, -139, 377, -265, 378, -125, -147, -139, -139,
	205, -229, 146, -130, 205, -277, -139, 377, 377, 174,
	174, -139, -139, 146, -139, 146, -139, -139, -126, 254,
	-72, 354, 377, -147, 254, -307, 349, 354, -139, -72,
	377, -302, 254, 354, -109, 145, 211, 296, 133, -147,
	378, 378, 382, -140, 152, -140, -72, -180, -307, -307,
	-72, -147, 109, -132, 105, -359, 360, -139, -215, -213,
	-239, -196, -224, 261, 215, -178, 341, -139, -196, -176,
	382, 133, 360, -178, -128, -128, -128, -128, -350, -307,
	378, -277, 375, 376, 7, 7, -112, 349, -350, -299,
	-299, -136, 327, 63, 243, -299, 382, 217, 242, 88,
	304, -220, -239, -266, -147, 383, -239, -239, -240, -240,
	133, 377, -239, -250, 27, 27, 378, -183, 382, -235,
	-239, 378, -248, 106, -239, 313, 378, 343, -169, -169,
	-169, 5, 196, 143, 195, -208, 195, -208, -208, 7,
	-341, -139, 377, 347, -168, 378, -295, -277, -239, -244,
	-239, -295, -277, -240, -240, -240, -240, -240, -240, -240,
	-240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
	-240, -240, 100, 205, 211, -240, 382, -183, -245, -244,
	-239, -239, -277, 378, 378, 378, -182, -239, -239, -239,
	378, 7, -57, -192, 138, -274, 382, -192, -199, 377,
	-239, -268, 376, 378, 382, -264, 376, 382, 385, 360,
	-265, 377, -172, -263, 317, 317, 109, 205, 338, -317,
	-314, -239, -171, -267, -139, -328, 377, -325, -326, -145,
	377, 377, -123, 103, 281, -212, 109, -128, 109, -128,
	317, -211, 69, -242, -145, -139, -182, 317, 229, -242,
	-182, 317, -242, -112, 133, 303, 296, -157, 151, -230,
	377, -140, 377, 377, -167, -135, 377, -139, -133, 179,
	-359, -305, -331, -196, -196, -185, 206, 68, 378, -231,
	-187, -177, -239, 378, -113, 76, -113, 7, 376, 378,
	-111, 217, -110, -139, 5, -139, -34, -35, 152, 231,
	-302, -139, -147, 216, 378, -124, -302, 27, 27, -239,
	-250, 378, -239, -239, 378, -239, 376, -239, 5, -239,
	378, 378, 378, 378, -342, -139, -239, 378, 378, 378,
	-245, 133, 100, 211, 377, -239, 378, 378, 382, 378,
	378, 378, 378, -247, 140, 45, -268, -247, -172, -236,
	7, -237, -302, 375, -264, -172, 378, -139, -139, -229,
	109, -318, 69, -319, 58, 117, 74, 205, 207, 329,
	238, 55, 94, 247, 378, 378, 382, -146, -190, 58,
	-146, -239, 377, -171, -172, 205, 94, 205, 94, 87,
	325, -139, -139, -147, -139, -139, 377, 378, -147, -307,
	378, -302, -308, 314, -158, -159, 228, 149, -171, 377,
	-172, -155, 31, -171, 215, -134, 178, -359, -305, -131,
	-223, 377, 215, -72, -196, 360, 87, 87, 376, 382,
	377, 360, 360, 382, 22, 377, -124, -239, -239, 378,
	378, -169, -336, 228, 378, -240, 133, 377, -250, 378,
	-239, -337, 348, -239, -182, -337, 378, -265, 7, 378,
	-229, -139, -302, -139, 117, 146, 207, 174, 377, -240,
	-147, -228, -355, 73, 300, -267, -124, -302, -124, 378,
	-182, 378, 378, 207, 207, -239, -277, -128, -128, 317,
	317, -182, 317, 317, -242, 45, 226, 378, -171, 378,
	378, -72, 378, -147, -359, -305, -132, 101, -172, 69,
	-246, 377, 377, -110, -111, -307, -307, -35, -172, 378,
	-169, 45, -240, -250, 378, 378, -338, -339, -139, -264,
	376, -319, -140, 205, -239, -141, 377, -157, 377, -146,
	-169, 247, -127, 58, -139, -139, -169, 377, 377, 187,
	242, -147, -228, 378, -157, -228, 377, -305, -133, 331,
	206, 378, -139, -308, -308, 378, 378, -343, 242, 267,
	-182, 378, 382, 31, 109, 378, -320, 193, -139, -172,
	-124, 378, -147, -122, 336, -302, 378, -182, -182, 377,
	377, 377, -157, -228, -157, -171, -134, 281, -231, 378,
	378, 378, -344, -345, 37, 326, 78, -239, -344, -339,
	-341, 117, -321, -324, -323, 215, 134, 227, 286, 378,
	378, -167, -239, 378, 378, -172, -172, -172, -157, 378,
	-186, -112, -112, -345, 235, 129, 266, 235, 129, -139,
	-323, 215, -324, 215, 331, 97, -320, 378, 378, 378,
	-228, -231, 27, -322, 202, 259, 49, 281, -322, -321,
	377, 377, -129, 49, 259, -157, -345, 20, 207, 94,
	-160, 228, -161, 228, 378, -302, 378, -302, 341, 341,
	-162, 377, 183, 382, -159, -158, -163, -164, -239, 194,
	312, -160, 377, 382, 378, 382, 377, -163, -160, -164,
	-163, 378, 378, 382, -159, -158, -161, 382, -161,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 155,
	157, 0, 319, 0, 164, 166, -2, 0, 0, 0,
	187, 188, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 689, -2, 0, 299, 301, 310, 312,
	314, 316, 317, 0, 368, 370, 372, 374, 376, 378,
	380, 382, 384, 386, 388, 390, 392, 394, 396, 397,
	399, 401, 403, 0, 611, 613, 615, -2, 59, 61,
	63, 65, 67, 77, 0, 168, 170, 172, 174, 177,
	727, 191, 193, 195, 197, -2, 738, 0, 0, 0,
	-2, 0, -2, -2, -2, 68, 69, 70, 71, 72,
	73, 83, 84, 85, 86, 75, 79, 80, 82, 0,
	0, 704, 706, 708, 710, -2, 0, 0, -2, 7,
	13, 15, 17, 20, 22, 24, 26, 28, 30, 32,
	34, 36, 38, 40, 43, 49, 51, 53, 57, 58,
	0, 0, 0, 0, 0, 0, 0, 130, 283, 0,
	1309, 1233, 1239, 1240, 1264, 1265, 1266, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
	1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
	1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
	1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
	1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
	1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
	1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
	1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,
	156, 158, 159, 0, 0, 0, 1235, 1309, 165, 167,
	0, 0, 0, 0, 0, 576, 274, 1372, 276, 278,
	0, 0, 0, 0, 181, 182, 183, 184, 185, 186,
	189, 190, 0, 0, 0, 0, 0, 273, 271, 220,
	221, 0, 256, 257, 258, 259, 260, 262, 224, 226,
	228, 229, 231, 233, 235, 237, 239, 241, 242, 244,
	246, 247, 249, 251, 252, 254, 577, 0, 0, 0,
	0, 0, 280, 286, 287, 288, 290, 291, 292, 293,
	294, 295, 296, 0, 136, 0, 480, 269, 267, 0,
	132, 0, 608, 0, 282, 609, 610, 605, 606, 1399,
	634, 300, 302, 311, 313, 315, -2, -2, 1493, -2,
	332, -2, 340, 1499, 0, 343, 344, 347, -2, 216,
	369, 371, 373, 375, 377, 379, 381, 383, 385, 387,
	389, 391, 393, 395, 398, 400, 402, 404, 405, 0,
	0, 0, 409, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, 0, -2, -2, 0, 0,
	-2, 0, 0, 408, 410, 411, 412, 0, 612, 614,
	616, 0, 565, 729, 60, 62, 64, 66, 0, 0,
	169, 171, 173, 175, 178, -2, 702, 703, 192, 194,
	196, 198, -2, 0, 733, 733, 733, 0, 0, 703,
	701, 0, 303, 0, 305, 0, 409, 308, 309, 348,
	349, 939, 0, 0, 0, 0, 0, 0, 1012, 1042,
	1044, 1464, 1493, 0, 1046, 1047, 0, 1049, 1051, 1052,
	0, 1055, 1056, 1208, 1235, 1249, 1250, 1251, 1252, 0,
	0, 1255, 0, 1257, 1258, 1259, 1110, 1066, -2, -2,
	1247, 867, 868, 869, 870, -2, 1507, 1070, 1073, 1076,
	1079, 1080, 1083, 1084, 0, 1448, 1465, 1466, 1489, 1490,
	1498, 1502, 1503, 1472, 1486, 1473, 1460, 1470, 1484, 1315,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1273, 901, 902, 907, 908,
	1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 910, 636, 618, 627, 636,
	620, 621, 622, 623, 624, 625, 626, 629, 0, 719,
	1378, 722, 1246, 720, 705, 707, 0, 709, 0, 0,
	713, 735, 734, 0, 774, 717, 718, 728, 789, 827,
	804, 795, 0, 0, 2, 74, 0, 1472, 827, 76,
	0, 1472, 827, 78, 0, 1472, 137, 138, 366, 367,
	1274, 1275, 1276, 1277, 1507, 81, 0, 87, 0, 1472,
	1238, 0, 1278, 1279, 1280, 1281, 1282, 1523, 1524, 1525,
	1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
	1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,
	1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565,
	1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
	1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
	1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 0, 0,
	284, 285, 1243, 1241, 1242, 0, 160, 161, 162, 163,
	0, 0, 1236, 1217, 1215, 1216, 176, 544, 1472, -2,
	1472, 568, 544, 572, -2, 726, 1472, 650, 275, 277,
	0, 180, 0, 663, 0, 665, 0, 680, 833, 122,
	1472, 201, 214, 122, 1472, 204, 122, 1472, 207, 1231,
	122, 1472, 210, 211, 1472, 213, 139, 270, 0, 0,
	-2, 263, 265, -2, 261, 225, 227, 230, 232, 234,
	236, 238, 240, 243, 245, 248, 250, 253, 255, -2,
	0, 0, 0, 479, 0, 0, 0, 607, 0, 633,
	318, 0, 329, 0, 331, 1459, -2, -2, 335, 637,
	641, 642, 643, 0, 0, 0, 0, 0, 0, 0,
	345, 217, 0, 406, 407, 415, 416, 0, 419, 440,
	452, 0, 0, 423, 425, 478, 427, 0, 0, 429,
	0, 431, 0, 433, 0, 435, 0, 437, 439, 441,
	453, 443, 728, 445, 0, 447, 451, 0, 456, 0,
	458, 459, 460, 0, 0, 466, 0, 0, 413, 414,
	122, 831, 0, 0, 0, -2, 0, 746, 771, 0,
	749, 750, 0, 0, 0, 0, 731, 732, 0, 0,
	0, 691, 692, 304, 0, 307, 0, 0, 0, 0,
	1143, 1144, 1145, 1146, 1147, 1148, 1151, 1152, 1149, 1150,
	1153, 1154, 0, 0, 0, 0, 0, 1155, 0, 0,
	0, 0, 0, 0, 0, 0, 1156, 1157, 1158, 0,
	0, 1160, 0, 1162, 0, 0, 0, 0, 0, 0,
	1222, 0, 0, 1159, 944, 945, 946, 978, 979, 0,
	1043, 1219, 1212, 1045, 0, 1165, -2, 1166, 0, 0,
	1048, 1053, 1054, 1165, 0, 1207, -2, 0, 1254, 0,
	936, 1112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1188, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 886, 904, 915, 912, 911, 888, 0,
	887, 885, 0, 889, 0, 0, 0, 617, -2, 619,
	0, 631, 0, 721, 0, 0, 0, 778, 1223, 1227,
	1228, 778, 0, 1166, 0, 0, 0, 0, 824, 824,
	824, 822, 798, 0, 804, 0, -2, 828, 816, 0,
	-2, 795, 0, 0, 829, 0, 88, 602, 101, 0,
	602, 602, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 818, 1234, 0, 1213, 1214, 152, 0, 0, 1229,
	1218, 486, 0, 0, 566, 0, 725, 0, 0, 0,
	0, 1472, 575, 1267, 652, 0, 837, 0, 666, 0,
	0, 834, 0, 199, 0, 120, 121, 0, 202, 0,
	205, 0, 0, 208, 0, 0, 0, 0, 728, 0,
	0, 289, 0, 0, 728, 0, 1168, 845, 846, 847,
	848, 849, 936, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 898,
	0, 873, 873, 873, 890, 891, 899, 900, 905, 906,
	917, 918, 920, 922, 916, 916, 916, 913, 914, 818,
	0, 0, 0, 0, -2, 337, 0, 639, 0, 644,
	357, 358, 359, 646, 647, 341, 360, 361, 362, 363,
	364, 365, 0, 561, 0, 563, 1260, 0, 338, 350,
	339, 342, 0, 218, 417, 418, 420, 421, 422, 426,
	0, 475, 428, 430, 432, 434, 436, 444, 448, 728,
	454, 457, 461, 462, 463, 464, 0, 0, 0, 564,
	0, 320, 0, 470, 0, 746, 771, 695, 745, 696,
	770, 772, 747, 748, 753, 757, 758, 761, 764, 765,
	755, 939, 714, 715, 716, 739, 740, 587, 0, 0,
	306, 940, 841, 842, 892, 893, 894, 895, 896, 941,
	942, 0, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, -2, -2, -2, -2, -2, -2, -2, -2,
	965, 966, 967, 968, 969, 970, 971, 972, -2, -2,
	-2, 976, 977, -2, 1161, 1163, 0, 1222, 0, -2,
	0, -2, -2, -2, -2, 990, 0, 992, 995, 997,
	999, 0, 0, 0, 0, 1221, 1009, 1199, 0, 0,
	1140, 1141, 1142, 994, 0, 0, 1220, 1211, 0, 0,
	1164, 1050, 0, 0, 0, 1172, 1206, 1202, 0, 1057,
	738, 0, 0, 0, 0, 1064, 0, 1263, 923, 924,
	925, 926, 927, 928, 937, 1120, 0, 0, 0, 1071,
	1072, 1074, 1075, 1077, 1078, 1081, 1082, 0, 0, 0,
	1088, 0, 1175, -2, -2, -2, -2, -2, -2, -2,
	0, 1090, 0, 1092, 1166, 1185, 0, 0, 1013, 0,
	0, 0, 0, 1493, 0, 1095, 1166, 1193, 0, 0,
	0, 0, 0, 1166, 0, 1198, 0, 0, 0, 0,
	0, 1106, 0, 1108, 0, 0, 0, 0, 0, 0,
	630, 723, 0, 0, 0, 837, 0, 0, 0, 1226,
	837, 773, 0, 0, 0, 0, 0, 0, 819, 823,
	820, 821, 0, 0, 804, 816, 786, 0, 0, 0,
	793, 794, 815, 0, 814, 803, -2, 0, 0, 0,
	0, 0, 601, 103, 1472, 0, 124, 0, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 1237, 0, 142, 0, 1244,
	0, 0, 0, 0, 0, 485, 1243, 487, 489, 490,
	491, 492, 1268, 0, 1268, 0, 0, 0, 0, 0,
	0, 0, 654, 660, 0, 752, 0, 678, 668, 0,
	0, 0, 678, 682, 683, 685, 686, 0, 0, 835,
	215, 122, 122, 1232, 122, 122, 140, 212, 272, 222,
	264, 0, 0, 0, 266, 0, 0, 0, 268, 0,
	838, 840, 0, 850, 0, 151, 0, 0, 0, 330,
	0, 638, 645, 0, 354, 0, 356, 562, 1262, 1261,
	0, 219, 477, 297, 446, 449, 472, 473, 474, 832,
	0, 0, 471, 699, 700, 0, 759, 0, 0, 756,
	762, 763, 0, 742, 585, 586, 0, 0, 0, -2,
	-2, 0, 0, 0, 1010, -2, 991, 993, 996, 998,
	1000, 0, 0, 0, 0, 0, 0, 0, 1011, 1165,
	0, 1209, 1212, -2, 1167, 1170, 1171, 0, 0, 1203,
	0, 0, 0, 0, 737, 738, 738, 738, 1063, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 1087, 0, 1089, 1091, 0, 0, 1093, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1016, 1017, 1018, 0, 1165, 1094, 1191, 1192,
	0, 0, 0, 0, 0, 0, 1100, 0, 1197, 0,
	0, 0, 1104, 1105, 1107, 0, 871, 0, 897, 919,
	921, 909, 728, 1245, 775, 767, 1224, 818, 777, 779,
	1225, 767, 1167, 806, 0, 808, 0, 0, 0, 810,
	0, 799, 0, 801, 816, 791, 0, 0, 784, 0,
	783, 804, 812, 0, 0, 830, 102, 591, 0, 0,
	0, 105, 1472, 113, 0, 516, 0, 0, 0, 0,
	0, 604, 114, 1472, 122, 1472, 122, 115, 89, 602,
	90, 0, 0, 597, 0, 589, 0, 0, 588, 91,
	0, 599, 0, 0, 151, 0, 0, 153, 0, 1230,
	494, 543, 0, 0, 1268, 0, 483, 544, 569, -2,
	571, 0, 0, 656, 660, 0, 659, 726, 678, 751,
	836, 661, 678, 0, 0, 0, 670, 667, 664, 837,
	0, 0, 0, 0, 200, 203, 206, 209, 279, 0,
	0, 1169, 0, 843, 0, 0, 131, 0, 281, 327,
	328, 333, 352, 353, 355, 351, 0, 0, 0, 0,
	0, 0, 0, 741, 587, 0, 943, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 1200, 0, 0, 0,
	1211, -2, 1173, 1201, 1205, 0, 1058, 0, 0, 0,
	0, 1256, 929, 930, 931, 932, 933, 934, 935, 0,
	1118, 1119, 1123, 0, 0, 1069, 0, 0, 1174, 1184,
	1186, 1014, 1015, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, -2, -2, -2, 1032, 1033, 1034, -2,
	-2, -2, 0, 0, 0, 1187, 0, 0, 1189, 1190,
	1194, 1195, 0, 1097, 1098, 1099, 1196, 0, 0, 0,
	903, 0, 0, 769, 0, 776, 0, 769, 807, 0,
	826, 809, 789, 800, 0, 797, 787, 0, 788, 0,
	816, 0, 0, 796, 0, 0, 0, 0, 123, 514,
	533, 0, 0, 578, 584, 584, 0, 1067, 1068, 0,
	0, 0, 107, 0, 0, 0, 0, 111, 0, 117,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 95,
	0, 0, 94, 129, 0, 0, 154, 499, 0, 488,
	0, 0, 0, 486, 0, 567, 0, 0, 658, 660,
	0, 651, 652, 179, 662, 676, 677, 675, 0, 678,
	684, 681, 687, 0, 0, 133, 0, 0, 844, 851,
	149, 1361, 147, 144, 146, 298, 321, 322, 0, 326,
	467, 468, 469, 754, 760, 743, 587, 0, 0, -2,
	0, 1003, -2, -2, 1136, 1167, 1210, 1204, 1253, 738,
	1059, 1061, 1062, 938, 1125, 1122, 0, 1109, 1085, 1086,
	1183, 0, 0, 0, 0, 1167, 1138, 1096, 0, 1102,
	1103, 872, 724, 1114, 0, 0, 780, 1114, 0, 804,
	802, 785, 781, 0, 792, 0, 813, 593, 595, 104,
	0, 515, 0, 518, 0, 0, 0, 0, 524, 525,
	0, 0, 0, 0, 535, 542, 0, 587, 1248, 0,
	587, 0, 0, 0, 0, 0, 119, 0, 0, 603,
	0, 122, 122, 592, 0, 0, 0, 0, 598, 590,
	0, 600, 141, 0, 481, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 648, 660, 0, 653, 654,
	0, 0, 0, 669, 679, 0, 0, 0, 839, 0,
	0, 0, 0, 0, 324, 0, 744, -2, -2, 1004,
	1137, 0, 738, 0, 1111, -2, 0, 0, 0, 1139,
	0, 711, 0, 768, 766, 712, 825, 816, 0, 811,
	106, 0, 519, 520, 1268, 0, 523, 526, 0, 528,
	1270, 494, 0, 539, 540, 579, 580, 583, 581, 584,
	738, 537, 0, 108, 109, 118, 126, 110, 116, 0,
	0, 738, 0, 0, 817, 0, 0, 542, 0, 532,
	494, 484, 542, 0, 0, 655, 656, 0, 0, 0,
	688, 0, 0, 148, 0, 143, 145, 323, 0, 1060,
	1128, 0, -2, 0, 1040, 1101, 1113, 1115, 0, 790,
	782, 517, 521, 0, 0, 548, 0, 536, 0, 587,
	0, 0, 128, 0, 594, 596, 0, 0, 0, 0,
	0, 0, 494, 542, 482, 494, 0, 657, 658, 0,
	672, 837, 674, 0, 0, 150, 325, 0, 0, 0,
	1124, 1041, 0, 0, 0, 527, 553, 0, 0, 0,
	582, 1058, 544, 112, 0, 125, 0, 0, 0, 0,
	0, 0, 530, 494, 573, 0, 649, 0, 673, 151,
	151, 1121, 1126, 1129, -2, 1432, 1306, 0, 1127, 1116,
	1117, 0, 529, 549, 550, 0, 545, 546, 547, 1269,
	541, 548, 127, 98, 100, 0, 0, 0, 531, 542,
	837, 134, 135, 0, 1131, 1132, 1133, 1134, 1135, 522,
	551, 0, 552, 0, 0, 0, 553, 0, 0, 497,
	494, 671, 0, 554, 0, 557, 558, 0, 555, 538,
	0, 0, 493, 495, 496, 574, 1130, 556, 559, 560,
	0, 0, 0, 0, 500, 0, 501, 0, 0, 0,
	499, 0, 0, 0, 498, 504, 0, 507, 509, -2,
	0, 502, 0, 0, 505, 0, 0, 0, 503, 508,
	0, 506, 499, 0, 498, 513, 511, 0, 512,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 366, 3, 372, 367, 3,
	377, 378, 370, 368, 382, 369, 379, 371, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 386, 381,
	358, 360, 359, 362, 383, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 375, 3, 376, 373, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 384, 365, 385, 363,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 361, 57701, 364, 57702, 374, 57703, 380, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:917
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:923
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:929
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:969
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:970
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:982
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:983
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1026
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1046
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1058
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1081
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1107
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1113
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1119
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1128
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1137
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1206
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1229
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = nil
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = DropCascade
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = DropRestrict
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = DropDefault
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1302
		{
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			return unimplemented(sqllex, "alter using")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1306
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1333
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1359
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.str = "CSV"
		}
	case 134:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1397
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1466
		{
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1486
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			return helpWith(sqllex, "CREATE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1525
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1526
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1528
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			return helpWith(sqllex, "DELETE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1569
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1570
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1574
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1575
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1591
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1606
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1629
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1667
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1734
		{
			return helpWith(sqllex, "DELETE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1735
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1736
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1737
		{
			return helpWith(sqllex, "INSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1738
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1746
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1747
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{ /* SKIP DOC */
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			return helpWith(sqllex, "GRANT")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1885
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "RESET")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1964
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			return helpWith(sqllex, "RESET")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2002
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2003
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{ /* SKIP DOC */
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2006
		{ /* SKIP DOC */
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2007
		{
			return unimplemented(sqllex, "set local")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &ScrubOptionPhysical{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2071
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2126
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2143
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2146
		{
			return unimplemented(sqllex, "set from current")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2148
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2154
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2158
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = Low
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = Normal
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = High
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2257
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2258
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2259
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2260
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2262
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2263
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2264
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2265
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2267
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2268
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2270
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2272
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2273
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2274
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2276
		{
			return helpWith(sqllex, "SHOW")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.str = "client_encoding"
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2300
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2333
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2366
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2382
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2403
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2414
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2433
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2446
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2451
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2469
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2500
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2504
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2508
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2511
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2522
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2533
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2544
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2548
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[7].str)}}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2552
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2556
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2560
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2564
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2570
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2574
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2578
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2584
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2612
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2719
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2723
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = DropDefault
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   UnrestrictedName(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 503:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  UnrestrictedName(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3040
		{
			return unimplemented(sqllex, "match full")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			return unimplemented(sqllex, "match partial")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3042
		{
			return unimplemented(sqllex, "match simple")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3043
		{
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = NoAction
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = Restrict
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = Cascade
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = SetNull
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = SetDefault
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3129
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3144
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = nil
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3169
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3209
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = true
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = false
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3240
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3243
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3244
		{
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = Ascending
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = Descending
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3295
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3297
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = true
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = false
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3330
		{
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3331
		{
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3353
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3364
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3368
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3369
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3370
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3393
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3406
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3411
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3419
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3426
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3429
		{
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3430
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.str = ""
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.str = ""
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3476
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3489
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3491
		{
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = ReadOnly
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = ReadWrite
		}
	case 648:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3555
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.str = ""
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.str = ""
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.str = ""
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.str = ""
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3598
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3599
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3623
		{
			return helpWith(sqllex, "INSERT")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3640
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3682
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3686
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3694
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 679:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3717
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3721
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3722
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3849
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3884
		{
			return helpWith(sqllex, "SELECT")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3885
		{
			return helpWith(sqllex, "VALUES")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3886
		{
			return helpWith(sqllex, "TABLE")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3933
		{
			return helpWith(sqllex, "SELECT")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3977
		{
			return helpWith(sqllex, "TABLE")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3988
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3989
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3990
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3997
		{
			return unimplemented(sqllex, "cte")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4000
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4001
		{
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4004
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4005
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4008
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4009
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = true
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = false
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = false
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = true
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4032
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4033
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[4].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4087
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4111
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4163
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4164
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4167
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4168
		{
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = false
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = true
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4239
		{
			return helpWith(sqllex, "VALUES")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4241
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4256
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &From{}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4278
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4296
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[2].str)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4323
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4360
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4385
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = nil
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4432
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = true
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = false
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.str = astFullJoin
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.str = astLeftJoin
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.str = astRightJoin
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.str = astInnerJoin
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4544
		{
		}
	case 825:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4630
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4644
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4652
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4676
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4687
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = jsonbColType
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = jsonColType
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4745
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4776
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4785
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = nil
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4850
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4946
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4978
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5017
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5018
		{
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = year
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = month
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = day
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = hour
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = minute
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = month
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = hour
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = minute
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = minute
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = nil
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = second
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5113
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5148
		{
			return unimplemented(sqllex, "at tz")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5356
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5422
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5462
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5466
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5522
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5599
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5637
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5645
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5652
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5653
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5666
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5677
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5693
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5694
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5698
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5707
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5713
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5716
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5722
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5725
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5726
		{
			return unimplemented(sqllex, "current role")
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5735
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5737
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5741
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5745
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5749
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5753
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5756
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5761
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5763
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5766
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5775
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5776
		{
			return unimplemented(sqllex, "treat")
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5786
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5806
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5813
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5815
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5818
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5822
		{
			return unimplemented(sqllex, "within group")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5823
		{
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5831
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5858
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.str = ""
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5920
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5921
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5922
		{
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5925
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5926
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5932
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5933
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5934
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5935
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5936
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5969
		{
			sqlVAL.union.val = Any
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5973
		{
			sqlVAL.union.val = Some
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5977
		{
			sqlVAL.union.val = All
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = Plus
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = Minus
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5984
		{
			sqlVAL.union.val = Mult
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = Div
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = Mod
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = Bitand
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5989
		{
			sqlVAL.union.val = Bitor
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = Pow
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = Bitxor
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = LT
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = GT
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = EQ
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = LE
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = GE
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = NE
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = Like
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = NotLike
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = ILike
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6004
		{
			sqlVAL.union.val = NotILike
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6056
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6088
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6109
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6152
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6164
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6168
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6172
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6178
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6193
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6200
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6210
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6216
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6220
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6227
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6233
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6237
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6244
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6250
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6256
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6262
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6266
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6272
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6276
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6282
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6286
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6291
		{
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6292
		{
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6296
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6300
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6306
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6315
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[2].str)}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6319
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6323
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6331
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6341
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6345
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6355
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6366
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6370
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6376
		{
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6380
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6393
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6397
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6401
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6405
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6411
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6421
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6424
		{
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6434
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6438
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6445
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6449
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6453
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6457
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6460
		{
			return unimplemented(sqllex, "func const")
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6462
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6466
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6469
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6471
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6475
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6479
		{
			sqlVAL.union.val = DNull
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6486
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6490
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6496
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6531
		{
			sqlVAL.str = ""
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6537
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6541
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
