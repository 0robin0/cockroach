// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:490
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALL_EXISTENCE = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const IMPORT = 57486
const INCREMENTAL = 57487
const IF = 57488
const IFNULL = 57489
const ILIKE = 57490
const IN = 57491
const INET = 57492
const INTERLEAVE = 57493
const INDEX = 57494
const INDEXES = 57495
const INITIALLY = 57496
const INNER = 57497
const INSERT = 57498
const INT = 57499
const INT2VECTOR = 57500
const INT2 = 57501
const INT4 = 57502
const INT8 = 57503
const INT64 = 57504
const INTEGER = 57505
const INTERSECT = 57506
const INTERVAL = 57507
const INTO = 57508
const IS = 57509
const ISOLATION = 57510
const JOB = 57511
const JOBS = 57512
const JOIN = 57513
const JSON = 57514
const JSONB = 57515
const KEY = 57516
const KEYS = 57517
const KV = 57518
const LATERAL = 57519
const LC_CTYPE = 57520
const LC_COLLATE = 57521
const LEADING = 57522
const LEAST = 57523
const LEFT = 57524
const LESS = 57525
const LEVEL = 57526
const LIKE = 57527
const LIMIT = 57528
const LIST = 57529
const LOCAL = 57530
const LOCALTIME = 57531
const LOCALTIMESTAMP = 57532
const LOW = 57533
const LSHIFT = 57534
const MATCH = 57535
const MAXVALUE = 57536
const MINUTE = 57537
const MONTH = 57538
const NAN = 57539
const NAME = 57540
const NAMES = 57541
const NATURAL = 57542
const NEXT = 57543
const NO = 57544
const NO_INDEX_JOIN = 57545
const NORMAL = 57546
const NOT = 57547
const NOTHING = 57548
const NULL = 57549
const NULLIF = 57550
const NULLS = 57551
const NUMERIC = 57552
const OF = 57553
const OFF = 57554
const OFFSET = 57555
const OID = 57556
const ON = 57557
const ONLY = 57558
const OPTIONS = 57559
const OR = 57560
const ORDER = 57561
const ORDINALITY = 57562
const OUT = 57563
const OUTER = 57564
const OVER = 57565
const OVERLAPS = 57566
const OVERLAY = 57567
const PARENT = 57568
const PARTIAL = 57569
const PARTITION = 57570
const PASSWORD = 57571
const PAUSE = 57572
const PLACING = 57573
const PLANS = 57574
const POSITION = 57575
const PRECEDING = 57576
const PRECISION = 57577
const PREPARE = 57578
const PRIMARY = 57579
const PRIORITY = 57580
const QUERIES = 57581
const QUERY = 57582
const RANGE = 57583
const READ = 57584
const REAL = 57585
const RECURSIVE = 57586
const REF = 57587
const REFERENCES = 57588
const REGCLASS = 57589
const REGPROC = 57590
const REGPROCEDURE = 57591
const REGNAMESPACE = 57592
const REGTYPE = 57593
const REMOVE_PATH = 57594
const RENAME = 57595
const REPEATABLE = 57596
const RELEASE = 57597
const RESET = 57598
const RESTORE = 57599
const RESTRICT = 57600
const RESUME = 57601
const RETURNING = 57602
const REVOKE = 57603
const RIGHT = 57604
const ROLLBACK = 57605
const ROLLUP = 57606
const ROW = 57607
const ROWS = 57608
const RSHIFT = 57609
const SAVEPOINT = 57610
const SCATTER = 57611
const SCRUB = 57612
const SEARCH = 57613
const SECOND = 57614
const SELECT = 57615
const SEQUENCES = 57616
const SERIAL = 57617
const SERIALIZABLE = 57618
const SESSION = 57619
const SESSIONS = 57620
const SESSION_USER = 57621
const SET = 57622
const SETTING = 57623
const SETTINGS = 57624
const SHOW = 57625
const SIMILAR = 57626
const SIMPLE = 57627
const SMALLINT = 57628
const SMALLSERIAL = 57629
const SNAPSHOT = 57630
const SOME = 57631
const SOME_EXISTENCE = 57632
const SPLIT = 57633
const SQL = 57634
const START = 57635
const STATUS = 57636
const STDIN = 57637
const STRICT = 57638
const STRING = 57639
const STORE = 57640
const STORING = 57641
const SUBSTRING = 57642
const SYMMETRIC = 57643
const SYSTEM = 57644
const TABLE = 57645
const TABLES = 57646
const TEMP = 57647
const TEMPLATE = 57648
const TEMPORARY = 57649
const TESTING_RANGES = 57650
const TESTING_RELOCATE = 57651
const TEXT = 57652
const THAN = 57653
const THEN = 57654
const TIME = 57655
const TIMESTAMP = 57656
const TIMESTAMPTZ = 57657
const TO = 57658
const TRAILING = 57659
const TRACE = 57660
const TRANSACTION = 57661
const TREAT = 57662
const TRIM = 57663
const TRUE = 57664
const TRUNCATE = 57665
const TYPE = 57666
const UNBOUNDED = 57667
const UNCOMMITTED = 57668
const UNION = 57669
const UNIQUE = 57670
const UNKNOWN = 57671
const UPDATE = 57672
const UPSERT = 57673
const USE = 57674
const USER = 57675
const USERS = 57676
const USING = 57677
const UUID = 57678
const VALID = 57679
const VALIDATE = 57680
const VALUE = 57681
const VALUES = 57682
const VARCHAR = 57683
const VARIADIC = 57684
const VIEW = 57685
const VARYING = 57686
const WHEN = 57687
const WHERE = 57688
const WINDOW = 57689
const WITH = 57690
const WITHIN = 57691
const WITHOUT = 57692
const WRITE = 57693
const YEAR = 57694
const ZONE = 57695
const NOT_LA = 57696
const WITH_LA = 57697
const AS_LA = 57698
const CONTAINED_BY = 57699
const POSTFIXOP = 57700
const UMINUS = 57701
const HELPTOKEN = 57702

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6883

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	380, 54,
	-2, 715,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	152, 566,
	-2, 0,
	-1, 60,
	97, 715,
	156, 715,
	330, 715,
	331, 715,
	-2, 0,
	-1, 70,
	1, 677,
	215, 677,
	260, 677,
	375, 677,
	377, 677,
	379, 677,
	380, 677,
	-2, 690,
	-1, 103,
	4, 717,
	20, 717,
	21, 717,
	24, 717,
	29, 717,
	34, 717,
	35, 717,
	36, 717,
	37, 717,
	38, 717,
	39, 717,
	40, 717,
	41, 717,
	42, 717,
	43, 717,
	45, 717,
	46, 717,
	47, 717,
	48, 717,
	49, 717,
	52, 717,
	53, 717,
	54, 717,
	56, 717,
	57, 717,
	61, 717,
	62, 717,
	63, 717,
	65, 717,
	66, 717,
	67, 717,
	68, 717,
	70, 717,
	72, 717,
	73, 717,
	76, 717,
	77, 717,
	78, 717,
	86, 717,
	87, 717,
	88, 717,
	89, 717,
	90, 717,
	91, 717,
	92, 717,
	93, 717,
	95, 717,
	97, 717,
	99, 717,
	102, 717,
	103, 717,
	105, 717,
	109, 717,
	110, 717,
	111, 717,
	112, 717,
	113, 717,
	114, 717,
	115, 717,
	123, 717,
	124, 717,
	125, 717,
	126, 717,
	127, 717,
	129, 717,
	131, 717,
	136, 717,
	137, 717,
	139, 717,
	142, 717,
	143, 717,
	144, 717,
	145, 717,
	146, 717,
	147, 717,
	150, 717,
	151, 717,
	153, 717,
	156, 717,
	157, 717,
	158, 717,
	159, 717,
	160, 717,
	161, 717,
	162, 717,
	163, 717,
	165, 717,
	168, 717,
	169, 717,
	170, 717,
	172, 717,
	173, 717,
	174, 717,
	175, 717,
	176, 717,
	178, 717,
	179, 717,
	181, 717,
	183, 717,
	184, 717,
	187, 717,
	188, 717,
	191, 717,
	193, 717,
	195, 717,
	196, 717,
	197, 717,
	198, 717,
	199, 717,
	201, 717,
	202, 717,
	203, 717,
	204, 717,
	208, 717,
	209, 717,
	210, 717,
	211, 717,
	212, 717,
	214, 717,
	216, 717,
	217, 717,
	220, 717,
	221, 717,
	223, 717,
	225, 717,
	226, 717,
	227, 717,
	228, 717,
	229, 717,
	230, 717,
	232, 717,
	233, 717,
	234, 717,
	235, 717,
	236, 717,
	238, 717,
	239, 717,
	240, 717,
	241, 717,
	242, 717,
	243, 717,
	244, 717,
	245, 717,
	247, 717,
	248, 717,
	249, 717,
	250, 717,
	251, 717,
	253, 717,
	254, 717,
	255, 717,
	256, 717,
	257, 717,
	258, 717,
	259, 717,
	261, 717,
	263, 717,
	264, 717,
	265, 717,
	266, 717,
	268, 717,
	269, 717,
	270, 717,
	271, 717,
	272, 717,
	274, 717,
	275, 717,
	276, 717,
	277, 717,
	278, 717,
	280, 717,
	281, 717,
	282, 717,
	283, 717,
	285, 717,
	286, 717,
	287, 717,
	288, 717,
	291, 717,
	292, 717,
	293, 717,
	294, 717,
	295, 717,
	296, 717,
	297, 717,
	298, 717,
	299, 717,
	300, 717,
	302, 717,
	304, 717,
	305, 717,
	306, 717,
	307, 717,
	308, 717,
	309, 717,
	310, 717,
	311, 717,
	313, 717,
	314, 717,
	315, 717,
	318, 717,
	319, 717,
	320, 717,
	321, 717,
	323, 717,
	324, 717,
	325, 717,
	326, 717,
	329, 717,
	330, 717,
	331, 717,
	332, 717,
	334, 717,
	336, 717,
	337, 717,
	338, 717,
	339, 717,
	340, 717,
	341, 717,
	344, 717,
	349, 717,
	350, 717,
	351, 717,
	352, 717,
	353, 717,
	-2, 0,
	-1, 125,
	1, 680,
	215, 680,
	260, 680,
	375, 680,
	377, 680,
	379, 680,
	380, 680,
	-2, 689,
	-1, 130,
	1, 615,
	168, 615,
	238, 615,
	242, 615,
	379, 615,
	380, 615,
	-2, 0,
	-1, 132,
	1, 615,
	379, 615,
	380, 615,
	-2, 0,
	-1, 133,
	1, 615,
	379, 615,
	380, 615,
	-2, 0,
	-1, 134,
	1, 619,
	379, 619,
	380, 619,
	-2, 0,
	-1, 141,
	4, 723,
	5, 723,
	6, 723,
	7, 723,
	8, 723,
	9, 723,
	20, 723,
	21, 723,
	24, 723,
	29, 723,
	30, 723,
	34, 723,
	35, 723,
	36, 723,
	37, 723,
	38, 723,
	39, 723,
	40, 723,
	41, 723,
	42, 723,
	43, 723,
	45, 723,
	46, 723,
	47, 723,
	48, 723,
	49, 723,
	50, 723,
	51, 723,
	52, 723,
	53, 723,
	54, 723,
	56, 723,
	57, 723,
	59, 723,
	61, 723,
	62, 723,
	63, 723,
	65, 723,
	66, 723,
	67, 723,
	68, 723,
	70, 723,
	72, 723,
	73, 723,
	75, 723,
	76, 723,
	77, 723,
	78, 723,
	80, 723,
	81, 723,
	82, 723,
	84, 723,
	85, 723,
	86, 723,
	87, 723,
	88, 723,
	89, 723,
	90, 723,
	91, 723,
	92, 723,
	93, 723,
	94, 723,
	95, 723,
	97, 723,
	99, 723,
	102, 723,
	103, 723,
	105, 723,
	109, 723,
	110, 723,
	111, 723,
	112, 723,
	113, 723,
	114, 723,
	115, 723,
	116, 723,
	117, 723,
	123, 723,
	124, 723,
	125, 723,
	126, 723,
	127, 723,
	129, 723,
	131, 723,
	134, 723,
	136, 723,
	137, 723,
	139, 723,
	142, 723,
	143, 723,
	144, 723,
	145, 723,
	146, 723,
	147, 723,
	148, 723,
	150, 723,
	151, 723,
	153, 723,
	155, 723,
	156, 723,
	157, 723,
	158, 723,
	159, 723,
	160, 723,
	161, 723,
	162, 723,
	163, 723,
	165, 723,
	167, 723,
	168, 723,
	169, 723,
	170, 723,
	171, 723,
	172, 723,
	173, 723,
	174, 723,
	175, 723,
	176, 723,
	178, 723,
	179, 723,
	181, 723,
	182, 723,
	183, 723,
	184, 723,
	185, 723,
	187, 723,
	188, 723,
	191, 723,
	193, 723,
	194, 723,
	195, 723,
	196, 723,
	197, 723,
	198, 723,
	199, 723,
	200, 723,
	201, 723,
	202, 723,
	203, 723,
	204, 723,
	205, 723,
	207, 723,
	208, 723,
	209, 723,
	210, 723,
	211, 723,
	212, 723,
	214, 723,
	217, 723,
	220, 723,
	221, 723,
	222, 723,
	223, 723,
	224, 723,
	225, 723,
	226, 723,
	227, 723,
	228, 723,
	229, 723,
	230, 723,
	232, 723,
	233, 723,
	234, 723,
	235, 723,
	236, 723,
	238, 723,
	239, 723,
	240, 723,
	241, 723,
	242, 723,
	243, 723,
	244, 723,
	245, 723,
	247, 723,
	248, 723,
	249, 723,
	250, 723,
	251, 723,
	253, 723,
	254, 723,
	255, 723,
	256, 723,
	257, 723,
	258, 723,
	259, 723,
	261, 723,
	262, 723,
	263, 723,
	264, 723,
	265, 723,
	266, 723,
	268, 723,
	269, 723,
	270, 723,
	271, 723,
	272, 723,
	274, 723,
	275, 723,
	276, 723,
	277, 723,
	278, 723,
	279, 723,
	280, 723,
	281, 723,
	282, 723,
	283, 723,
	284, 723,
	285, 723,
	286, 723,
	287, 723,
	288, 723,
	291, 723,
	292, 723,
	293, 723,
	294, 723,
	295, 723,
	296, 723,
	297, 723,
	298, 723,
	299, 723,
	300, 723,
	302, 723,
	304, 723,
	305, 723,
	306, 723,
	307, 723,
	308, 723,
	309, 723,
	310, 723,
	311, 723,
	313, 723,
	314, 723,
	315, 723,
	318, 723,
	319, 723,
	320, 723,
	321, 723,
	322, 723,
	323, 723,
	324, 723,
	325, 723,
	326, 723,
	329, 723,
	330, 723,
	331, 723,
	332, 723,
	333, 723,
	334, 723,
	336, 723,
	337, 723,
	338, 723,
	339, 723,
	340, 723,
	341, 723,
	344, 723,
	349, 723,
	350, 723,
	351, 723,
	352, 723,
	353, 723,
	354, 723,
	362, 723,
	367, 723,
	368, 723,
	369, 723,
	376, 723,
	382, 723,
	-2, 0,
	-1, 144,
	1, 54,
	380, 54,
	-2, 715,
	-1, 513,
	133, 1333,
	316, 1333,
	359, 1333,
	378, 1333,
	-2, 0,
	-1, 514,
	133, 1280,
	316, 1280,
	359, 1280,
	378, 1280,
	-2, 0,
	-1, 516,
	133, 1392,
	316, 1392,
	359, 1392,
	378, 1392,
	-2, 0,
	-1, 518,
	133, 1415,
	316, 1415,
	359, 1415,
	378, 1415,
	-2, 0,
	-1, 525,
	133, 1338,
	316, 1338,
	359, 1338,
	378, 1338,
	-2, 335,
	-1, 551,
	1, 413,
	375, 413,
	377, 413,
	379, 413,
	380, 413,
	-2, 0,
	-1, 552,
	1, 465,
	130, 465,
	375, 465,
	377, 465,
	379, 465,
	380, 465,
	-2, 0,
	-1, 558,
	1, 427,
	375, 427,
	377, 427,
	379, 427,
	380, 427,
	-2, 0,
	-1, 560,
	1, 431,
	375, 431,
	377, 431,
	379, 431,
	380, 431,
	-2, 0,
	-1, 563,
	1, 439,
	375, 439,
	377, 439,
	379, 439,
	380, 439,
	-2, 0,
	-1, 564,
	1, 444,
	375, 444,
	377, 444,
	379, 444,
	380, 444,
	-2, 0,
	-1, 567,
	1, 454,
	375, 454,
	377, 454,
	379, 454,
	380, 454,
	-2, 0,
	-1, 588,
	118, 725,
	130, 725,
	186, 725,
	213, 725,
	-2, 684,
	-1, 591,
	118, 724,
	130, 724,
	186, 724,
	213, 724,
	-2, 681,
	-1, 647,
	376, 1258,
	-2, 1251,
	-1, 648,
	376, 1259,
	-2, 1252,
	-1, 654,
	5, 909,
	376, 909,
	-2, 1467,
	-1, 679,
	5, 868,
	-2, 1436,
	-1, 680,
	5, 903,
	376, 903,
	-2, 1438,
	-1, 681,
	5, 878,
	-2, 1439,
	-1, 682,
	5, 877,
	-2, 1440,
	-1, 683,
	5, 903,
	376, 903,
	-2, 1443,
	-1, 684,
	5, 903,
	376, 903,
	-2, 1444,
	-1, 685,
	5, 904,
	-2, 1447,
	-1, 686,
	5, 860,
	-2, 1448,
	-1, 687,
	5, 860,
	-2, 1449,
	-1, 688,
	5, 885,
	-2, 1453,
	-1, 689,
	5, 870,
	-2, 1454,
	-1, 690,
	5, 871,
	-2, 1455,
	-1, 691,
	5, 861,
	-2, 1461,
	-1, 692,
	5, 862,
	-2, 1462,
	-1, 693,
	5, 863,
	-2, 1463,
	-1, 694,
	5, 864,
	-2, 1464,
	-1, 695,
	5, 865,
	-2, 1465,
	-1, 696,
	5, 866,
	-2, 1466,
	-1, 697,
	5, 860,
	-2, 1473,
	-1, 698,
	5, 869,
	-2, 1478,
	-1, 699,
	5, 867,
	-2, 1481,
	-1, 700,
	5, 901,
	376, 901,
	-2, 1483,
	-1, 701,
	5, 905,
	-2, 1486,
	-1, 702,
	5, 907,
	-2, 1487,
	-1, 703,
	5, 900,
	376, 900,
	-2, 1492,
	-1, 887,
	229, 713,
	-2, 559,
	-1, 900,
	215, 1255,
	-2, 0,
	-1, 935,
	1, 217,
	375, 217,
	377, 217,
	379, 217,
	380, 217,
	-2, 688,
	-1, 938,
	4, 1491,
	10, 1491,
	11, 1491,
	13, 1491,
	14, 1491,
	15, 1491,
	16, 1491,
	17, 1491,
	18, 1491,
	20, 1491,
	21, 1491,
	23, 1491,
	24, 1491,
	27, 1491,
	29, 1491,
	31, 1491,
	34, 1491,
	35, 1491,
	36, 1491,
	37, 1491,
	38, 1491,
	39, 1491,
	40, 1491,
	41, 1491,
	42, 1491,
	43, 1491,
	45, 1491,
	46, 1491,
	47, 1491,
	48, 1491,
	49, 1491,
	52, 1491,
	53, 1491,
	54, 1491,
	56, 1491,
	57, 1491,
	58, 1491,
	61, 1491,
	62, 1491,
	63, 1491,
	64, 1491,
	65, 1491,
	66, 1491,
	67, 1491,
	68, 1491,
	70, 1491,
	71, 1491,
	72, 1491,
	73, 1491,
	75, 1491,
	76, 1491,
	77, 1491,
	78, 1491,
	86, 1491,
	87, 1491,
	88, 1491,
	89, 1491,
	90, 1491,
	91, 1491,
	92, 1491,
	93, 1491,
	95, 1491,
	97, 1491,
	99, 1491,
	102, 1491,
	103, 1491,
	105, 1491,
	109, 1491,
	110, 1491,
	111, 1491,
	112, 1491,
	113, 1491,
	114, 1491,
	115, 1491,
	119, 1491,
	120, 1491,
	121, 1491,
	122, 1491,
	123, 1491,
	124, 1491,
	125, 1491,
	126, 1491,
	127, 1491,
	128, 1491,
	129, 1491,
	131, 1491,
	134, 1491,
	136, 1491,
	137, 1491,
	139, 1491,
	142, 1491,
	143, 1491,
	144, 1491,
	145, 1491,
	146, 1491,
	147, 1491,
	148, 1491,
	149, 1491,
	150, 1491,
	151, 1491,
	153, 1491,
	155, 1491,
	156, 1491,
	157, 1491,
	158, 1491,
	159, 1491,
	160, 1491,
	161, 1491,
	162, 1491,
	163, 1491,
	165, 1491,
	167, 1491,
	168, 1491,
	169, 1491,
	170, 1491,
	171, 1491,
	172, 1491,
	173, 1491,
	174, 1491,
	175, 1491,
	176, 1491,
	178, 1491,
	179, 1491,
	181, 1491,
	182, 1491,
	183, 1491,
	184, 1491,
	185, 1491,
	187, 1491,
	188, 1491,
	191, 1491,
	192, 1491,
	193, 1491,
	195, 1491,
	196, 1491,
	197, 1491,
	198, 1491,
	199, 1491,
	200, 1491,
	201, 1491,
	202, 1491,
	203, 1491,
	204, 1491,
	208, 1491,
	209, 1491,
	210, 1491,
	211, 1491,
	212, 1491,
	214, 1491,
	217, 1491,
	218, 1491,
	220, 1491,
	221, 1491,
	223, 1491,
	225, 1491,
	226, 1491,
	227, 1491,
	228, 1491,
	229, 1491,
	230, 1491,
	232, 1491,
	233, 1491,
	234, 1491,
	235, 1491,
	236, 1491,
	238, 1491,
	239, 1491,
	240, 1491,
	241, 1491,
	242, 1491,
	243, 1491,
	244, 1491,
	245, 1491,
	247, 1491,
	248, 1491,
	249, 1491,
	250, 1491,
	251, 1491,
	252, 1491,
	253, 1491,
	254, 1491,
	255, 1491,
	256, 1491,
	257, 1491,
	258, 1491,
	259, 1491,
	261, 1491,
	262, 1491,
	263, 1491,
	264, 1491,
	265, 1491,
	266, 1491,
	267, 1491,
	268, 1491,
	269, 1491,
	270, 1491,
	271, 1491,
	272, 1491,
	274, 1491,
	275, 1491,
	276, 1491,
	277, 1491,
	278, 1491,
	280, 1491,
	281, 1491,
	282, 1491,
	283, 1491,
	284, 1491,
	285, 1491,
	286, 1491,
	287, 1491,
	288, 1491,
	290, 1491,
	291, 1491,
	292, 1491,
	293, 1491,
	294, 1491,
	295, 1491,
	296, 1491,
	297, 1491,
	298, 1491,
	299, 1491,
	300, 1491,
	302, 1491,
	304, 1491,
	305, 1491,
	306, 1491,
	307, 1491,
	308, 1491,
	309, 1491,
	310, 1491,
	311, 1491,
	313, 1491,
	314, 1491,
	315, 1491,
	318, 1491,
	319, 1491,
	320, 1491,
	321, 1491,
	323, 1491,
	324, 1491,
	325, 1491,
	326, 1491,
	329, 1491,
	330, 1491,
	331, 1491,
	332, 1491,
	334, 1491,
	336, 1491,
	337, 1491,
	338, 1491,
	339, 1491,
	340, 1491,
	341, 1491,
	344, 1491,
	349, 1491,
	350, 1491,
	351, 1491,
	352, 1491,
	353, 1491,
	354, 1491,
	355, 1491,
	357, 1491,
	358, 1491,
	359, 1491,
	360, 1491,
	361, 1491,
	362, 1491,
	364, 1491,
	365, 1491,
	366, 1491,
	367, 1491,
	368, 1491,
	369, 1491,
	370, 1491,
	371, 1491,
	372, 1491,
	374, 1491,
	377, 1491,
	378, 1491,
	381, 1491,
	382, 1491,
	-2, 0,
	-1, 952,
	133, 1392,
	316, 1392,
	359, 1392,
	378, 1392,
	-2, 0,
	-1, 969,
	133, 1415,
	316, 1415,
	359, 1415,
	378, 1415,
	-2, 0,
	-1, 970,
	168, 627,
	238, 627,
	242, 627,
	-2, 323,
	-1, 1038,
	118, 724,
	130, 724,
	186, 724,
	213, 724,
	-2, 685,
	-1, 1119,
	108, 690,
	118, 690,
	130, 690,
	164, 690,
	186, 690,
	213, 690,
	219, 690,
	327, 690,
	-2, 1039,
	-1, 1129,
	376, 1235,
	-2, 1223,
	-1, 1147,
	377, 1152,
	-2, 0,
	-1, 1171,
	168, 627,
	238, 627,
	242, 627,
	-2, 622,
	-1, 1199,
	377, 1152,
	-2, 0,
	-1, 1203,
	108, 690,
	118, 690,
	130, 690,
	164, 690,
	186, 690,
	213, 690,
	219, 690,
	327, 690,
	-2, 791,
	-1, 1345,
	168, 627,
	238, 627,
	242, 627,
	-2, 325,
	-1, 1453,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 944,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 945,
	-1, 1455,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 946,
	-1, 1456,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 947,
	-1, 1457,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 948,
	-1, 1458,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 949,
	-1, 1459,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 950,
	-1, 1460,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 951,
	-1, 1469,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 960,
	-1, 1470,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 961,
	-1, 1471,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 962,
	-1, 1474,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 967,
	-1, 1480,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 969,
	-1, 1482,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 973,
	-1, 1483,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 974,
	-1, 1484,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 975,
	-1, 1485,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 976,
	-1, 1554,
	133, 1163,
	376, 1258,
	-2, 1251,
	-1, 1555,
	133, 1164,
	-2, 1432,
	-1, 1556,
	133, 1165,
	-2, 1337,
	-1, 1557,
	133, 1166,
	-2, 1298,
	-1, 1558,
	133, 1167,
	-2, 1315,
	-1, 1559,
	133, 1168,
	-2, 1336,
	-1, 1560,
	133, 1169,
	-2, 1389,
	-1, 1637,
	1, 792,
	75, 792,
	108, 792,
	118, 792,
	130, 792,
	134, 792,
	138, 792,
	140, 792,
	155, 792,
	164, 792,
	171, 792,
	182, 792,
	186, 792,
	200, 792,
	213, 792,
	215, 792,
	219, 792,
	260, 792,
	262, 792,
	327, 792,
	335, 792,
	346, 792,
	347, 792,
	356, 792,
	375, 792,
	377, 792,
	379, 792,
	380, 792,
	381, 792,
	-2, 791,
	-1, 1786,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 968,
	-1, 1787,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 970,
	-1, 1792,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 971,
	-1, 1810,
	224, 1123,
	-2, 1125,
	-1, 1984,
	229, 713,
	-2, 559,
	-1, 2043,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 972,
	-1, 2048,
	167, 0,
	-2, 988,
	-1, 2057,
	224, 1124,
	-2, 1126,
	-1, 2099,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1016,
	-1, 2100,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1017,
	-1, 2101,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1018,
	-1, 2105,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1022,
	-1, 2106,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1023,
	-1, 2107,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1024,
	-1, 2243,
	167, 0,
	-2, 989,
	-1, 2246,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 992,
	-1, 2247,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 994,
	-1, 2370,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 993,
	-1, 2371,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 995,
	-1, 2378,
	167, 0,
	-2, 1025,
	-1, 2455,
	167, 0,
	-2, 1026,
	-1, 2537,
	37, 0,
	148, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 1435,
	-1, 2622,
	376, 1503,
	-2, 499,
}

const sqlPrivate = 57344

const sqlLast = 43405

var sqlAct = [...]int{

	648, 2605, 2620, 2619, 2338, 2603, 2192, 2337, 2536, 2545,
	1704, 2546, 2586, 2509, 2547, 2021, 2404, 2535, 1243, 1712,
	2076, 2348, 2460, 184, 646, 2203, 2311, 2297, 1339, 645,
	1251, 2225, 2232, 890, 1780, 1632, 1285, 1497, 2227, 778,
	2158, 881, 183, 1701, 1988, 2159, 2384, 183, 1682, 1340,
	624, 183, 2277, 1925, 1197, 2219, 1990, 638, 1180, 1904,
	183, 1201, 1713, 1245, 1641, 183, 183, 1246, 453, 183,
	1206, 1912, 183, 1686, 1650, 1996, 1876, 1676, 1821, 1633,
	183, 600, 124, 2129, 1125, 1687, 1683, 973, 1432, 1875,
	1239, 1509, 1759, 1510, 1534, 1370, 69, 1043, 524, 1209,
	1211, 618, 1181, 1518, 592, 1494, 1366, 1410, 757, 1408,
	925, 469, 26, 450, 1427, 972, 1157, 1161, 915, 1776,
	1684, 1528, 922, 892, 1264, 1583, 936, 1706, 1690, 760,
	1619, 1606, 740, 504, 1114, 1188, 183, 183, 1550, 616,
	1044, 1411, 124, 125, 183, 521, 1409, 640, 126, 174,
	1369, 1171, 482, 1258, 912, 517, 179, 1170, 738, 2312,
	1048, 545, 2143, 1809, 1266, 2144, 1266, 2339, 1266, 1705,
	183, 183, 183, 183, 780, 596, 2635, 2634, 183, 183,
	2628, 2628, 2627, 2339, 2582, 2581, 2628, 2580, 1234, 1234,
	2562, 1234, 2557, 596, 2310, 2556, 1613, 781, 2553, 1613,
	144, 1198, 1234, 2533, 2005, 591, 2532, 1742, 2504, 2499,
	1742, 2006, 1735, 1234, 754, 496, 2498, 2494, 2486, 2457,
	2362, 1234, 2310, 1735, 597, 606, 124, 2435, 2432, 2430,
	2415, 2310, 1234, 2310, 1234, 2414, 2392, 2389, 2372, 2310,
	1234, 1234, 1735, 2640, 2333, 2041, 1846, 1847, 1613, 1864,
	1865, 1866, 1230, 1608, 2331, 2309, 26, 41, 1613, 2310,
	2290, 1677, 2245, 2242, 1234, 869, 1735, 2218, 589, 1677,
	44, 1681, 2213, 588, 1846, 1847, 1681, 2139, 765, 769,
	2052, 2140, 2626, 775, 1613, 2015, 2132, 1613, 1976, 1977,
	601, 706, 1234, 1901, 1742, 742, 1733, 1613, 1059, 1060,
	1861, 1089, 1090, 1091, 1099, 1100, 1101, 2505, 1900, 1893,
	1891, 1077, 1234, 1894, 1613, 1092, 1742, 1059, 1060, 1890,
	2636, 1813, 1062, 1613, 141, 1103, 1889, 1814, 1861, 1746,
	1613, 1734, 2366, 1613, 477, 1735, 2616, 1613, 1726, 1846,
	1847, 1062, 1613, 1680, 1612, 1278, 1061, 1681, 1613, 1279,
	2362, 744, 1081, 745, 143, 1820, 1059, 1060, 2132, 1078,
	1607, 2032, 1639, 1286, 1852, 1061, 62, 2112, 2054, 1234,
	1977, 1779, 1757, 1267, 1348, 1267, 1175, 1267, 1513, 867,
	1062, 954, 1367, 2313, 141, 951, 950, 949, 948, 947,
	946, 142, 1852, 945, 704, 944, 943, 942, 941, 135,
	940, 939, 746, 1867, 1061, 743, 136, 1084, 1085, 1086,
	1087, 587, 586, 585, 143, 584, 1067, 583, 183, 895,
	183, 577, 183, 576, 575, 183, 543, 127, 1862, 1846,
	1847, 183, 1864, 1865, 1866, 1067, 1096, 1104, 542, 541,
	540, 539, 896, 538, 183, 183, 183, 183, 183, 537,
	536, 142, 63, 895, 535, 1102, 1862, 1852, 534, 2005,
	533, 532, 1531, 531, 530, 529, 528, 527, 887, 512,
	599, 511, 510, 1094, 1067, 509, 896, 183, 128, 65,
	1082, 66, 508, 1861, 441, 440, 439, 127, 438, 437,
	873, 183, 415, 408, 1920, 141, 1272, 407, 1265, 1082,
	1401, 1607, 476, 1863, 167, 99, 1093, 183, 166, 165,
	164, 163, 162, 161, 1532, 160, 885, 183, 898, 159,
	158, 1862, 157, 156, 155, 143, 154, 153, 152, 151,
	150, 1863, 149, 148, 929, 147, 146, 145, 1082, 914,
	1088, 1373, 918, 918, 1547, 985, 1545, 1852, 895, 597,
	2609, 2607, 1543, 1202, 1541, 1083, 2552, 2534, 1709, 2604,
	2519, 2514, 142, 919, 2452, 2433, 1533, 1530, 782, 2367,
	135, 896, 1097, 880, 1083, 1055, 937, 136, 1076, 183,
	2276, 2275, 2271, 2270, 2263, 2355, 1867, 2262, 2261, 955,
	2257, 2256, 2255, 1858, 1859, 1860, 1863, 988, 127, 1133,
	1857, 1855, 1856, 1848, 1849, 1850, 1851, 1853, 1854, 2254,
	2248, 1862, 2224, 1083, 1059, 1060, 40, 2126, 2121, 2120,
	2119, 983, 2062, 1975, 1932, 1928, 1898, 41, 1857, 1855,
	1856, 1848, 1849, 1850, 1851, 1853, 1854, 1979, 1062, 1895,
	44, 1505, 1095, 1535, 1883, 1073, 1074, 1080, 1079, 1075,
	1098, 1874, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068,
	1069, 1845, 1061, 1842, 1841, 1282, 475, 1038, 1839, 2272,
	970, 1826, 967, 1071, 1063, 1064, 1065, 1066, 1068, 1069,
	1825, 1846, 1847, 1810, 1200, 1637, 1863, 1034, 1055, 753,
	1126, 1199, 1117, 1039, 1054, 58, 1848, 1849, 1850, 1851,
	1853, 1854, 59, 873, 477, 60, 878, 2625, 986, 2629,
	1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069, 597,
	2614, 1059, 1060, 1529, 2594, 2593, 1250, 1099, 1100, 1101,
	2078, 2524, 1067, 2523, 1040, 2522, 62, 141, 183, 1041,
	183, 141, 1368, 1775, 589, 1062, 2354, 1740, 1103, 588,
	2489, 1774, 1506, 2481, 2480, 1051, 1052, 2471, 1846, 1847,
	2469, 2445, 183, 183, 1056, 2444, 1499, 143, 2401, 1061,
	2380, 143, 2363, 2342, 2330, 1081, 1858, 1859, 1860, 2316,
	2268, 2201, 2198, 1857, 1855, 1856, 1848, 1849, 1850, 1851,
	1853, 1854, 2197, 1129, 2195, 2463, 1186, 2167, 2166, 1852,
	1159, 1160, 1059, 1060, 142, 1163, 2147, 1184, 142, 2135,
	2047, 1965, 135, 897, 2019, 1166, 135, 1959, 1945, 136,
	1944, 1930, 63, 136, 1899, 1873, 1062, 1835, 1834, 1831,
	1084, 1085, 1086, 1087, 1806, 1801, 1162, 1165, 124, 1067,
	1708, 1624, 1595, 1539, 127, 1242, 1179, 897, 128, 65,
	1061, 66, 1178, 1169, 1059, 1060, 1155, 1154, 597, 1096,
	1104, 1945, 1153, 1862, 1918, 141, 1152, 895, 183, 1761,
	1196, 1174, 476, 1151, 780, 99, 1852, 1150, 1062, 1149,
	183, 1148, 1147, 1146, 1145, 1144, 1172, 1143, 1142, 1141,
	896, 1204, 1140, 1139, 1138, 143, 1094, 781, 1176, 1137,
	1130, 183, 1061, 1082, 1118, 1117, 966, 183, 958, 183,
	933, 183, 2361, 1235, 2250, 183, 1232, 1249, 2223, 1546,
	1067, 1544, 1241, 2368, 2142, 610, 608, 1542, 2138, 1540,
	1812, 1737, 142, 1625, 1846, 1847, 1126, 2017, 1863, 1115,
	135, 1200, 897, 982, 1745, 1991, 2365, 136, 2364, 879,
	1037, 1677, 2358, 183, 183, 1219, 2145, 2007, 1202, 1032,
	895, 1167, 183, 1088, 1531, 183, 1168, 1283, 127, 1255,
	1132, 1063, 1064, 1065, 1066, 1068, 1069, 1968, 1083, 1962,
	1958, 2022, 1897, 896, 1082, 1896, 780, 1744, 1846, 1847,
	1785, 183, 1405, 979, 1135, 1097, 183, 1247, 1354, 1767,
	2385, 183, 183, 1705, 183, 2079, 183, 1519, 183, 781,
	183, 1158, 1817, 1026, 2612, 914, 1532, 1846, 1847, 2611,
	2001, 183, 2154, 2517, 1233, 1374, 1730, 183, 183, 418,
	2578, 2577, 2493, 1412, 1747, 2426, 183, 1856, 1848, 1849,
	1850, 1851, 1853, 1854, 1269, 1651, 2029, 1271, 2324, 1018,
	2425, 1274, 2423, 1027, 733, 2422, 2186, 2183, 183, 1083,
	442, 1257, 780, 752, 1260, 1095, 427, 2151, 1533, 1530,
	2150, 1830, 421, 1098, 1829, 1072, 1070, 1071, 1063, 1064,
	1065, 1066, 1068, 1069, 641, 781, 1828, 595, 731, 1375,
	1827, 1788, 1729, 1672, 416, 1668, 1665, 124, 2336, 1481,
	1173, 1441, 866, 1280, 735, 729, 1852, 1281, 967, 726,
	1342, 1341, 1220, 1599, 1598, 1848, 1849, 1850, 1851, 1853,
	1854, 1345, 1654, 2623, 1442, 428, 980, 1359, 1702, 1389,
	1399, 579, 1371, 1355, 1217, 1852, 1358, 1357, 1035, 1367,
	1364, 1379, 1414, 594, 491, 1535, 446, 1383, 2190, 1384,
	1382, 1385, 1218, 1386, 168, 1387, 2492, 2191, 1400, 1063,
	1064, 1065, 1066, 1068, 1069, 1972, 2035, 1059, 1060, 981,
	1862, 1241, 1393, 1395, 183, 1212, 183, 1398, 1213, 183,
	421, 1406, 2018, 1496, 1413, 1237, 1407, 582, 1535, 1378,
	183, 1062, 589, 1846, 1847, 589, 589, 1423, 596, 780,
	1424, 1425, 183, 1431, 1058, 581, 183, 874, 876, 183,
	445, 1516, 1200, 183, 597, 1061, 1069, 183, 582, 597,
	1514, 1496, 781, 183, 1643, 1529, 1361, 1653, 1643, 965,
	183, 780, 2530, 2178, 2406, 183, 1261, 1642, 1627, 2569,
	171, 1578, 2501, 183, 1568, 1863, 1478, 1012, 1507, 1998,
	1327, 183, 1504, 1519, 781, 2596, 2169, 1214, 1967, 1626,
	1616, 897, 183, 2577, 183, 1604, 183, 2502, 782, 183,
	1674, 183, 1961, 183, 183, 1738, 183, 183, 1655, 1657,
	895, 1036, 2072, 1561, 183, 1067, 1013, 417, 1221, 956,
	2474, 1212, 2549, 1630, 1213, 960, 1854, 1333, 1644, 430,
	429, 2030, 597, 896, 172, 1156, 593, 1601, 1602, 2028,
	1031, 1852, 422, 1777, 1778, 2429, 1611, 418, 1652, 2034,
	1362, 1266, 608, 1621, 1622, 1660, 1617, 419, 1397, 2589,
	1662, 1666, 705, 1503, 1212, 1204, 2606, 1213, 1670, 1501,
	1673, 1647, 1857, 1855, 1856, 1848, 1849, 1850, 1851, 1853,
	1854, 1327, 1327, 1732, 897, 1223, 1696, 1476, 1479, 1535,
	124, 444, 2604, 1725, 1719, 1017, 124, 918, 1492, 918,
	1707, 727, 1707, 1214, 780, 1862, 1850, 1851, 1853, 1854,
	782, 2036, 183, 1722, 1490, 2550, 1112, 1720, 1711, 1721,
	2069, 447, 1727, 173, 1475, 417, 1723, 781, 183, 183,
	183, 443, 183, 937, 1731, 727, 1728, 1187, 1107, 1108,
	1109, 1110, 1111, 1758, 1739, 483, 1214, 1741, 737, 1120,
	422, 736, 728, 1433, 1440, 418, 727, 2376, 1750, 1128,
	1228, 183, 580, 2170, 409, 419, 2568, 1833, 488, 1163,
	1752, 1166, 2070, 2551, 484, 490, 1227, 436, 2482, 2339,
	1863, 1790, 1160, 1159, 1620, 169, 782, 1059, 1060, 1636,
	2407, 1798, 1753, 1748, 2597, 1486, 1191, 431, 1225, 1377,
	1059, 1060, 124, 1487, 1751, 1488, 485, 1796, 653, 1493,
	2176, 1062, 2587, 1057, 1640, 1191, 1226, 1194, 991, 1495,
	1999, 976, 1215, 1477, 1062, 170, 1224, 487, 1025, 1368,
	1365, 596, 2483, 1189, 1762, 1061, 1194, 2033, 964, 1764,
	1766, 501, 2237, 2548, 1192, 1771, 1770, 1791, 1061, 1535,
	999, 2576, 1618, 1956, 1081, 1773, 1065, 1066, 1068, 1069,
	1267, 480, 1190, 1192, 2574, 1998, 1346, 2347, 2588, 1046,
	1699, 2567, 961, 953, 1182, 1182, 570, 1914, 1855, 1856,
	1848, 1849, 1850, 1851, 1853, 1854, 1047, 971, 1793, 1971,
	2590, 977, 2417, 2416, 605, 978, 1210, 2399, 1794, 2266,
	2323, 2466, 1799, 2108, 2153, 1067, 1941, 2322, 2602, 1084,
	1085, 1086, 1087, 483, 1789, 1937, 1046, 1700, 1067, 1256,
	1489, 1353, 708, 782, 1193, 1248, 597, 1491, 1042, 1244,
	1502, 410, 1805, 1926, 2320, 2068, 488, 1045, 1215, 183,
	780, 2510, 484, 1193, 486, 183, 183, 1902, 1419, 183,
	1392, 1816, 1908, 1349, 183, 782, 1819, 183, 883, 2615,
	571, 2204, 2349, 781, 1047, 183, 2400, 1947, 1946, 1082,
	1351, 183, 183, 183, 485, 707, 1187, 183, 1046, 1907,
	183, 1215, 1082, 1352, 1045, 1783, 183, 183, 183, 183,
	183, 1915, 1922, 1615, 1022, 487, 183, 1913, 1614, 183,
	597, 489, 411, 183, 897, 1927, 882, 432, 2109, 1906,
	2267, 1047, 183, 1795, 2110, 1910, 1911, 1921, 2321, 1916,
	1797, 2601, 183, 976, 183, 1420, 183, 895, 895, 1931,
	183, 594, 976, 1917, 183, 1191, 1880, 1881, 1882, 183,
	1903, 183, 1088, 2233, 1083, 2319, 1045, 900, 183, 433,
	896, 896, 1978, 976, 1980, 992, 1194, 1083, 176, 2193,
	183, 895, 1938, 1000, 1023, 499, 493, 2340, 1970, 2278,
	1933, 572, 1189, 895, 183, 2397, 1983, 1984, 2130, 911,
	434, 909, 435, 1192, 896, 1538, 2379, 2265, 2189, 2305,
	1955, 1878, 474, 34, 993, 3, 896, 990, 782, 1877,
	650, 1190, 977, 1957, 2398, 2046, 978, 608, 608, 1973,
	2014, 1964, 486, 1840, 183, 473, 33, 2003, 1800, 1021,
	1024, 1743, 2023, 977, 1982, 1679, 1671, 978, 2306, 2000,
	1664, 1030, 1994, 725, 1029, 597, 1981, 959, 2008, 871,
	1985, 1042, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069,
	1010, 573, 2013, 1768, 1072, 1070, 1071, 1063, 1064, 1065,
	1066, 1068, 1069, 1193, 183, 2027, 2024, 1390, 2049, 489,
	2025, 2026, 1416, 1008, 1421, 2009, 2010, 1381, 2011, 2012,
	1428, 472, 30, 2031, 1136, 574, 2544, 872, 1006, 1537,
	1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452,
	1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
	1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
	1473, 1474, 2037, 1480, 2039, 1482, 1483, 1484, 1485, 2058,
	2053, 2055, 498, 492, 1231, 2507, 868, 34, 1004, 2301,
	763, 2302, 1508, 910, 2080, 908, 183, 471, 75, 1120,
	1020, 2294, 183, 2071, 2073, 2074, 2082, 2064, 2065, 2066,
	33, 183, 183, 2085, 1511, 2087, 730, 732, 1548, 1549,
	1327, 2304, 1565, 2174, 1577, 1579, 1584, 1587, 1588, 1589,
	2307, 1009, 2114, 470, 74, 467, 22, 2141, 468, 23,
	466, 28, 465, 20, 463, 19, 2115, 2113, 2128, 1016,
	2164, 464, 18, 1422, 1007, 2163, 2172, 1327, 183, 2152,
	183, 124, 2131, 2134, 1002, 2188, 2137, 633, 183, 1005,
	2146, 895, 2133, 1987, 1703, 996, 30, 907, 457, 15,
	1697, 2199, 1695, 2165, 782, 1276, 183, 183, 1275, 2179,
	2196, 2149, 1942, 2184, 896, 2214, 2180, 2148, 2156, 2187,
	2180, 2177, 1273, 183, 2206, 1270, 2180, 1327, 1268, 180,
	1229, 1222, 2303, 183, 413, 780, 183, 183, 423, 1003,
	1216, 2059, 780, 1292, 1989, 2440, 2205, 448, 2200, 1942,
	2578, 2194, 494, 180, 1049, 1781, 502, 2210, 781, 507,
	2207, 2360, 75, 2359, 1363, 781, 2216, 526, 2215, 2208,
	1372, 2221, 1569, 2209, 2234, 2239, 2173, 1906, 2175, 183,
	2220, 2240, 458, 16, 2244, 456, 14, 462, 12, 2442,
	1659, 897, 897, 1327, 749, 461, 47, 1015, 74, 2016,
	22, 455, 48, 23, 2212, 28, 478, 20, 1675, 19,
	460, 7, 459, 6, 750, 1001, 18, 454, 5, 1667,
	1663, 1782, 1769, 741, 741, 897, 995, 994, 906, 1327,
	1327, 413, 1050, 183, 1403, 1404, 183, 897, 1327, 1327,
	1643, 1643, 623, 15, 1292, 1292, 780, 183, 183, 1658,
	1656, 183, 183, 183, 2476, 2313, 2454, 413, 413, 773,
	413, 2428, 2264, 2279, 1053, 180, 870, 1669, 183, 781,
	1661, 1327, 2506, 183, 500, 183, 2345, 183, 183, 183,
	1710, 1698, 2288, 1694, 183, 2286, 2281, 183, 2314, 412,
	895, 2164, 751, 2283, 1603, 1344, 2163, 2285, 183, 183,
	1284, 1433, 2083, 2280, 1059, 1060, 895, 2317, 479, 2585,
	1433, 2088, 2600, 896, 1846, 1847, 1755, 1754, 2335, 2391,
	2164, 2284, 2282, 2222, 2165, 2163, 2164, 16, 480, 896,
	14, 2163, 12, 2127, 2289, 2075, 2341, 1755, 2293, 2351,
	47, 2252, 2346, 2118, 1059, 1060, 48, 2344, 1059, 1060,
	2020, 2352, 1061, 2165, 2318, 7, 1923, 6, 1892, 2165,
	1756, 2350, 5, 1600, 1597, 1596, 1527, 1123, 1062, 2067,
	1133, 1131, 1786, 1787, 1028, 2369, 1019, 1014, 1792, 1011,
	483, 997, 963, 1347, 2343, 578, 758, 987, 2405, 570,
	2357, 1326, 1061, 481, 1380, 183, 998, 183, 1919, 780,
	183, 1623, 2500, 488, 2258, 2381, 1832, 605, 183, 484,
	1811, 2459, 767, 771, 780, 777, 1818, 2375, 1536, 1822,
	1134, 51, 781, 2161, 627, 2356, 2295, 2155, 2388, 1689,
	1688, 783, 1356, 649, 1552, 2164, 1836, 781, 2395, 1327,
	2163, 485, 1434, 724, 651, 2390, 2409, 1289, 183, 2411,
	652, 895, 1290, 2410, 1241, 183, 2408, 1164, 2374, 639,
	1287, 934, 487, 183, 183, 895, 895, 2164, 2165, 183,
	1120, 1714, 2163, 571, 896, 1360, 1500, 1584, 1584, 1584,
	2393, 1517, 1815, 2431, 2438, 897, 183, 2427, 896, 896,
	1127, 183, 1326, 1326, 2180, 2447, 2443, 2439, 183, 2450,
	2165, 2446, 619, 631, 1182, 526, 2437, 526, 630, 901,
	1909, 2470, 904, 1515, 2448, 2449, 957, 2456, 413, 1924,
	1569, 1569, 2464, 183, 183, 1997, 2462, 2353, 2465, 782,
	183, 526, 526, 413, 926, 870, 782, 1291, 895, 2472,
	2487, 2441, 1418, 183, 1772, 895, 895, 2485, 1415, 1993,
	2420, 2421, 2488, 2171, 420, 2451, 1843, 2434, 932, 1575,
	1567, 896, 1563, 1033, 526, 2491, 1113, 1715, 896, 896,
	183, 2490, 183, 2496, 2497, 183, 984, 780, 526, 486,
	2453, 2004, 1736, 1177, 572, 1426, 748, 747, 2613, 1350,
	1749, 1106, 2525, 1105, 962, 2527, 1569, 1569, 1569, 734,
	781, 2468, 1995, 2526, 526, 2531, 183, 2513, 975, 974,
	1940, 2595, 2475, 2529, 2164, 2168, 2518, 2516, 2473, 2163,
	2541, 140, 137, 183, 183, 183, 139, 2543, 2542, 2479,
	2528, 183, 138, 2561, 2554, 1969, 489, 78, 1291, 1291,
	782, 608, 608, 32, 31, 183, 2566, 2165, 2564, 2565,
	2563, 1329, 98, 97, 608, 96, 95, 1121, 2512, 2575,
	1327, 2573, 94, 93, 573, 92, 413, 91, 2579, 90,
	89, 2038, 88, 771, 2584, 87, 1428, 86, 85, 2583,
	84, 83, 2042, 82, 897, 2043, 81, 80, 777, 2592,
	2598, 2591, 522, 519, 2599, 77, 76, 2048, 574, 29,
	897, 25, 102, 24, 1328, 780, 2056, 780, 73, 2558,
	2559, 2560, 72, 27, 2060, 17, 1327, 1909, 2617, 11,
	21, 2618, 2624, 56, 57, 55, 54, 53, 781, 2630,
	781, 2632, 2631, 2633, 13, 123, 122, 2084, 2639, 121,
	2637, 2086, 2641, 2638, 2608, 120, 2610, 119, 10, 9,
	101, 2305, 1329, 1329, 2298, 2231, 45, 8, 43, 42,
	100, 1195, 114, 111, 113, 2296, 110, 112, 116, 115,
	2300, 108, 1327, 106, 2116, 2117, 107, 109, 40, 105,
	104, 117, 39, 2123, 2124, 2125, 38, 1185, 2419, 41,
	2306, 37, 36, 782, 35, 2, 1, 0, 0, 0,
	0, 0, 44, 0, 0, 1328, 1328, 0, 782, 0,
	0, 2136, 0, 2299, 0, 1569, 1569, 0, 0, 0,
	0, 771, 0, 0, 0, 507, 0, 741, 475, 1288,
	0, 0, 0, 1292, 0, 0, 0, 0, 0, 1802,
	1803, 2157, 0, 0, 0, 897, 0, 0, 0, 413,
	413, 603, 0, 570, 0, 0, 0, 58, 0, 897,
	897, 0, 0, 0, 59, 0, 477, 60, 0, 0,
	1292, 605, 0, 0, 1569, 1569, 1569, 1569, 1569, 1569,
	1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
	1569, 1569, 1569, 0, 1569, 1182, 0, 0, 62, 0,
	0, 2301, 0, 2302, 2217, 604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1869, 1870, 1871, 0, 0,
	1292, 0, 628, 70, 0, 0, 0, 0, 0, 0,
	1288, 1288, 897, 2304, 0, 0, 0, 571, 0, 897,
	897, 0, 2307, 2243, 0, 0, 0, 2246, 2247, 0,
	0, 2249, 0, 0, 0, 180, 0, 0, 2251, 0,
	2253, 0, 0, 0, 0, 0, 0, 413, 1277, 0,
	0, 782, 0, 0, 0, 0, 2260, 0, 0, 0,
	0, 0, 0, 70, 63, 0, 1292, 0, 1254, 0,
	0, 0, 0, 0, 413, 0, 413, 0, 413, 0,
	0, 1343, 1262, 0, 758, 1207, 0, 0, 0, 2269,
	128, 65, 0, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 1292, 1292, 2303, 0, 0, 141, 0, 0,
	0, 1292, 1292, 0, 476, 0, 0, 99, 0, 0,
	526, 180, 0, 0, 0, 0, 0, 590, 572, 180,
	598, 0, 526, 0, 0, 0, 0, 143, 0, 2315,
	0, 0, 0, 0, 1292, 0, 759, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 526, 0,
	0, 1326, 0, 526, 0, 0, 0, 0, 180, 526,
	0, 526, 0, 526, 142, 526, 0, 526, 0, 782,
	0, 782, 135, 0, 0, 0, 0, 0, 1391, 136,
	0, 0, 0, 0, 526, 526, 0, 0, 1326, 0,
	0, 0, 1240, 413, 0, 0, 602, 0, 573, 0,
	127, 0, 0, 0, 2044, 2045, 0, 0, 2370, 2371,
	0, 0, 0, 0, 0, 526, 0, 0, 0, 771,
	0, 1259, 0, 1259, 0, 0, 0, 1121, 0, 0,
	0, 0, 574, 0, 0, 1521, 0, 0, 1326, 2383,
	0, 0, 0, 0, 0, 2386, 0, 0, 1553, 1553,
	1566, 0, 0, 0, 1586, 0, 0, 0, 1590, 1591,
	1593, 0, 0, 2089, 2090, 2091, 2092, 2093, 2094, 2095,
	2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
	2106, 2107, 0, 2111, 1605, 0, 0, 0, 0, 2418,
	0, 0, 0, 0, 0, 0, 0, 1291, 0, 0,
	0, 0, 1292, 0, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 507, 0, 741, 1291, 0, 870, 0, 0, 0,
	1326, 1326, 0, 0, 0, 0, 0, 413, 1402, 1326,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 1635,
	0, 1569, 0, 413, 0, 0, 413, 0, 2467, 0,
	1648, 0, 0, 0, 413, 0, 0, 0, 0, 0,
	413, 0, 1326, 0, 1291, 0, 0, 413, 0, 0,
	0, 0, 1678, 0, 0, 0, 0, 0, 0, 0,
	1685, 0, 1569, 0, 0, 0, 0, 0, 870, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 413,
	0, 1718, 0, 526, 0, 0, 526, 0, 526, 0,
	413, 413, 0, 1724, 870, 0, 0, 0, 0, 0,
	0, 1648, 0, 0, 0, 598, 0, 0, 1329, 0,
	1291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 2540, 2540,
	0, 0, 0, 0, 0, 1569, 0, 0, 0, 0,
	0, 0, 0, 0, 2555, 0, 1291, 1291, 0, 0,
	0, 0, 0, 0, 0, 1291, 1291, 0, 1329, 0,
	0, 1328, 758, 0, 2540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 758, 0,
	0, 1638, 0, 1292, 0, 0, 0, 0, 1291, 771,
	0, 0, 0, 0, 0, 771, 0, 0, 0, 1760,
	0, 0, 777, 0, 0, 0, 0, 0, 0, 0,
	1326, 1328, 2540, 0, 0, 413, 413, 413, 0, 413,
	0, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1716, 0, 0, 0, 0, 1292,
	0, 2621, 0, 0, 0, 777, 777, 0, 413, 1288,
	0, 0, 2621, 590, 0, 2621, 2621, 0, 0, 0,
	1329, 1329, 0, 0, 1804, 0, 0, 0, 0, 1329,
	1329, 1807, 0, 1116, 0, 1119, 0, 1328, 0, 0,
	0, 0, 1124, 0, 0, 0, 1288, 0, 1823, 1824,
	0, 0, 0, 0, 0, 1292, 0, 0, 0, 0,
	0, 40, 1329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 1328, 1328, 0, 0, 0, 0, 0,
	0, 0, 1328, 1328, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 0, 1872, 0,
	2378, 0, 0, 0, 0, 1586, 1586, 1586, 0, 0,
	1885, 475, 0, 0, 0, 1328, 1291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1763, 777, 1765, 0, 771, 0, 0, 0, 0, 0,
	58, 2402, 0, 0, 0, 0, 0, 59, 0, 477,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1288, 1784, 0, 0, 0, 0, 0, 70,
	0, 0, 0, 0, 1203, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 0, 0, 413, 0, 0, 0,
	0, 1326, 413, 413, 0, 0, 413, 0, 1288, 1288,
	0, 1635, 0, 0, 1635, 0, 0, 1288, 1288, 0,
	0, 0, 1929, 0, 2455, 0, 0, 0, 413, 1935,
	1936, 0, 0, 0, 1648, 0, 0, 1943, 0, 0,
	1329, 0, 0, 1948, 1949, 1951, 1953, 1954, 0, 0,
	1288, 0, 0, 413, 0, 0, 1963, 1326, 0, 0,
	1966, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	0, 0, 0, 0, 0, 0, 0, 63, 0, 1254,
	0, 1254, 0, 526, 0, 0, 0, 413, 0, 0,
	0, 1992, 0, 1328, 0, 0, 413, 0, 2002, 0,
	0, 0, 0, 128, 65, 413, 66, 0, 0, 0,
	0, 0, 0, 1326, 0, 0, 0, 1760, 0, 0,
	141, 0, 0, 0, 1388, 0, 451, 476, 0, 0,
	99, 1760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1291, 40, 0,
	143, 758, 0, 0, 0, 0, 0, 758, 758, 41,
	0, 758, 0, 0, 0, 0, 40, 0, 0, 0,
	0, 413, 44, 0, 0, 0, 0, 41, 0, 0,
	0, 0, 0, 1934, 0, 0, 0, 142, 0, 0,
	44, 0, 0, 0, 0, 135, 0, 0, 475, 0,
	0, 0, 136, 1291, 0, 0, 0, 0, 1960, 0,
	0, 0, 0, 0, 0, 0, 475, 0, 1288, 2122,
	0, 2077, 0, 127, 1974, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 59, 0, 477, 60, 70, 0,
	0, 0, 1986, 0, 0, 58, 0, 0, 0, 0,
	0, 1240, 59, 0, 477, 60, 0, 0, 0, 1291,
	1240, 1329, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 590, 0, 0, 590, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 0,
	0, 0, 0, 0, 2182, 0, 0, 0, 0, 0,
	2185, 0, 0, 413, 0, 0, 0, 0, 0, 1635,
	0, 0, 0, 0, 1328, 0, 0, 1329, 870, 1635,
	0, 0, 0, 0, 0, 0, 2040, 1498, 0, 0,
	0, 0, 0, 2160, 0, 0, 0, 0, 0, 0,
	598, 0, 0, 0, 0, 1119, 2181, 0, 0, 0,
	2181, 0, 0, 0, 63, 0, 2181, 0, 0, 0,
	0, 0, 0, 0, 0, 1648, 0, 1254, 0, 0,
	1328, 0, 63, 1329, 0, 2202, 0, 0, 0, 0,
	128, 65, 0, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 413, 0, 0, 141, 128, 65,
	0, 66, 0, 0, 476, 0, 0, 99, 0, 0,
	2228, 0, 759, 0, 0, 141, 0, 0, 0, 0,
	2230, 0, 476, 2235, 413, 99, 1328, 143, 1203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	0, 70, 0, 0, 0, 143, 0, 0, 0, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 0, 142, 0, 2259, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 0, 0, 0, 136,
	0, 70, 142, 70, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 0, 1288, 0, 136, 0, 0,
	452, 70, 0, 0, 0, 0, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	413, 0, 0, 870, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1635, 870, 0, 0, 2291, 2292,
	1648, 0, 0, 0, 0, 0, 0, 0, 1716, 758,
	0, 1288, 0, 0, 2160, 870, 0, 0, 0, 0,
	2325, 0, 2326, 0, 413, 2328, 2329, 0, 0, 0,
	40, 413, 0, 0, 2334, 0, 0, 0, 0, 2236,
	0, 41, 130, 2160, 0, 870, 1685, 0, 0, 2160,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 1846,
	1847, 0, 1864, 1865, 1866, 0, 0, 0, 132, 0,
	0, 0, 0, 70, 2387, 0, 0, 0, 46, 0,
	49, 0, 1846, 1847, 0, 1864, 1865, 1866, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2241,
	0, 50, 0, 1846, 1847, 52, 1864, 1865, 1866, 58,
	0, 2413, 133, 1861, 0, 0, 59, 0, 118, 60,
	2051, 0, 0, 0, 0, 2424, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 758, 1861, 0, 0, 0,
	0, 61, 1648, 0, 2394, 0, 0, 2396, 0, 0,
	62, 0, 0, 0, 0, 413, 0, 1861, 2160, 0,
	0, 0, 1498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1852, 0, 2327,
	0, 0, 1119, 0, 2181, 0, 2332, 0, 0, 0,
	2160, 0, 0, 0, 0, 413, 0, 0, 0, 0,
	1852, 0, 870, 0, 0, 0, 0, 0, 0, 0,
	2228, 2228, 0, 0, 0, 0, 870, 0, 0, 0,
	0, 1852, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2461, 0, 0, 63, 0, 1635, 1867,
	0, 1862, 64, 0, 0, 1254, 0, 0, 0, 2503,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 0,
	1867, 71, 128, 65, 1862, 66, 0, 67, 0, 134,
	2477, 2478, 0, 0, 68, 2520, 2521, 413, 0, 141,
	0, 0, 0, 0, 0, 1862, 79, 0, 0, 99,
	2495, 759, 0, 0, 0, 0, 0, 759, 759, 131,
	0, 759, 0, 0, 0, 0, 0, 0, 0, 143,
	2403, 0, 0, 0, 0, 0, 1863, 2511, 0, 870,
	0, 0, 413, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 2160, 129, 1863,
	0, 0, 0, 0, 70, 0, 142, 0, 0, 0,
	2436, 0, 70, 2461, 135, 0, 0, 0, 0, 0,
	1863, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	870, 870, 870, 0, 0, 0, 0, 70, 413, 0,
	0, 70, 127, 0, 0, 4, 0, 0, 0, 0,
	0, 598, 2572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1858, 1859, 1860, 0,
	0, 0, 0, 1857, 1855, 1856, 1848, 1849, 1850, 1851,
	1853, 1854, 0, 0, 0, 0, 0, 0, 0, 1858,
	1859, 1860, 2484, 0, 0, 0, 1857, 1855, 1856, 1848,
	1849, 1850, 1851, 1853, 1854, 0, 0, 0, 0, 0,
	1858, 1859, 1860, 0, 0, 0, 0, 1857, 1855, 1856,
	1848, 1849, 1850, 1851, 1853, 1854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2515, 0, 0,
	0, 0, 0, 0, 935, 0, 894, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 0, 187, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 188, 189, 190, 349,
	350, 351, 352, 191, 353, 354, 0, 192, 355, 356,
	193, 194, 0, 1716, 357, 358, 359, 0, 195, 360,
	0, 784, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 709, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	414, 211, 361, 212, 362, 363, 0, 213, 0, 214,
	0, 215, 70, 0, 216, 217, 0, 218, 0, 0,
	0, 364, 219, 221, 220, 222, 365, 366, 759, 710,
	0, 0, 0, 0, 0, 223, 224, 367, 368, 369,
	0, 225, 0, 226, 0, 0, 711, 0, 227, 370,
	0, 371, 0, 0, 228, 229, 230, 231, 372, 373,
	713, 0, 374, 235, 0, 232, 0, 712, 233, 375,
	234, 376, 377, 378, 379, 380, 0, 381, 0, 714,
	236, 237, 238, 715, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 384, 716, 244, 245, 717, 0, 246,
	247, 0, 0, 248, 0, 249, 718, 250, 251, 253,
	385, 252, 719, 254, 255, 257, 256, 0, 0, 759,
	386, 258, 387, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 720, 264, 721, 389, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 722, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 141, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 723, 310, 395, 396,
	311, 0, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 143, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 759, 338, 0, 404, 339,
	340, 341, 938, 406, 0, 0, 342, 0, 0, 0,
	135, 343, 344, 345, 346, 347, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 0, 0, 0,
	0, 0, 0, 0, 779, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 785, 0, 187, 786, 787, 788, 789, 348,
	790, 791, 792, 793, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 794, 192, 355, 356, 193, 194,
	795, 796, 357, 358, 359, 797, 195, 360, 798, 784,
	799, 196, 197, 198, 0, 200, 201, 202, 199, 800,
	203, 0, 204, 205, 801, 709, 206, 207, 208, 802,
	803, 805, 804, 806, 807, 808, 209, 210, 414, 211,
	361, 212, 362, 363, 809, 213, 810, 214, 811, 215,
	812, 813, 216, 217, 814, 218, 815, 0, 816, 364,
	219, 221, 220, 222, 365, 366, 817, 710, 818, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 70, 225,
	819, 226, 820, 821, 711, 822, 227, 370, 823, 371,
	824, 1498, 228, 229, 230, 231, 372, 373, 713, 825,
	374, 235, 826, 232, 827, 712, 233, 375, 234, 376,
	377, 378, 379, 380, 828, 381, 829, 714, 236, 237,
	238, 715, 382, 383, 239, 240, 241, 830, 243, 242,
	831, 384, 716, 244, 245, 717, 832, 246, 247, 833,
	834, 248, 0, 249, 718, 250, 251, 253, 385, 252,
	719, 254, 255, 257, 256, 835, 836, 837, 386, 258,
	387, 259, 260, 838, 261, 839, 840, 262, 841, 842,
	263, 388, 720, 264, 721, 389, 265, 266, 267, 268,
	269, 843, 270, 390, 271, 391, 272, 844, 273, 274,
	275, 276, 277, 392, 278, 279, 845, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	846, 292, 722, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 847, 305, 394, 304, 306, 307, 848,
	308, 296, 297, 309, 723, 310, 395, 396, 311, 849,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 850, 319, 851, 320, 321, 322, 323, 324, 325,
	326, 327, 852, 399, 400, 401, 853, 854, 328, 329,
	402, 403, 855, 330, 331, 332, 333, 856, 857, 334,
	335, 336, 337, 858, 338, 859, 404, 339, 340, 341,
	405, 406, 860, 861, 342, 862, 863, 864, 865, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 779, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1628, 0, 0, 0, 0, 0,
	185, 186, 785, 1629, 187, 786, 787, 788, 789, 348,
	790, 791, 792, 793, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 794, 192, 355, 356, 193, 194,
	795, 796, 357, 358, 359, 797, 195, 360, 798, 784,
	799, 196, 197, 198, 0, 200, 201, 202, 199, 800,
	203, 0, 204, 205, 801, 709, 206, 207, 208, 802,
	803, 805, 804, 806, 807, 808, 209, 210, 414, 211,
	361, 212, 362, 363, 809, 213, 810, 214, 811, 215,
	812, 813, 216, 217, 814, 218, 815, 0, 816, 364,
	219, 221, 220, 222, 365, 366, 817, 710, 818, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	819, 226, 820, 821, 711, 822, 227, 370, 823, 371,
	824, 0, 228, 229, 230, 231, 372, 373, 713, 825,
	374, 235, 826, 232, 827, 712, 233, 375, 234, 376,
	377, 378, 379, 380, 828, 381, 829, 714, 236, 237,
	238, 715, 382, 383, 239, 240, 241, 830, 243, 242,
	831, 384, 716, 244, 245, 717, 832, 246, 247, 833,
	834, 248, 0, 249, 718, 250, 251, 253, 385, 252,
	719, 254, 255, 257, 256, 835, 836, 837, 386, 258,
	387, 259, 260, 838, 261, 839, 840, 262, 841, 842,
	263, 388, 720, 264, 721, 389, 265, 266, 267, 268,
	269, 843, 270, 390, 271, 391, 272, 844, 273, 274,
	275, 276, 277, 392, 278, 279, 845, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	846, 292, 722, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 847, 305, 394, 304, 306, 307, 848,
	308, 296, 297, 309, 723, 310, 395, 396, 311, 849,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 850, 319, 851, 320, 321, 322, 323, 324, 325,
	326, 327, 852, 399, 400, 401, 853, 854, 328, 329,
	402, 403, 855, 330, 331, 332, 333, 856, 857, 334,
	335, 336, 337, 858, 338, 859, 404, 339, 340, 341,
	405, 406, 860, 861, 342, 862, 863, 864, 865, 343,
	344, 345, 346, 347, 0, 779, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 785, 2287, 187, 786, 787, 788, 789,
	348, 790, 791, 792, 793, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 794, 192, 355, 356, 193,
	194, 795, 796, 357, 358, 359, 797, 195, 360, 798,
	784, 799, 196, 197, 198, 0, 200, 201, 202, 199,
	800, 203, 0, 204, 205, 801, 709, 206, 207, 208,
	802, 803, 805, 804, 806, 807, 808, 209, 210, 414,
	211, 361, 212, 362, 363, 809, 213, 810, 214, 811,
	215, 812, 813, 216, 217, 814, 218, 815, 0, 816,
	364, 219, 221, 220, 222, 365, 366, 817, 710, 818,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 819, 226, 820, 821, 711, 822, 227, 370, 823,
	371, 824, 0, 228, 229, 230, 231, 372, 373, 713,
	825, 374, 235, 826, 232, 827, 712, 233, 375, 234,
	376, 377, 378, 379, 380, 828, 381, 829, 714, 236,
	237, 238, 715, 382, 383, 239, 240, 241, 830, 243,
	242, 831, 384, 716, 244, 245, 717, 832, 246, 247,
	833, 834, 248, 0, 249, 718, 250, 251, 253, 385,
	252, 719, 254, 255, 257, 256, 835, 836, 837, 386,
	258, 387, 259, 260, 838, 261, 839, 840, 262, 841,
	842, 263, 388, 720, 264, 721, 389, 265, 266, 267,
	268, 269, 843, 270, 390, 271, 391, 272, 844, 273,
	274, 275, 276, 277, 392, 278, 279, 845, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 846, 292, 722, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 847, 305, 394, 304, 306, 307,
	848, 308, 296, 297, 309, 723, 310, 395, 396, 311,
	849, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 850, 319, 851, 320, 321, 322, 323, 324,
	325, 326, 327, 852, 399, 400, 401, 853, 854, 328,
	329, 402, 403, 855, 330, 331, 332, 333, 856, 857,
	334, 335, 336, 337, 858, 338, 859, 404, 339, 340,
	341, 405, 406, 860, 861, 342, 862, 863, 864, 865,
	343, 344, 345, 346, 347, 779, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1236, 185, 186, 785, 0, 187, 786, 787, 788, 789,
	348, 790, 791, 792, 793, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 794, 192, 355, 356, 193,
	194, 795, 796, 357, 358, 359, 797, 195, 360, 798,
	784, 799, 196, 197, 198, 0, 200, 201, 202, 199,
	800, 203, 0, 204, 205, 801, 709, 206, 207, 208,
	802, 803, 805, 804, 806, 807, 808, 209, 210, 414,
	211, 361, 212, 362, 363, 809, 213, 810, 214, 811,
	215, 812, 813, 216, 217, 814, 218, 815, 0, 816,
	364, 219, 221, 220, 222, 365, 366, 817, 710, 818,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 819, 226, 820, 821, 711, 822, 227, 370, 823,
	371, 824, 0, 228, 229, 230, 231, 372, 373, 713,
	825, 374, 235, 826, 232, 827, 712, 233, 375, 234,
	376, 377, 378, 379, 380, 828, 381, 829, 714, 236,
	237, 238, 715, 382, 383, 239, 240, 241, 830, 243,
	242, 831, 384, 716, 244, 245, 717, 832, 246, 247,
	833, 834, 248, 0, 249, 718, 250, 251, 253, 385,
	252, 719, 254, 255, 257, 256, 835, 836, 837, 386,
	258, 387, 259, 260, 838, 261, 839, 840, 262, 841,
	842, 263, 388, 720, 264, 721, 389, 265, 266, 267,
	268, 269, 843, 270, 390, 271, 391, 272, 844, 273,
	274, 275, 276, 277, 392, 278, 279, 845, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 846, 292, 722, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 847, 305, 394, 304, 306, 307,
	848, 308, 296, 297, 309, 723, 310, 395, 396, 311,
	849, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 850, 319, 851, 320, 321, 322, 323, 324,
	325, 326, 327, 852, 399, 400, 401, 853, 854, 328,
	329, 402, 403, 855, 330, 331, 332, 333, 856, 857,
	334, 335, 336, 337, 858, 338, 859, 404, 339, 340,
	341, 405, 406, 860, 861, 342, 862, 863, 864, 865,
	343, 344, 345, 346, 347, 1526, 0, 647, 636, 637,
	634, 635, 626, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 1523, 0, 187, 0, 0,
	0, 0, 664, 629, 0, 0, 0, 188, 189, 190,
	349, 679, 351, 680, 191, 681, 682, 0, 192, 355,
	356, 193, 194, 632, 663, 683, 684, 359, 0, 195,
	675, 0, 655, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 709, 206,
	207, 208, 0, 656, 657, 659, 0, 658, 660, 209,
	210, 414, 211, 685, 212, 686, 687, 617, 213, 0,
	214, 0, 215, 1524, 0, 678, 217, 0, 218, 0,
	0, 0, 620, 219, 221, 220, 222, 665, 666, 643,
	710, 0, 0, 0, 0, 0, 223, 224, 688, 689,
	690, 0, 225, 0, 226, 0, 0, 711, 0, 227,
	676, 0, 371, 0, 0, 228, 229, 230, 231, 672,
	674, 713, 0, 374, 235, 0, 232, 0, 712, 233,
	691, 234, 692, 693, 694, 695, 696, 0, 654, 0,
	714, 236, 237, 238, 715, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 677, 716, 244, 245, 717, 0,
	246, 247, 0, 0, 248, 0, 249, 718, 250, 251,
	253, 385, 252, 719, 254, 255, 257, 256, 614, 0,
	644, 673, 258, 697, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 720, 264, 721, 667, 265,
	266, 267, 268, 269, 0, 270, 668, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 698, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 722, 293, 294, 621, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 661, 308, 296, 297, 309, 723, 310, 699,
	396, 311, 0, 0, 318, 312, 313, 298, 314, 317,
	700, 315, 316, 669, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 701, 702, 0,
	0, 328, 329, 670, 671, 642, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 662, 338, 0, 404,
	339, 340, 341, 405, 703, 1522, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 615, 0, 0,
	0, 0, 0, 0, 0, 613, 0, 0, 0, 0,
	611, 612, 1525, 0, 0, 0, 0, 0, 0, 622,
	1520, 0, 0, 0, 599, 625, 647, 636, 637, 634,
	635, 626, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 0, 187, 0, 0, 0,
	0, 664, 629, 0, 0, 0, 188, 189, 190, 349,
	679, 351, 680, 191, 681, 682, 0, 192, 355, 356,
	193, 194, 632, 663, 683, 684, 359, 0, 195, 675,
	0, 655, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 709, 206, 207,
	208, 0, 656, 657, 659, 0, 658, 660, 209, 210,
	414, 211, 685, 212, 686, 687, 617, 213, 0, 214,
	0, 215, 0, 0, 678, 217, 0, 218, 0, 0,
	0, 620, 219, 221, 220, 222, 665, 666, 643, 710,
	0, 0, 0, 0, 0, 223, 224, 688, 689, 690,
	0, 225, 0, 226, 0, 0, 711, 0, 227, 676,
	0, 371, 0, 0, 228, 229, 230, 231, 672, 674,
	713, 0, 374, 235, 0, 232, 0, 712, 233, 691,
	234, 692, 693, 694, 695, 696, 0, 654, 0, 714,
	236, 237, 238, 715, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 677, 716, 244, 245, 717, 0, 246,
	247, 0, 0, 248, 0, 249, 718, 250, 251, 253,
	385, 252, 719, 254, 255, 257, 256, 614, 0, 644,
	673, 258, 697, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 720, 264, 721, 667, 265, 266,
	267, 268, 269, 0, 270, 668, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 698, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 722, 293, 294, 621, 295, 0,
	299, 300, 301, 302, 303, 141, 305, 394, 304, 306,
	307, 661, 308, 296, 297, 309, 723, 310, 699, 396,
	311, 0, 0, 318, 312, 313, 298, 314, 317, 700,
	315, 316, 669, 0, 319, 143, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 701, 702, 0, 0,
	328, 329, 670, 671, 642, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 662, 338, 0, 404, 339,
	340, 341, 938, 703, 0, 0, 342, 0, 0, 0,
	135, 343, 344, 345, 346, 347, 615, 136, 0, 0,
	0, 0, 0, 0, 613, 0, 0, 0, 0, 611,
	612, 647, 636, 637, 634, 635, 626, 0, 1122, 0,
	0, 0, 0, 0, 625, 0, 0, 185, 186, 0,
	0, 187, 0, 0, 0, 0, 664, 629, 0, 0,
	0, 188, 189, 190, 349, 679, 351, 680, 191, 681,
	682, 0, 192, 355, 356, 193, 194, 632, 663, 683,
	684, 359, 0, 195, 675, 0, 655, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 709, 206, 207, 208, 0, 656, 657, 659,
	0, 658, 660, 209, 210, 414, 211, 685, 212, 686,
	687, 617, 213, 0, 214, 0, 215, 0, 0, 678,
	217, 0, 218, 0, 0, 0, 620, 219, 221, 220,
	222, 665, 666, 643, 710, 0, 0, 0, 0, 0,
	223, 224, 688, 689, 690, 0, 225, 0, 226, 0,
	0, 711, 0, 227, 676, 0, 371, 0, 0, 228,
	229, 230, 231, 672, 674, 713, 0, 374, 235, 0,
	232, 0, 712, 233, 691, 234, 692, 693, 694, 695,
	696, 0, 654, 0, 714, 236, 237, 238, 715, 382,
	383, 239, 240, 241, 0, 243, 242, 0, 677, 716,
	244, 245, 717, 0, 246, 247, 0, 0, 248, 0,
	249, 718, 250, 251, 253, 385, 252, 719, 254, 255,
	257, 256, 614, 0, 644, 673, 258, 697, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 388, 720,
	264, 721, 667, 265, 266, 267, 268, 269, 0, 270,
	668, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	698, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 722,
	293, 294, 621, 295, 0, 299, 300, 301, 302, 303,
	141, 305, 394, 304, 306, 307, 661, 308, 296, 297,
	309, 723, 310, 699, 396, 311, 0, 0, 318, 312,
	313, 298, 314, 317, 700, 315, 316, 669, 0, 319,
	143, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 701, 702, 0, 0, 328, 329, 670, 671, 642,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	662, 338, 0, 404, 339, 340, 341, 938, 703, 0,
	0, 342, 0, 0, 0, 135, 343, 344, 345, 346,
	347, 615, 136, 0, 0, 0, 0, 0, 0, 613,
	0, 0, 0, 0, 611, 612, 647, 636, 637, 634,
	635, 626, 0, 1122, 0, 0, 0, 0, 0, 625,
	0, 0, 185, 186, 0, 0, 187, 0, 0, 0,
	0, 664, 629, 0, 0, 0, 188, 189, 190, 349,
	679, 351, 680, 191, 681, 682, 1580, 192, 355, 356,
	193, 194, 632, 663, 683, 684, 359, 0, 195, 675,
	0, 655, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 709, 206, 207,
	208, 0, 656, 657, 659, 0, 658, 660, 209, 210,
	414, 211, 685, 212, 686, 687, 617, 213, 0, 214,
	0, 215, 0, 0, 678, 217, 0, 218, 0, 0,
	0, 620, 219, 221, 220, 222, 665, 666, 643, 710,
	0, 0, 0, 0, 0, 223, 224, 688, 689, 690,
	0, 225, 0, 226, 0, 1585, 711, 0, 227, 676,
	0, 371, 0, 0, 228, 229, 230, 231, 672, 674,
	713, 0, 374, 235, 0, 232, 0, 712, 233, 691,
	234, 692, 693, 694, 695, 696, 0, 654, 0, 714,
	236, 237, 238, 715, 382, 383, 239, 240, 241, 0,
	243, 242, 1581, 677, 716, 244, 245, 717, 0, 246,
	247, 0, 0, 248, 0, 249, 718, 250, 251, 253,
	385, 252, 719, 254, 255, 257, 256, 614, 0, 644,
	673, 258, 697, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 720, 264, 721, 667, 265, 266,
	267, 268, 269, 0, 270, 668, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 698, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 722, 293, 294, 621, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 661, 308, 296, 297, 309, 723, 310, 699, 396,
	311, 0, 0, 318, 312, 313, 298, 314, 317, 700,
	315, 316, 669, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 701, 702, 0, 1582,
	328, 329, 670, 671, 642, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 662, 338, 0, 404, 339,
	340, 341, 405, 703, 0, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 615, 647, 636, 637,
	634, 635, 626, 0, 613, 0, 0, 0, 0, 611,
	612, 0, 0, 185, 186, 0, 0, 187, 622, 0,
	0, 0, 664, 629, 625, 0, 0, 188, 189, 190,
	349, 679, 351, 680, 191, 681, 682, 0, 192, 355,
	356, 193, 194, 632, 663, 683, 684, 359, 0, 195,
	675, 0, 655, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 709, 206,
	207, 208, 0, 656, 657, 659, 0, 658, 660, 209,
	210, 414, 211, 685, 212, 686, 687, 617, 213, 0,
	214, 0, 215, 0, 0, 678, 217, 0, 218, 0,
	0, 0, 620, 219, 221, 220, 222, 665, 666, 643,
	710, 0, 0, 0, 0, 0, 223, 224, 688, 689,
	690, 0, 225, 0, 226, 0, 0, 711, 0, 227,
	676, 0, 371, 0, 0, 228, 229, 230, 231, 672,
	674, 713, 0, 374, 235, 0, 232, 0, 712, 233,
	691, 234, 692, 693, 694, 695, 696, 0, 654, 0,
	714, 236, 237, 238, 715, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 677, 716, 244, 245, 717, 0,
	246, 247, 0, 0, 248, 0, 249, 718, 250, 251,
	253, 385, 252, 719, 254, 255, 257, 256, 614, 2211,
	644, 673, 258, 697, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 720, 264, 721, 667, 265,
	266, 267, 268, 269, 0, 270, 668, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 698, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 722, 293, 294, 621, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 661, 308, 296, 297, 309, 723, 310, 699,
	396, 311, 0, 0, 318, 312, 313, 298, 314, 317,
	700, 315, 316, 669, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 701, 702, 0,
	0, 328, 329, 670, 671, 642, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 662, 338, 0, 404,
	339, 340, 341, 405, 703, 0, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 615, 647, 636,
	637, 634, 635, 626, 0, 613, 0, 0, 0, 0,
	611, 612, 1183, 0, 185, 186, 0, 0, 187, 622,
	0, 0, 0, 664, 629, 625, 0, 0, 188, 189,
	190, 349, 679, 351, 680, 191, 681, 682, 0, 192,
	355, 356, 193, 194, 632, 663, 683, 684, 359, 0,
	195, 675, 0, 655, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 709,
	206, 207, 208, 0, 656, 657, 659, 0, 658, 660,
	209, 210, 414, 211, 685, 212, 686, 687, 617, 213,
	0, 214, 0, 215, 0, 0, 678, 217, 0, 218,
	0, 0, 0, 620, 219, 221, 220, 222, 665, 666,
	643, 710, 0, 0, 0, 0, 0, 223, 224, 688,
	689, 690, 0, 225, 0, 226, 0, 0, 711, 0,
	227, 676, 0, 371, 0, 0, 228, 229, 230, 231,
	672, 674, 713, 0, 374, 235, 1430, 232, 0, 712,
	233, 691, 234, 692, 693, 694, 695, 696, 0, 654,
	0, 714, 236, 237, 238, 715, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 677, 716, 244, 245, 717,
	0, 246, 247, 0, 0, 248, 0, 249, 718, 250,
	251, 253, 385, 252, 719, 254, 255, 257, 256, 614,
	0, 644, 673, 258, 697, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 720, 264, 721, 667,
	265, 266, 267, 268, 269, 0, 270, 668, 271, 391,
	272, 1429, 273, 274, 275, 276, 277, 698, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 722, 293, 294, 621,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 661, 308, 296, 297, 309, 723, 310,
	699, 396, 311, 0, 0, 318, 312, 313, 298, 314,
	317, 700, 315, 316, 669, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 701, 702,
	0, 0, 328, 329, 670, 671, 642, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 662, 338, 0,
	404, 339, 340, 341, 405, 703, 0, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 346, 347, 615, 0,
	0, 0, 0, 0, 0, 0, 613, 0, 0, 0,
	0, 611, 612, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 0, 0, 607, 625, 647, 636, 637,
	634, 635, 626, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 0, 187, 0, 0,
	0, 0, 664, 629, 0, 0, 0, 188, 189, 190,
	349, 679, 351, 680, 191, 681, 682, 0, 192, 355,
	356, 193, 194, 632, 663, 683, 684, 359, 0, 195,
	675, 0, 655, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 709, 206,
	207, 208, 0, 656, 657, 659, 0, 658, 660, 209,
	210, 414, 211, 685, 212, 686, 687, 617, 213, 0,
	214, 0, 215, 0, 0, 678, 217, 0, 218, 0,
	0, 0, 620, 219, 221, 220, 222, 665, 666, 643,
	710, 0, 0, 0, 0, 0, 223, 224, 688, 689,
	690, 0, 225, 0, 226, 0, 0, 711, 0, 227,
	676, 0, 371, 0, 0, 228, 229, 230, 231, 672,
	674, 713, 0, 374, 235, 0, 232, 0, 712, 233,
	691, 234, 692, 693, 694, 695, 696, 0, 654, 0,
	714, 236, 237, 238, 715, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 677, 716, 244, 245, 717, 0,
	246, 247, 0, 0, 248, 0, 249, 718, 250, 251,
	253, 385, 252, 719, 254, 255, 257, 256, 614, 0,
	644, 673, 258, 697, 259, 260, 0, 261, 609, 0,
	262, 0, 0, 263, 388, 720, 264, 721, 667, 265,
	266, 267, 268, 269, 0, 270, 668, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 698, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 722, 293, 294, 621, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 661, 308, 296, 297, 309, 723, 310, 699,
	396, 311, 0, 0, 318, 312, 313, 298, 314, 317,
	700, 315, 316, 669, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 701, 702, 0,
	0, 328, 329, 670, 671, 642, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 662, 338, 0, 404,
	339, 340, 341, 405, 703, 0, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 615, 647, 636,
	637, 634, 635, 626, 0, 613, 0, 0, 0, 0,
	611, 612, 0, 0, 185, 186, 0, 0, 187, 622,
	0, 0, 0, 664, 629, 625, 0, 0, 188, 189,
	190, 349, 679, 351, 680, 191, 681, 682, 0, 192,
	355, 356, 193, 194, 632, 663, 683, 684, 359, 0,
	195, 675, 0, 655, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 709,
	206, 207, 208, 0, 656, 657, 659, 0, 658, 660,
	209, 210, 414, 211, 685, 212, 686, 687, 617, 213,
	0, 214, 0, 215, 0, 0, 678, 217, 0, 218,
	0, 0, 0, 620, 219, 221, 220, 222, 665, 666,
	643, 710, 0, 0, 0, 0, 0, 223, 224, 688,
	689, 690, 0, 225, 0, 226, 0, 0, 711, 0,
	227, 676, 0, 371, 0, 0, 228, 229, 230, 231,
	672, 674, 713, 0, 374, 235, 0, 232, 0, 712,
	233, 691, 234, 692, 693, 694, 695, 696, 0, 654,
	0, 714, 236, 237, 238, 715, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 677, 716, 244, 245, 717,
	0, 246, 247, 0, 0, 248, 0, 249, 718, 250,
	251, 253, 385, 252, 719, 254, 255, 257, 256, 614,
	0, 644, 673, 258, 697, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 720, 264, 721, 667,
	265, 266, 267, 268, 269, 0, 270, 668, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 698, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 722, 293, 294, 621,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 661, 308, 296, 297, 309, 723, 310,
	699, 396, 311, 0, 0, 318, 312, 313, 298, 314,
	317, 700, 315, 316, 669, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 701, 702,
	0, 0, 328, 329, 670, 671, 642, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 662, 338, 0,
	404, 339, 340, 341, 405, 703, 2063, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 346, 347, 615, 647,
	636, 637, 634, 635, 626, 0, 613, 0, 0, 0,
	0, 611, 612, 0, 0, 185, 186, 0, 0, 187,
	622, 0, 0, 0, 664, 629, 625, 0, 0, 188,
	189, 190, 349, 679, 351, 680, 191, 681, 682, 0,
	192, 355, 356, 193, 194, 632, 663, 683, 684, 359,
	0, 195, 675, 0, 655, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	709, 206, 207, 208, 0, 656, 657, 659, 0, 658,
	660, 209, 210, 414, 211, 685, 212, 686, 687, 617,
	213, 0, 214, 0, 215, 0, 0, 678, 217, 0,
	218, 0, 0, 0, 620, 219, 221, 220, 222, 665,
	666, 643, 710, 0, 0, 0, 0, 0, 223, 224,
	688, 689, 690, 0, 225, 0, 226, 0, 0, 711,
	0, 227, 676, 0, 371, 0, 0, 228, 229, 230,
	231, 672, 674, 713, 0, 374, 235, 0, 232, 0,
	712, 233, 691, 234, 692, 693, 694, 695, 696, 0,
	654, 0, 714, 236, 237, 238, 715, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 677, 716, 244, 245,
	717, 0, 246, 247, 0, 0, 248, 0, 249, 718,
	250, 251, 253, 385, 252, 719, 254, 255, 257, 256,
	614, 0, 644, 673, 258, 697, 259, 260, 0, 261,
	609, 0, 262, 0, 0, 263, 388, 720, 264, 721,
	667, 265, 266, 267, 268, 269, 0, 270, 668, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 698, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 722, 293, 294,
	621, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 661, 308, 296, 297, 309, 723,
	310, 699, 396, 311, 0, 0, 318, 312, 313, 298,
	314, 317, 700, 315, 316, 669, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 701,
	702, 0, 0, 328, 329, 670, 671, 642, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 662, 338,
	0, 404, 339, 340, 341, 405, 703, 0, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 615,
	647, 636, 637, 634, 635, 626, 0, 613, 0, 0,
	0, 0, 611, 612, 0, 0, 185, 186, 0, 0,
	187, 622, 0, 0, 0, 664, 629, 625, 0, 0,
	188, 189, 190, 349, 679, 351, 680, 191, 681, 682,
	0, 192, 355, 356, 193, 194, 632, 663, 683, 684,
	359, 0, 195, 675, 0, 655, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 709, 206, 207, 208, 0, 656, 657, 659, 0,
	658, 660, 209, 210, 414, 211, 685, 212, 686, 687,
	617, 213, 0, 214, 0, 215, 0, 0, 678, 217,
	0, 218, 0, 0, 0, 620, 219, 221, 220, 222,
	665, 666, 643, 710, 0, 0, 0, 0, 0, 223,
	224, 688, 689, 690, 0, 225, 0, 226, 0, 0,
	711, 0, 227, 676, 0, 371, 0, 0, 228, 229,
	230, 231, 672, 674, 713, 0, 374, 235, 0, 232,
	0, 712, 233, 691, 234, 692, 693, 694, 695, 696,
	0, 654, 0, 714, 236, 237, 238, 715, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 677, 716, 244,
	245, 717, 0, 246, 247, 0, 0, 248, 0, 249,
	718, 250, 251, 253, 385, 252, 719, 254, 255, 257,
	256, 614, 0, 644, 673, 258, 697, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 720, 264,
	721, 667, 265, 266, 267, 268, 269, 0, 270, 668,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 698,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 722, 293,
	294, 621, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 661, 308, 296, 297, 309,
	723, 310, 699, 396, 311, 0, 0, 318, 312, 313,
	298, 314, 317, 700, 315, 316, 669, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	701, 702, 0, 0, 328, 329, 670, 671, 642, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 662,
	338, 0, 404, 339, 340, 341, 405, 703, 0, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	615, 647, 636, 637, 634, 635, 626, 0, 613, 0,
	0, 0, 0, 611, 612, 1183, 0, 185, 186, 0,
	0, 187, 622, 0, 0, 0, 664, 629, 625, 0,
	0, 188, 189, 190, 349, 679, 351, 680, 191, 681,
	682, 0, 192, 355, 356, 193, 194, 632, 663, 683,
	684, 359, 0, 195, 675, 0, 655, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 709, 206, 207, 208, 0, 656, 657, 659,
	0, 658, 660, 209, 210, 414, 211, 685, 212, 686,
	687, 617, 213, 0, 214, 0, 215, 0, 0, 678,
	217, 0, 218, 0, 0, 0, 620, 219, 221, 220,
	222, 665, 666, 643, 710, 0, 0, 0, 0, 0,
	223, 224, 688, 689, 690, 0, 225, 0, 226, 0,
	1585, 711, 0, 227, 676, 0, 371, 0, 0, 228,
	229, 230, 231, 672, 674, 713, 0, 374, 235, 0,
	232, 0, 712, 233, 691, 234, 692, 693, 694, 695,
	696, 0, 654, 0, 714, 236, 237, 238, 715, 382,
	383, 239, 240, 241, 0, 243, 242, 0, 677, 716,
	244, 245, 717, 0, 246, 247, 0, 0, 248, 0,
	249, 718, 250, 251, 253, 385, 252, 719, 254, 255,
	257, 256, 614, 0, 644, 673, 258, 697, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 388, 720,
	264, 721, 667, 265, 266, 267, 268, 269, 0, 270,
	668, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	698, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 722,
	293, 294, 621, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 661, 308, 296, 297,
	309, 723, 310, 699, 396, 311, 0, 0, 318, 312,
	313, 298, 314, 317, 700, 315, 316, 669, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 701, 702, 0, 0, 328, 329, 670, 671, 642,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	662, 338, 0, 404, 339, 340, 341, 405, 703, 0,
	0, 342, 0, 0, 0, 0, 343, 344, 345, 346,
	347, 615, 0, 0, 0, 0, 0, 0, 0, 613,
	0, 0, 0, 0, 611, 612, 0, 0, 0, 0,
	0, 0, 0, 622, 0, 0, 0, 0, 1631, 625,
	647, 636, 637, 634, 635, 626, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 0,
	187, 0, 0, 0, 0, 664, 629, 0, 0, 0,
	188, 189, 190, 349, 679, 351, 680, 191, 681, 682,
	0, 192, 355, 356, 193, 194, 632, 663, 683, 684,
	359, 0, 195, 675, 0, 655, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 709, 206, 207, 208, 0, 656, 657, 659, 0,
	658, 660, 209, 210, 414, 211, 685, 212, 686, 687,
	617, 213, 0, 214, 0, 215, 0, 0, 678, 217,
	0, 218, 0, 0, 0, 620, 219, 221, 220, 222,
	665, 666, 643, 710, 0, 0, 0, 0, 0, 223,
	224, 688, 689, 690, 0, 225, 0, 226, 0, 0,
	711, 0, 227, 676, 0, 371, 0, 0, 228, 229,
	230, 231, 672, 674, 713, 0, 374, 235, 0, 232,
	0, 712, 233, 691, 234, 692, 693, 694, 695, 696,
	0, 654, 0, 714, 236, 237, 238, 715, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 677, 716, 244,
	245, 717, 0, 246, 247, 0, 0, 248, 0, 249,
	718, 250, 251, 253, 385, 252, 719, 254, 255, 257,
	256, 614, 0, 644, 673, 258, 697, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 720, 264,
	721, 667, 265, 266, 267, 268, 269, 0, 270, 668,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 698,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 722, 293,
	294, 621, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 661, 308, 296, 297, 309,
	723, 310, 699, 396, 311, 0, 0, 318, 312, 313,
	298, 314, 317, 700, 315, 316, 669, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	701, 702, 0, 0, 328, 329, 670, 671, 642, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 662,
	338, 0, 404, 339, 340, 341, 405, 703, 0, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	615, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 0, 0, 611, 612, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 0, 0, 1594, 625, 647,
	636, 637, 634, 635, 626, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 0, 187,
	0, 0, 0, 0, 664, 629, 0, 0, 0, 188,
	189, 190, 349, 679, 351, 680, 191, 681, 682, 0,
	192, 355, 356, 193, 194, 632, 663, 683, 684, 359,
	0, 195, 675, 0, 655, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	709, 206, 207, 208, 0, 656, 657, 659, 0, 658,
	660, 209, 210, 414, 211, 685, 212, 686, 687, 617,
	213, 0, 214, 0, 215, 0, 0, 678, 217, 0,
	218, 0, 0, 0, 620, 219, 221, 220, 222, 665,
	666, 643, 710, 0, 0, 0, 0, 0, 223, 224,
	688, 689, 690, 0, 225, 0, 226, 0, 0, 711,
	0, 227, 676, 0, 371, 0, 0, 228, 229, 230,
	231, 672, 674, 713, 0, 374, 235, 0, 232, 0,
	712, 233, 691, 234, 692, 693, 694, 695, 696, 0,
	654, 0, 714, 236, 237, 238, 715, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 677, 716, 244, 245,
	717, 0, 246, 247, 0, 0, 248, 0, 249, 718,
	250, 251, 253, 385, 252, 719, 254, 255, 257, 256,
	614, 0, 644, 673, 258, 697, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 720, 264, 721,
	667, 265, 266, 267, 268, 269, 0, 270, 668, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 698, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 722, 293, 294,
	621, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 661, 308, 296, 297, 309, 723,
	310, 699, 396, 311, 0, 0, 318, 312, 313, 298,
	314, 317, 700, 315, 316, 669, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 701,
	702, 0, 0, 328, 329, 670, 671, 642, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 662, 338,
	0, 404, 339, 340, 341, 405, 703, 0, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 615,
	0, 0, 0, 0, 0, 0, 0, 613, 0, 0,
	0, 0, 611, 612, 0, 0, 0, 0, 0, 0,
	0, 622, 0, 0, 0, 0, 1592, 625, 647, 636,
	637, 634, 635, 626, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 0, 187, 0,
	0, 0, 0, 664, 629, 0, 0, 0, 188, 189,
	190, 349, 679, 351, 680, 191, 681, 682, 0, 192,
	355, 356, 193, 194, 632, 663, 683, 684, 359, 0,
	195, 675, 0, 655, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 709,
	206, 207, 208, 0, 656, 657, 659, 0, 658, 660,
	209, 210, 414, 211, 685, 212, 686, 687, 617, 213,
	0, 214, 0, 215, 0, 0, 678, 217, 0, 218,
	0, 0, 0, 620, 219, 221, 220, 222, 665, 666,
	643, 710, 0, 0, 0, 0, 0, 223, 224, 688,
	689, 690, 0, 225, 0, 226, 0, 0, 711, 0,
	227, 676, 0, 371, 0, 0, 228, 229, 230, 231,
	672, 674, 713, 0, 374, 235, 0, 232, 0, 712,
	233, 691, 234, 692, 693, 694, 695, 696, 0, 654,
	0, 714, 236, 237, 238, 715, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 677, 716, 244, 245, 717,
	0, 246, 247, 0, 0, 248, 0, 249, 718, 250,
	251, 253, 385, 252, 719, 254, 255, 257, 256, 614,
	0, 644, 673, 258, 697, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 720, 264, 721, 667,
	265, 266, 267, 268, 269, 0, 270, 668, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 698, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 722, 293, 294, 621,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 661, 308, 296, 297, 309, 723, 310,
	699, 396, 311, 0, 0, 318, 312, 313, 298, 314,
	317, 700, 315, 316, 669, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 701, 702,
	0, 0, 328, 329, 670, 671, 642, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 662, 338, 0,
	404, 339, 340, 341, 405, 703, 0, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 346, 347, 615, 0,
	0, 0, 0, 0, 0, 0, 613, 0, 0, 0,
	0, 611, 612, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 0, 0, 1576, 625, 647, 636, 637,
	634, 635, 626, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 0, 187, 0, 0,
	0, 0, 664, 629, 0, 0, 0, 188, 189, 190,
	349, 679, 351, 680, 191, 681, 682, 0, 192, 355,
	356, 193, 194, 632, 663, 683, 684, 359, 0, 195,
	675, 0, 655, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 709, 206,
	207, 208, 0, 656, 657, 659, 0, 658, 660, 209,
	210, 414, 211, 685, 212, 686, 687, 617, 213, 0,
	214, 0, 215, 0, 0, 678, 217, 0, 218, 0,
	0, 0, 620, 219, 221, 220, 222, 665, 666, 643,
	710, 0, 0, 0, 0, 0, 223, 224, 688, 689,
	690, 0, 225, 0, 226, 0, 0, 711, 0, 227,
	676, 0, 371, 0, 0, 228, 229, 230, 231, 672,
	674, 713, 0, 374, 235, 0, 232, 0, 712, 233,
	691, 234, 692, 693, 694, 695, 696, 0, 654, 0,
	714, 236, 237, 238, 715, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 677, 716, 244, 245, 717, 0,
	246, 247, 0, 0, 248, 0, 249, 718, 250, 251,
	253, 385, 252, 719, 254, 255, 257, 256, 614, 0,
	644, 673, 258, 697, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 720, 264, 721, 667, 265,
	266, 267, 268, 269, 0, 270, 668, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 698, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 722, 293, 294, 621, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 661, 308, 296, 297, 309, 723, 310, 699,
	396, 311, 0, 0, 318, 312, 313, 298, 314, 317,
	700, 315, 316, 669, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 701, 702, 0,
	0, 328, 329, 670, 671, 642, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 662, 338, 0, 404,
	339, 340, 341, 405, 703, 0, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 615, 0, 0,
	0, 0, 0, 0, 0, 613, 0, 0, 0, 0,
	611, 612, 0, 0, 0, 0, 0, 0, 0, 622,
	0, 0, 0, 0, 1564, 625, 647, 636, 637, 634,
	635, 626, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 0, 187, 0, 0, 0,
	0, 664, 629, 0, 0, 0, 188, 189, 190, 349,
	679, 351, 680, 191, 681, 682, 0, 192, 355, 356,
	193, 194, 632, 663, 683, 684, 359, 0, 195, 675,
	0, 655, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 709, 206, 207,
	208, 0, 656, 657, 659, 0, 658, 660, 209, 210,
	414, 211, 685, 212, 686, 687, 617, 213, 0, 214,
	0, 215, 0, 0, 678, 217, 0, 218, 0, 0,
	0, 620, 219, 221, 220, 222, 665, 666, 643, 710,
	0, 0, 0, 0, 0, 223, 224, 688, 689, 690,
	0, 225, 0, 226, 0, 0, 711, 0, 227, 676,
	0, 371, 0, 0, 228, 229, 230, 231, 672, 674,
	713, 0, 374, 235, 0, 232, 0, 712, 233, 691,
	234, 692, 693, 694, 695, 696, 0, 654, 0, 714,
	236, 237, 238, 715, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 677, 716, 244, 245, 717, 0, 246,
	247, 0, 0, 248, 0, 249, 718, 250, 251, 253,
	385, 252, 719, 254, 255, 257, 256, 614, 0, 644,
	673, 258, 697, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 720, 264, 721, 667, 265, 266,
	267, 268, 269, 0, 270, 668, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 698, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 722, 293, 294, 621, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 661, 308, 296, 297, 309, 723, 310, 699, 396,
	311, 0, 0, 318, 312, 313, 298, 314, 317, 700,
	315, 316, 669, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 701, 702, 0, 0,
	328, 329, 670, 671, 642, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 662, 338, 0, 404, 339,
	340, 341, 405, 703, 0, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 615, 0, 0, 0,
	0, 0, 0, 0, 613, 0, 0, 0, 0, 611,
	612, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 0, 0, 1562, 625, 1554, 636, 637, 634, 635,
	626, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 0, 187, 0, 0, 0, 0,
	664, 629, 0, 0, 0, 188, 189, 190, 349, 679,
	351, 680, 191, 681, 682, 0, 192, 355, 356, 193,
	194, 632, 663, 683, 684, 359, 0, 195, 675, 0,
	655, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 709, 206, 207, 208,
	0, 656, 657, 659, 0, 658, 660, 209, 210, 414,
	211, 685, 1557, 686, 687, 617, 213, 0, 214, 0,
	215, 0, 0, 678, 217, 0, 218, 0, 0, 0,
	620, 219, 221, 220, 222, 665, 666, 643, 710, 0,
	0, 0, 0, 0, 223, 224, 688, 689, 690, 0,
	225, 0, 226, 0, 0, 711, 0, 227, 676, 0,
	371, 0, 0, 228, 1558, 230, 231, 672, 674, 713,
	0, 374, 235, 0, 232, 0, 712, 233, 691, 234,
	692, 693, 694, 695, 696, 0, 654, 0, 714, 236,
	237, 238, 715, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 677, 716, 244, 245, 717, 0, 246, 247,
	0, 0, 248, 0, 249, 718, 1559, 1556, 253, 385,
	252, 719, 254, 255, 257, 256, 614, 0, 644, 673,
	258, 697, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 720, 264, 721, 667, 265, 266, 267,
	268, 269, 0, 270, 668, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 698, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 722, 293, 294, 621, 295, 0, 299,
	300, 301, 302, 1560, 0, 305, 394, 304, 306, 307,
	661, 308, 296, 297, 309, 723, 310, 699, 396, 311,
	0, 0, 318, 312, 313, 298, 314, 317, 700, 315,
	316, 669, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 701, 702, 0, 0, 328,
	329, 670, 671, 642, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 662, 338, 0, 404, 339, 340,
	341, 405, 703, 0, 0, 342, 0, 0, 0, 0,
	343, 344, 345, 1555, 347, 615, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 0, 0, 611, 612,
	0, 0, 0, 0, 0, 0, 0, 622, 0, 0,
	0, 0, 1551, 625, 1554, 636, 637, 634, 635, 626,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 0, 187, 0, 0, 0, 0, 664,
	629, 0, 0, 0, 188, 189, 190, 349, 679, 351,
	680, 191, 681, 682, 0, 192, 355, 356, 193, 194,
	632, 663, 683, 684, 359, 0, 195, 675, 0, 655,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 709, 206, 207, 208, 0,
	656, 657, 659, 0, 658, 660, 209, 210, 414, 211,
	685, 1557, 686, 687, 617, 213, 0, 214, 0, 215,
	0, 0, 678, 217, 0, 218, 0, 0, 0, 620,
	219, 221, 220, 222, 665, 666, 643, 710, 0, 0,
	0, 0, 0, 223, 224, 688, 689, 690, 0, 225,
	0, 226, 0, 0, 711, 0, 227, 676, 0, 371,
	0, 0, 228, 1558, 230, 231, 672, 674, 713, 0,
	374, 235, 0, 232, 0, 712, 233, 691, 234, 692,
	693, 694, 695, 696, 0, 654, 0, 714, 236, 237,
	238, 715, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 677, 716, 244, 245, 717, 0, 246, 247, 0,
	0, 248, 0, 249, 718, 1559, 1556, 253, 385, 252,
	719, 254, 255, 257, 256, 614, 0, 644, 673, 258,
	697, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 720, 264, 721, 667, 265, 266, 267, 268,
	269, 0, 270, 668, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 698, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 722, 293, 294, 621, 295, 0, 299, 300,
	301, 302, 1560, 0, 305, 394, 304, 306, 307, 661,
	308, 296, 297, 309, 723, 310, 699, 396, 311, 0,
	0, 318, 312, 313, 298, 314, 317, 700, 315, 316,
	669, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 701, 702, 0, 0, 328, 329,
	670, 671, 642, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 662, 338, 0, 404, 339, 340, 341,
	405, 703, 0, 0, 342, 0, 0, 0, 0, 343,
	344, 345, 1555, 347, 615, 647, 636, 637, 634, 635,
	626, 0, 613, 0, 0, 0, 0, 611, 612, 0,
	0, 185, 186, 0, 0, 187, 622, 0, 0, 0,
	664, 629, 625, 0, 0, 188, 189, 190, 349, 679,
	351, 680, 191, 681, 682, 0, 192, 355, 356, 193,
	194, 632, 663, 683, 684, 359, 0, 195, 675, 0,
	655, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 709, 206, 207, 208,
	0, 656, 657, 659, 0, 658, 660, 209, 210, 414,
	211, 685, 212, 686, 687, 617, 213, 0, 214, 0,
	215, 0, 0, 678, 217, 0, 218, 0, 0, 0,
	620, 219, 221, 220, 222, 665, 666, 643, 710, 0,
	0, 0, 0, 0, 223, 224, 688, 689, 690, 0,
	225, 0, 226, 0, 0, 711, 0, 227, 676, 0,
	371, 0, 0, 228, 229, 230, 231, 672, 674, 713,
	0, 374, 235, 0, 232, 0, 712, 233, 691, 234,
	692, 693, 694, 695, 696, 0, 654, 0, 714, 236,
	237, 238, 715, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 677, 716, 244, 245, 717, 0, 246, 247,
	0, 0, 248, 0, 249, 718, 250, 251, 253, 385,
	252, 719, 254, 255, 257, 256, 614, 0, 644, 673,
	258, 697, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 720, 264, 721, 667, 265, 266, 267,
	268, 269, 0, 270, 668, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 698, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 722, 293, 294, 621, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	661, 308, 296, 297, 309, 723, 310, 699, 396, 311,
	0, 0, 318, 312, 313, 298, 314, 317, 700, 315,
	316, 669, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 701, 702, 0, 0, 328,
	329, 670, 671, 642, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 662, 338, 0, 404, 339, 340,
	341, 405, 703, 0, 0, 342, 0, 0, 0, 0,
	343, 344, 345, 346, 347, 615, 647, 636, 637, 634,
	635, 626, 0, 613, 0, 0, 0, 0, 611, 612,
	0, 0, 185, 186, 1417, 1126, 187, 622, 0, 0,
	0, 664, 629, 625, 0, 0, 188, 189, 190, 349,
	679, 351, 680, 191, 681, 682, 0, 192, 355, 356,
	193, 194, 632, 663, 683, 684, 359, 0, 195, 675,
	0, 655, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 709, 206, 207,
	208, 0, 656, 657, 659, 0, 658, 660, 209, 210,
	414, 211, 685, 212, 686, 687, 617, 213, 0, 214,
	0, 215, 0, 0, 678, 217, 0, 218, 0, 0,
	0, 620, 219, 221, 220, 222, 665, 666, 643, 710,
	0, 0, 0, 0, 0, 223, 224, 688, 689, 690,
	0, 225, 0, 226, 0, 0, 711, 0, 227, 676,
	0, 371, 0, 0, 228, 229, 230, 231, 672, 674,
	713, 0, 374, 235, 0, 232, 0, 712, 233, 691,
	234, 692, 693, 694, 695, 696, 0, 654, 0, 714,
	236, 237, 238, 715, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 677, 716, 244, 245, 717, 0, 246,
	247, 0, 0, 248, 0, 249, 718, 250, 251, 253,
	385, 252, 719, 254, 255, 257, 256, 614, 0, 644,
	673, 258, 697, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 720, 264, 721, 667, 265, 266,
	267, 268, 269, 0, 270, 668, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 698, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 722, 293, 294, 621, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 661, 308, 296, 297, 309, 723, 310, 699, 396,
	311, 0, 0, 318, 312, 313, 298, 314, 317, 700,
	315, 316, 669, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 701, 702, 0, 0,
	328, 329, 670, 671, 642, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 662, 338, 0, 404, 339,
	340, 341, 405, 703, 0, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 615, 0, 0, 0,
	0, 0, 0, 0, 613, 0, 0, 0, 0, 611,
	612, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 0, 0, 877, 625, 647, 636, 637, 634, 635,
	626, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 0, 187, 0, 0, 0, 0,
	664, 629, 0, 0, 0, 188, 189, 190, 349, 679,
	351, 680, 191, 681, 682, 0, 192, 355, 356, 193,
	194, 632, 663, 683, 684, 359, 0, 195, 675, 0,
	655, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 709, 206, 207, 208,
	0, 656, 657, 659, 0, 658, 660, 209, 210, 414,
	211, 685, 212, 686, 687, 617, 213, 0, 214, 0,
	215, 0, 0, 678, 217, 0, 218, 0, 0, 0,
	620, 219, 221, 220, 222, 665, 666, 643, 710, 0,
	0, 0, 0, 0, 223, 224, 688, 689, 690, 0,
	225, 0, 226, 0, 0, 711, 0, 227, 676, 0,
	371, 0, 0, 228, 229, 230, 231, 672, 674, 713,
	0, 374, 235, 0, 232, 0, 712, 233, 691, 234,
	692, 693, 694, 695, 696, 0, 654, 0, 714, 236,
	237, 238, 715, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 677, 716, 244, 245, 717, 0, 246, 247,
	0, 0, 248, 0, 249, 718, 250, 251, 253, 385,
	252, 719, 254, 255, 257, 256, 614, 0, 644, 673,
	258, 697, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 720, 264, 721, 667, 265, 266, 267,
	268, 269, 0, 270, 668, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 698, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 722, 293, 294, 621, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	661, 308, 296, 297, 309, 723, 310, 699, 396, 311,
	0, 0, 318, 312, 313, 298, 314, 317, 700, 315,
	316, 669, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 701, 702, 0, 0, 328,
	329, 670, 671, 642, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 662, 338, 0, 404, 339, 340,
	341, 405, 703, 0, 0, 342, 0, 0, 0, 0,
	343, 344, 345, 346, 347, 615, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 0, 0, 611, 612,
	0, 0, 0, 0, 0, 0, 0, 622, 0, 0,
	0, 0, 875, 625, 647, 636, 637, 634, 635, 626,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 0, 187, 0, 0, 0, 0, 664,
	629, 0, 0, 0, 188, 189, 190, 349, 679, 351,
	680, 191, 681, 682, 0, 192, 355, 356, 193, 194,
	632, 663, 683, 684, 359, 0, 195, 675, 0, 655,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 709, 206, 207, 208, 0,
	656, 657, 659, 0, 658, 660, 209, 210, 414, 211,
	685, 212, 686, 687, 617, 213, 0, 214, 0, 215,
	0, 0, 678, 217, 0, 218, 0, 0, 0, 620,
	219, 221, 220, 222, 665, 666, 643, 710, 0, 0,
	0, 0, 0, 223, 224, 688, 689, 690, 0, 225,
	0, 226, 0, 0, 711, 0, 227, 676, 0, 371,
	0, 0, 228, 229, 230, 231, 672, 674, 713, 0,
	374, 235, 0, 232, 0, 712, 233, 691, 234, 692,
	693, 694, 695, 696, 0, 654, 0, 714, 236, 237,
	238, 715, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 677, 716, 244, 245, 717, 0, 246, 247, 0,
	0, 248, 0, 249, 718, 250, 251, 253, 385, 252,
	719, 254, 255, 257, 256, 614, 0, 644, 673, 258,
	697, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 720, 264, 721, 667, 265, 266, 267, 268,
	269, 0, 270, 668, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 698, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 722, 293, 294, 621, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 661,
	308, 296, 297, 309, 723, 310, 699, 396, 311, 0,
	0, 318, 312, 313, 298, 314, 317, 700, 315, 316,
	669, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 701, 702, 0, 0, 328, 329,
	670, 671, 642, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 662, 338, 0, 404, 339, 340, 341,
	405, 703, 0, 0, 342, 0, 0, 0, 0, 343,
	344, 345, 346, 347, 615, 647, 636, 637, 634, 635,
	626, 0, 613, 0, 0, 0, 0, 611, 612, 0,
	0, 185, 186, 0, 0, 187, 622, 0, 0, 0,
	664, 629, 625, 0, 0, 188, 189, 190, 349, 679,
	351, 680, 191, 681, 682, 0, 192, 355, 356, 193,
	194, 632, 663, 683, 684, 359, 0, 195, 675, 0,
	655, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 709, 206, 207, 208,
	0, 656, 657, 659, 0, 658, 660, 209, 210, 414,
	211, 685, 212, 686, 687, 617, 213, 0, 214, 0,
	215, 0, 0, 678, 217, 0, 218, 0, 0, 0,
	620, 219, 221, 220, 222, 665, 666, 643, 710, 0,
	0, 0, 0, 0, 223, 224, 688, 689, 690, 0,
	225, 0, 226, 0, 0, 711, 0, 227, 676, 0,
	371, 0, 0, 228, 229, 230, 231, 672, 674, 713,
	0, 374, 235, 0, 232, 0, 712, 233, 691, 234,
	692, 693, 694, 695, 696, 0, 654, 0, 714, 236,
	237, 238, 715, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 677, 716, 244, 245, 717, 0, 246, 247,
	0, 0, 248, 0, 249, 2622, 250, 251, 253, 385,
	252, 719, 254, 255, 257, 256, 614, 0, 644, 673,
	258, 697, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 720, 264, 721, 667, 265, 266, 267,
	268, 269, 0, 270, 668, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 698, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 722, 293, 294, 621, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	661, 308, 296, 297, 309, 723, 310, 699, 396, 311,
	0, 0, 318, 312, 313, 298, 314, 317, 700, 315,
	316, 669, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 701, 702, 0, 0, 328,
	329, 670, 671, 642, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 662, 338, 0, 404, 339, 340,
	341, 405, 703, 0, 0, 342, 0, 0, 0, 0,
	343, 344, 345, 346, 347, 615, 647, 636, 637, 634,
	635, 626, 0, 613, 0, 0, 0, 0, 611, 612,
	0, 0, 185, 186, 0, 0, 187, 622, 0, 0,
	0, 664, 629, 625, 0, 0, 188, 189, 190, 349,
	679, 351, 680, 191, 681, 682, 0, 192, 355, 356,
	193, 194, 632, 663, 683, 684, 359, 0, 195, 675,
	0, 655, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 709, 206, 207,
	2539, 0, 656, 657, 659, 0, 658, 660, 209, 210,
	414, 211, 685, 212, 686, 687, 617, 213, 0, 214,
	0, 215, 0, 0, 678, 217, 0, 218, 0, 0,
	0, 620, 219, 221, 220, 222, 665, 666, 643, 710,
	0, 0, 0, 0, 0, 223, 224, 688, 689, 690,
	0, 225, 0, 226, 0, 0, 711, 0, 227, 676,
	0, 371, 0, 0, 228, 229, 230, 231, 672, 674,
	713, 0, 374, 235, 0, 232, 0, 712, 233, 691,
	234, 692, 693, 694, 695, 696, 0, 654, 0, 714,
	236, 237, 238, 715, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 677, 716, 244, 245, 717, 0, 246,
	247, 0, 0, 248, 0, 249, 718, 250, 251, 253,
	385, 252, 719, 254, 255, 257, 256, 614, 0, 644,
	673, 258, 697, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 720, 264, 721, 667, 265, 266,
	267, 268, 269, 0, 270, 668, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 698, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 722, 293, 294, 621, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 661, 308, 296, 297, 309, 723, 310, 699, 396,
	311, 0, 0, 318, 312, 313, 298, 314, 317, 700,
	315, 316, 669, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 701, 702, 0, 0,
	328, 329, 670, 671, 642, 330, 331, 2538, 333, 0,
	0, 334, 335, 336, 337, 662, 338, 0, 404, 339,
	340, 341, 405, 703, 0, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 615, 647, 636, 637,
	634, 635, 626, 0, 613, 0, 0, 0, 0, 611,
	612, 0, 0, 185, 186, 0, 0, 187, 622, 0,
	0, 0, 664, 629, 625, 0, 0, 188, 189, 190,
	349, 679, 351, 680, 191, 681, 682, 0, 192, 355,
	356, 193, 194, 632, 663, 683, 684, 359, 0, 195,
	675, 0, 655, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 709, 206,
	207, 208, 0, 656, 657, 659, 0, 658, 660, 209,
	210, 414, 211, 685, 212, 686, 687, 617, 213, 0,
	214, 0, 215, 0, 0, 678, 217, 0, 218, 0,
	0, 0, 620, 219, 221, 220, 222, 665, 666, 643,
	710, 0, 0, 0, 0, 0, 223, 224, 688, 689,
	690, 0, 225, 0, 226, 0, 0, 711, 0, 227,
	676, 0, 371, 0, 0, 228, 229, 230, 231, 672,
	674, 713, 0, 374, 235, 0, 232, 0, 712, 233,
	691, 234, 692, 693, 694, 695, 696, 0, 654, 0,
	714, 236, 237, 238, 715, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 677, 716, 244, 245, 717, 0,
	246, 247, 0, 0, 248, 0, 249, 718, 250, 251,
	253, 385, 252, 719, 254, 255, 257, 256, 614, 0,
	644, 673, 258, 697, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 720, 264, 721, 667, 265,
	266, 267, 268, 269, 0, 270, 668, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 698, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 722, 293, 294, 621, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 661, 308, 296, 297, 309, 723, 310, 699,
	396, 311, 0, 0, 318, 312, 313, 298, 314, 317,
	700, 315, 316, 669, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 701, 702, 0,
	0, 328, 329, 670, 671, 642, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 662, 338, 0, 404,
	339, 340, 341, 405, 703, 0, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 615, 647, 636,
	637, 634, 635, 626, 0, 613, 0, 0, 0, 0,
	611, 612, 0, 0, 185, 186, 0, 0, 187, 622,
	0, 0, 0, 664, 629, 625, 0, 0, 188, 189,
	190, 2537, 679, 351, 680, 191, 681, 682, 0, 192,
	355, 356, 193, 194, 632, 663, 683, 684, 359, 0,
	195, 675, 0, 655, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 709,
	206, 207, 2539, 0, 656, 657, 659, 0, 658, 660,
	209, 210, 414, 211, 685, 212, 686, 687, 617, 213,
	0, 214, 0, 215, 0, 0, 678, 217, 0, 218,
	0, 0, 0, 620, 219, 221, 220, 222, 665, 666,
	643, 710, 0, 0, 0, 0, 0, 223, 224, 688,
	689, 690, 0, 225, 0, 226, 0, 0, 711, 0,
	227, 676, 0, 371, 0, 0, 228, 229, 230, 231,
	672, 674, 713, 0, 374, 235, 0, 232, 0, 712,
	233, 691, 234, 692, 693, 694, 695, 696, 0, 654,
	0, 714, 236, 237, 238, 715, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 677, 716, 244, 245, 717,
	0, 246, 247, 0, 0, 248, 0, 249, 718, 250,
	251, 253, 385, 252, 719, 254, 255, 257, 256, 614,
	0, 644, 673, 258, 697, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 720, 264, 721, 667,
	265, 266, 267, 268, 269, 0, 270, 668, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 698, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 722, 293, 294, 621,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 661, 308, 296, 297, 309, 723, 310,
	699, 396, 311, 0, 0, 318, 312, 313, 298, 314,
	317, 700, 315, 316, 669, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 701, 702,
	0, 0, 328, 329, 670, 671, 642, 330, 331, 2538,
	333, 0, 0, 334, 335, 336, 337, 662, 338, 0,
	404, 339, 340, 341, 405, 703, 0, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 346, 347, 615, 647,
	636, 637, 634, 635, 626, 0, 613, 0, 0, 0,
	0, 611, 612, 0, 0, 185, 186, 0, 0, 187,
	622, 0, 0, 0, 664, 629, 625, 0, 0, 188,
	189, 190, 349, 679, 351, 680, 191, 681, 682, 0,
	192, 355, 356, 193, 194, 632, 663, 683, 684, 359,
	0, 195, 675, 0, 655, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	709, 206, 207, 208, 0, 656, 657, 659, 0, 658,
	660, 209, 210, 414, 211, 685, 212, 686, 687, 0,
	213, 0, 214, 0, 215, 0, 0, 678, 217, 0,
	218, 0, 0, 0, 620, 219, 221, 220, 222, 665,
	666, 643, 710, 0, 0, 0, 0, 0, 223, 224,
	688, 689, 690, 0, 225, 0, 226, 0, 0, 711,
	0, 227, 676, 0, 371, 0, 0, 228, 229, 230,
	231, 672, 674, 713, 0, 374, 235, 0, 232, 0,
	712, 233, 691, 234, 692, 693, 694, 695, 696, 0,
	654, 0, 714, 236, 237, 238, 715, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 677, 716, 244, 245,
	717, 0, 246, 247, 0, 0, 248, 0, 249, 718,
	250, 251, 253, 385, 252, 719, 254, 255, 257, 256,
	0, 0, 644, 673, 258, 697, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 720, 264, 721,
	667, 265, 266, 267, 268, 269, 0, 270, 668, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 698, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 722, 293, 294,
	1574, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 661, 308, 296, 297, 309, 723,
	310, 699, 396, 311, 0, 0, 318, 312, 313, 298,
	314, 317, 700, 315, 316, 669, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 701,
	702, 0, 0, 328, 329, 670, 671, 642, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 662, 338,
	0, 404, 339, 340, 341, 405, 703, 0, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 647,
	636, 637, 634, 635, 626, 0, 0, 1572, 0, 0,
	0, 0, 1570, 1571, 0, 185, 186, 0, 0, 187,
	0, 1573, 0, 0, 664, 629, 0, 625, 0, 188,
	189, 190, 0, 679, 351, 680, 191, 681, 682, 0,
	192, 355, 356, 193, 194, 632, 663, 683, 684, 359,
	0, 195, 675, 0, 655, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	709, 206, 207, 2539, 0, 656, 657, 659, 0, 658,
	660, 209, 210, 414, 211, 685, 212, 686, 687, 617,
	213, 0, 214, 0, 215, 0, 0, 678, 217, 0,
	218, 0, 0, 0, 620, 219, 221, 220, 222, 665,
	666, 643, 710, 0, 0, 0, 0, 0, 223, 224,
	688, 689, 690, 0, 225, 0, 226, 0, 0, 711,
	0, 227, 676, 0, 371, 0, 0, 228, 229, 230,
	231, 672, 674, 0, 0, 374, 235, 0, 232, 0,
	712, 233, 691, 234, 692, 693, 694, 695, 696, 0,
	654, 0, 0, 236, 237, 238, 715, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 677, 716, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 718,
	250, 251, 253, 385, 252, 719, 254, 255, 257, 256,
	614, 0, 644, 673, 258, 697, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 720, 264, 721,
	667, 265, 266, 267, 268, 269, 0, 270, 668, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 698, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 722, 293, 294,
	621, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 661, 308, 296, 297, 309, 0,
	310, 699, 396, 311, 0, 0, 318, 312, 313, 298,
	314, 317, 700, 315, 316, 669, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 701,
	702, 0, 0, 328, 329, 670, 671, 642, 330, 331,
	2538, 333, 0, 0, 334, 335, 336, 337, 662, 338,
	0, 404, 339, 340, 341, 405, 703, 0, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 647,
	636, 637, 634, 635, 626, 0, 0, 0, 0, 0,
	0, 0, 611, 612, 0, 185, 186, 0, 0, 187,
	0, 622, 0, 0, 664, 629, 0, 625, 0, 188,
	189, 190, 349, 679, 351, 680, 191, 681, 682, 0,
	192, 355, 356, 193, 194, 0, 663, 683, 684, 359,
	0, 195, 675, 0, 655, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	709, 206, 207, 208, 0, 656, 657, 659, 0, 658,
	660, 209, 210, 414, 211, 685, 212, 686, 687, 0,
	213, 0, 214, 0, 215, 0, 0, 678, 217, 0,
	218, 0, 0, 0, 364, 219, 221, 220, 222, 665,
	666, 643, 710, 0, 0, 0, 0, 0, 223, 224,
	688, 689, 690, 0, 225, 0, 226, 0, 0, 711,
	0, 227, 676, 0, 371, 0, 0, 228, 229, 230,
	231, 672, 674, 713, 0, 374, 235, 0, 232, 0,
	712, 233, 691, 234, 692, 693, 694, 695, 696, 0,
	654, 0, 714, 236, 237, 238, 715, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 677, 716, 244, 245,
	717, 0, 246, 247, 0, 0, 248, 0, 249, 718,
	250, 251, 253, 385, 252, 719, 254, 255, 257, 256,
	0, 0, 644, 673, 258, 697, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 720, 264, 721,
	667, 265, 266, 267, 268, 269, 0, 270, 668, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 698, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 722, 293, 294,
	1574, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 661, 308, 296, 297, 309, 723,
	310, 699, 396, 311, 0, 0, 318, 312, 313, 298,
	314, 317, 700, 315, 316, 669, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 701,
	702, 0, 0, 328, 329, 670, 671, 642, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 662, 338,
	0, 404, 339, 340, 341, 405, 703, 0, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 647,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 0, 187,
	0, 1573, 0, 0, 664, 0, 0, 625, 0, 188,
	189, 190, 349, 350, 351, 352, 191, 353, 354, 0,
	192, 355, 356, 193, 194, 0, 663, 357, 358, 359,
	0, 195, 675, 0, 655, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	709, 206, 207, 208, 0, 656, 657, 659, 0, 658,
	660, 209, 210, 414, 211, 361, 212, 362, 363, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 364, 219, 221, 220, 222, 665,
	666, 0, 710, 0, 0, 0, 0, 0, 223, 224,
	367, 368, 369, 0, 225, 0, 226, 0, 0, 711,
	0, 227, 676, 0, 371, 0, 0, 228, 229, 230,
	231, 672, 674, 713, 0, 374, 235, 0, 232, 0,
	712, 233, 375, 234, 376, 377, 378, 379, 380, 0,
	381, 0, 714, 236, 237, 238, 715, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 677, 716, 244, 245,
	717, 0, 246, 247, 0, 0, 248, 0, 249, 718,
	250, 251, 253, 385, 252, 719, 254, 255, 257, 256,
	0, 0, 0, 673, 258, 387, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 720, 264, 721,
	667, 265, 266, 267, 268, 269, 0, 270, 668, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 722, 293, 294,
	393, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 661, 308, 296, 297, 309, 723,
	310, 395, 396, 311, 0, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 669, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 670, 671, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 662, 338,
	0, 404, 339, 340, 341, 405, 406, 0, 0, 342,
	599, 0, 182, 0, 343, 344, 345, 346, 347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 0, 187, 0, 0, 0, 0, 348, 0, 0,
	0, 2162, 188, 189, 190, 349, 350, 351, 352, 191,
	353, 354, 0, 192, 355, 356, 193, 194, 0, 0,
	357, 358, 359, 0, 195, 360, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 414, 211, 361, 212,
	362, 363, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 364, 219, 221,
	220, 222, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 367, 368, 369, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 370, 0, 371, 0, 0,
	228, 229, 230, 231, 372, 373, 0, 0, 374, 235,
	0, 232, 0, 0, 233, 375, 234, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 236, 237, 238, 0,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 384,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 385, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 386, 258, 387, 259,
	260, 0, 261, 0, 762, 262, 0, 0, 263, 388,
	0, 264, 0, 389, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 141, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 143, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 938, 406,
	0, 0, 342, 0, 0, 182, 135, 343, 344, 345,
	346, 347, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 0, 187, 0, 0, 0, 0,
	348, 0, 756, 0, 1205, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 0, 192, 355, 356, 193,
	194, 0, 0, 357, 358, 359, 0, 195, 360, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 414,
	211, 361, 212, 362, 363, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	364, 219, 221, 220, 222, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 370, 0,
	371, 0, 0, 228, 229, 230, 231, 372, 373, 0,
	0, 374, 235, 0, 232, 0, 0, 233, 375, 234,
	376, 377, 378, 379, 380, 0, 381, 0, 0, 236,
	237, 238, 0, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 384, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 385,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 386,
	258, 387, 259, 260, 0, 261, 0, 762, 262, 0,
	0, 263, 388, 0, 264, 0, 389, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 141, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 143, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 938, 406, 0, 0, 342, 599, 0, 182, 135,
	343, 344, 345, 346, 347, 0, 136, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 0, 187, 0,
	0, 0, 0, 348, 0, 756, 0, 1205, 188, 189,
	190, 349, 350, 351, 352, 191, 353, 354, 0, 192,
	355, 356, 193, 194, 0, 0, 357, 358, 359, 0,
	195, 360, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 414, 211, 361, 212, 362, 363, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 364, 219, 221, 220, 222, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 367,
	368, 369, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 370, 0, 371, 0, 0, 228, 229, 230, 231,
	372, 373, 0, 0, 374, 235, 0, 232, 0, 0,
	233, 375, 234, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 236, 237, 238, 0, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 384, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 385, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 386, 258, 387, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 0, 264, 0, 389,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 141, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 0, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 0, 319, 143, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 400, 401,
	0, 0, 328, 329, 402, 403, 0, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 0, 338, 0,
	404, 339, 340, 341, 938, 406, 0, 0, 342, 1905,
	0, 182, 135, 343, 344, 345, 346, 347, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	0, 187, 0, 0, 0, 0, 348, 0, 0, 0,
	127, 188, 189, 190, 349, 350, 351, 352, 191, 353,
	354, 0, 192, 355, 356, 193, 194, 0, 0, 357,
	358, 359, 0, 195, 360, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 414, 211, 361, 212, 362,
	363, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 364, 219, 221, 220,
	222, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 367, 368, 369, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 370, 0, 371, 0, 0, 228,
	229, 230, 231, 372, 373, 0, 0, 374, 235, 0,
	232, 0, 0, 233, 375, 234, 376, 377, 378, 379,
	380, 0, 381, 0, 0, 236, 237, 238, 0, 382,
	383, 239, 240, 241, 0, 243, 242, 0, 384, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 385, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 386, 258, 387, 259, 260,
	0, 261, 0, 762, 262, 0, 0, 263, 388, 0,
	264, 0, 389, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 400, 401, 0, 0, 328, 329, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 0,
	0, 342, 755, 0, 182, 0, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 0, 187, 0, 0, 0, 0, 348,
	0, 756, 0, 761, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 0, 195, 360, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 230, 231, 372, 373, 0, 0,
	374, 235, 0, 232, 0, 0, 233, 375, 234, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 236, 237,
	238, 0, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 384, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 385, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 386, 258,
	387, 259, 260, 0, 261, 0, 762, 262, 0, 0,
	263, 388, 0, 264, 0, 389, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 0, 0, 342, 0, 0, 182, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 0, 187, 0, 0,
	0, 0, 348, 0, 756, 0, 761, 188, 189, 190,
	349, 350, 351, 352, 191, 353, 354, 0, 192, 355,
	356, 193, 194, 0, 0, 357, 358, 359, 0, 195,
	360, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 414, 211, 361, 212, 362, 363, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 364, 219, 221, 220, 222, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 367, 368,
	369, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	370, 0, 371, 0, 0, 228, 229, 230, 231, 372,
	373, 0, 0, 374, 235, 0, 232, 0, 0, 233,
	375, 234, 376, 377, 378, 379, 380, 0, 381, 0,
	0, 236, 237, 238, 0, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 384, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 385, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 386, 258, 387, 259, 260, 0, 261, 0, 762,
	262, 0, 0, 263, 388, 0, 264, 0, 389, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 0, 0, 342, 0, 0,
	182, 0, 343, 344, 345, 346, 347, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 0,
	187, 0, 0, 0, 0, 348, 0, 756, 0, 761,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	0, 192, 355, 356, 193, 194, 0, 0, 357, 358,
	359, 0, 195, 360, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 414, 211, 361, 212, 362, 363,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	230, 231, 372, 373, 0, 0, 374, 235, 0, 232,
	0, 0, 233, 375, 234, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 236, 237, 238, 0, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 384, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 385, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 386, 258, 387, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 0, 264,
	0, 389, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 0, 0,
	342, 0, 0, 0, 182, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 0, 187, 0, 0, 0, 0, 348,
	0, 0, 0, 1238, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 0, 195, 360, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 230, 231, 372, 373, 0, 0,
	374, 235, 0, 232, 0, 0, 233, 375, 234, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 236, 237,
	238, 0, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 384, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 385, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 386, 258,
	387, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 0, 264, 0, 389, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 0, 0, 342, 0, 0, 182, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 0, 187, 0, 0,
	0, 0, 348, 0, 0, 0, 1717, 188, 189, 190,
	349, 350, 351, 352, 191, 353, 354, 0, 192, 355,
	356, 193, 194, 0, 0, 357, 358, 359, 0, 195,
	360, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 414, 211, 361, 212, 362, 363, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 364, 219, 221, 220, 222, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 367, 368,
	369, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	370, 0, 371, 0, 0, 228, 229, 230, 231, 372,
	373, 0, 0, 374, 235, 0, 232, 0, 0, 233,
	375, 234, 376, 377, 378, 379, 380, 0, 381, 0,
	0, 236, 237, 238, 0, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 384, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 385, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 386, 258, 387, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 0, 264, 0, 389, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 0, 0, 342, 0, 0,
	182, 0, 343, 344, 345, 346, 347, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 0,
	187, 0, 0, 0, 0, 348, 0, 0, 0, 2078,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	0, 192, 355, 356, 193, 194, 0, 0, 357, 358,
	359, 0, 195, 360, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 414, 211, 361, 212, 362, 363,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	230, 231, 372, 373, 0, 0, 374, 235, 0, 232,
	0, 0, 233, 375, 234, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 236, 237, 238, 0, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 384, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 385, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 386, 258, 387, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 0, 264,
	0, 389, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 0, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	647, 636, 637, 634, 635, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 0,
	187, 0, 1208, 0, 0, 348, 0, 0, 0, 0,
	188, 189, 190, 349, 679, 351, 680, 191, 681, 682,
	0, 192, 355, 356, 193, 194, 0, 0, 683, 684,
	359, 0, 195, 360, 0, 784, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 709, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 414, 211, 685, 212, 686, 687,
	0, 213, 0, 214, 0, 215, 0, 0, 678, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 643, 710, 0, 0, 0, 0, 0, 223,
	224, 688, 689, 690, 0, 225, 0, 226, 0, 0,
	711, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	230, 231, 372, 373, 713, 0, 374, 235, 0, 232,
	0, 712, 233, 691, 234, 692, 693, 694, 695, 696,
	0, 654, 0, 714, 236, 237, 238, 715, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 384, 716, 244,
	245, 717, 0, 246, 247, 0, 0, 248, 0, 249,
	718, 250, 251, 253, 385, 252, 719, 254, 255, 257,
	256, 0, 0, 644, 386, 258, 697, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 720, 264,
	721, 389, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 698,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 722, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	723, 310, 699, 396, 311, 0, 0, 318, 312, 313,
	298, 314, 317, 700, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	701, 702, 0, 0, 328, 329, 402, 403, 642, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 703, 0, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	989, 0, 894, 893, 0, 0, 0, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 0, 187, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 188, 189, 190, 349, 350, 351, 352, 191,
	353, 354, 0, 192, 355, 356, 193, 194, 0, 0,
	357, 358, 359, 0, 195, 360, 0, 784, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 709, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 414, 211, 361, 212,
	362, 363, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 364, 219, 221,
	220, 222, 365, 366, 0, 710, 0, 0, 0, 0,
	0, 223, 224, 367, 368, 369, 0, 225, 0, 226,
	0, 0, 711, 0, 227, 370, 0, 371, 0, 0,
	228, 229, 230, 231, 372, 373, 713, 0, 374, 235,
	0, 232, 0, 712, 233, 375, 234, 376, 377, 378,
	379, 380, 0, 381, 0, 714, 236, 237, 238, 715,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 384,
	716, 244, 245, 717, 0, 246, 247, 0, 0, 248,
	0, 249, 718, 250, 251, 253, 385, 252, 719, 254,
	255, 257, 256, 0, 0, 0, 386, 258, 387, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	720, 264, 721, 389, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	722, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 723, 310, 395, 396, 311, 0, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	0, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 889, 0, 894, 893, 0, 0, 0, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 0, 187, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 0, 195, 360, 0, 784,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 709, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 710, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 0, 0, 711, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 230, 231, 888, 373, 713, 0,
	374, 235, 0, 232, 0, 712, 233, 375, 234, 376,
	377, 378, 379, 380, 0, 381, 0, 714, 236, 237,
	238, 715, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 384, 716, 244, 245, 717, 0, 246, 247, 0,
	0, 248, 0, 249, 718, 250, 251, 253, 385, 252,
	719, 254, 255, 257, 256, 0, 0, 0, 386, 258,
	387, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 720, 264, 721, 389, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 722, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 723, 310, 395, 396, 311, 0,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 0, 497, 342, 182, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 0, 187, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 0, 192, 355, 356, 193,
	194, 0, 0, 357, 358, 359, 0, 195, 360, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 178,
	211, 361, 212, 362, 363, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	364, 219, 221, 220, 222, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 370, 0,
	371, 0, 0, 228, 229, 230, 231, 372, 373, 0,
	0, 374, 235, 0, 232, 0, 0, 233, 375, 234,
	376, 377, 378, 379, 380, 0, 381, 0, 0, 236,
	237, 238, 0, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 384, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 385,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 386,
	258, 387, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 0, 264, 0, 389, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 177, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 0, 175, 342, 182, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 0, 187, 0, 0, 0,
	181, 348, 0, 0, 0, 0, 188, 189, 190, 349,
	350, 351, 352, 191, 353, 354, 0, 192, 355, 356,
	193, 194, 0, 0, 357, 358, 359, 0, 195, 360,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	178, 211, 361, 212, 362, 363, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 364, 219, 221, 220, 222, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 367, 368, 369,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 370,
	0, 371, 0, 0, 228, 229, 230, 231, 372, 373,
	0, 0, 374, 235, 0, 232, 0, 0, 233, 375,
	234, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	236, 237, 238, 0, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 384, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	385, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	386, 258, 387, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 0, 264, 0, 389, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 0, 310, 395, 396,
	311, 0, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 177, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 894, 893, 342, 0, 0, 891,
	0, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	185, 186, 0, 0, 187, 0, 0, 0, 0, 348,
	0, 181, 0, 0, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 0, 195, 360, 0, 784,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 709, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 710, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 0, 0, 711, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 230, 231, 372, 373, 713, 0,
	374, 235, 0, 232, 0, 712, 233, 375, 234, 376,
	377, 378, 379, 380, 0, 381, 0, 714, 236, 237,
	238, 715, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 384, 716, 244, 245, 717, 0, 246, 247, 0,
	0, 248, 0, 249, 718, 250, 251, 253, 385, 252,
	719, 254, 255, 257, 256, 0, 0, 0, 386, 258,
	387, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 720, 264, 721, 389, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 722, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 723, 310, 395, 396, 311, 0,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 182, 0, 342, 0, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 185, 186,
	0, 0, 187, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 188, 189, 190, 349, 350, 351, 352, 191,
	353, 354, 0, 192, 355, 356, 193, 194, 0, 0,
	357, 358, 359, 0, 195, 360, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 178, 211, 361, 212,
	362, 363, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 364, 219, 221,
	220, 222, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 367, 368, 369, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 370, 0, 371, 0, 0,
	228, 229, 230, 231, 372, 373, 0, 0, 374, 235,
	0, 232, 0, 0, 233, 375, 234, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 236, 237, 238, 0,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 384,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 385, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 386, 258, 387, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	0, 264, 0, 389, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 177, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	894, 893, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 185, 186, 0, 0,
	187, 0, 0, 0, 0, 348, 0, 181, 0, 0,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	0, 192, 355, 356, 193, 194, 0, 0, 357, 358,
	359, 0, 195, 360, 0, 784, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 709, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 414, 211, 361, 212, 362, 363,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 0, 710, 0, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 0, 226, 0, 0,
	711, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	230, 231, 372, 373, 713, 0, 374, 235, 0, 232,
	0, 712, 233, 375, 234, 376, 377, 378, 379, 380,
	0, 381, 0, 714, 236, 237, 238, 715, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 384, 716, 244,
	245, 717, 0, 246, 247, 0, 0, 248, 0, 249,
	718, 250, 251, 253, 385, 252, 719, 254, 255, 257,
	256, 0, 0, 0, 386, 258, 387, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 720, 264,
	721, 389, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 722, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	723, 310, 395, 396, 311, 0, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 182, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 185, 186, 0, 0, 187, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 188, 189,
	190, 349, 350, 351, 352, 191, 353, 354, 0, 192,
	355, 356, 193, 194, 0, 0, 357, 358, 359, 0,
	195, 360, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 414, 211, 361, 212, 362, 363, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 364, 219, 221, 220, 222, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 367,
	368, 369, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 370, 0, 371, 0, 0, 228, 229, 230, 231,
	372, 373, 0, 0, 374, 235, 0, 232, 0, 0,
	233, 375, 234, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 236, 237, 238, 0, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 384, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 385, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 386, 258, 387, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 0, 264, 0, 389,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 0, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 400, 401,
	0, 0, 328, 329, 402, 403, 0, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 0, 338, 0,
	404, 339, 340, 341, 405, 406, 894, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 346, 347, 0, 0,
	0, 0, 185, 186, 0, 0, 187, 0, 0, 0,
	0, 348, 0, 181, 0, 0, 188, 189, 190, 349,
	350, 351, 352, 191, 353, 354, 0, 192, 355, 356,
	193, 194, 0, 0, 357, 358, 359, 0, 195, 360,
	0, 784, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 709, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	414, 211, 361, 212, 362, 363, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 364, 219, 221, 220, 222, 365, 366, 0, 710,
	0, 0, 0, 0, 0, 223, 224, 367, 368, 369,
	0, 225, 0, 226, 0, 0, 711, 0, 227, 370,
	0, 371, 0, 0, 228, 229, 230, 231, 372, 373,
	713, 0, 374, 235, 0, 232, 0, 712, 233, 375,
	234, 376, 377, 378, 379, 380, 0, 381, 0, 714,
	236, 237, 238, 715, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 384, 716, 244, 245, 717, 0, 246,
	247, 0, 0, 248, 0, 249, 718, 250, 251, 253,
	385, 252, 719, 254, 255, 257, 256, 0, 0, 0,
	386, 258, 387, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 720, 264, 721, 389, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 722, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 723, 310, 395, 396,
	311, 0, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 182, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	185, 186, 0, 0, 187, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 1651, 195, 360, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 1649,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 1693, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 1654, 0, 0, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 230, 231, 372, 373, 0, 0,
	374, 235, 1691, 232, 0, 0, 233, 375, 234, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 236, 237,
	238, 0, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 384, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 385, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 386, 258,
	387, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 0, 264, 0, 389, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 1653, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 1692, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 182, 0, 342, 0, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 185, 186,
	0, 0, 187, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 188, 189, 190, 349, 350, 351, 352, 191,
	353, 354, 0, 192, 355, 356, 193, 194, 0, 0,
	357, 358, 359, 1651, 195, 360, 0, 0, 1646, 196,
	197, 198, 0, 200, 201, 202, 199, 1649, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 414, 211, 361, 212,
	362, 363, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 364, 219, 221,
	220, 222, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 367, 368, 369, 0, 225, 0, 226,
	1654, 0, 0, 0, 227, 370, 0, 371, 0, 0,
	228, 229, 230, 231, 1645, 373, 0, 0, 374, 235,
	0, 232, 0, 0, 233, 375, 234, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 236, 237, 238, 0,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 384,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 385, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 386, 258, 387, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	0, 264, 0, 389, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 1653, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 1652, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	0, 913, 342, 182, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 0, 187, 0, 0, 0, 0, 348, 0,
	0, 0, 0, 188, 189, 190, 349, 350, 351, 352,
	191, 353, 354, 0, 192, 355, 356, 193, 194, 0,
	0, 357, 358, 359, 0, 195, 360, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 414, 211, 361,
	212, 362, 363, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 364, 219,
	221, 220, 222, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 367, 368, 369, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 370, 0, 371, 0,
	0, 228, 229, 230, 231, 372, 373, 0, 0, 374,
	235, 0, 232, 0, 0, 233, 375, 234, 376, 377,
	378, 379, 380, 0, 381, 0, 0, 236, 237, 238,
	0, 382, 383, 239, 240, 241, 0, 243, 242, 0,
	384, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 385, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 386, 258, 387,
	259, 260, 0, 261, 0, 762, 262, 0, 0, 263,
	388, 0, 264, 0, 389, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 400, 401, 0, 0, 328, 329, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 405,
	406, 0, 768, 342, 182, 0, 0, 0, 343, 344,
	345, 346, 347, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 0, 187, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 0, 195, 360, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 230, 231, 770, 373, 0, 0,
	374, 235, 0, 232, 0, 0, 233, 375, 234, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 236, 237,
	238, 0, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 384, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 385, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 386, 258,
	387, 259, 260, 0, 261, 0, 762, 262, 0, 0,
	263, 388, 0, 264, 0, 389, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 0, 764, 342, 182, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 0, 187, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 0, 192, 355, 356, 193,
	194, 0, 0, 357, 358, 359, 0, 195, 360, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 414,
	211, 361, 212, 362, 363, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	364, 219, 221, 220, 222, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 370, 0,
	371, 0, 0, 228, 229, 230, 231, 766, 373, 0,
	0, 374, 235, 0, 232, 0, 0, 233, 375, 234,
	376, 377, 378, 379, 380, 0, 381, 0, 0, 236,
	237, 238, 0, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 384, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 385,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 386,
	258, 387, 259, 260, 0, 261, 0, 762, 262, 0,
	0, 263, 388, 0, 264, 0, 389, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 0, 426, 342, 182, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 425, 0, 187, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 188, 189, 190, 349,
	350, 351, 352, 191, 353, 354, 0, 192, 355, 356,
	193, 194, 0, 0, 357, 358, 359, 0, 195, 360,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	414, 211, 361, 212, 362, 363, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 364, 219, 221, 220, 222, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 367, 368, 369,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 370,
	0, 371, 0, 0, 228, 229, 230, 231, 372, 373,
	0, 0, 374, 235, 0, 232, 0, 0, 233, 375,
	234, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	236, 237, 238, 0, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 384, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	385, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	386, 258, 387, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 0, 264, 0, 389, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 424, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 0, 310, 395, 396,
	311, 0, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 182, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	185, 186, 0, 0, 187, 0, 0, 0, 0, 348,
	0, 1634, 0, 0, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 0, 195, 360, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 230, 231, 372, 373, 0, 0,
	374, 235, 0, 232, 0, 0, 233, 375, 234, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 236, 237,
	238, 0, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 384, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 385, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 386, 258,
	387, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 0, 264, 0, 389, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 182, 2229, 342, 0, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 185, 186,
	0, 0, 187, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 188, 189, 190, 349, 350, 351, 352, 191,
	353, 354, 0, 192, 355, 356, 193, 194, 0, 0,
	357, 358, 359, 0, 195, 360, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 414, 211, 361, 212,
	362, 363, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 364, 219, 221,
	220, 222, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 367, 368, 369, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 370, 0, 371, 0, 0,
	228, 229, 230, 231, 372, 373, 0, 0, 374, 235,
	0, 232, 0, 0, 233, 375, 234, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 236, 237, 238, 0,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 384,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 385, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 386, 258, 387, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	0, 264, 0, 389, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	182, 2229, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 185, 186, 0, 0,
	187, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	0, 192, 355, 356, 193, 194, 0, 0, 357, 358,
	359, 0, 195, 360, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 414, 211, 361, 212, 362, 363,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	230, 231, 372, 373, 0, 0, 374, 235, 0, 232,
	0, 0, 233, 375, 234, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 236, 237, 238, 0, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 384, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 385, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 386, 258, 387, 259, 260, 0,
	261, 0, 0, 2226, 0, 0, 263, 388, 0, 264,
	0, 389, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 182, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 185, 186, 0, 0, 187, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 188, 189,
	190, 349, 350, 351, 352, 191, 353, 354, 0, 192,
	355, 356, 193, 194, 0, 0, 357, 358, 359, 0,
	195, 360, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 414, 211, 361, 212, 362, 363, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 364, 219, 221, 220, 222, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 367,
	368, 369, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 370, 0, 371, 0, 0, 228, 229, 230, 231,
	372, 373, 0, 0, 374, 235, 0, 232, 0, 0,
	233, 375, 234, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 236, 237, 238, 0, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 384, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 385, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 386, 258, 387, 259, 260, 0, 261, 0,
	762, 262, 0, 0, 263, 388, 0, 264, 0, 389,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 0, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 400, 401,
	0, 0, 328, 329, 402, 403, 0, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 0, 338, 0,
	404, 339, 340, 341, 405, 406, 0, 1396, 342, 182,
	0, 0, 0, 343, 344, 345, 346, 347, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 0, 187,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 188,
	189, 190, 349, 350, 351, 352, 191, 353, 354, 0,
	192, 355, 356, 193, 194, 0, 0, 357, 358, 359,
	0, 195, 360, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 414, 211, 361, 212, 362, 363, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 364, 219, 221, 220, 222, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	367, 368, 369, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 370, 0, 371, 0, 0, 228, 229, 230,
	231, 372, 373, 0, 0, 374, 235, 0, 232, 0,
	0, 233, 375, 234, 376, 377, 378, 379, 380, 0,
	381, 0, 0, 236, 237, 238, 0, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 384, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 385, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 386, 258, 387, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 0, 264, 0,
	389, 265, 266, 267, 268, 269, 0, 270, 390, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	393, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 0, 308, 296, 297, 309, 0,
	310, 395, 396, 311, 0, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 405, 406, 0, 1394, 342,
	182, 0, 0, 0, 343, 344, 345, 346, 347, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 0,
	187, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	0, 192, 355, 356, 193, 194, 0, 0, 357, 358,
	359, 0, 195, 360, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 414, 211, 361, 212, 362, 363,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	230, 231, 372, 373, 0, 0, 374, 235, 0, 232,
	0, 0, 233, 375, 234, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 236, 237, 238, 0, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 384, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 385, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 386, 258, 387, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 0, 264,
	0, 389, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 182, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 185, 186, 1376, 0, 187, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 188, 189,
	190, 349, 350, 351, 352, 191, 353, 354, 0, 192,
	355, 356, 193, 194, 0, 0, 357, 358, 359, 0,
	195, 360, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 414, 211, 361, 212, 362, 363, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 364, 219, 221, 220, 222, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 367,
	368, 369, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 370, 0, 371, 0, 0, 228, 229, 230, 231,
	372, 373, 0, 0, 374, 235, 0, 232, 0, 0,
	233, 375, 234, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 236, 237, 238, 0, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 384, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 385, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 386, 258, 387, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 0, 264, 0, 389,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 0, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 400, 401,
	0, 0, 328, 329, 402, 403, 0, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 0, 338, 0,
	404, 339, 340, 341, 405, 406, 0, 523, 342, 182,
	0, 0, 0, 343, 344, 345, 346, 347, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 0, 187,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 188,
	189, 190, 349, 350, 351, 352, 191, 353, 354, 0,
	192, 355, 356, 193, 194, 0, 0, 357, 358, 968,
	0, 195, 360, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 414, 211, 361, 212, 362, 363, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 364, 219, 221, 220, 222, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	367, 368, 369, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 370, 0, 371, 0, 0, 228, 229, 230,
	231, 372, 373, 0, 0, 374, 235, 0, 232, 0,
	0, 233, 375, 234, 376, 377, 378, 379, 380, 0,
	381, 0, 0, 236, 237, 238, 0, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 384, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 385, 525, 0, 254, 255, 257, 256,
	0, 0, 0, 386, 258, 387, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 0, 264, 0,
	389, 265, 266, 267, 268, 269, 0, 270, 390, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	393, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 0, 308, 296, 297, 309, 0,
	310, 395, 396, 311, 0, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 520, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 405, 406, 0, 1253, 342,
	182, 0, 0, 0, 343, 344, 345, 346, 347, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 0,
	187, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	0, 192, 355, 356, 193, 194, 0, 0, 357, 358,
	359, 0, 195, 360, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 414, 211, 361, 212, 362, 363,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	230, 231, 1252, 373, 0, 0, 374, 235, 0, 232,
	0, 0, 233, 375, 234, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 236, 237, 238, 0, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 384, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 385, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 386, 258, 387, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 0, 264,
	0, 389, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 0, 523,
	342, 182, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	0, 187, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 188, 189, 190, 349, 350, 351, 352, 191, 353,
	354, 0, 192, 355, 356, 193, 194, 0, 0, 357,
	358, 968, 0, 195, 360, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 414, 211, 361, 212, 362,
	363, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 364, 219, 221, 220,
	222, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 367, 368, 369, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 370, 0, 371, 0, 0, 228,
	229, 230, 231, 372, 373, 0, 0, 374, 235, 0,
	232, 0, 0, 233, 375, 234, 376, 377, 378, 379,
	380, 0, 381, 0, 0, 236, 237, 238, 0, 382,
	383, 239, 240, 241, 0, 243, 242, 0, 384, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 385, 525, 0, 254, 255,
	257, 256, 0, 0, 0, 386, 258, 387, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 388, 0,
	264, 0, 389, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	520, 400, 401, 0, 0, 328, 969, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 0,
	523, 342, 182, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 0, 187, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 188, 189, 190, 349, 350, 351, 352, 191,
	353, 354, 0, 192, 355, 356, 193, 194, 0, 0,
	357, 358, 359, 0, 514, 360, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 414, 211, 361, 212,
	362, 363, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 364, 219, 221,
	220, 222, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 367, 368, 369, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 370, 0, 371, 0, 0,
	228, 229, 230, 231, 372, 373, 0, 0, 374, 235,
	0, 232, 0, 0, 233, 375, 234, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 236, 237, 238, 0,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 384,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 385, 525, 0, 254,
	255, 257, 256, 0, 0, 0, 386, 258, 387, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	0, 264, 0, 389, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 952, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 520, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	0, 931, 342, 182, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 0, 187, 0, 0, 0, 0, 348, 0,
	0, 0, 0, 188, 189, 190, 349, 350, 351, 352,
	191, 353, 354, 0, 192, 355, 356, 193, 194, 0,
	0, 357, 358, 359, 0, 195, 360, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 414, 211, 361,
	212, 362, 363, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 364, 219,
	221, 220, 222, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 367, 368, 369, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 370, 0, 371, 0,
	0, 228, 229, 230, 231, 930, 373, 0, 0, 374,
	235, 0, 232, 0, 0, 233, 375, 234, 376, 377,
	378, 379, 380, 0, 381, 0, 0, 236, 237, 238,
	0, 382, 383, 239, 240, 241, 0, 243, 242, 0,
	384, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 385, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 386, 258, 387,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	388, 0, 264, 0, 389, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 400, 401, 0, 0, 328, 329, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 405,
	406, 0, 928, 342, 182, 0, 0, 0, 343, 344,
	345, 346, 347, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 0, 187, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 0, 195, 360, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 230, 231, 927, 373, 0, 0,
	374, 235, 0, 232, 0, 0, 233, 375, 234, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 236, 237,
	238, 0, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 384, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 385, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 386, 258,
	387, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 0, 264, 0, 389, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 0, 924, 342, 182, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 0, 187, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 0, 192, 355, 356, 193,
	194, 0, 0, 357, 358, 359, 0, 195, 360, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 414,
	211, 361, 212, 362, 363, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	364, 219, 221, 220, 222, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 370, 0,
	371, 0, 0, 228, 229, 230, 231, 923, 373, 0,
	0, 374, 235, 0, 232, 0, 0, 233, 375, 234,
	376, 377, 378, 379, 380, 0, 381, 0, 0, 236,
	237, 238, 0, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 384, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 385,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 386,
	258, 387, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 0, 264, 0, 389, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 0, 921, 342, 182, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 0, 187, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 188, 189, 190, 349,
	350, 351, 352, 191, 353, 354, 0, 192, 355, 356,
	193, 194, 0, 0, 357, 358, 359, 0, 195, 360,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	414, 211, 361, 212, 362, 363, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 364, 219, 221, 220, 222, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 367, 368, 369,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 370,
	0, 371, 0, 0, 228, 229, 230, 231, 920, 373,
	0, 0, 374, 235, 0, 232, 0, 0, 233, 375,
	234, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	236, 237, 238, 0, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 384, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	385, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	386, 258, 387, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 0, 264, 0, 389, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 0, 310, 395, 396,
	311, 0, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 0, 917, 342, 182, 0, 0,
	0, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 0, 187, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 188, 189, 190,
	349, 350, 351, 352, 191, 353, 354, 0, 192, 355,
	356, 193, 194, 0, 0, 357, 358, 359, 0, 195,
	360, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 414, 211, 361, 212, 362, 363, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 364, 219, 221, 220, 222, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 367, 368,
	369, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	370, 0, 371, 0, 0, 228, 229, 230, 231, 916,
	373, 0, 0, 374, 235, 0, 232, 0, 0, 233,
	375, 234, 376, 377, 378, 379, 380, 0, 381, 0,
	0, 236, 237, 238, 0, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 384, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 385, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 386, 258, 387, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 0, 264, 0, 389, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 182, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 0, 0, 0,
	0, 185, 186, 905, 0, 187, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 0, 192, 355, 356, 193,
	194, 0, 0, 357, 358, 359, 0, 195, 360, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 414,
	211, 361, 212, 362, 363, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	364, 219, 221, 220, 222, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 370, 0,
	371, 0, 0, 228, 229, 230, 231, 372, 373, 0,
	0, 374, 235, 0, 232, 0, 0, 233, 375, 234,
	376, 377, 378, 379, 380, 0, 381, 0, 0, 236,
	237, 238, 0, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 384, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 385,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 386,
	258, 387, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 0, 264, 0, 389, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 0, 903, 342, 182, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 0, 187, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 188, 189, 190, 349,
	350, 351, 352, 191, 353, 354, 0, 192, 355, 356,
	193, 194, 0, 0, 357, 358, 359, 0, 195, 360,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	414, 211, 361, 212, 362, 363, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 364, 219, 221, 220, 222, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 367, 368, 369,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 370,
	0, 371, 0, 0, 228, 229, 230, 231, 902, 373,
	0, 0, 374, 235, 0, 232, 0, 0, 233, 375,
	234, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	236, 237, 238, 0, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 384, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	385, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	386, 258, 387, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 0, 264, 0, 389, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 0, 310, 395, 396,
	311, 0, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 0, 899, 342, 182, 0, 0,
	0, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 0, 187, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 188, 189, 190,
	349, 350, 351, 352, 191, 353, 354, 0, 192, 355,
	356, 193, 194, 0, 0, 357, 358, 359, 0, 195,
	360, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 414, 211, 361, 212, 362, 363, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 364, 219, 221, 220, 222, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 367, 368,
	369, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	370, 0, 371, 0, 0, 228, 229, 230, 231, 372,
	373, 0, 0, 374, 235, 0, 232, 0, 0, 233,
	375, 234, 376, 377, 378, 379, 380, 0, 381, 0,
	0, 236, 237, 238, 0, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 384, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 385, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 386, 258, 387, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 0, 264, 0, 389, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 0, 884, 342, 182, 0,
	0, 0, 343, 344, 345, 346, 347, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 0, 187, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 188, 189,
	190, 349, 350, 351, 352, 191, 353, 354, 0, 192,
	355, 356, 193, 194, 0, 0, 357, 358, 359, 0,
	195, 360, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 414, 211, 361, 212, 362, 363, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 364, 219, 221, 220, 222, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 367,
	368, 369, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 370, 0, 371, 0, 0, 228, 229, 230, 231,
	886, 373, 0, 0, 374, 235, 0, 232, 0, 0,
	233, 375, 234, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 236, 237, 238, 0, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 384, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 385, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 386, 258, 387, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 0, 264, 0, 389,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 0, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 400, 401,
	0, 0, 328, 329, 402, 403, 0, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 0, 338, 0,
	404, 339, 340, 341, 405, 406, 0, 774, 342, 182,
	0, 0, 0, 343, 344, 345, 346, 347, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 0, 187,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 188,
	189, 190, 349, 350, 351, 352, 191, 353, 354, 0,
	192, 355, 356, 193, 194, 0, 0, 357, 358, 359,
	0, 195, 360, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 414, 211, 361, 212, 362, 363, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 364, 219, 221, 220, 222, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	367, 368, 369, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 370, 0, 371, 0, 0, 228, 229, 230,
	231, 776, 373, 0, 0, 374, 235, 0, 232, 0,
	0, 233, 375, 234, 376, 377, 378, 379, 380, 0,
	381, 0, 0, 236, 237, 238, 0, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 384, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 385, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 386, 258, 387, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 0, 264, 0,
	389, 265, 266, 267, 268, 269, 0, 270, 390, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	393, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 0, 308, 296, 297, 309, 0,
	310, 395, 396, 311, 0, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 405, 406, 0, 772, 342,
	182, 0, 0, 0, 343, 344, 345, 346, 347, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 0,
	187, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	0, 192, 355, 356, 193, 194, 0, 0, 357, 358,
	359, 0, 195, 360, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 414, 211, 361, 212, 362, 363,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	230, 231, 372, 373, 0, 0, 374, 235, 0, 232,
	0, 0, 233, 375, 234, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 236, 237, 238, 0, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 384, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 385, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 386, 258, 387, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 0, 264,
	0, 389, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 0, 523,
	342, 182, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	0, 187, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 188, 189, 190, 349, 350, 351, 352, 191, 353,
	354, 0, 192, 355, 356, 193, 194, 0, 0, 357,
	358, 359, 0, 514, 360, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 414, 211, 361, 212, 362,
	363, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 364, 219, 221, 220,
	222, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 367, 368, 369, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 370, 0, 371, 0, 0, 228,
	229, 230, 231, 372, 373, 0, 0, 374, 235, 0,
	232, 0, 0, 233, 375, 234, 376, 377, 378, 379,
	380, 0, 381, 0, 0, 236, 237, 238, 0, 382,
	383, 239, 240, 241, 0, 243, 242, 0, 384, 0,
	244, 245, 0, 0, 246, 513, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 385, 525, 0, 254, 255,
	257, 256, 0, 0, 0, 386, 258, 387, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 388, 0,
	264, 0, 389, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 515, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 516, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	520, 400, 401, 0, 0, 328, 518, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 0,
	505, 342, 182, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 0, 187, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 188, 189, 190, 349, 350, 351, 352, 191,
	353, 354, 0, 192, 355, 356, 193, 194, 0, 0,
	357, 358, 359, 0, 195, 360, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 414, 211, 361, 212,
	362, 363, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 364, 219, 221,
	220, 222, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 367, 368, 369, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 370, 0, 371, 0, 0,
	228, 229, 230, 231, 372, 373, 0, 0, 374, 235,
	0, 232, 0, 0, 233, 375, 234, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 236, 237, 238, 0,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 384,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 385, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 386, 258, 387, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	0, 264, 0, 389, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 506, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	0, 503, 342, 182, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 0, 187, 0, 0, 0, 0, 348, 0,
	0, 0, 0, 188, 189, 190, 349, 350, 351, 352,
	191, 353, 354, 0, 192, 355, 356, 193, 194, 0,
	0, 357, 358, 359, 0, 195, 360, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 414, 211, 361,
	212, 362, 363, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 364, 219,
	221, 220, 222, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 367, 368, 369, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 370, 0, 371, 0,
	0, 228, 229, 230, 231, 372, 373, 0, 0, 374,
	235, 0, 232, 0, 0, 233, 375, 234, 376, 377,
	378, 379, 380, 0, 381, 0, 0, 236, 237, 238,
	0, 382, 383, 239, 240, 241, 0, 243, 242, 0,
	384, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 385, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 386, 258, 387,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	388, 0, 264, 0, 389, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 400, 401, 0, 0, 328, 329, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 405,
	406, 0, 495, 342, 182, 0, 0, 0, 343, 344,
	345, 346, 347, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 0, 187, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 0, 195, 360, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 230, 231, 372, 373, 0, 0,
	374, 235, 0, 232, 0, 0, 233, 375, 234, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 236, 237,
	238, 0, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 384, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 385, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 386, 258,
	387, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 0, 264, 0, 389, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 0, 449, 342, 182, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 0, 187, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 0, 192, 355, 356, 193,
	194, 0, 0, 357, 358, 359, 0, 195, 360, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 414,
	211, 361, 212, 362, 363, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	364, 219, 221, 220, 222, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 370, 0,
	371, 0, 0, 228, 229, 230, 231, 372, 373, 0,
	0, 374, 235, 0, 232, 0, 0, 233, 375, 234,
	376, 377, 378, 379, 380, 0, 381, 0, 0, 236,
	237, 238, 0, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 384, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 385,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 386,
	258, 387, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 0, 264, 0, 389, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 182, 0, 342, 0, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 0, 0, 0, 185,
	186, 0, 0, 187, 0, 0, 0, 0, 348, 0,
	0, 0, 0, 188, 189, 190, 349, 350, 351, 352,
	191, 353, 354, 0, 192, 355, 356, 193, 194, 0,
	0, 357, 358, 359, 0, 195, 360, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 414, 211, 361,
	212, 362, 363, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 364, 219,
	221, 220, 222, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 367, 368, 369, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 370, 0, 371, 0,
	0, 228, 229, 230, 231, 372, 373, 0, 0, 374,
	235, 0, 232, 0, 0, 233, 375, 234, 376, 377,
	378, 379, 380, 0, 381, 0, 0, 236, 237, 238,
	0, 382, 383, 239, 240, 241, 0, 243, 242, 0,
	384, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 385, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 386, 258, 387,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	388, 0, 264, 0, 389, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 400, 401, 0, 0, 328, 329, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 405,
	406, 182, 0, 342, 0, 0, 0, 0, 343, 344,
	345, 346, 347, 0, 0, 0, 0, 185, 186, 0,
	0, 187, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 188, 189, 190, 349, 350, 351, 352, 191, 353,
	354, 0, 192, 355, 356, 193, 194, 0, 0, 357,
	358, 359, 0, 195, 360, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 414, 211, 361, 212, 362,
	363, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 364, 219, 221, 220,
	222, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 367, 368, 369, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 370, 0, 371, 0, 0, 228,
	229, 230, 231, 1952, 373, 0, 0, 374, 235, 0,
	232, 0, 0, 233, 375, 234, 376, 377, 378, 379,
	380, 0, 381, 0, 0, 236, 237, 238, 0, 382,
	383, 239, 240, 241, 0, 243, 242, 0, 384, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 385, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 386, 258, 387, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 388, 0,
	264, 0, 389, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 400, 401, 0, 0, 328, 329, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 182,
	0, 342, 0, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 185, 186, 0, 0, 187,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 188,
	189, 190, 349, 350, 351, 352, 191, 353, 354, 0,
	192, 355, 356, 193, 194, 0, 0, 357, 358, 359,
	0, 195, 360, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 414, 211, 361, 212, 362, 363, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 364, 219, 221, 220, 222, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	367, 368, 369, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 370, 0, 371, 0, 0, 228, 229, 230,
	231, 1950, 373, 0, 0, 374, 235, 0, 232, 0,
	0, 233, 375, 234, 376, 377, 378, 379, 380, 0,
	381, 0, 0, 236, 237, 238, 0, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 384, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 385, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 386, 258, 387, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 0, 264, 0,
	389, 265, 266, 267, 268, 269, 0, 270, 390, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	393, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 0, 308, 296, 297, 309, 0,
	310, 395, 396, 311, 0, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 405, 406, 182, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 0,
	0, 0, 0, 185, 186, 0, 0, 187, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 188, 189, 190,
	349, 350, 351, 352, 191, 353, 354, 0, 192, 355,
	356, 193, 194, 0, 0, 357, 358, 359, 0, 195,
	360, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 414, 211, 361, 212, 362, 363, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 364, 219, 221, 220, 222, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 367, 368,
	369, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	370, 0, 371, 0, 0, 228, 229, 230, 231, 1939,
	373, 0, 0, 374, 235, 0, 232, 0, 0, 233,
	375, 234, 376, 377, 378, 379, 380, 0, 381, 0,
	0, 236, 237, 238, 0, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 384, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 385, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 386, 258, 387, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 0, 264, 0, 389, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 182, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 0, 0, 0,
	0, 185, 186, 0, 0, 187, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 0, 192, 355, 356, 193,
	194, 0, 0, 357, 358, 359, 0, 195, 360, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 414,
	211, 361, 212, 362, 363, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	364, 219, 221, 220, 222, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 370, 0,
	371, 0, 0, 228, 229, 230, 231, 372, 373, 0,
	0, 374, 235, 0, 232, 0, 0, 233, 375, 234,
	376, 377, 378, 379, 380, 0, 381, 0, 0, 236,
	237, 238, 0, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 384, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 385,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 386,
	258, 387, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 0, 264, 0, 389, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 506,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 182, 0, 342, 0, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 0, 0, 0, 185,
	186, 0, 0, 187, 0, 0, 0, 0, 348, 0,
	1263, 0, 0, 188, 189, 190, 349, 350, 351, 352,
	191, 353, 354, 0, 192, 355, 356, 193, 194, 0,
	0, 357, 358, 359, 0, 195, 360, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 414, 211, 361,
	212, 362, 363, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 364, 219,
	221, 220, 222, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 367, 368, 369, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 370, 0, 371, 0,
	0, 228, 229, 230, 231, 372, 373, 0, 0, 374,
	235, 0, 232, 0, 0, 233, 375, 234, 376, 377,
	378, 379, 380, 0, 381, 0, 0, 236, 237, 238,
	0, 382, 383, 239, 240, 241, 0, 243, 242, 0,
	384, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 385, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 386, 258, 387,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	388, 0, 264, 0, 389, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 0,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 400, 401, 0, 0, 328, 329, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 405,
	406, 182, 0, 342, 0, 0, 0, 0, 343, 344,
	345, 346, 347, 0, 0, 0, 0, 185, 186, 0,
	0, 187, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 188, 189, 190, 349, 350, 351, 352, 191, 353,
	354, 0, 192, 355, 356, 193, 194, 0, 0, 357,
	358, 359, 0, 195, 360, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 414, 211, 361, 212, 362,
	363, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 364, 219, 221, 220,
	222, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 367, 368, 369, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 370, 0, 371, 0, 0, 228,
	229, 230, 231, 372, 373, 0, 0, 374, 235, 0,
	232, 0, 0, 233, 375, 234, 376, 377, 378, 379,
	380, 0, 381, 0, 0, 236, 237, 238, 0, 382,
	383, 239, 240, 241, 0, 243, 242, 0, 384, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 385, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 386, 258, 387, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 388, 0,
	264, 0, 389, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 739, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 400, 401, 0, 0, 328, 329, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 182,
	0, 342, 0, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 185, 186, 0, 0, 187,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 188,
	189, 190, 349, 350, 351, 352, 191, 353, 354, 0,
	192, 355, 356, 193, 194, 0, 0, 357, 358, 359,
	0, 195, 360, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 414, 211, 361, 212, 362, 363, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 364, 219, 221, 220, 222, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	367, 368, 369, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 370, 0, 371, 0, 0, 228, 229, 230,
	231, 372, 373, 0, 0, 374, 235, 0, 232, 0,
	0, 233, 375, 234, 376, 377, 378, 379, 380, 0,
	381, 0, 0, 236, 237, 238, 0, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 384, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 385, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 386, 258, 387, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 0, 264, 0,
	389, 265, 266, 0, 268, 269, 0, 270, 390, 271,
	391, 272, 0, 273, 274, 275, 0, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	393, 0, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 0, 308, 296, 297, 309, 0,
	310, 395, 396, 311, 0, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 405, 406, 0, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 1059,
	1060, 0, 1089, 1090, 1091, 1099, 1100, 1101, 0, 0,
	0, 0, 1077, 0, 0, 0, 1092, 0, 0, 0,
	0, 0, 0, 1062, 0, 0, 1103, 0, 0, 0,
	0, 1846, 1847, 0, 1864, 1865, 1866, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1061, 2050, 0,
	0, 1059, 1060, 1081, 1089, 1090, 1091, 1099, 1100, 1101,
	1078, 0, 0, 0, 1077, 0, 0, 0, 1092, 0,
	0, 0, 0, 0, 0, 1062, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 1861, 0, 0, 1846, 1847,
	0, 1864, 1865, 1866, 0, 0, 0, 0, 0, 1061,
	0, 0, 0, 0, 0, 1081, 0, 0, 1084, 1085,
	1086, 1087, 1078, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1096, 1104, 0,
	0, 0, 1861, 0, 0, 0, 0, 0, 0, 1852,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
	1084, 1085, 1086, 1087, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 0, 1867, 1096,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1852, 1093, 1102, 0,
	0, 0, 0, 1862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1094, 1868, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 1867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 1093,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1862, 0, 0, 1097, 0, 0, 0, 0, 0, 1076,
	0, 0, 0, 0, 0, 0, 0, 0, 1863, 0,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 1059, 1060, 0, 1089, 1090,
	1091, 1099, 1100, 1101, 0, 1097, 0, 0, 1077, 0,
	0, 1076, 1092, 0, 0, 0, 0, 0, 0, 1062,
	0, 0, 1103, 1095, 0, 1863, 1073, 1074, 1080, 1079,
	1075, 1098, 0, 1072, 1070, 1071, 1063, 1064, 1065, 1066,
	1068, 1069, 0, 1061, 0, 0, 0, 0, 0, 1081,
	1888, 0, 0, 0, 0, 0, 1078, 0, 1858, 1859,
	1860, 0, 0, 0, 0, 1857, 1855, 1856, 1848, 1849,
	1850, 1851, 1853, 1854, 0, 1095, 0, 0, 1073, 1074,
	1080, 1079, 1075, 1098, 0, 1072, 1070, 1071, 1063, 1064,
	1065, 1066, 1068, 1069, 0, 0, 0, 0, 0, 0,
	0, 0, 1887, 0, 1084, 1085, 1086, 1087, 0, 0,
	0, 0, 0, 1067, 0, 1858, 1859, 1860, 0, 0,
	0, 0, 1857, 1855, 1856, 1848, 1849, 1850, 1851, 1853,
	1854, 0, 0, 1096, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 1059, 1060, 0, 1089, 1090, 1091,
	1099, 1100, 1101, 0, 0, 0, 0, 1077, 0, 0,
	1094, 1092, 0, 0, 0, 0, 0, 1082, 1062, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1061, 1093, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 1085, 1086, 1087, 0, 0, 1097,
	0, 0, 1067, 0, 0, 1076, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1096, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 0, 1059, 1060, 0, 1089, 1090, 1091, 1099,
	1100, 1101, 0, 0, 0, 0, 1077, 0, 0, 1094,
	1092, 0, 0, 0, 0, 0, 1082, 1062, 0, 1095,
	1103, 0, 1073, 1074, 1080, 1079, 1075, 1098, 0, 1072,
	1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069, 0, 0,
	0, 1061, 1093, 0, 0, 0, 1886, 1081, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 1085, 1086, 1087, 0, 0, 1097, 0,
	0, 1067, 0, 0, 1076, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1096, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 1095, 0,
	0, 1073, 1074, 1080, 1079, 1075, 1098, 0, 1072, 1070,
	1071, 1063, 1064, 1065, 1066, 1068, 1069, 0, 0, 0,
	0, 1093, 0, 0, 0, 1838, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1059, 1060, 0, 1089, 1090, 1091, 1099, 1100, 1101, 0,
	0, 0, 0, 1077, 0, 1088, 0, 1092, 0, 0,
	0, 0, 0, 0, 1062, 0, 0, 1103, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1097, 1061, 0,
	0, 0, 0, 1076, 1081, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1059,
	1060, 0, 1089, 1090, 1091, 1099, 1100, 1101, 0, 0,
	0, 0, 1077, 0, 0, 0, 1092, 0, 0, 1084,
	1085, 1086, 1087, 1062, 0, 0, 1103, 1095, 1067, 0,
	1073, 1074, 1080, 1079, 1075, 1098, 0, 1072, 1070, 1071,
	1063, 1064, 1065, 1066, 1068, 1069, 0, 1061, 1096, 1104,
	2508, 0, 0, 1081, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 1085,
	1086, 1087, 0, 0, 0, 0, 0, 1067, 1093, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1096, 1104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1088, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 1097, 0, 0, 0, 1059, 1060,
	1076, 1089, 1090, 1091, 1099, 1100, 1101, 0, 0, 0,
	0, 1077, 0, 0, 0, 1092, 0, 1093, 0, 0,
	0, 0, 1062, 0, 0, 1103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1061, 0, 0, 0,
	0, 1088, 1081, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 1095, 0, 1083, 1073, 1074, 1080,
	1079, 1075, 1098, 0, 1072, 1070, 1071, 1063, 1064, 1065,
	1066, 1068, 1069, 1097, 0, 0, 0, 2458, 0, 1076,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 1085, 1086,
	1087, 0, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 1060, 0,
	1089, 1090, 1091, 1099, 1100, 1101, 1096, 1104, 0, 0,
	1077, 0, 0, 0, 1092, 0, 0, 0, 0, 0,
	0, 1062, 0, 1095, 1103, 1102, 1073, 1074, 1080, 1079,
	1075, 1098, 0, 1072, 1070, 1071, 1063, 1064, 1065, 1066,
	1068, 1069, 0, 1094, 0, 1061, 2412, 0, 0, 0,
	1082, 1081, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 1085, 1086, 1087,
	1088, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1096, 1104, 0, 0, 0,
	0, 0, 1097, 0, 0, 0, 0, 0, 1076, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 0, 0, 1059, 1060, 0, 1089,
	1090, 1091, 1099, 1100, 1101, 0, 0, 0, 0, 1077,
	0, 0, 0, 1092, 0, 1093, 0, 0, 0, 0,
	1062, 0, 1095, 1103, 0, 1073, 1074, 1080, 1079, 1075,
	1098, 0, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068,
	1069, 0, 0, 0, 1061, 2382, 0, 0, 0, 1088,
	1081, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 1059, 1060, 1076, 1089, 1090,
	1091, 1099, 1100, 1101, 0, 0, 0, 0, 1077, 0,
	0, 0, 1092, 0, 0, 1084, 1085, 1086, 1087, 1062,
	0, 0, 1103, 0, 1067, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 1096, 1104, 0, 0, 0, 1081,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 1095, 0, 1102, 1073, 1074, 1080, 1079, 1075, 1098,
	0, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069,
	0, 1094, 0, 0, 2377, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 1085, 1086, 1087, 0, 0,
	0, 0, 0, 1067, 1093, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1096, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1088, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	1097, 0, 0, 0, 1059, 1060, 1076, 1089, 1090, 1091,
	1099, 1100, 1101, 0, 0, 0, 0, 1077, 0, 0,
	0, 1092, 0, 1093, 0, 0, 0, 0, 1062, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1061, 0, 0, 0, 0, 1088, 1081, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	1095, 0, 1083, 1073, 1074, 1080, 1079, 1075, 1098, 0,
	1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069, 1097,
	0, 0, 0, 2373, 0, 1076, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 1085, 1086, 1087, 0, 0, 0,
	0, 0, 1067, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1059, 1060, 0, 1089, 1090, 1091, 1099,
	1100, 1101, 1096, 1104, 0, 0, 1077, 0, 0, 0,
	1092, 0, 0, 0, 0, 0, 0, 1062, 0, 1095,
	1103, 1102, 1073, 1074, 1080, 1079, 1075, 1098, 0, 1072,
	1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069, 0, 1094,
	0, 1061, 2308, 0, 0, 0, 1082, 1081, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 1085, 1086, 1087, 1088, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1096, 1104, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 0, 0, 1076, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	0, 0, 1059, 1060, 0, 1089, 1090, 1091, 1099, 1100,
	1101, 0, 0, 0, 0, 1077, 0, 0, 0, 1092,
	0, 1093, 0, 0, 0, 0, 1062, 0, 1095, 1103,
	0, 1073, 1074, 1080, 1079, 1075, 1098, 0, 1072, 1070,
	1071, 1063, 1064, 1065, 1066, 1068, 1069, 0, 0, 0,
	1061, 2274, 0, 0, 0, 1088, 1081, 0, 0, 0,
	0, 0, 0, 1078, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	0, 1059, 1060, 1076, 1089, 1090, 1091, 1099, 1100, 1101,
	0, 0, 0, 0, 1077, 0, 0, 0, 1092, 0,
	0, 1084, 1085, 1086, 1087, 1062, 0, 0, 1103, 0,
	1067, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1061,
	1096, 1104, 0, 0, 0, 1081, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 1095, 0, 1102,
	1073, 1074, 1080, 1079, 1075, 1098, 0, 1072, 1070, 1071,
	1063, 1064, 1065, 1066, 1068, 1069, 0, 1094, 0, 0,
	2273, 0, 0, 0, 1082, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 1085, 1086, 1087, 0, 0, 0, 0, 0, 1067,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 1097, 0, 0, 0,
	1059, 1060, 1076, 1089, 1090, 1091, 1099, 1100, 1101, 0,
	0, 0, 0, 1077, 0, 0, 0, 1092, 0, 1093,
	0, 0, 0, 0, 1062, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1061, 0,
	0, 0, 0, 1088, 1081, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 1095, 0, 1083, 1073,
	1074, 1080, 1079, 1075, 1098, 0, 1072, 1070, 1071, 1063,
	1064, 1065, 1066, 1068, 1069, 1097, 0, 0, 0, 2238,
	0, 1076, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	1085, 1086, 1087, 0, 0, 0, 0, 0, 1067, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1059,
	1060, 0, 1089, 1090, 1091, 1099, 1100, 1101, 1096, 1104,
	0, 0, 1077, 0, 0, 0, 1092, 0, 0, 0,
	0, 0, 0, 1062, 0, 1095, 1103, 1102, 1073, 1074,
	1080, 1079, 1075, 1098, 0, 1072, 1070, 1071, 1063, 1064,
	1065, 1066, 1068, 1069, 0, 1094, 0, 1061, 2081, 0,
	0, 0, 1082, 1081, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 1085,
	1086, 1087, 1088, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1096, 1104, 0,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 0, 1059, 1060,
	0, 1089, 1090, 1091, 1099, 1100, 1101, 0, 0, 0,
	0, 1077, 0, 0, 0, 1092, 0, 1093, 0, 0,
	0, 0, 1062, 0, 1095, 1103, 0, 1073, 1074, 1080,
	1079, 1075, 1098, 0, 1072, 1070, 1071, 1063, 1064, 1065,
	1066, 1068, 1069, 0, 0, 0, 1061, 2057, 0, 0,
	0, 1088, 1081, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 1076,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 1085, 1086,
	1087, 0, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 1060, 0,
	1089, 1090, 1091, 1099, 1100, 1101, 1096, 1104, 0, 0,
	1077, 0, 0, 0, 1092, 0, 0, 0, 0, 0,
	0, 1062, 0, 1095, 1103, 1102, 1073, 1074, 1080, 1079,
	1075, 1098, 0, 1072, 1070, 1071, 1063, 1064, 1065, 1066,
	1068, 1069, 0, 1094, 0, 1061, 1512, 0, 0, 0,
	1082, 1081, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 1085, 1086, 1087,
	1088, 0, 0, 0, 0, 1067, 2571, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 1059, 1060, 0, 1089,
	1090, 1091, 1099, 1100, 1101, 1096, 1104, 0, 0, 1077,
	0, 0, 1097, 1092, 0, 0, 0, 0, 1076, 0,
	1062, 0, 0, 1103, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1094, 0, 1061, 0, 0, 0, 0, 1082,
	1081, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1093, 0, 0, 0, 0,
	0, 0, 1095, 0, 0, 1073, 1074, 1080, 1079, 1075,
	1098, 2570, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068,
	1069, 0, 0, 1808, 0, 1084, 1085, 1086, 1087, 1088,
	0, 0, 0, 0, 1067, 0, 1878, 0, 0, 1877,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1096, 1104, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 1076, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 0, 1059, 1060, 0, 1089, 1090,
	1091, 1099, 1100, 1101, 0, 0, 0, 0, 1077, 0,
	0, 0, 1092, 0, 1093, 0, 0, 1781, 0, 1062,
	0, 1095, 1103, 0, 1073, 1074, 1080, 1079, 1075, 1098,
	0, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069,
	0, 0, 0, 1061, 0, 0, 0, 0, 1088, 1081,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 1782, 0, 0, 1076, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 1085, 1086, 1087, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 1610, 0,
	0, 0, 0, 0, 1059, 1060, 0, 1089, 1090, 1091,
	1099, 1100, 1101, 1096, 1104, 0, 0, 1077, 0, 0,
	0, 1092, 0, 0, 0, 1609, 0, 0, 1062, 0,
	1095, 1103, 1102, 1073, 1074, 1080, 1079, 1075, 1098, 0,
	1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069, 0,
	1094, 0, 1061, 0, 0, 0, 0, 1082, 1081, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 1085, 1086, 1087, 1088, 0, 0,
	0, 0, 1067, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 1059, 1060, 0, 1089, 1090, 1091, 1099,
	1100, 1101, 1096, 1104, 0, 0, 1077, 0, 0, 1097,
	1092, 0, 0, 0, 0, 1076, 0, 1062, 0, 0,
	1103, 1102, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1094,
	0, 1061, 0, 0, 0, 0, 1082, 1081, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 0, 0, 0, 0, 0, 0, 1095,
	0, 0, 1073, 1074, 1080, 1079, 1075, 1098, 0, 1072,
	1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069, 0, 0,
	0, 0, 1084, 1085, 1086, 1087, 1088, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 1059, 1060, 0, 1089, 1090, 1091, 1099, 1100,
	1101, 1096, 1104, 0, 0, 1077, 0, 0, 1097, 1092,
	0, 0, 0, 0, 1076, 0, 1062, 0, 0, 1103,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1094, 0,
	1061, 0, 0, 0, 0, 1082, 1081, 0, 0, 0,
	0, 0, 0, 1078, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1093, 596, 0, 0, 0, 0, 0, 1095, 0,
	0, 1073, 1074, 1080, 1079, 1075, 1098, 0, 1072, 1070,
	1071, 1063, 1064, 1065, 1066, 1068, 1069, 0, 0, 0,
	0, 1084, 1085, 1086, 1087, 1088, 0, 0, 0, 0,
	1067, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 1059, 1060, 0, 1089, 1090, 1091, 1099, 1100, 1101,
	1096, 1104, 0, 0, 1077, 0, 0, 1097, 1092, 0,
	0, 0, 0, 1076, 0, 1062, 0, 0, 1103, 1102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1094, 0, 1061,
	0, 0, 0, 0, 1082, 1081, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 1095, 0, 0,
	1073, 1074, 1080, 1079, 1075, 1098, 0, 1072, 1070, 1071,
	1063, 1064, 1065, 1066, 1068, 1069, 0, 0, 0, 0,
	1084, 1085, 1086, 1087, 1088, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 1884, 0, 0, 0, 0, 1083,
	1059, 1060, 0, 1089, 1090, 1091, 1099, 1100, 1101, 1096,
	1104, 0, 0, 1077, 0, 0, 1097, 1092, 0, 0,
	0, 1879, 1076, 0, 1062, 0, 0, 1103, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2061, 0, 1094, 0, 1061, 0,
	0, 0, 0, 1082, 1081, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 1073,
	1074, 1080, 1079, 1075, 1098, 0, 1072, 1070, 1071, 1063,
	1064, 1065, 1066, 1068, 1069, 0, 0, 0, 0, 1084,
	1085, 1086, 1087, 1088, 0, 0, 0, 0, 1067, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1096, 1104,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 1076, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 1059,
	1060, 0, 1089, 1090, 1091, 1099, 1100, 1101, 0, 0,
	0, 0, 1077, 0, 0, 0, 1092, 0, 1093, 0,
	0, 0, 0, 1062, 0, 1095, 1103, 0, 1073, 1074,
	1080, 1079, 1075, 1098, 0, 1072, 1070, 1071, 1063, 1064,
	1065, 1066, 1068, 1069, 0, 0, 0, 1061, 0, 0,
	0, 0, 1088, 1081, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 1085,
	1086, 1087, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1059, 1060,
	0, 1089, 1090, 1091, 1099, 1100, 1101, 1096, 1104, 0,
	0, 1077, 0, 0, 0, 1092, 0, 0, 0, 1837,
	0, 0, 1062, 0, 1095, 1103, 1102, 1073, 1074, 1080,
	1079, 1075, 1098, 0, 1072, 1070, 1071, 1063, 1064, 1065,
	1066, 1068, 1069, 0, 1094, 0, 1061, 0, 0, 0,
	0, 1082, 1081, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1093, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1844, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 1085, 1086,
	1087, 1088, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 1059, 1060, 0,
	1089, 1090, 1091, 1099, 1100, 1101, 1096, 1104, 0, 0,
	1077, 0, 0, 1097, 1092, 0, 0, 0, 0, 1076,
	0, 1062, 0, 0, 1103, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1094, 0, 1061, 0, 0, 0, 0,
	1082, 1081, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 1095, 0, 0, 1073, 1074, 1080, 1079,
	1075, 1098, 0, 1072, 1070, 1071, 1063, 1064, 1065, 1066,
	1068, 1069, 0, 0, 0, 0, 1084, 1085, 1086, 1087,
	1088, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 1059, 1060, 0, 1089,
	1090, 1091, 1099, 1100, 1101, 1096, 1104, 0, 0, 1077,
	0, 0, 1097, 1092, 0, 0, 0, 0, 1076, 0,
	1062, 0, 0, 1103, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1094, 0, 1061, 0, 0, 0, 0, 1082,
	1081, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1093, 0, 0, 0, 0,
	0, 0, 1095, 0, 0, 1073, 1074, 1080, 1079, 1075,
	1098, 0, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068,
	1069, 0, 0, 0, 0, 1084, 1085, 1086, 1087, 1088,
	0, 0, 0, 0, 1067, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 1059, 1060, 0, 1089, 1090,
	1091, 1099, 1100, 1101, 1096, 1104, 0, 0, 1077, 0,
	0, 1097, 0, 0, 0, 0, 0, 1076, 0, 1062,
	0, 0, 1103, 1102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1094, 0, 1061, 0, 0, 0, 0, 1082, 1081,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1095, 0, 0, 1073, 1074, 1080, 1079, 1075, 1098,
	0, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069,
	0, 0, 0, 0, 1084, 1085, 1086, 1087, 1088, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 1059, 1060, 0, 1089, 1090, 1091,
	1099, 1100, 1101, 1096, 1104, 0, 0, 1077, 0, 0,
	1097, 0, 0, 0, 0, 0, 1076, 0, 1062, 0,
	0, 1103, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 1061, 0, 0, 0, 0, 1082, 1081, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 1073, 1074, 1080, 1079, 1075, 1098, 0,
	1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069, 0,
	0, 0, 0, 1084, 1085, 1086, 1087, 1088, 0, 0,
	0, 0, 1067, 0, 0, 0, 0, 0, 0, 0,
	0, 544, 1083, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 1096, 1104, 0, 0, 0, 0, 0, 1097,
	0, 549, 0, 0, 0, 1076, 0, 0, 0, 0,
	0, 0, 0, 0, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1094,
	0, 0, 0, 0, 0, 548, 1082, 0, 0, 0,
	550, 0, 0, 0, 0, 0, 0, 0, 556, 557,
	0, 0, 0, 566, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 571, 551, 1095,
	0, 1307, 1073, 1074, 1080, 1079, 1075, 1098, 0, 1072,
	1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069, 0, 0,
	569, 0, 0, 0, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 1315, 1304, 1334, 1293, 1325,
	1324, 1083, 0, 1295, 1294, 552, 0, 0, 0, 1336,
	1335, 0, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 553, 554, 0, 1076, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 560,
	0, 0, 0, 0, 555, 562, 0, 1330, 0, 1322,
	1321, 0, 0, 0, 0, 0, 0, 559, 0, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1319, 1317, 1318, 0, 0, 0, 1095, 0,
	0, 1073, 1074, 1080, 1079, 1075, 1098, 0, 1072, 1070,
	1071, 1063, 1064, 1065, 1066, 1068, 1069, 1303, 558, 0,
	0, 0, 0, 0, 1308, 1306, 1309, 1310, 1311, 1312,
	1313, 0, 1333, 0, 0, 0, 0, 1307, 0, 1297,
	1296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 546, 563, 573, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	0, 1315, 1304, 1334, 1293, 1325, 1324, 1323, 0, 1295,
	1294, 1305, 0, 564, 0, 1336, 1335, 568, 0, 0,
	0, 0, 574, 0, 0, 0, 0, 561, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 567, 1437, 1435, 1436, 1439, 1438, 0,
	0, 0, 0, 1330, 0, 1322, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 1320, 0, 0, 0, 0,
	0, 0, 1300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1314, 1301, 0, 0, 0, 1319, 1317,
	1318, 0, 0, 0, 1338, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1298, 0, 0,
	0, 1331, 1332, 1303, 0, 0, 0, 0, 0, 0,
	1308, 1306, 1309, 1310, 1311, 1312, 1313, 0, 1333, 0,
	0, 0, 0, 1302, 0, 1297, 1296, 0, 1337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 1305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1314,
	1301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1298, 0, 0, 0, 1331, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1302,
	0, 0, 0, 0, 1337,
}
var sqlPact = [...]int{

	4146, -1000, -180, -1000, -1000, -1000, 158, -1000, -1000, -1000,
	-1000, 157, 156, 154, -1000, 153, 151, 150, 149, 148,
	147, 145, 144, 143, 141, 140, -1000, 136, -1000, -1000,
	-1000, -1000, 134, 133, 132, 131, 130, 129, 125, -1000,
	1152, 22132, 118, 114, 1432, -1000, 35389, 113, -1000, 1092,
	25862, 969, 1445, 110, 109, 107, 106, 105, 1058, 35051,
	3724, 2206, 1142, 1734, 34710, 21791, 1733, 1509, 34369, -1000,
	-1000, 34028, 103, 96, 93, 92, 90, -1000, -1000, 33687,
	88, 87, 86, 85, 84, 82, 81, 79, 75, 71,
	70, 64, 62, 61, -1000, 60, 59, 47, -1000, 42809,
	45, 44, 42, 1129, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 935, 38,
	36, 34, 33, 32, 111, -1000, 979, 468, 2749, 8643,
	1107, 1103, 1086, 1052, 1102, 37417, 35389, 26, -28, 23,
	-1000, 2092, 687, 18680, 4146, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25521,
	25180, 33346, 33005, 6101, 786, -1000, -2, 23484, 35389, -1000,
	112, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14160, 13781, 573, 112, -1000, -1000, -1000, 32664, 21450, 32323,
	1565, 31982, -1000, -1000, 31641, -1000, -1000, 1995, 1749, 1747,
	24839, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 31303, 30962, 30621, 30280, 29939, 534, -1000,
	-1000, -1000, 4622, -1000, -1000, -1000, -1000, 22, -1000, 21,
	-1000, 19, 18, 17, 16, 14, -1000, 11, 10, -1000,
	9, 8, -1000, 7, 6, 984, 29598, 904, 1328, -1000,
	-1000, 0, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35389, -1000, 15213, -1000, 532, -1000, 1674, -1000, 15213, -1000,
	1327, -1000, -1000, -1000, -1000, -1000, 35389, -1000, -1000, -1000,
	-1000, -1000, -1000, 2280, 1227, 530, 29257, -1000, 1555, -1000,
	640, 810, -1000, -1000, -1000, 9345, 167, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2285, 21098, 1486, 2071,
	1993, 2279, 1518, 1982, 1906, 1856, 1841, 1818, 2277, 1008,
	2275, 1967, 1047, 2274, 1787, 1496, 710, 2272, 1671, 1668,
	-1000, -1000, -1000, -1000, 957, -1000, -1000, -1000, 27214, -1000,
	-1000, 835, 928, -1000, -1000, -1000, -1000, -1000, 979, -1000,
	-1000, -1000, 1468, 2032, 2032, 2032, 2119, 317, 311, -1000,
	111, -1000, 1542, -1000, 1202, -1000, -1000, -1000, 42287, -1000,
	-1000, 15213, 15213, 15213, 15213, 15213, 1162, -1000, 565, -1000,
	529, 528, 7197, -1000, -1000, 2260, -1000, -1000, -1000, 316,
	-1000, -1000, 15213, 112, -1000, -1000, -1000, -1000, 524, 2266,
	-1000, 594, -1000, -1000, -1000, 645, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1724, 523, 518, 517, -1000,
	516, -1000, -1000, 513, 512, 511, 509, 508, 507, 506,
	505, 503, 501, 497, 490, 486, 481, 480, 1070, -1000,
	667, -1000, -1000, 667, 667, -1000, 460, 460, 461, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 460, -1000, -1000,
	-1000, 611, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 477, 1323, -1000, -1000, 1323, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 784, 36741, -5, 35389,
	-1000, 476, -5, -1000, -1000, 470, -1000, 9696, 9696, -1000,
	-1000, -1000, 15213, -1000, 1571, -1000, 2654, -181, 315, 603,
	-1000, 17651, 20396, -1000, -1000, 1313, 1931, 843, -1000, 1035,
	1922, 572, -1000, 1243, -1000, 1177, 1921, -130, 1792, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 22470, 23484, -2, -12,
	-1000, -1000, -1000, 5751, 42287, -1000, 42287, -1000, 890, 19366,
	112, -1000, -1000, -1000, -1000, 469, 1394, 649, 1390, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 350, -1000,
	28916, 649, 1384, -1000, -1000, -1000, 27214, -1000, 35389, -1000,
	35389, -1000, 956, -1000, 37079, 117, 1919, -1000, -1000, 117,
	1916, -1000, 115, 1913, -1000, -1000, 1272, 1899, -1000, -12,
	1896, -1000, -1000, 15213, -32, -1000, -1000, -1000, 687, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 28575, 22808, 1341, 591, 42287, 2169, 43063, 22470,
	42287, 22808, -1000, -1000, 35389, -1000, 15213, -1000, 2164, 1534,
	-7, -1000, -1000, -1000, -1000, -1000, 1439, 1449, 782, 1132,
	9345, 9345, 1992, -1000, 163, 6101, -1000, -1000, -1000, -1000,
	28234, -1000, -1000, -1000, 1187, 35389, -1000, -1000, 1717, -1000,
	22808, 35389, -1000, 35389, -1000, 35389, -1000, 35389, -1000, 35389,
	-1000, -1000, -1000, -1000, -1000, 3447, -1000, 1707, -1000, -1000,
	35389, -1000, 1436, -1000, -1000, -1000, 27896, 27555, -1000, 1025,
	827, -1000, -1000, 119, -1000, 35389, 2069, 639, -1000, 1468,
	1421, 1681, 703, 1343, 1530, 13402, 1494, 15213, 111, -1000,
	-1000, 111, 111, 8264, -1000, -1000, -1000, 35389, -1000, 42897,
	43063, 6101, 811, 15213, 15213, 15213, 15213, 15213, 15213, 15213,
	15213, 15213, 15213, 15213, 15213, 15213, 15213, 15213, 15213, 15213,
	15213, 15213, 15213, 15213, 15213, 15213, 15213, 15213, 15213, 15213,
	15213, 15213, 15213, 15213, 15213, 1209, 15213, 783, 15213, 15213,
	15213, 15213, 1268, 1188, 390, 1311, -1000, 2238, 2238, 2238,
	42545, 42545, 376, 565, -1000, 15213, -1000, 51, 15213, 311,
	40559, -3, 6832, -1000, -1000, -1000, 13051, 662, 42287, 112,
	6453, -1000, 2259, 873, 1736, 1617, 467, 552, 550, 544,
	542, 15213, 15213, 12700, 12321, 11942, 15915, 11563, 15213, 7562,
	15213, 15213, 15213, 15213, 11184, 10805, -1000, 466, -1000, -1000,
	-1000, -1000, 2258, -1000, -1000, 2257, -1000, 801, 800, 2256,
	-1000, -7, -1000, 36741, -1000, 35389, -5, 2163, 35389, 15213,
	120, -1000, 41324, -1000, 120, -33, 42287, 1497, 1492, 19023,
	1351, 1232, 1232, 1232, -1000, 465, 558, 603, 5040, 10426,
	-1000, 26200, 1239, 198, 308, 17308, 1571, -1000, 35389, -19,
	1168, -1000, 24498, 2081, 2080, 2021, 27214, 2136, 51, 2053,
	1667, 780, 27214, 2052, 779, 2133, 51, 1663, 777, 35389,
	6101, 2041, 595, -1000, 35389, -1000, -1000, -1000, 1662, -34,
	-1000, -1000, 24160, 2152, 1893, -1000, 1127, -1000, 1891, 2150,
	35389, 1325, 1382, -1000, -1000, 822, 1885, 657, 464, 2149,
	464, 19710, -1000, 35389, -1000, 35389, -1000, -1000, 35389, -1000,
	35389, -1000, 35389, 35389, -1000, 35389, 35389, -39, 3742, 23822,
	776, -1000, 691, 24160, 222, -46, -1000, 901, -1000, -1000,
	-1000, -1000, 371, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 461,
	1070, 460, 460, 460, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 611, -1000, -1000, 667, 667, 667, -1000, -1000, -87,
	-1000, 1658, 628, -48, 715, -7, -1000, 1323, -1000, 1186,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2265, -1000, 2209, -1000, -1000, 2253, -9,
	-1000, -9, -1000, 6101, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 35389, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	592, -1000, -1000, -1000, -1000, -1000, -1000, 35389, 35389, 35389,
	-1000, 27214, 651, 1693, -1000, 2056, 1421, 1681, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 42287, -1000, 375, -1000,
	-1000, 42287, 1048, 1537, -1000, 1537, -10, -1000, 41195, 1481,
	35389, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 637, 1157, 1157, 844, 844, 844, 844, 2234,
	307, 792, 1447, 711, 711, 711, 711, 711, 711, 711,
	711, 346, 604, 604, 346, 346, 346, 346, 346, 711,
	711, 711, 42545, 42416, 1460, 15213, 15213, 775, 1150, 390,
	1460, 15213, 1460, 1460, 1460, 1460, -1000, 1361, -1000, -1000,
	-1000, -1000, 1655, 459, 15915, 15915, -1000, -1000, -1000, 7197,
	16615, -1000, -1000, -1000, -1000, 458, 15213, -1000, 40748, -222,
	306, -94, -1000, 15213, 555, -54, -1000, 908, -1000, 15213,
	-1000, -26, 15213, 15213, 15213, 303, -1000, 294, -1000, 774,
	-1000, 770, 758, 755, -1000, 453, 1214, 452, 451, 15213,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42158, 38574,
	291, -1000, 1650, -94, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 287, -1000, 286, -1000, 42029, -94, 284, 38188, -1000,
	15915, 15915, 15915, 7197, 449, 274, -1000, 41006, -1000, 41840,
	10047, 10047, 10047, 267, 41711, 15213, -94, 38415, 38151, 38099,
	-51, -58, -1000, -67, -1000, 2251, -68, 262, 632, 629,
	249, -1000, -1000, 448, -69, -84, 657, 9696, 18337, 6101,
	-1000, 657, -1000, 15213, 19023, 19023, 1332, 1490, 19023, -1000,
	-1000, -1000, -1000, 26200, 487, 603, 26200, -1000, 2249, 1472,
	248, -1000, -1000, -1000, 35389, 445, -1000, 603, 247, 1154,
	35389, 35389, 35389, -1000, -1000, 1380, 36403, 1371, 43063, 35389,
	-1000, 444, 442, 1464, 1463, 35389, 35389, 36065, 35727, 35389,
	1270, 51, -1000, 627, 441, 35389, 1019, 626, 35389, 51,
	-1000, 435, 35389, 1005, -1000, 624, 1593, 1348, -1000, 870,
	1646, 35389, 246, -89, -11, 43063, -1000, -1000, -1000, -1000,
	-1000, 35389, 485, 35389, 51, 35389, 22470, 22470, 51, 35389,
	1884, 1939, 586, 35389, 1530, 15213, 1275, -1000, 17994, 680,
	35389, 989, 78, -1000, -1000, -1000, 598, 35389, -1000, -1000,
	117, 117, -1000, 115, 1272, -12, -1000, -1000, -1000, 35389,
	22470, -92, -1000, 696, -1000, 43063, -1000, 563, 807, -1000,
	2243, 633, 22470, 35389, 9345, 9345, -1000, 1525, -1000, -1000,
	983, -1000, 1059, -1000, -1000, -1000, -1000, 9345, -1000, -20,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1290, 1078, -1000,
	-1000, -1000, 1048, -1000, 15213, 2230, -1000, -1000, -1000, 8264,
	-1000, -1000, -1000, 35389, -137, 15213, 1460, 1460, 15213, 15915,
	15915, -1000, 1460, -1000, -1000, -1000, -1000, -1000, 1642, 434,
	15213, 43063, 38131, 4233, -97, -1000, 15213, -13, -1000, 15213,
	-1000, 40430, -1000, -1000, 562, 1935, -1000, 15213, 41582, 245,
	8994, -1000, 41453, -44, -44, -1000, 2264, 1409, 1247, 1087,
	916, 2228, -1000, 20053, 659, 1282, 40241, 42897, 43063, -1000,
	15213, -1000, -1000, 1636, 15213, -1000, 42897, 43063, 15915, 15915,
	15915, 15915, 15915, 15915, 15915, 15915, 15915, 15915, 15915, 15915,
	15915, 15915, 15915, 15915, 15915, 15915, 15915, 1473, 15915, 2204,
	2204, 2204, -14, 15213, -1000, 1631, 1636, 15213, 15213, 43063,
	243, 242, 241, -1000, 15213, -94, 15213, 15213, 15213, -1000,
	-1000, -1000, 240, -1000, 2226, -1000, -1000, -1000, -1000, 222,
	-1000, -1000, 1610, -1000, -95, -1000, 1571, -1000, 1610, 42287,
	-1000, 1332, -1000, 433, 15213, 19023, -1000, 553, -1000, -100,
	-1000, 26200, -1000, 549, -219, -1000, 597, -1000, 603, 430,
	35389, 26200, -1000, -1000, -1000, 754, 751, 1870, -1000, 1369,
	-1000, 685, -1000, 990, 15213, 16965, 422, 421, 1153, -1000,
	1867, 1272, 1834, 1272, -1000, -19, 1164, -1000, 20746, 15213,
	-1000, 741, 20746, -1000, -1000, 15213, -1000, 740, 20746, 633,
	1625, 846, -1000, 862, -1000, 1578, -1000, 24160, 418, 35389,
	416, -1000, 406, -1000, 649, -1000, 405, 35389, 1452, 586,
	23146, -1000, 649, 989, -1000, 42287, -1000, 989, 7913, 2036,
	-105, -1000, -1000, -1000, 657, 19710, 19023, 15213, -110, -1000,
	-1000, -1000, -1000, -20, 2004, 2004, -1000, 2216, -1000, 543,
	235, -1000, 26876, -1000, -20, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35389, 1561, 6101, 35389, 35389, 1296, 40152, -1000,
	2023, 6101, 2194, 1460, 4212, 236, 15213, 43063, 42674, -115,
	15213, 15213, -1000, 233, 15213, 539, 42287, -1000, -1000, -1000,
	42287, 15213, 2236, 15213, 232, 215, 214, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 213, -1000, -1000, 37755, 15213,
	211, -1000, 210, 207, 42287, 1631, 42287, -1000, -1000, 1007,
	1007, 924, 924, 924, 924, 2204, 671, 329, 1183, 264,
	264, 264, 978, 748, 748, 264, 264, 264, 1624, 1469,
	404, 419, 15213, 206, -1000, -1000, 42287, 42287, 205, -1000,
	-1000, -1000, -94, 288, 39963, 39834, -1000, 204, 203, 1599,
	2118, -1000, 19023, 1599, -1000, 35389, 42287, -1000, -181, -1000,
	2214, -1000, -1000, 1472, -1000, 5400, 26200, 35389, -117, -1000,
	35389, 35389, 35389, 1812, -1000, 2596, -1000, 39645, -122, -1000,
	325, 2097, 15213, -1000, -1000, 403, 16965, 35389, -1000, 1510,
	1483, 724, 35389, -1000, 35389, -1000, 35389, 35389, 35389, -1000,
	398, 112, -123, 35389, -1000, -133, 35389, -1000, -1000, 22470,
	785, -1000, 1221, 1588, -1000, 16965, 397, 35389, 24160, 2145,
	-1000, 16965, 1322, 1454, 586, 23146, -1000, 822, -1000, -1000,
	-21, -1000, 370, 51, 989, -1000, -23, 42287, 593, 1976,
	-1000, 1974, 537, -1000, -1000, -31, 396, -1000, 589, 587,
	-1000, -49, -1000, 547, -1000, -1000, -1000, -1000, -1000, -1000,
	2023, 15213, 15213, 42674, -139, -1000, 1460, 1460, -1000, 39556,
	-1000, 42287, -1000, 41453, -1000, -1000, -1000, -1000, 1199, -1000,
	39367, -1000, -1000, -1000, -1000, 15915, 1623, 394, 43063, 39238,
	-1000, -1000, 15213, -1000, -1000, -1000, -1000, 653, 15213, 15213,
	1571, 653, -140, 603, -1000, -1000, -1000, 2212, -1000, -141,
	-1000, -1000, -1000, -1000, 35389, -1000, 35389, -1000, 6101, 35389,
	1628, 1360, -1000, -1000, 1462, 392, 15915, 35389, -1000, 1161,
	16965, 2023, 112, 6101, 2023, 39049, 6453, -142, -147, 1356,
	-1000, 1355, 15213, -1000, 43063, 1272, 1272, -1000, 739, 736,
	15213, 734, -1000, 719, -1000, -65, 20746, -1000, -1000, 2116,
	1089, -148, 16965, -149, 188, 51, -150, 35389, -1000, 586,
	23146, -1000, 1939, 1944, 35389, 2020, -1000, -1000, 390, 389,
	385, -1000, 26538, 26538, 22470, 22470, 1561, -1000, 35389, -1000,
	1460, 1460, -1000, -1000, 187, 1282, 2111, -1000, 4189, 15915,
	43063, -158, -1000, 38960, -1000, 35389, 42287, -94, -1000, -1000,
	26200, 420, -1000, -1000, 1704, -1000, -1000, 35389, 1366, -1000,
	-1000, 15213, 419, 384, 1578, 381, -1000, -1000, -1000, -1000,
	-1000, -1000, 2097, -26, -1000, 1044, -1000, -1000, 42287, 2096,
	-1000, -1000, 35389, 35389, -44, 378, 377, -1000, 1261, 35389,
	1161, -159, -1000, 1578, -1000, 1161, 374, 23146, -1000, 1452,
	826, -160, 35389, -1000, 22470, 22470, -1000, -161, -1000, -1000,
	-1000, -168, -1000, 1001, 15213, 4189, -169, -1000, -1000, -74,
	-1000, 2141, -1000, -1000, -1000, -1000, 1796, 38733, 1418, 35389,
	-1000, 35389, 2023, 184, 35389, 688, 6101, -1000, -1000, 183,
	15213, 15213, 359, 357, 355, 1578, 1161, -1000, 1578, 16965,
	-1000, 1454, 952, -1000, 657, -1000, -171, -174, -1000, -1000,
	180, 15564, 15564, -94, -1000, 35389, 354, 1739, -1000, 1298,
	1158, 179, -179, -1000, -1000, 350, -1000, 15213, -1000, 2236,
	-182, -185, 35389, 35389, 35389, -1000, 1578, -1000, -187, -1000,
	19710, -1000, 633, 633, -1000, -1000, -1000, 16265, 1307, 974,
	40877, -1000, -1000, -1000, 35389, -1000, 1319, 1306, 933, -1000,
	-1000, -1000, -1000, -1000, 1418, 42287, -1000, -1000, -190, -192,
	-193, -1000, 1161, -177, -1000, -1000, 2182, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1953, -1000, 701, 1280, 1280, 1298,
	349, 348, 1206, 1578, -1000, 14862, -1000, 2192, -1000, -1000,
	1484, -1000, -1000, 1134, 1108, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 174, 6101, 173, 6101, -1000, 679, -1000,
	674, 344, 1446, -45, 14511, 812, 331, -99, -1000, -195,
	-1000, 42287, -1000, 333, -1000, 14511, 1134, -1000, 14511, 14511,
	-200, -1000, -1000, -201, -1000, -61, 1108, -138, -1000, -1000,
	1108, -1000,
}
var sqlPgo = [...]int{

	0, 2696, 2695, 1765, 2117, 2694, 2692, 2691, 2686, 2682,
	2681, 2680, 2679, 2677, 2676, 2673, 2671, 2669, 2668, 2667,
	2666, 2664, 2663, 2662, 2112, 2660, 2110, 2659, 2658, 2657,
	2656, 2655, 32, 2650, 2649, 2648, 2101, 2647, 2645, 2639,
	2636, 2095, 2635, 2087, 2634, 2085, 2627, 2626, 2625, 2624,
	2623, 2082, 2620, 68, 113, 1998, 2619, 2615, 1971, 1964,
	1962, 2613, 1960, 2612, 2608, 1958, 1955, 2603, 111, 2602,
	2601, 2599, 1953, 1917, 2596, 2595, 2593, 155, 2592, 1851,
	2587, 2586, 2583, 2581, 2580, 2578, 2577, 2575, 2572, 2570,
	2569, 2567, 2565, 2563, 2562, 2556, 2555, 2553, 2552, 161,
	2544, 2543, 1785, 1762, 2537, 2535, 38, 31, 15, 55,
	96, 148, 2822, 143, 2532, 2526, 2522, 2521, 2517, 2515,
	34, 100, 99, 2512, 124, 2511, 2510, 43, 44, 25,
	21, 63, 87, 2509, 2508, 1987, 30, 2501, 2499, 133,
	2493, 57, 26, 2142, 156, 153, 110, 122, 2491, 2490,
	2489, 48, 120, 6, 7, 4, 5, 1, 2488, 3,
	2, 2487, 2486, 18, 78, 104, 2485, 40, 86, 2483,
	2482, 131, 2481, 59, 90, 1728, 98, 118, 1934, 93,
	2476, 58, 19, 62, 2467, 2466, 159, 41, 83, 146,
	109, 2463, 75, 160, 130, 71, 135, 138, 2462, 2460,
	2459, 125, 2458, 121, 94, 2456, 2454, 64, 2453, 97,
	140, 2449, 141, 107, 2448, 2444, 119, 2442, 127, 2427,
	2425, 157, 151, 115, 16, 85, 73, 10, 1676, 1628,
	134, 91, 54, 53, 2419, 796, 1244, 925, 50, 101,
	89, 76, 37, 52, 84, 147, 36, 2416, 2413, 139,
	2408, 2403, 2402, 2390, 2382, 103, 2381, 2376, 2375, 79,
	35, 61, 114, 45, 70, 129, 108, 154, 102, 2371,
	77, 126, 2361, 363, 2360, 2359, 1770, 117, 2357, 2352,
	2350, 1645, 1592, 1478, 1084, 2347, 2344, 1332, 291, 2343,
	2342, 88, 2334, 116, 106, 95, 150, 145, 39, 2333,
	123, 33, 2332, 49, 28, 0, 394, 23, 2331, 128,
	74, 2330, 2329, 2327, 2326, 27, 13, 9, 12, 14,
	11, 29, 24, 2324, 2323, 132, 81, 67, 2321, 158,
	2320, 2318, 2317, 46, 2311, 22, 2306, 20, 2304, 2302,
	17, 8, 2301, 2298, 149, 2296, 92, 2294, 2106, 2293,
	152, 2288, 2285, 1803, 2283, 56, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 122, 122, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 119, 119, 124, 124, 124, 126, 126,
	123, 123, 118, 118, 24, 24, 66, 66, 109, 59,
	59, 59, 303, 303, 304, 304, 105, 105, 106, 106,
	106, 106, 107, 107, 108, 108, 108, 34, 34, 34,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 43, 43, 44, 44, 44, 44,
	44, 44, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 50, 50, 50, 48, 48, 48, 47,
	47, 47, 46, 46, 46, 49, 49, 49, 177, 177,
	176, 176, 180, 180, 51, 51, 51, 51, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 54, 54, 54, 54,
	54, 54, 54, 272, 272, 271, 52, 52, 247, 247,
	55, 55, 202, 202, 56, 56, 56, 56, 56, 57,
	57, 67, 67, 344, 344, 344, 348, 348, 349, 349,
	350, 350, 350, 350, 350, 350, 350, 346, 346, 62,
	62, 62, 62, 63, 63, 63, 64, 64, 104, 104,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 29,
	30, 30, 31, 31, 32, 32, 73, 73, 73, 75,
	72, 72, 72, 74, 74, 74, 74, 76, 76, 77,
	77, 77, 77, 77, 78, 78, 297, 295, 295, 296,
	296, 149, 149, 149, 149, 149, 150, 150, 150, 302,
	302, 302, 302, 302, 302, 301, 301, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 91, 91, 91, 99, 99, 99,
	99, 99, 99, 99, 80, 80, 85, 85, 85, 85,
	85, 81, 81, 86, 86, 87, 87, 88, 88, 88,
	88, 88, 88, 82, 82, 82, 82, 90, 90, 90,
	90, 89, 89, 95, 95, 95, 95, 95, 95, 92,
	92, 92, 92, 93, 93, 93, 96, 96, 96, 96,
	83, 83, 84, 84, 97, 97, 98, 98, 98, 98,
	98, 94, 94, 94, 345, 345, 347, 347, 60, 60,
	39, 39, 40, 40, 151, 151, 152, 152, 226, 226,
	226, 226, 153, 153, 125, 125, 125, 154, 154, 155,
	155, 156, 156, 156, 158, 158, 159, 159, 160, 160,
	157, 157, 157, 225, 313, 313, 314, 314, 314, 314,
	314, 314, 315, 315, 315, 315, 315, 315, 315, 311,
	311, 312, 309, 309, 310, 310, 310, 310, 351, 351,
	224, 224, 163, 163, 316, 316, 316, 316, 317, 317,
	317, 317, 317, 320, 319, 318, 318, 318, 318, 318,
	258, 258, 258, 101, 101, 41, 41, 41, 131, 131,
	42, 42, 38, 38, 38, 206, 206, 167, 167, 263,
	263, 263, 142, 142, 120, 120, 120, 17, 13, 13,
	13, 13, 13, 13, 23, 23, 21, 21, 207, 207,
	208, 208, 61, 61, 65, 65, 70, 70, 100, 100,
	100, 100, 100, 100, 25, 25, 25, 25, 33, 33,
	33, 33, 69, 69, 353, 353, 138, 138, 138, 138,
	139, 139, 221, 221, 222, 222, 354, 354, 223, 223,
	223, 133, 132, 134, 134, 37, 37, 37, 127, 127,
	128, 128, 129, 129, 130, 130, 355, 355, 58, 58,
	58, 103, 103, 145, 145, 218, 218, 218, 220, 220,
	219, 219, 219, 192, 192, 192, 102, 102, 172, 172,
	182, 182, 183, 183, 269, 184, 68, 68, 112, 112,
	110, 110, 110, 110, 110, 110, 110, 110, 111, 111,
	111, 113, 113, 113, 113, 113, 113, 113, 116, 116,
	116, 117, 117, 117, 115, 115, 326, 326, 326, 329,
	329, 325, 327, 327, 328, 328, 352, 352, 193, 193,
	193, 162, 161, 161, 165, 165, 164, 166, 166, 262,
	262, 262, 190, 190, 189, 189, 189, 189, 211, 211,
	209, 209, 210, 210, 214, 214, 215, 215, 215, 216,
	216, 217, 217, 188, 188, 243, 243, 213, 213, 212,
	114, 114, 114, 171, 171, 171, 173, 173, 233, 233,
	233, 234, 234, 232, 232, 232, 232, 264, 264, 264,
	264, 264, 264, 264, 264, 342, 342, 342, 343, 343,
	261, 261, 265, 265, 265, 265, 265, 265, 259, 259,
	259, 259, 260, 260, 270, 270, 196, 196, 196, 196,
	194, 194, 195, 195, 266, 266, 266, 266, 191, 191,
	267, 267, 267, 227, 227, 273, 273, 273, 291, 291,
	170, 170, 170, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 275, 275, 275, 275, 277, 277,
	277, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 290,
	290, 290, 290, 290, 278, 278, 285, 285, 286, 286,
	287, 288, 279, 279, 280, 280, 281, 282, 289, 289,
	289, 289, 293, 293, 283, 283, 283, 283, 283, 284,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 204, 204, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 237,
	237, 237, 237, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 321, 321, 321, 321, 321, 321,
	321, 321, 323, 323, 324, 324, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 330, 330, 331, 331,
	333, 333, 334, 334, 335, 336, 336, 336, 337, 338,
	338, 332, 332, 339, 339, 339, 340, 340, 341, 341,
	341, 341, 341, 249, 249, 250, 251, 257, 257, 257,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 140, 140, 140, 140,
	140, 179, 179, 178, 178, 246, 246, 244, 244, 248,
	248, 197, 197, 292, 292, 292, 292, 292, 292, 292,
	198, 198, 198, 205, 199, 199, 200, 200, 200, 200,
	200, 240, 241, 201, 201, 201, 242, 242, 252, 256,
	256, 255, 254, 254, 253, 253, 230, 230, 231, 231,
	229, 228, 187, 187, 186, 186, 185, 185, 356, 356,
	181, 181, 268, 268, 268, 268, 174, 174, 147, 147,
	175, 175, 143, 143, 146, 146, 144, 144, 144, 144,
	168, 168, 169, 169, 141, 141, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 294, 294, 294,
	245, 135, 135, 135, 136, 136, 137, 137, 299, 299,
	299, 300, 300, 300, 300, 298, 298, 298, 298, 298,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 2, 7, 3, 2, 2, 2, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 1, 3,
	1, 2, 2, 3, 2, 2, 5, 3, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 1, 5, 2, 3, 0,
	3, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	2, 6, 2, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 1,
	4, 7, 1, 3, 2, 4, 6, 6, 3, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 3, 1,
	3, 3, 1, 1, 2, 1, 1, 1, 1, 1,
	3, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 1, 1, 1,
	1, 1, 2, 2, 3, 3, 4, 4, 3, 4,
	4, 4, 3, 2, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 2, 3, 3,
	3, 2, 3, 4, 3, 5, 3, 4, 5, 2,
	3, 3, 3, 4, 2, 3, 4, 3, 3, 3,
	4, 4, 4, 4, 2, 3, 7, 7, 7, 4,
	5, 5, 5, 5, 2, 0, 2, 0, 3, 2,
	8, 10, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 1, 0, 9,
	9, 6, 7, 5, 3, 5, 1, 3, 1, 1,
	10, 11, 9, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 2, 4, 7, 3, 3, 0,
	6, 3, 11, 14, 4, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	8, 10, 8, 10, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 2, 0, 8, 3, 2, 0,
	1, 3, 1, 1, 3, 5, 1, 1, 3, 3,
	1, 2, 4, 4, 2, 3, 5, 5, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	2, 4, 4, 4, 2, 2, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	4, 5, 1, 0, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 1, 0, 2,
	4, 2, 5, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 6,
	3, 3, 1, 5, 5, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 4, 1,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 3, 1, 1,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 3, 4, 1, 1, 1, 5, 1, 3, 3,
	1, 3, 3, 1, 3, 3, 1, 1, 3, 3,
	1, 1, 6, 6, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 5, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 379, -4, -24, -26, -29, -34,
	-35, -56, -43, -44, -45, -55, -51, -57, -58, -59,
	-60, -52, -66, -65, -67, -70, -68, -61, -62, -71,
	-79, -100, -101, -102, -103, -5, -6, -7, -8, -9,
	24, 35, -27, -28, 48, -30, 72, -41, -36, 74,
	95, -328, 99, -46, -47, -48, -50, -49, 103, 110,
	113, 135, 144, 230, 236, 257, 259, 261, 268, -110,
	-112, 255, -63, -64, -72, -73, -74, -75, -104, 280,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, -89,
	-90, -91, -92, -93, -94, -95, -96, -97, -98, 283,
	-25, -33, -69, 323, -11, -12, -15, -14, -16, -13,
	-20, -22, -19, -21, -23, -17, -18, -10, 112, -37,
	-38, -39, -40, -42, -326, -113, -111, 376, 256, 332,
	36, 293, 62, 106, 263, 348, 355, -116, -114, -115,
	-117, 273, 340, 303, 380, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 2, 303,
	343, 88, 152, 241, -344, 2, -175, 303, 88, -144,
	-135, 369, 4, -305, -307, 20, 21, 24, 34, 35,
	36, 41, 45, 48, 49, 56, 61, 62, 63, 68,
	65, 66, 67, 70, 72, 73, 76, 77, 78, 86,
	87, 89, 91, 95, 97, 99, 102, 103, 105, 110,
	112, 111, 113, 123, 124, 129, 131, 136, 142, 143,
	144, 145, 153, 156, 158, 151, 168, 169, 170, 174,
	175, 176, 179, 178, 183, 184, 187, 188, 191, 193,
	195, 196, 199, 197, 201, 202, 204, 203, 209, 211,
	212, 214, 217, 220, 223, 226, 227, 228, 229, 230,
	232, 234, 236, 238, 239, 240, 241, 242, 244, 245,
	247, 248, 249, 250, 251, 255, 253, 254, 256, 257,
	258, 259, 261, 263, 264, 266, 281, 282, 294, 268,
	269, 270, 271, 272, 276, 274, 277, 278, 280, 283,
	285, 288, 292, 293, 295, 298, 299, 296, 291, 302,
	304, 305, 306, 307, 308, 309, 310, 311, 318, 319,
	323, 324, 325, 326, 329, 330, 331, 332, 334, 337,
	338, 339, 344, 349, 350, 351, 352, 353, 29, 37,
	38, 39, 40, 42, 43, 46, 47, 52, 53, 54,
	57, 90, 92, 93, 109, 114, 115, 125, 126, 127,
	137, 139, 146, 147, 150, 157, 159, 160, 161, 162,
	163, 165, 172, 173, 181, 198, 208, 210, 221, 225,
	233, 235, 243, 265, 275, 286, 287, 297, 300, 313,
	314, 315, 320, 321, 336, 340, 341, 379, 379, 2,
	169, 240, -143, -135, 88, 379, 2, 303, 333, 343,
	-206, 88, 328, -135, 236, 22, 2, 97, 156, 331,
	330, 22, 232, 274, 305, 307, 2, 379, 379, 379,
	379, 379, 2, 343, 303, 152, 88, 333, -135, 2,
	-54, 2, 376, -53, -4, -36, -45, -55, -51, -24,
	-26, -41, -43, -59, -58, -60, -62, -66, -65, -68,
	-72, -73, -79, -102, -103, 74, 280, 112, -348, 2,
	22, -349, -350, 74, 103, 135, 273, 156, 97, 330,
	303, 2, 169, 2, -135, 2, -344, 2, 169, 2,
	-348, 2, -135, 2, -139, 2, 268, -135, 379, 379,
	379, 379, 379, 188, 56, 265, 277, -77, 319, -76,
	313, -297, -78, 2, -176, 199, -135, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 2, -99, 277, 35, 56, 22,
	61, 89, 136, 152, 153, 175, 69, 70, 239, 188,
	170, 318, 176, 278, 304, 319, 74, 334, 308, 111,
	4, 88, 199, 279, 313, 379, 379, 379, -352, 2,
	303, 270, 283, 379, 379, 379, 379, 379, -111, -113,
	-112, -164, -165, 327, 164, 108, 219, -110, -112, 2,
	-326, -99, 277, 2, 56, 22, -295, 2, -235, 215,
	-237, 367, 368, 362, 205, 354, -249, 94, -239, -252,
	109, 265, 376, -143, -238, 382, 9, -323, -112, 30,
	-250, -251, 50, -135, 7, 8, 5, 6, -141, -275,
	-245, -284, 322, 116, 207, -321, -322, 4, -305, -299,
	-276, -286, -280, -283, 165, 59, 80, 81, 84, 82,
	85, 279, 333, 51, 29, 114, 115, 225, 233, 300,
	320, 321, 146, 208, 147, 57, 137, 181, 102, 38,
	40, 42, 43, 52, 53, 90, 92, 93, 125, 126,
	127, 157, 159, 160, 161, 162, 163, 210, 243, 286,
	297, 314, 315, 341, -306, -287, -288, -281, -282, 75,
	117, 134, 155, 148, 167, 171, 182, 185, 194, 200,
	222, 224, 262, 284, -289, -353, 2, 319, 319, 2,
	-353, 2, -353, 2, -138, 2, 319, 316, -329, 244,
	-325, -135, -329, 379, 379, 381, 379, -161, -162, 2,
	22, 100, 376, 2, -264, 2, 374, -266, -143, -112,
	-265, 376, 216, -3, 2, -266, 146, -143, 2, -266,
	146, -143, 2, -135, 2, -146, 146, -143, -298, 4,
	-305, -307, -306, -308, 59, 22, 25, 26, 27, 28,
	30, 31, 32, 33, 44, 50, 51, 55, 58, 60,
	69, 74, 79, 80, 82, 81, 83, 84, 85, 94,
	96, 98, 100, 101, 104, 106, 108, 116, 118, 130,
	132, 133, 135, 138, 140, 149, 152, 154, 164, 166,
	177, 180, 186, 189, 190, 205, 206, 207, 213, 215,
	216, 218, 219, 231, 237, 246, 260, 273, 279, 289,
	301, 303, 312, 316, 317, 322, 327, 328, 333, 335,
	342, 343, 345, 346, 347, 348, 316, 381, -175, -168,
	-135, -229, -228, 378, -235, 2, -235, 2, 133, 376,
	-186, -187, -228, -229, 2, -176, 146, -303, 146, 2,
	-301, 9, -300, 5, 4, -305, -307, -306, -176, 2,
	152, -135, 146, 2, -135, 22, 133, 2, 166, 2,
	166, 2, -267, 2, -266, -177, 146, 2, -176, -177,
	146, 2, -147, 146, 2, -146, -135, 146, 2, -168,
	146, 2, -202, 376, -272, 2, -271, -300, 340, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 277, 215, 381, -176, -235, -247, 376, 133,
	-235, 215, -135, 2, 281, 2, 376, -77, 54, 319,
	-222, 2, -223, -132, -133, -134, 168, 238, 242, 353,
	316, 359, 133, -295, -180, 378, -99, 2, -303, 2,
	281, 2, 239, 278, 56, 133, 2, 2, -345, 2,
	215, 133, 2, 133, 2, 133, 2, 133, 2, 133,
	2, 2, 239, 278, 2, 130, 2, 318, 2, 2,
	133, 2, 168, 238, 294, 2, 303, 343, 2, 133,
	133, 353, 2, -191, -266, 303, 353, 22, -164, -165,
	-212, -189, 130, -209, -210, 186, 118, 213, -193, 22,
	100, -193, -193, 45, 377, 377, -99, 281, 2, 10,
	11, 58, 34, 367, 368, 369, 370, 128, 371, 372,
	365, 366, 364, 357, 358, 361, 290, 23, 71, 360,
	359, 64, 192, 267, 119, 120, 121, 122, 252, 13,
	14, 15, 27, 218, 185, 354, 148, 284, 362, 16,
	17, 18, 167, 37, 149, -140, -148, -235, -235, -235,
	-235, -235, 224, -185, -230, 374, -112, 376, 376, -112,
	-235, -178, 376, 7, -112, -244, 374, -253, -235, -186,
	376, 5, 376, 5, -330, 349, 130, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 235, -293, 344, -293,
	-293, -277, 376, -277, -278, 376, -277, 350, 355, 376,
	-221, -222, -221, 316, -139, 381, -329, -169, 376, 376,
	-181, -268, -235, 369, -181, -178, -235, 75, -196, 171,
	200, 134, 182, 262, 155, 7, -54, -232, 382, 376,
	369, -261, 355, -112, -265, 376, -264, -143, 376, -122,
	253, -121, 21, 24, 103, 338, 109, 291, 309, 112,
	269, 253, 109, 112, 253, 291, 309, 269, 253, 109,
	382, 112, -303, -144, 381, -298, 369, 295, 377, -174,
	-143, -187, 376, -163, 205, -131, -327, 348, 205, -163,
	376, -136, 146, 2, -135, -327, 205, -267, -145, -143,
	-145, 280, -135, 31, -124, 381, 49, 258, 109, -124,
	109, -124, 381, 109, -124, 109, 109, -178, 377, 381,
	-344, -350, 74, 376, 31, -246, -273, -274, -276, -285,
	-279, -283, -284, 41, 47, 46, 173, 172, 310, 198,
	275, 287, 336, 150, 39, 214, 158, 4, 157, 159,
	160, 161, 162, 163, 286, 38, 243, 126, 127, 125,
	102, 93, 92, 210, 43, 42, -287, -288, -281, -282,
	90, 314, 315, 165, 40, 53, 52, 341, 297, -304,
	-303, -344, -297, -178, 31, -222, 2, -354, 381, 184,
	-150, 191, 204, 142, 216, 351, -302, 5, 4, -245,
	-258, 94, 188, -284, 8, 368, -294, 7, 367, -296,
	-295, -296, 78, 378, -298, -176, 22, 282, 2, -297,
	-347, 130, -344, -297, -297, -297, -297, -297, 277, -54,
	130, -135, 184, -297, 2, -297, 2, 303, 152, 303,
	-124, 381, -143, 65, 66, 353, -212, -189, -190, -189,
	-213, -212, 330, -210, -209, -214, -235, 22, -217, 124,
	201, -235, -237, -111, -111, -111, -166, -262, -235, 237,
	152, -297, -291, -273, -290, 248, 249, 247, 251, 250,
	-273, -298, 313, -235, -235, -235, -235, -235, -235, -235,
	-235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
	-235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
	-235, -235, -235, -235, -235, 185, 148, 284, 37, 149,
	-235, 316, -235, -235, -235, -235, 197, 205, 207, 322,
	116, 329, 100, 211, -356, 301, 33, -242, -112, 376,
	-257, 28, 289, 22, -249, 265, 376, -230, -235, -231,
	-179, -178, 377, 381, -179, -248, -244, -256, -255, 345,
	377, -178, 342, 22, 100, 369, 2, 7, -203, 352,
	196, 91, 143, 195, -204, 272, -331, 123, 138, 376,
	377, 2, 377, 2, 377, 2, 377, 2, -235, -235,
	-197, 2, -292, -178, 4, 352, 196, 91, 143, 195,
	272, -197, 2, -198, 2, -235, -178, -199, -236, -237,
	367, 368, 362, 376, 265, -200, 2, -235, -179, -235,
	44, 180, 317, -201, -235, 133, -178, -235, -235, -235,
	-178, -178, 2, -178, 2, 376, 7, 7, 313, 313,
	7, -139, -325, 31, -168, -178, -171, 381, 133, 31,
	4, -171, 377, 381, 171, 171, -264, -196, 171, -194,
	222, -194, -194, -342, 376, 375, -261, -298, 374, 383,
	-179, 2, -260, -259, 31, -135, 220, 377, -143, 381,
	316, -207, 69, 60, -225, 146, 60, -309, -135, 69,
	-310, 55, 328, 237, 132, -207, 69, -207, 69, 69,
	-266, 34, -68, 67, 133, 316, -266, 67, 316, 34,
	-68, 133, 316, -146, -298, 67, -270, 356, -135, 133,
	377, 381, -151, -168, -152, -135, -226, -225, -311, -312,
	-309, 152, 328, 117, 31, 109, 229, 109, 31, 215,
	205, -127, 306, 109, -227, 346, -218, -68, 376, 94,
	31, -218, -182, -183, -269, -184, -143, 376, -135, -176,
	-177, -177, -146, -147, -135, -168, 377, -54, -271, 316,
	335, -152, -53, 74, 377, 381, -170, 30, 374, -203,
	376, -270, 381, 133, 359, 316, 377, 319, -223, -149,
	242, 288, 254, 276, 8, 7, 7, 381, -298, -346,
	-135, 277, -54, -143, -146, -143, -266, 348, 130, 66,
	-190, -213, -215, -294, 376, 368, -216, 265, 266, 381,
	-120, 32, 98, 174, -143, 353, -235, -235, 316, -356,
	301, -242, -235, 197, 207, 322, 116, 329, 100, 211,
	133, 376, -236, -236, -178, -239, 376, -178, 375, 385,
	377, -235, 375, 375, 381, -254, -255, 104, -235, -165,
	381, -164, -235, -178, -178, 377, 377, 316, 316, 316,
	316, 376, -336, 223, 376, 376, -235, 31, 381, 377,
	133, 377, 377, -205, 231, 377, 10, 11, 367, 368,
	369, 370, 128, 371, 372, 365, 366, 364, 357, 358,
	359, 64, 192, 267, 13, 14, 15, 167, 149, -236,
	-236, -236, -178, 376, 377, -240, -241, 133, 130, 31,
	-201, -201, -201, 377, 133, -178, 381, 381, 381, 377,
	377, 377, 7, 377, 381, 377, 353, 353, 377, 376,
	377, 377, -227, -268, -173, 2, -264, -298, -227, -235,
	-264, -264, -195, 335, 215, 171, -264, -259, 377, -343,
	7, -261, -260, 7, -234, -233, 131, 203, 377, -135,
	376, -261, 377, -121, -143, -135, -135, 205, -225, 146,
	-126, 205, -273, -135, 376, 376, 174, 174, -135, -135,
	146, -135, 146, -135, -135, -122, 253, -68, 353, 376,
	-143, 253, 353, -135, -68, 376, -135, 253, 353, -105,
	145, 211, 295, 133, -143, 377, 377, 381, -136, 152,
	-136, -68, -176, -303, -303, -68, -143, 109, -128, 105,
	-355, 359, -135, -211, -209, -235, -192, -220, 260, 215,
	-174, 340, -135, -192, -172, 381, 133, 359, -174, -124,
	-124, -124, -124, -346, -303, 377, -273, 374, 375, 7,
	7, -108, 348, -303, -346, -295, -295, -132, 326, 63,
	242, -295, 381, 217, 241, 88, 303, -216, -235, -262,
	-143, 382, -235, -235, -236, -236, 133, 376, -235, -246,
	27, 27, 377, -179, 381, -231, -235, 377, -244, 106,
	-235, 312, 377, 342, -165, -165, -165, 5, 196, 143,
	195, -204, 195, -204, -204, 7, -337, -135, 376, 346,
	-164, 377, -291, -273, -235, -240, -235, -291, -273, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, 100, 205,
	211, -236, 381, -179, -241, -240, -235, -235, -273, 377,
	377, 377, -178, -235, -235, -235, 377, 7, -53, -188,
	138, -270, 381, -188, -195, 376, -235, -264, 375, 377,
	381, -260, 375, 381, 384, 359, -261, 376, -168, -259,
	316, 316, 109, 205, 337, -313, -310, -235, -167, -263,
	-135, -324, 376, -321, -322, -141, 376, 376, -119, 103,
	280, -208, 109, -124, 109, -124, 316, -207, 69, -238,
	-141, -135, -178, 316, -238, -178, 316, -238, -108, 133,
	302, 295, -153, 151, -226, 376, -136, 376, 376, -163,
	-131, 376, -135, -129, 179, -355, -301, -327, -192, -192,
	-181, 206, 68, 377, -227, -183, -173, -235, 377, -109,
	76, -109, 7, 375, 377, -107, 217, -106, -135, 5,
	-135, -31, -32, 152, -298, -135, -143, 216, 377, -120,
	-298, 27, 27, -235, -246, 377, -235, -235, 377, -235,
	375, -235, 5, -235, 377, 377, 377, 377, -338, -135,
	-235, 377, 377, 377, -241, 133, 100, 211, 376, -235,
	377, 377, 381, 377, 377, 377, 377, -243, 140, 45,
	-264, -243, -168, -232, 7, -233, -298, 374, -260, -168,
	377, -135, -135, -225, 109, -314, 69, -315, 58, 117,
	74, 205, 207, 328, 237, 55, 94, 246, 377, 377,
	381, -142, -186, 58, -142, -235, 376, -167, -168, 205,
	94, 205, 94, 87, 324, -135, -135, -143, -135, -135,
	376, 377, -143, 377, -135, -304, 313, -154, -155, 228,
	149, -167, 376, -168, -151, 31, -167, 215, -130, 178,
	-355, -301, -127, -219, 376, 215, -68, -192, 359, 87,
	87, 375, 381, 376, 359, 359, 381, 22, 376, -120,
	-235, -235, 377, 377, -165, -332, 228, 377, -236, 133,
	376, -246, 377, -235, -333, 347, -235, -178, -333, 377,
	-261, 7, 377, -225, -135, -298, -135, 117, 146, 207,
	174, 376, -236, -143, -224, -351, 73, 299, -263, -120,
	-298, -120, 377, -178, 377, 377, 207, 207, -235, -273,
	-124, -124, 316, 316, -178, 316, 316, -238, 45, 226,
	377, -167, 377, 377, -68, 377, -143, -355, -301, -128,
	101, -168, 69, -242, 376, 376, -106, -107, -303, -303,
	-32, -168, 377, -165, 45, -236, -246, 377, 377, -334,
	-335, -135, -260, 375, -315, -136, 205, -235, -137, 376,
	-153, 376, -142, -165, 246, -123, 58, -135, -135, -165,
	376, 376, 187, 241, -143, -224, 377, -153, -224, 376,
	-301, -129, 330, 206, 377, -135, -304, -304, 377, 377,
	-339, 241, 266, -178, 377, 381, 31, 109, 377, -316,
	193, -135, -168, -120, 377, -143, -118, 335, -298, 377,
	-178, -178, 376, 376, 376, -153, -224, -153, -167, -130,
	280, -227, 377, 377, 377, -340, -341, 37, 325, 78,
	-235, -340, -335, -337, 117, -317, -320, -319, 215, 134,
	227, 285, 377, 377, -163, -235, 377, 377, -168, -168,
	-168, -153, 377, -182, -108, -108, -341, 234, 129, 265,
	234, 129, -135, -319, 215, -320, 215, 330, 97, -316,
	377, 377, 377, -224, -227, 27, -318, 202, 258, 49,
	280, -318, -317, 376, 376, -125, 49, 258, -153, -341,
	20, 207, 94, -156, 228, -157, 228, 377, -298, 377,
	-298, 340, 340, -158, 376, 183, 381, -155, -154, -159,
	-160, -235, 194, 311, -156, 376, 381, 377, 381, 376,
	-159, -156, -160, -159, 377, 377, 381, -155, -154, -157,
	381, -157,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 309, 0, 159, 161, -2,
	0, 0, 0, 182, 184, 186, 188, 190, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 676,
	-2, 0, 289, 291, 300, 302, 304, 306, 307, 0,
	357, 359, 361, 363, 365, 367, 369, 371, 373, 375,
	377, 379, 381, 383, 385, 386, 388, 390, 392, 0,
	598, 600, 602, -2, 65, 66, 67, 68, 69, 70,
	78, 79, 80, 81, 72, 74, 75, 77, 0, 163,
	165, 167, 169, 172, 714, -2, 725, 0, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 691, 693, 695,
	697, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	43, 49, 51, 53, 56, 58, 60, 62, 64, 0,
	0, 0, 0, 0, 0, 125, 273, 0, 1296, 1220,
	1226, 1227, 1251, 1252, 1253, 1270, 1271, 1272, 1273, 1274,
	1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
	1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
	1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
	1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
	1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
	1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
	1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
	1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
	1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425,
	1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
	1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 1491, 1492, 151, 153, 154,
	0, 0, 0, 1222, 1296, 160, 162, 0, 0, 0,
	0, 0, 565, 264, 1358, 266, 268, 0, 0, 0,
	0, 176, 177, 178, 179, 180, 181, 183, 185, 187,
	189, 191, 192, 0, 0, 0, 0, 0, 263, 261,
	214, 215, 0, 246, 247, 248, 249, 250, 252, 218,
	220, 221, 223, 225, 227, 229, 231, 232, 234, 236,
	237, 239, 241, 242, 244, 566, 0, 0, 0, 270,
	276, 277, 278, 280, 281, 282, 283, 284, 285, 286,
	0, 131, 0, 469, 259, 257, 0, 127, 0, 595,
	0, 272, 596, 597, 592, 593, 1385, 621, 290, 292,
	301, 303, 305, -2, -2, 1479, -2, 321, -2, 329,
	1485, 0, 332, 333, 336, -2, 210, 358, 360, 362,
	364, 366, 368, 370, 372, 374, 376, 378, 380, 382,
	384, 387, 389, 391, 393, 394, 0, 0, 0, 398,
	0, -2, -2, 0, 0, 0, 0, 0, -2, 0,
	-2, 0, 0, -2, -2, 0, 0, -2, 0, 0,
	397, 399, 400, 401, 0, 599, 601, 603, 0, 554,
	716, 0, 0, 164, 166, 168, 170, 173, -2, 689,
	690, -2, 0, 720, 720, 720, 0, 0, 690, 688,
	0, 293, 0, 295, 0, 398, 298, 299, 337, 338,
	926, 0, 0, 0, 0, 0, 0, 999, 1029, 1031,
	1450, 1479, 0, 1033, 1034, 0, 1036, 1038, 1039, 0,
	1042, 1043, 1195, 1222, 1236, 1237, 1238, 1239, 0, 0,
	1242, 0, 1244, 1245, 1246, 1097, 1053, -2, -2, 1234,
	854, 855, 856, 857, -2, 1493, 1057, 1060, 1063, 1066,
	1067, 1070, 1071, 0, 1434, 1451, 1452, 1475, 1476, 1484,
	1488, 1489, 1458, 1472, 1459, 1446, 1456, 1470, 1302, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1260, 888, 889, 894, 895, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 897, 623, 605, 614, 623, 607,
	608, 609, 610, 611, 612, 613, 616, 0, 706, 1364,
	709, 1233, 707, 692, 694, 0, 696, 0, 0, 700,
	722, 721, 0, 761, 704, 705, 715, 776, 814, 791,
	782, 0, 0, 2, 71, 0, 1458, 814, 73, 0,
	1458, 814, 76, 0, 82, 0, 1458, 1225, 0, 1265,
	1266, 1267, 1268, 1269, 1493, 1509, 1510, 1511, 1512, 1513,
	1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523,
	1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
	1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
	1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
	1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
	1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
	1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 0, 0, 274, 275,
	1230, 1228, 1229, 0, 155, 156, 157, 158, 0, 0,
	1223, 1204, 1202, 1203, 171, 533, 1458, -2, 1458, 557,
	132, 133, 355, 356, 1261, 1262, 1263, 1264, 533, 561,
	-2, 713, 1458, 637, 265, 267, 0, 175, 0, 650,
	0, 652, 0, 667, 820, 117, 1458, 195, 208, 117,
	1458, 198, 117, 1458, 201, 1218, 117, 1458, 204, 205,
	1458, 207, 260, 0, 0, -2, 253, 255, -2, 251,
	219, 222, 224, 226, 228, 230, 233, 235, 238, 240,
	243, 245, -2, 0, 0, 0, 468, 0, 0, 0,
	594, 0, 620, 308, 0, 318, 0, 320, 1445, -2,
	-2, 324, 624, 628, 629, 630, 0, 0, 0, 0,
	0, 0, 0, 334, 211, 0, 395, 396, 404, 405,
	0, 408, 429, 441, 0, 0, 412, 414, 467, 416,
	0, 0, 418, 0, 420, 0, 422, 0, 424, 0,
	426, 428, 430, 442, 432, 715, 434, 0, 436, 440,
	0, 445, 0, 447, 448, 449, 0, 0, 455, 0,
	0, 402, 403, 117, 818, 0, 0, 0, -2, 0,
	733, 758, 0, 736, 737, 0, 0, 0, 0, 718,
	719, 0, 0, 0, 678, 679, 294, 0, 297, 0,
	0, 0, 0, 1130, 1131, 1132, 1133, 1134, 1135, 1138,
	1139, 1136, 1137, 1140, 1141, 0, 0, 0, 0, 0,
	1142, 0, 0, 0, 0, 0, 0, 0, 0, 1143,
	1144, 1145, 0, 0, 1147, 0, 1149, 0, 0, 0,
	0, 0, 0, 1209, 0, 0, 1146, 931, 932, 933,
	965, 966, 0, 1030, 1206, 1199, 1032, 0, 1152, -2,
	1153, 0, 0, 1035, 1040, 1041, 1152, 0, 1194, -2,
	0, 1241, 0, 923, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1175, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 891, 902, 899,
	898, 875, 0, 874, 872, 0, 876, 0, 0, 0,
	604, -2, 606, 0, 618, 0, 708, 0, 0, 0,
	765, 1210, 1214, 1215, 765, 0, 1153, 0, 0, 0,
	0, 811, 811, 811, 809, 785, 0, 791, 0, -2,
	815, 803, 0, -2, 782, 0, 0, 816, 0, 83,
	589, 96, 0, 589, 589, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 805, 1221, 0, 1200, 1201, 147, 0, 0,
	1216, 1205, 475, 0, 0, 555, 0, 712, 0, 0,
	0, 0, 1458, 564, 1254, 639, 0, 824, 0, 653,
	0, 0, 821, 0, 193, 0, 115, 116, 0, 196,
	0, 199, 0, 0, 202, 0, 0, 0, 715, 0,
	0, 279, 0, 0, 715, 0, 1155, 832, 833, 834,
	835, 836, 923, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 885,
	0, 860, 860, 860, 877, 878, 886, 887, 892, 893,
	904, 905, 907, 909, 903, 903, 903, 900, 901, 805,
	134, 0, 0, 0, 0, -2, 326, 0, 626, 0,
	631, 346, 347, 348, 633, 634, 330, 349, 350, 351,
	352, 353, 354, 0, 550, 0, 552, 1247, 0, 327,
	339, 328, 331, 0, 212, 406, 407, 409, 410, 411,
	415, 0, 464, 417, 419, 421, 423, 425, 433, 437,
	715, 443, 446, 450, 451, 452, 453, 0, 0, 0,
	553, 0, 310, 0, 459, 0, 733, 758, 682, 732,
	683, 757, 759, 734, 735, 740, 744, 745, 748, 751,
	752, 742, 926, 701, 702, 703, 726, 727, 576, 0,
	0, 296, 927, 828, 829, 879, 880, 881, 882, 883,
	928, 929, 0, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, -2, -2, -2, -2, -2, -2, -2,
	-2, 952, 953, 954, 955, 956, 957, 958, 959, -2,
	-2, -2, 963, 964, -2, 1148, 1150, 0, 1209, 0,
	-2, 0, -2, -2, -2, -2, 977, 0, 979, 982,
	984, 986, 0, 0, 0, 0, 1208, 996, 1186, 0,
	0, 1127, 1128, 1129, 981, 0, 0, 1207, 1198, 0,
	0, 1151, 1037, 0, 0, 0, 1159, 1193, 1189, 0,
	1044, 725, 0, 0, 0, 0, 1051, 0, 1250, 910,
	911, 912, 913, 914, 915, 924, 1107, 0, 0, 0,
	1058, 1059, 1061, 1062, 1064, 1065, 1068, 1069, 0, 0,
	0, 1075, 0, 1162, -2, -2, -2, -2, -2, -2,
	-2, 0, 1077, 0, 1079, 1153, 1172, 0, 0, 1000,
	0, 0, 0, 0, 1479, 0, 1082, 1153, 1180, 0,
	0, 0, 0, 0, 1153, 0, 1185, 0, 0, 0,
	0, 0, 1093, 0, 1095, 0, 0, 0, 0, 0,
	0, 617, 710, 0, 0, 0, 824, 0, 0, 0,
	1213, 824, 760, 0, 0, 0, 0, 0, 0, 806,
	810, 807, 808, 0, 0, 791, 803, 773, 0, 0,
	0, 780, 781, 802, 0, 801, 790, -2, 0, 0,
	0, 0, 0, 588, 98, 1458, 0, 119, 0, 0,
	523, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 1224, 0, 137, 0, 1231, 0,
	0, 0, 0, 0, 474, 1230, 476, 478, 479, 480,
	481, 1255, 0, 1255, 0, 0, 0, 0, 0, 0,
	0, 641, 647, 0, 739, 0, 665, 655, 0, 0,
	0, 665, 669, 670, 672, 673, 0, 0, 822, 209,
	117, 117, 1219, 117, 117, 206, 262, 216, 254, 0,
	0, 0, 256, 0, 258, 0, 825, 827, 0, 837,
	0, 146, 0, 0, 0, 0, 319, 0, 625, 632,
	0, 343, 0, 345, 551, 1249, 1248, 0, 213, 466,
	287, 435, 438, 461, 462, 463, 819, 0, 0, 460,
	686, 687, 0, 746, 0, 0, 743, 749, 750, 0,
	729, 574, 575, 0, 0, 0, -2, -2, 0, 0,
	0, 997, -2, 978, 980, 983, 985, 987, 0, 0,
	0, 0, 0, 0, 0, 998, 1152, 0, 1196, 1199,
	-2, 1154, 1157, 1158, 0, 0, 1190, 0, 0, 0,
	0, 724, 725, 725, 725, 1050, 0, 0, 0, 0,
	0, 0, 1052, 0, 0, 0, 0, 0, 0, 1074,
	0, 1076, 1078, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1003,
	1004, 1005, 0, 1152, 1081, 1178, 1179, 0, 0, 0,
	0, 0, 0, 1087, 0, 1184, 0, 0, 0, 1091,
	1092, 1094, 0, 858, 0, 884, 906, 908, 896, 715,
	1232, 762, 754, 1211, 805, 764, 766, 1212, 754, 1154,
	793, 0, 795, 0, 0, 0, 797, 0, 786, 0,
	788, 803, 778, 0, 0, 771, 0, 770, 791, 799,
	0, 0, 817, 97, 578, 0, 0, 0, 100, 1458,
	108, 0, 505, 0, 0, 0, 0, 0, 591, 109,
	1458, 117, 1458, 117, 110, 84, 589, 85, 0, 0,
	584, 0, 0, 577, 86, 0, 586, 0, 0, 146,
	0, 0, 148, 0, 1217, 483, 532, 0, 0, 1255,
	0, 472, 533, 558, -2, 560, 0, 0, 643, 647,
	0, 646, 713, 665, 738, 823, 648, 665, 0, 0,
	0, 657, 654, 651, 824, 0, 0, 0, 0, 194,
	197, 200, 203, 269, 0, 0, 1156, 0, 830, 0,
	0, 126, 0, 135, 271, 316, 317, 322, 341, 342,
	344, 340, 0, 0, 0, 0, 0, 0, 0, 728,
	576, 0, 930, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 1187, 0, 0, 0, 1198, -2, 1160, 1188,
	1192, 0, 1045, 0, 0, 0, 0, 1243, 916, 917,
	918, 919, 920, 921, 922, 0, 1105, 1106, 1110, 0,
	0, 1056, 0, 0, 1161, 1171, 1173, 1001, 1002, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, -2,
	-2, -2, 1019, 1020, 1021, -2, -2, -2, 0, 0,
	0, 1174, 0, 0, 1176, 1177, 1181, 1182, 0, 1084,
	1085, 1086, 1183, 0, 0, 0, 890, 0, 0, 756,
	0, 763, 0, 756, 794, 0, 813, 796, 776, 787,
	0, 784, 774, 0, 775, 0, 803, 0, 0, 783,
	0, 0, 0, 0, 118, 503, 522, 0, 0, 567,
	573, 573, 0, 1054, 1055, 0, 0, 0, 102, 0,
	0, 0, 0, 106, 0, 112, 0, 0, 0, 91,
	0, 0, 0, 0, 90, 0, 0, 89, 124, 0,
	0, 149, 488, 0, 477, 0, 0, 0, 475, 0,
	556, 0, 0, 645, 647, 0, 638, 639, 174, 649,
	663, 664, 662, 0, 665, 671, 668, 674, 0, 0,
	128, 0, 0, 831, 838, 144, 1348, 142, 139, 141,
	288, 311, 312, 0, 456, 457, 458, 741, 747, 730,
	576, 0, 0, -2, 0, 990, -2, -2, 1123, 1154,
	1197, 1191, 1240, 725, 1046, 1048, 1049, 925, 1112, 1109,
	0, 1096, 1072, 1073, 1170, 0, 0, 0, 0, 1154,
	1125, 1083, 0, 1089, 1090, 859, 711, 1101, 0, 0,
	767, 1101, 0, 791, 789, 772, 768, 0, 779, 0,
	800, 580, 582, 99, 0, 504, 0, 507, 0, 0,
	0, 0, 513, 514, 0, 0, 0, 0, 524, 531,
	0, 576, 1235, 0, 576, 0, 0, 0, 0, 0,
	114, 0, 0, 590, 0, 117, 117, 579, 0, 0,
	0, 0, 585, 0, 587, 136, 0, 470, 487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 635, 647,
	0, 640, 641, 0, 0, 0, 656, 666, 0, 0,
	0, 826, 0, 0, 0, 0, 0, 314, 0, 731,
	-2, -2, 991, 1124, 0, 725, 0, 1098, -2, 0,
	0, 0, 1126, 0, 698, 0, 755, 753, 699, 812,
	803, 0, 798, 101, 0, 508, 509, 1255, 0, 512,
	515, 0, 517, 1257, 483, 0, 528, 529, 568, 569,
	572, 570, 573, 725, 526, 0, 103, 104, 113, 121,
	105, 111, 0, 0, 725, 0, 0, 804, 0, 0,
	531, 0, 521, 483, 473, 531, 0, 0, 642, 643,
	0, 0, 0, 675, 0, 0, 143, 0, 138, 140,
	313, 0, 1047, 1115, 0, -2, 0, 1027, 1088, 1100,
	1102, 0, 777, 769, 506, 510, 0, 0, 537, 0,
	525, 0, 576, 0, 0, 123, 0, 581, 583, 0,
	0, 0, 0, 0, 0, 483, 531, 471, 483, 0,
	644, 645, 0, 659, 824, 661, 0, 0, 145, 315,
	0, 0, 0, 1111, 1028, 0, 0, 0, 516, 542,
	0, 0, 0, 571, 1045, 533, 107, 0, 120, 0,
	0, 0, 0, 0, 0, 519, 483, 562, 0, 636,
	0, 660, 146, 146, 1108, 1113, 1116, -2, 1418, 1293,
	0, 1114, 1103, 1104, 0, 518, 538, 539, 0, 534,
	535, 536, 1256, 530, 537, 122, 93, 95, 0, 0,
	0, 520, 531, 824, 129, 130, 0, 1118, 1119, 1120,
	1121, 1122, 511, 540, 0, 541, 0, 0, 0, 542,
	0, 0, 486, 483, 658, 0, 543, 0, 546, 547,
	0, 544, 527, 0, 0, 482, 484, 485, 563, 1117,
	545, 548, 549, 0, 0, 0, 0, 489, 0, 490,
	0, 0, 0, 488, 0, 0, 0, 487, 493, 0,
	496, 498, -2, 0, 491, 0, 0, 494, 0, 0,
	0, 492, 497, 0, 495, 488, 0, 487, 502, 500,
	0, 501,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 365, 3, 371, 366, 3,
	376, 377, 369, 367, 381, 368, 378, 370, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 385, 380,
	357, 359, 358, 361, 382, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 374, 3, 375, 372, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 383, 364, 384, 362,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 360,
	57700, 363, 57701, 373, 57702, 379, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:907
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:913
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:919
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:976
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1012
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1058
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1084
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1090
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1096
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1105
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1114
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1183
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1206
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1216
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1278
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1279
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1282
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1283
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1336
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1374
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1476
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			return helpWith(sqllex, "CREATE")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1503
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1505
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1525
		{
			return helpWith(sqllex, "DELETE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1537
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			return helpWith(sqllex, "DROP")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1565
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1580
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1603
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1641
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			return helpWith(sqllex, "DELETE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			return helpWith(sqllex, "INSERT")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1729
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{ /* SKIP DOC */
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1817
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			return helpWith(sqllex, "GRANT")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			return helpWith(sqllex, "RESET")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1936
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1951
		{
			return helpWith(sqllex, "RESET")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1962
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1967
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1976
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{ /* SKIP DOC */
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1978
		{ /* SKIP DOC */
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1979
		{
			return unimplemented(sqllex, "set local")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2088
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2093
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2110
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2113
		{
			return unimplemented(sqllex, "set from current")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2115
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2125
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = Low
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = Normal
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = High
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2224
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2231
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2241
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2243
		{
			return helpWith(sqllex, "SHOW")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.str = "client_encoding"
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2267
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2278
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2300
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2370
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2413
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2459
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2467
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2471
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2475
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2478
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2489
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2500
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2511
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2515
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2519
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2523
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2527
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2531
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2537
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2541
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2545
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2551
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2579
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2690
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = DropDefault
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2800
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3007
		{
			return unimplemented(sqllex, "match full")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3008
		{
			return unimplemented(sqllex, "match partial")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3009
		{
			return unimplemented(sqllex, "match simple")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3010
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = NoAction
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = Restrict
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = Cascade
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = SetNull
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = SetDefault
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3096
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3111
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = nil
		}
	case 560:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3136
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3176
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = true
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = false
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3207
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3210
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3211
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = Ascending
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = Descending
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3251
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3253
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = true
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = false
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3286
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3287
		{
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3298
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3309
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3320
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3324
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3326
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3344
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3362
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3367
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3375
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3382
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3386
		{
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.str = ""
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.str = ""
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3447
		{
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = ReadOnly
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = ReadWrite
		}
	case 635:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3511
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.str = ""
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.str = ""
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.str = ""
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.str = ""
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3554
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3555
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			return helpWith(sqllex, "INSERT")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3596
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3638
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3650
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 666:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3673
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3677
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3678
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3805
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3840
		{
			return helpWith(sqllex, "SELECT")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			return helpWith(sqllex, "VALUES")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3842
		{
			return helpWith(sqllex, "TABLE")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3889
		{
			return helpWith(sqllex, "SELECT")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3933
		{
			return helpWith(sqllex, "TABLE")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3944
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3945
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3946
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3949
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3953
		{
			return unimplemented(sqllex, "cte")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3956
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3957
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3960
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3961
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3964
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3965
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = true
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = false
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = false
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = true
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3988
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3989
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4043
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4067
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4119
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4120
		{
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4123
		{
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4124
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = false
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = true
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4195
		{
			return helpWith(sqllex, "VALUES")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4197
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4212
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &From{}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4234
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4252
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4279
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4316
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4341
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = nil
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4382
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4388
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = true
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = false
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.str = astFullJoin
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.str = astLeftJoin
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.str = astRightJoin
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.str = astInnerJoin
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4499
		{
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4500
		{
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4586
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4600
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4608
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4632
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4643
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = jsonbColType
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = jsonColType
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4701
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4732
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4741
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = nil
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4806
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4902
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4934
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4973
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4974
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = year
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = month
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = day
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = hour
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = minute
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = month
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = hour
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = minute
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = minute
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = nil
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = second
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5069
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5093
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5104
		{
			return unimplemented(sqllex, "at tz")
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5312
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5342
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5378
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5531
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5555
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5601
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5608
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5609
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5622
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5633
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5640
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5649
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5650
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5654
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5656
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5660
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5663
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5672
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5681
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5682
		{
			return unimplemented(sqllex, "current role")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5688
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5691
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5712
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5714
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5717
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5722
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5731
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5732
		{
			return unimplemented(sqllex, "treat")
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5769
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5771
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5774
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5778
		{
			return unimplemented(sqllex, "within group")
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5779
		{
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5783
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5814
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5826
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.str = ""
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5876
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5877
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5878
		{
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5881
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5882
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5888
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5889
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5890
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5891
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5892
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5925
		{
			sqlVAL.union.val = Any
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5929
		{
			sqlVAL.union.val = Some
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5933
		{
			sqlVAL.union.val = All
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = Plus
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = Minus
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = Mult
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5941
		{
			sqlVAL.union.val = Div
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = Mod
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = Bitand
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = Bitor
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = Pow
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = Bitxor
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = LT
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = GT
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = EQ
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = LE
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = GE
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = NE
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = Like
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = NotLike
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = ILike
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = NotILike
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6044
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6048
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6108
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6120
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6149
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6156
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6160
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6172
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6176
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6189
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6193
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6200
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6212
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6218
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6222
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6228
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6232
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6238
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6242
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6247
		{
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6248
		{
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6252
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6256
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6262
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6271
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6275
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6279
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6287
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6291
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6297
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6301
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6307
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6311
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6322
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6326
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6332
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6336
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6349
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6353
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6357
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6361
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6367
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6377
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6380
		{
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6390
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6394
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6401
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6405
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6409
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6413
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6416
		{
			return unimplemented(sqllex, "func const")
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6418
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6422
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6425
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6427
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6431
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6435
		{
			sqlVAL.union.val = DNull
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6442
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6446
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6452
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6487
		{
			sqlVAL.str = ""
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6493
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6497
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
