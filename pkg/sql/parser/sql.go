// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *TableNameWithIndex {
	tn := u.val.(TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() TableNameWithIndex {
	return u.val.(TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:494
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALL_EXISTENCE = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const IMPORT = 57486
const INCREMENTAL = 57487
const IF = 57488
const IFNULL = 57489
const ILIKE = 57490
const IN = 57491
const INET = 57492
const INTERLEAVE = 57493
const INDEX = 57494
const INDEXES = 57495
const INITIALLY = 57496
const INNER = 57497
const INSERT = 57498
const INT = 57499
const INT2VECTOR = 57500
const INT2 = 57501
const INT4 = 57502
const INT8 = 57503
const INT64 = 57504
const INTEGER = 57505
const INTERSECT = 57506
const INTERVAL = 57507
const INTO = 57508
const IS = 57509
const ISOLATION = 57510
const JOB = 57511
const JOBS = 57512
const JOIN = 57513
const JSON = 57514
const JSONB = 57515
const KEY = 57516
const KEYS = 57517
const KV = 57518
const LATERAL = 57519
const LC_CTYPE = 57520
const LC_COLLATE = 57521
const LEADING = 57522
const LEAST = 57523
const LEFT = 57524
const LESS = 57525
const LEVEL = 57526
const LIKE = 57527
const LIMIT = 57528
const LIST = 57529
const LOCAL = 57530
const LOCALTIME = 57531
const LOCALTIMESTAMP = 57532
const LOW = 57533
const LSHIFT = 57534
const MATCH = 57535
const MAXVALUE = 57536
const MINUTE = 57537
const MONTH = 57538
const NAN = 57539
const NAME = 57540
const NAMES = 57541
const NATURAL = 57542
const NEXT = 57543
const NO = 57544
const NO_INDEX_JOIN = 57545
const NORMAL = 57546
const NOT = 57547
const NOTHING = 57548
const NULL = 57549
const NULLIF = 57550
const NULLS = 57551
const NUMERIC = 57552
const OF = 57553
const OFF = 57554
const OFFSET = 57555
const OID = 57556
const ON = 57557
const ONLY = 57558
const OPTIONS = 57559
const OR = 57560
const ORDER = 57561
const ORDINALITY = 57562
const OUT = 57563
const OUTER = 57564
const OVER = 57565
const OVERLAPS = 57566
const OVERLAY = 57567
const PARENT = 57568
const PARTIAL = 57569
const PARTITION = 57570
const PASSWORD = 57571
const PAUSE = 57572
const PLACING = 57573
const PLANS = 57574
const POSITION = 57575
const PRECEDING = 57576
const PRECISION = 57577
const PREPARE = 57578
const PRIMARY = 57579
const PRIORITY = 57580
const QUERIES = 57581
const QUERY = 57582
const RANGE = 57583
const READ = 57584
const REAL = 57585
const RECURSIVE = 57586
const REF = 57587
const REFERENCES = 57588
const REGCLASS = 57589
const REGPROC = 57590
const REGPROCEDURE = 57591
const REGNAMESPACE = 57592
const REGTYPE = 57593
const REMOVE_PATH = 57594
const RENAME = 57595
const REPEATABLE = 57596
const RELEASE = 57597
const RESET = 57598
const RESTORE = 57599
const RESTRICT = 57600
const RESUME = 57601
const RETURNING = 57602
const REVOKE = 57603
const RIGHT = 57604
const ROLLBACK = 57605
const ROLLUP = 57606
const ROW = 57607
const ROWS = 57608
const RSHIFT = 57609
const SAVEPOINT = 57610
const SCATTER = 57611
const SCRUB = 57612
const SEARCH = 57613
const SECOND = 57614
const SELECT = 57615
const SEQUENCES = 57616
const SERIAL = 57617
const SERIALIZABLE = 57618
const SESSION = 57619
const SESSIONS = 57620
const SESSION_USER = 57621
const SET = 57622
const SETTING = 57623
const SETTINGS = 57624
const SHOW = 57625
const SIMILAR = 57626
const SIMPLE = 57627
const SMALLINT = 57628
const SMALLSERIAL = 57629
const SNAPSHOT = 57630
const SOME = 57631
const SOME_EXISTENCE = 57632
const SPLIT = 57633
const SQL = 57634
const START = 57635
const STATUS = 57636
const STDIN = 57637
const STRICT = 57638
const STRING = 57639
const STORE = 57640
const STORING = 57641
const SUBSTRING = 57642
const SYMMETRIC = 57643
const SYSTEM = 57644
const TABLE = 57645
const TABLES = 57646
const TEMP = 57647
const TEMPLATE = 57648
const TEMPORARY = 57649
const TESTING_RANGES = 57650
const TESTING_RELOCATE = 57651
const TEXT = 57652
const THAN = 57653
const THEN = 57654
const TIME = 57655
const TIMESTAMP = 57656
const TIMESTAMPTZ = 57657
const TO = 57658
const TRAILING = 57659
const TRACE = 57660
const TRANSACTION = 57661
const TREAT = 57662
const TRIM = 57663
const TRUE = 57664
const TRUNCATE = 57665
const TYPE = 57666
const UNBOUNDED = 57667
const UNCOMMITTED = 57668
const UNION = 57669
const UNIQUE = 57670
const UNKNOWN = 57671
const UPDATE = 57672
const UPSERT = 57673
const USE = 57674
const USER = 57675
const USERS = 57676
const USING = 57677
const UUID = 57678
const VALID = 57679
const VALIDATE = 57680
const VALUE = 57681
const VALUES = 57682
const VARCHAR = 57683
const VARIADIC = 57684
const VIEW = 57685
const VARYING = 57686
const WHEN = 57687
const WHERE = 57688
const WINDOW = 57689
const WITH = 57690
const WITHIN = 57691
const WITHOUT = 57692
const WRITE = 57693
const YEAR = 57694
const ZONE = 57695
const NOT_LA = 57696
const WITH_LA = 57697
const AS_LA = 57698
const CONTAINED_BY = 57699
const POSTFIXOP = 57700
const UMINUS = 57701
const HELPTOKEN = 57702

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6923

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	380, 54,
	-2, 727,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	152, 576,
	-2, 0,
	-1, 54,
	97, 727,
	156, 727,
	330, 727,
	331, 727,
	-2, 0,
	-1, 64,
	1, 689,
	215, 689,
	260, 689,
	375, 689,
	377, 689,
	379, 689,
	380, 689,
	-2, 702,
	-1, 97,
	4, 729,
	20, 729,
	21, 729,
	24, 729,
	29, 729,
	34, 729,
	35, 729,
	36, 729,
	37, 729,
	38, 729,
	39, 729,
	40, 729,
	41, 729,
	42, 729,
	43, 729,
	45, 729,
	46, 729,
	47, 729,
	48, 729,
	49, 729,
	52, 729,
	53, 729,
	54, 729,
	56, 729,
	57, 729,
	61, 729,
	62, 729,
	63, 729,
	65, 729,
	66, 729,
	67, 729,
	68, 729,
	70, 729,
	72, 729,
	73, 729,
	76, 729,
	77, 729,
	78, 729,
	86, 729,
	87, 729,
	88, 729,
	89, 729,
	90, 729,
	91, 729,
	92, 729,
	93, 729,
	95, 729,
	97, 729,
	99, 729,
	102, 729,
	103, 729,
	105, 729,
	109, 729,
	110, 729,
	111, 729,
	112, 729,
	113, 729,
	114, 729,
	115, 729,
	123, 729,
	124, 729,
	125, 729,
	126, 729,
	127, 729,
	129, 729,
	131, 729,
	136, 729,
	137, 729,
	139, 729,
	142, 729,
	143, 729,
	144, 729,
	145, 729,
	146, 729,
	147, 729,
	150, 729,
	151, 729,
	153, 729,
	156, 729,
	157, 729,
	158, 729,
	159, 729,
	160, 729,
	161, 729,
	162, 729,
	163, 729,
	165, 729,
	168, 729,
	169, 729,
	170, 729,
	172, 729,
	173, 729,
	174, 729,
	175, 729,
	176, 729,
	178, 729,
	179, 729,
	181, 729,
	183, 729,
	184, 729,
	187, 729,
	188, 729,
	191, 729,
	193, 729,
	195, 729,
	196, 729,
	197, 729,
	198, 729,
	199, 729,
	201, 729,
	202, 729,
	203, 729,
	204, 729,
	208, 729,
	209, 729,
	210, 729,
	211, 729,
	212, 729,
	214, 729,
	216, 729,
	217, 729,
	220, 729,
	221, 729,
	223, 729,
	225, 729,
	226, 729,
	227, 729,
	228, 729,
	229, 729,
	230, 729,
	232, 729,
	233, 729,
	234, 729,
	235, 729,
	236, 729,
	238, 729,
	239, 729,
	240, 729,
	241, 729,
	242, 729,
	243, 729,
	244, 729,
	245, 729,
	247, 729,
	248, 729,
	249, 729,
	250, 729,
	251, 729,
	253, 729,
	254, 729,
	255, 729,
	256, 729,
	257, 729,
	258, 729,
	259, 729,
	261, 729,
	263, 729,
	264, 729,
	265, 729,
	266, 729,
	268, 729,
	269, 729,
	270, 729,
	271, 729,
	272, 729,
	274, 729,
	275, 729,
	276, 729,
	277, 729,
	278, 729,
	280, 729,
	281, 729,
	282, 729,
	283, 729,
	285, 729,
	286, 729,
	287, 729,
	288, 729,
	291, 729,
	292, 729,
	293, 729,
	294, 729,
	295, 729,
	296, 729,
	297, 729,
	298, 729,
	299, 729,
	300, 729,
	302, 729,
	304, 729,
	305, 729,
	306, 729,
	307, 729,
	308, 729,
	309, 729,
	310, 729,
	311, 729,
	313, 729,
	314, 729,
	315, 729,
	318, 729,
	319, 729,
	320, 729,
	321, 729,
	323, 729,
	324, 729,
	325, 729,
	326, 729,
	329, 729,
	330, 729,
	331, 729,
	332, 729,
	334, 729,
	336, 729,
	337, 729,
	338, 729,
	339, 729,
	340, 729,
	341, 729,
	344, 729,
	349, 729,
	350, 729,
	351, 729,
	352, 729,
	353, 729,
	-2, 0,
	-1, 115,
	1, 692,
	215, 692,
	260, 692,
	375, 692,
	377, 692,
	379, 692,
	380, 692,
	-2, 701,
	-1, 120,
	1, 627,
	168, 627,
	238, 627,
	242, 627,
	379, 627,
	380, 627,
	-2, 0,
	-1, 122,
	1, 627,
	379, 627,
	380, 627,
	-2, 0,
	-1, 123,
	1, 627,
	379, 627,
	380, 627,
	-2, 0,
	-1, 124,
	1, 631,
	379, 631,
	380, 631,
	-2, 0,
	-1, 145,
	4, 735,
	5, 735,
	6, 735,
	7, 735,
	8, 735,
	9, 735,
	20, 735,
	21, 735,
	24, 735,
	29, 735,
	30, 735,
	34, 735,
	35, 735,
	36, 735,
	37, 735,
	38, 735,
	39, 735,
	40, 735,
	41, 735,
	42, 735,
	43, 735,
	45, 735,
	46, 735,
	47, 735,
	48, 735,
	49, 735,
	50, 735,
	51, 735,
	52, 735,
	53, 735,
	54, 735,
	56, 735,
	57, 735,
	59, 735,
	61, 735,
	62, 735,
	63, 735,
	65, 735,
	66, 735,
	67, 735,
	68, 735,
	70, 735,
	72, 735,
	73, 735,
	75, 735,
	76, 735,
	77, 735,
	78, 735,
	80, 735,
	81, 735,
	82, 735,
	84, 735,
	85, 735,
	86, 735,
	87, 735,
	88, 735,
	89, 735,
	90, 735,
	91, 735,
	92, 735,
	93, 735,
	94, 735,
	95, 735,
	97, 735,
	99, 735,
	102, 735,
	103, 735,
	105, 735,
	109, 735,
	110, 735,
	111, 735,
	112, 735,
	113, 735,
	114, 735,
	115, 735,
	116, 735,
	117, 735,
	123, 735,
	124, 735,
	125, 735,
	126, 735,
	127, 735,
	129, 735,
	131, 735,
	134, 735,
	136, 735,
	137, 735,
	139, 735,
	142, 735,
	143, 735,
	144, 735,
	145, 735,
	146, 735,
	147, 735,
	148, 735,
	150, 735,
	151, 735,
	153, 735,
	155, 735,
	156, 735,
	157, 735,
	158, 735,
	159, 735,
	160, 735,
	161, 735,
	162, 735,
	163, 735,
	165, 735,
	167, 735,
	168, 735,
	169, 735,
	170, 735,
	171, 735,
	172, 735,
	173, 735,
	174, 735,
	175, 735,
	176, 735,
	178, 735,
	179, 735,
	181, 735,
	182, 735,
	183, 735,
	184, 735,
	185, 735,
	187, 735,
	188, 735,
	191, 735,
	193, 735,
	194, 735,
	195, 735,
	196, 735,
	197, 735,
	198, 735,
	199, 735,
	200, 735,
	201, 735,
	202, 735,
	203, 735,
	204, 735,
	205, 735,
	207, 735,
	208, 735,
	209, 735,
	210, 735,
	211, 735,
	212, 735,
	214, 735,
	217, 735,
	220, 735,
	221, 735,
	222, 735,
	223, 735,
	224, 735,
	225, 735,
	226, 735,
	227, 735,
	228, 735,
	229, 735,
	230, 735,
	232, 735,
	233, 735,
	234, 735,
	235, 735,
	236, 735,
	238, 735,
	239, 735,
	240, 735,
	241, 735,
	242, 735,
	243, 735,
	244, 735,
	245, 735,
	247, 735,
	248, 735,
	249, 735,
	250, 735,
	251, 735,
	253, 735,
	254, 735,
	255, 735,
	256, 735,
	257, 735,
	258, 735,
	259, 735,
	261, 735,
	262, 735,
	263, 735,
	264, 735,
	265, 735,
	266, 735,
	268, 735,
	269, 735,
	270, 735,
	271, 735,
	272, 735,
	274, 735,
	275, 735,
	276, 735,
	277, 735,
	278, 735,
	279, 735,
	280, 735,
	281, 735,
	282, 735,
	283, 735,
	284, 735,
	285, 735,
	286, 735,
	287, 735,
	288, 735,
	291, 735,
	292, 735,
	293, 735,
	294, 735,
	295, 735,
	296, 735,
	297, 735,
	298, 735,
	299, 735,
	300, 735,
	302, 735,
	304, 735,
	305, 735,
	306, 735,
	307, 735,
	308, 735,
	309, 735,
	310, 735,
	311, 735,
	313, 735,
	314, 735,
	315, 735,
	318, 735,
	319, 735,
	320, 735,
	321, 735,
	322, 735,
	323, 735,
	324, 735,
	325, 735,
	326, 735,
	329, 735,
	330, 735,
	331, 735,
	332, 735,
	333, 735,
	334, 735,
	336, 735,
	337, 735,
	338, 735,
	339, 735,
	340, 735,
	341, 735,
	344, 735,
	349, 735,
	350, 735,
	351, 735,
	352, 735,
	353, 735,
	354, 735,
	362, 735,
	367, 735,
	368, 735,
	369, 735,
	376, 735,
	382, 735,
	-2, 0,
	-1, 148,
	1, 54,
	380, 54,
	-2, 727,
	-1, 515,
	133, 1345,
	316, 1345,
	359, 1345,
	378, 1345,
	-2, 0,
	-1, 516,
	133, 1292,
	316, 1292,
	359, 1292,
	378, 1292,
	-2, 0,
	-1, 518,
	133, 1404,
	316, 1404,
	359, 1404,
	378, 1404,
	-2, 0,
	-1, 520,
	133, 1427,
	316, 1427,
	359, 1427,
	378, 1427,
	-2, 0,
	-1, 527,
	133, 1350,
	316, 1350,
	359, 1350,
	378, 1350,
	-2, 345,
	-1, 553,
	1, 423,
	375, 423,
	377, 423,
	379, 423,
	380, 423,
	-2, 0,
	-1, 554,
	1, 475,
	130, 475,
	375, 475,
	377, 475,
	379, 475,
	380, 475,
	-2, 0,
	-1, 560,
	1, 437,
	375, 437,
	377, 437,
	379, 437,
	380, 437,
	-2, 0,
	-1, 562,
	1, 441,
	375, 441,
	377, 441,
	379, 441,
	380, 441,
	-2, 0,
	-1, 565,
	1, 449,
	375, 449,
	377, 449,
	379, 449,
	380, 449,
	-2, 0,
	-1, 566,
	1, 454,
	375, 454,
	377, 454,
	379, 454,
	380, 454,
	-2, 0,
	-1, 569,
	1, 464,
	375, 464,
	377, 464,
	379, 464,
	380, 464,
	-2, 0,
	-1, 594,
	118, 737,
	130, 737,
	186, 737,
	213, 737,
	-2, 696,
	-1, 601,
	118, 736,
	130, 736,
	186, 736,
	213, 736,
	-2, 693,
	-1, 657,
	376, 1270,
	-2, 1263,
	-1, 658,
	376, 1271,
	-2, 1264,
	-1, 664,
	5, 921,
	376, 921,
	-2, 1479,
	-1, 689,
	5, 880,
	-2, 1448,
	-1, 690,
	5, 915,
	376, 915,
	-2, 1450,
	-1, 691,
	5, 890,
	-2, 1451,
	-1, 692,
	5, 889,
	-2, 1452,
	-1, 693,
	5, 915,
	376, 915,
	-2, 1455,
	-1, 694,
	5, 915,
	376, 915,
	-2, 1456,
	-1, 695,
	5, 916,
	-2, 1459,
	-1, 696,
	5, 872,
	-2, 1460,
	-1, 697,
	5, 872,
	-2, 1461,
	-1, 698,
	5, 897,
	-2, 1465,
	-1, 699,
	5, 882,
	-2, 1466,
	-1, 700,
	5, 883,
	-2, 1467,
	-1, 701,
	5, 873,
	-2, 1473,
	-1, 702,
	5, 874,
	-2, 1474,
	-1, 703,
	5, 875,
	-2, 1475,
	-1, 704,
	5, 876,
	-2, 1476,
	-1, 705,
	5, 877,
	-2, 1477,
	-1, 706,
	5, 878,
	-2, 1478,
	-1, 707,
	5, 872,
	-2, 1485,
	-1, 708,
	5, 881,
	-2, 1490,
	-1, 709,
	5, 879,
	-2, 1493,
	-1, 710,
	5, 913,
	376, 913,
	-2, 1495,
	-1, 711,
	5, 917,
	-2, 1498,
	-1, 712,
	5, 919,
	-2, 1499,
	-1, 713,
	5, 912,
	376, 912,
	-2, 1504,
	-1, 908,
	229, 725,
	-2, 569,
	-1, 913,
	215, 1267,
	-2, 0,
	-1, 949,
	1, 223,
	375, 223,
	377, 223,
	379, 223,
	380, 223,
	-2, 700,
	-1, 952,
	4, 1503,
	10, 1503,
	11, 1503,
	13, 1503,
	14, 1503,
	15, 1503,
	16, 1503,
	17, 1503,
	18, 1503,
	20, 1503,
	21, 1503,
	23, 1503,
	24, 1503,
	27, 1503,
	29, 1503,
	31, 1503,
	34, 1503,
	35, 1503,
	36, 1503,
	37, 1503,
	38, 1503,
	39, 1503,
	40, 1503,
	41, 1503,
	42, 1503,
	43, 1503,
	45, 1503,
	46, 1503,
	47, 1503,
	48, 1503,
	49, 1503,
	52, 1503,
	53, 1503,
	54, 1503,
	56, 1503,
	57, 1503,
	58, 1503,
	61, 1503,
	62, 1503,
	63, 1503,
	64, 1503,
	65, 1503,
	66, 1503,
	67, 1503,
	68, 1503,
	70, 1503,
	71, 1503,
	72, 1503,
	73, 1503,
	75, 1503,
	76, 1503,
	77, 1503,
	78, 1503,
	86, 1503,
	87, 1503,
	88, 1503,
	89, 1503,
	90, 1503,
	91, 1503,
	92, 1503,
	93, 1503,
	95, 1503,
	97, 1503,
	99, 1503,
	102, 1503,
	103, 1503,
	105, 1503,
	109, 1503,
	110, 1503,
	111, 1503,
	112, 1503,
	113, 1503,
	114, 1503,
	115, 1503,
	119, 1503,
	120, 1503,
	121, 1503,
	122, 1503,
	123, 1503,
	124, 1503,
	125, 1503,
	126, 1503,
	127, 1503,
	128, 1503,
	129, 1503,
	131, 1503,
	134, 1503,
	136, 1503,
	137, 1503,
	139, 1503,
	142, 1503,
	143, 1503,
	144, 1503,
	145, 1503,
	146, 1503,
	147, 1503,
	148, 1503,
	149, 1503,
	150, 1503,
	151, 1503,
	153, 1503,
	155, 1503,
	156, 1503,
	157, 1503,
	158, 1503,
	159, 1503,
	160, 1503,
	161, 1503,
	162, 1503,
	163, 1503,
	165, 1503,
	167, 1503,
	168, 1503,
	169, 1503,
	170, 1503,
	171, 1503,
	172, 1503,
	173, 1503,
	174, 1503,
	175, 1503,
	176, 1503,
	178, 1503,
	179, 1503,
	181, 1503,
	182, 1503,
	183, 1503,
	184, 1503,
	185, 1503,
	187, 1503,
	188, 1503,
	191, 1503,
	192, 1503,
	193, 1503,
	195, 1503,
	196, 1503,
	197, 1503,
	198, 1503,
	199, 1503,
	200, 1503,
	201, 1503,
	202, 1503,
	203, 1503,
	204, 1503,
	208, 1503,
	209, 1503,
	210, 1503,
	211, 1503,
	212, 1503,
	214, 1503,
	217, 1503,
	218, 1503,
	220, 1503,
	221, 1503,
	223, 1503,
	225, 1503,
	226, 1503,
	227, 1503,
	228, 1503,
	229, 1503,
	230, 1503,
	232, 1503,
	233, 1503,
	234, 1503,
	235, 1503,
	236, 1503,
	238, 1503,
	239, 1503,
	240, 1503,
	241, 1503,
	242, 1503,
	243, 1503,
	244, 1503,
	245, 1503,
	247, 1503,
	248, 1503,
	249, 1503,
	250, 1503,
	251, 1503,
	252, 1503,
	253, 1503,
	254, 1503,
	255, 1503,
	256, 1503,
	257, 1503,
	258, 1503,
	259, 1503,
	261, 1503,
	262, 1503,
	263, 1503,
	264, 1503,
	265, 1503,
	266, 1503,
	267, 1503,
	268, 1503,
	269, 1503,
	270, 1503,
	271, 1503,
	272, 1503,
	274, 1503,
	275, 1503,
	276, 1503,
	277, 1503,
	278, 1503,
	280, 1503,
	281, 1503,
	282, 1503,
	283, 1503,
	284, 1503,
	285, 1503,
	286, 1503,
	287, 1503,
	288, 1503,
	290, 1503,
	291, 1503,
	292, 1503,
	293, 1503,
	294, 1503,
	295, 1503,
	296, 1503,
	297, 1503,
	298, 1503,
	299, 1503,
	300, 1503,
	302, 1503,
	304, 1503,
	305, 1503,
	306, 1503,
	307, 1503,
	308, 1503,
	309, 1503,
	310, 1503,
	311, 1503,
	313, 1503,
	314, 1503,
	315, 1503,
	318, 1503,
	319, 1503,
	320, 1503,
	321, 1503,
	323, 1503,
	324, 1503,
	325, 1503,
	326, 1503,
	329, 1503,
	330, 1503,
	331, 1503,
	332, 1503,
	334, 1503,
	336, 1503,
	337, 1503,
	338, 1503,
	339, 1503,
	340, 1503,
	341, 1503,
	344, 1503,
	349, 1503,
	350, 1503,
	351, 1503,
	352, 1503,
	353, 1503,
	354, 1503,
	355, 1503,
	357, 1503,
	358, 1503,
	359, 1503,
	360, 1503,
	361, 1503,
	362, 1503,
	364, 1503,
	365, 1503,
	366, 1503,
	367, 1503,
	368, 1503,
	369, 1503,
	370, 1503,
	371, 1503,
	372, 1503,
	374, 1503,
	377, 1503,
	378, 1503,
	381, 1503,
	382, 1503,
	-2, 0,
	-1, 968,
	133, 1404,
	316, 1404,
	359, 1404,
	378, 1404,
	-2, 0,
	-1, 985,
	133, 1427,
	316, 1427,
	359, 1427,
	378, 1427,
	-2, 0,
	-1, 986,
	168, 639,
	238, 639,
	242, 639,
	-2, 333,
	-1, 1054,
	118, 736,
	130, 736,
	186, 736,
	213, 736,
	-2, 697,
	-1, 1135,
	108, 702,
	118, 702,
	130, 702,
	164, 702,
	186, 702,
	213, 702,
	219, 702,
	327, 702,
	-2, 1051,
	-1, 1145,
	376, 1247,
	-2, 1235,
	-1, 1163,
	377, 1164,
	-2, 0,
	-1, 1187,
	168, 639,
	238, 639,
	242, 639,
	-2, 634,
	-1, 1215,
	377, 1164,
	-2, 0,
	-1, 1219,
	108, 702,
	118, 702,
	130, 702,
	164, 702,
	186, 702,
	213, 702,
	219, 702,
	327, 702,
	-2, 803,
	-1, 1363,
	168, 639,
	238, 639,
	242, 639,
	-2, 335,
	-1, 1471,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 956,
	-1, 1472,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 957,
	-1, 1473,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 958,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 959,
	-1, 1475,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 960,
	-1, 1476,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 961,
	-1, 1477,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 962,
	-1, 1478,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 963,
	-1, 1487,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 972,
	-1, 1488,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 973,
	-1, 1489,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 974,
	-1, 1492,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 979,
	-1, 1498,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 981,
	-1, 1500,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 985,
	-1, 1501,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 986,
	-1, 1502,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 987,
	-1, 1503,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 988,
	-1, 1572,
	133, 1175,
	376, 1270,
	-2, 1263,
	-1, 1573,
	133, 1176,
	-2, 1444,
	-1, 1574,
	133, 1177,
	-2, 1349,
	-1, 1575,
	133, 1178,
	-2, 1310,
	-1, 1576,
	133, 1179,
	-2, 1327,
	-1, 1577,
	133, 1180,
	-2, 1348,
	-1, 1578,
	133, 1181,
	-2, 1401,
	-1, 1655,
	1, 804,
	75, 804,
	108, 804,
	118, 804,
	130, 804,
	134, 804,
	138, 804,
	140, 804,
	155, 804,
	164, 804,
	171, 804,
	182, 804,
	186, 804,
	200, 804,
	213, 804,
	215, 804,
	219, 804,
	260, 804,
	262, 804,
	327, 804,
	335, 804,
	346, 804,
	347, 804,
	356, 804,
	375, 804,
	377, 804,
	379, 804,
	380, 804,
	381, 804,
	-2, 803,
	-1, 1808,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 980,
	-1, 1809,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 982,
	-1, 1814,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 983,
	-1, 1832,
	224, 1135,
	-2, 1137,
	-1, 2008,
	229, 725,
	-2, 569,
	-1, 2066,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 984,
	-1, 2071,
	167, 0,
	-2, 1000,
	-1, 2080,
	224, 1136,
	-2, 1138,
	-1, 2122,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1028,
	-1, 2123,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1029,
	-1, 2124,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1030,
	-1, 2128,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1034,
	-1, 2129,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1035,
	-1, 2130,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1036,
	-1, 2267,
	167, 0,
	-2, 1001,
	-1, 2270,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 1004,
	-1, 2271,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 1006,
	-1, 2395,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 1005,
	-1, 2396,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 1007,
	-1, 2403,
	167, 0,
	-2, 1037,
	-1, 2480,
	167, 0,
	-2, 1038,
	-1, 2562,
	37, 0,
	148, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 1447,
	-1, 2647,
	376, 1515,
	-2, 509,
}

const sqlPrivate = 57344

const sqlLast = 43609

var sqlAct = [...]int{

	658, 2630, 2644, 2363, 2362, 2645, 2628, 2216, 2561, 2570,
	2534, 2611, 2571, 1724, 2572, 2099, 2429, 1261, 2560, 1703,
	2045, 1732, 2485, 2373, 2335, 2227, 785, 2321, 2181, 1269,
	2256, 2249, 2012, 942, 1304, 1650, 2251, 656, 902, 185,
	620, 634, 945, 1515, 185, 2409, 1802, 2301, 185, 655,
	1707, 2182, 1947, 1702, 185, 800, 2243, 1926, 1213, 185,
	185, 1196, 1733, 185, 1264, 1706, 185, 1263, 1898, 1651,
	1668, 1659, 1934, 1527, 185, 451, 2152, 2020, 610, 110,
	1445, 1696, 1305, 1897, 1798, 1721, 1257, 1843, 469, 26,
	1450, 989, 1388, 1141, 526, 1225, 1536, 1227, 1217, 1222,
	1059, 1197, 1512, 1528, 63, 1601, 1282, 1384, 2014, 1552,
	1428, 767, 1781, 1426, 448, 938, 988, 1173, 1177, 648,
	1546, 1704, 602, 787, 950, 1726, 928, 935, 1710, 1637,
	770, 1624, 750, 110, 1204, 506, 1568, 626, 1130, 1060,
	185, 185, 115, 1387, 116, 523, 1429, 176, 185, 1427,
	1187, 650, 484, 519, 748, 925, 1276, 1186, 181, 2336,
	1064, 547, 2166, 1831, 1284, 2167, 1284, 1284, 2364, 2364,
	1725, 185, 185, 790, 185, 185, 802, 606, 2660, 2659,
	185, 185, 2653, 2653, 186, 2652, 2607, 2606, 2605, 2653,
	1252, 1252, 1252, 2587, 2582, 2581, 606, 2334, 1631, 1631,
	890, 1214, 2578, 2064, 601, 2029, 1252, 498, 1697, 2558,
	2557, 2030, 616, 1294, 1294, 783, 2529, 2524, 1626, 2523,
	1758, 1252, 607, 2387, 2519, 2511, 2482, 110, 1252, 2334,
	1758, 2460, 2457, 2155, 2455, 2334, 1252, 26, 2334, 2440,
	2439, 2417, 2414, 1252, 2334, 1252, 1252, 764, 2397, 1248,
	2358, 1729, 1758, 595, 1631, 594, 2355, 2333, 2314, 2269,
	1631, 2334, 1252, 1758, 2242, 2237, 2162, 2075, 1701, 1701,
	2163, 1631, 2039, 2000, 1923, 476, 2001, 1252, 1631, 2665,
	611, 1922, 775, 779, 1915, 1252, 38, 1913, 1916, 1912,
	797, 1631, 1697, 1631, 1911, 752, 1075, 1076, 1631, 41,
	1835, 1768, 1115, 1116, 1117, 1631, 1836, 1757, 1747, 1700,
	1630, 1758, 1631, 1701, 1631, 1297, 754, 1294, 755, 1298,
	1078, 2661, 2641, 1119, 2651, 475, 1631, 2530, 1294, 1075,
	1076, 2391, 1105, 1106, 1107, 1115, 1116, 1117, 2387, 1631,
	2155, 1625, 1093, 2055, 1077, 1657, 1108, 2135, 2077, 2001,
	1097, 1801, 1779, 1078, 477, 1366, 1119, 791, 1842, 1191,
	803, 53, 609, 479, 54, 1531, 1868, 1869, 651, 1252,
	888, 970, 148, 1285, 967, 1285, 1285, 1077, 966, 2337,
	965, 964, 963, 1097, 1868, 1869, 962, 145, 961, 145,
	1094, 960, 959, 958, 957, 56, 956, 955, 954, 953,
	1385, 756, 753, 600, 599, 1100, 1101, 1102, 1103, 598,
	597, 593, 592, 1549, 1083, 591, 590, 147, 589, 147,
	185, 790, 185, 586, 185, 1075, 1076, 185, 585, 584,
	145, 583, 579, 185, 1112, 1120, 578, 577, 1100, 1101,
	1102, 1103, 185, 185, 185, 185, 790, 1083, 545, 1078,
	544, 790, 543, 1529, 146, 542, 146, 1942, 541, 2029,
	147, 540, 139, 908, 894, 1550, 1625, 1112, 1120, 140,
	539, 1110, 538, 1077, 537, 536, 535, 534, 1098, 185,
	533, 57, 1075, 1076, 1874, 532, 1118, 531, 530, 529,
	117, 514, 117, 185, 1868, 1869, 1290, 146, 1283, 1419,
	1868, 1869, 1874, 513, 1110, 139, 1078, 118, 59, 185,
	60, 1098, 140, 512, 906, 511, 911, 1551, 1548, 185,
	510, 439, 417, 410, 145, 409, 168, 167, 1783, 166,
	1077, 478, 165, 1728, 93, 164, 931, 931, 1104, 163,
	162, 161, 160, 1083, 927, 159, 158, 157, 1884, 156,
	790, 155, 154, 1099, 147, 607, 153, 152, 151, 150,
	149, 1218, 1565, 1563, 1391, 1001, 1884, 2634, 1561, 932,
	1113, 1104, 1559, 2632, 951, 901, 2577, 2559, 2544, 2539,
	2477, 185, 2629, 1071, 2458, 2300, 1099, 971, 2299, 2295,
	2380, 146, 1004, 2294, 1553, 1075, 1076, 2287, 2286, 139,
	1083, 2285, 2281, 1113, 2280, 791, 140, 2279, 2278, 1092,
	2392, 2272, 1874, 2248, 2149, 476, 2144, 2143, 1874, 1078,
	999, 2142, 2085, 1885, 1999, 2003, 38, 117, 1149, 1954,
	791, 1950, 1920, 145, 1917, 791, 1868, 1869, 1905, 41,
	1111, 1885, 1896, 1077, 1867, 1864, 1863, 1861, 1114, 1848,
	1088, 1086, 1087, 1079, 1080, 1081, 1082, 1084, 1085, 1847,
	1832, 1655, 1071, 147, 1098, 475, 1142, 1523, 1133, 1301,
	1070, 986, 983, 1111, 1547, 763, 1089, 1090, 1096, 1095,
	1091, 1114, 1054, 1088, 1086, 1087, 1079, 1080, 1081, 1082,
	1084, 1085, 1050, 2654, 477, 1216, 2639, 1760, 1763, 894,
	146, 53, 1215, 479, 54, 1868, 1869, 2619, 139, 476,
	1002, 2618, 1268, 1083, 2101, 140, 899, 1055, 2549, 2548,
	38, 1877, 1878, 1870, 1871, 1872, 1873, 1875, 1876, 2547,
	2650, 2514, 2043, 41, 791, 56, 117, 607, 2506, 1099,
	1878, 1870, 1871, 1872, 1873, 1875, 1876, 2505, 185, 1056,
	185, 2379, 1057, 595, 1874, 594, 2496, 2494, 2470, 475,
	1386, 1797, 2469, 1517, 2426, 1067, 1068, 2405, 2388, 1796,
	2367, 2354, 185, 185, 1072, 2340, 2292, 1098, 1524, 2225,
	2222, 2221, 1079, 1080, 1081, 1082, 1084, 1085, 477, 2219,
	2190, 1216, 2189, 2170, 2158, 53, 2070, 479, 54, 1989,
	1981, 1967, 1966, 1145, 1952, 1921, 1895, 1857, 1856, 1853,
	1828, 1175, 1176, 1823, 1178, 1181, 1179, 1642, 1884, 1613,
	1200, 57, 1557, 1874, 1260, 1195, 1182, 1940, 1194, 56,
	1185, 1171, 1170, 1169, 1168, 1167, 1088, 1086, 1087, 1079,
	1080, 1081, 1082, 1084, 1085, 110, 1166, 118, 59, 1967,
	60, 1165, 1099, 1872, 1873, 1875, 1876, 1870, 1871, 1872,
	1873, 1875, 1876, 1164, 145, 1163, 1142, 1162, 1406, 1161,
	716, 478, 1160, 1159, 93, 1158, 607, 1157, 1156, 1155,
	1154, 1212, 1153, 1190, 1146, 1075, 1076, 1884, 790, 185,
	1134, 1133, 982, 1885, 147, 802, 1188, 974, 947, 2488,
	2386, 185, 1220, 2274, 1192, 2247, 2165, 2161, 1834, 1078,
	1643, 2041, 1868, 1869, 185, 57, 1131, 715, 1767, 1235,
	185, 2015, 185, 998, 185, 1697, 2390, 2389, 185, 1267,
	1250, 146, 2383, 1077, 2168, 2031, 1218, 1564, 1562, 139,
	1259, 118, 59, 1560, 60, 1053, 140, 1558, 1372, 1048,
	1253, 1087, 1079, 1080, 1081, 1082, 1084, 1085, 145, 900,
	1992, 1766, 1885, 1986, 2393, 478, 1980, 117, 93, 185,
	185, 1302, 1183, 1919, 1918, 2410, 790, 1184, 185, 1273,
	1807, 185, 1423, 995, 1151, 2046, 1265, 169, 147, 1985,
	1879, 1877, 1878, 1870, 1871, 1872, 1873, 1875, 1876, 1148,
	1789, 1239, 802, 1725, 1549, 2102, 1537, 185, 1174, 1358,
	1075, 1076, 185, 1839, 663, 1042, 2637, 185, 185, 2636,
	185, 2025, 185, 2177, 185, 146, 185, 2542, 1751, 445,
	420, 927, 1228, 139, 1078, 1229, 172, 185, 2518, 1287,
	140, 1761, 1289, 185, 185, 1228, 1292, 1251, 1229, 762,
	2602, 1430, 185, 2603, 2348, 1043, 1550, 1392, 1077, 1769,
	2451, 117, 1870, 1871, 1872, 1873, 1875, 1876, 1228, 743,
	2450, 1229, 791, 173, 185, 1275, 1236, 2052, 802, 803,
	1278, 745, 2448, 1373, 2447, 741, 1137, 718, 2210, 1376,
	1375, 173, 1385, 1382, 739, 2206, 2174, 736, 1233, 2173,
	2042, 1393, 1661, 1661, 1440, 1034, 996, 1852, 1551, 1548,
	110, 2201, 1660, 1851, 1230, 1850, 1234, 1299, 1849, 1810,
	1750, 1692, 983, 1300, 1688, 1359, 1360, 1230, 1083, 1683,
	1499, 1189, 444, 1459, 418, 887, 1363, 174, 2361, 1868,
	1869, 1389, 1617, 1616, 1460, 2648, 1407, 1377, 1722, 997,
	1230, 1417, 1051, 1075, 1076, 174, 1418, 1397, 1451, 1458,
	791, 1432, 2517, 1401, 1400, 1402, 581, 1403, 493, 1404,
	1586, 1405, 2214, 2215, 605, 1514, 1216, 1078, 1669, 1379,
	1416, 2431, 1996, 1255, 1259, 1553, 803, 1514, 1411, 1413,
	185, 587, 185, 1883, 1396, 185, 443, 1202, 588, 1431,
	2555, 1077, 1424, 1587, 588, 1425, 185, 595, 1279, 1441,
	595, 595, 1442, 1443, 1622, 802, 1201, 2192, 185, 1449,
	423, 1028, 185, 423, 440, 185, 175, 1075, 1076, 185,
	604, 2095, 1553, 185, 2526, 2058, 1534, 2594, 607, 185,
	2022, 790, 1074, 607, 175, 981, 1532, 1085, 185, 802,
	1352, 1078, 429, 185, 1537, 1672, 1241, 1874, 1991, 2527,
	1029, 185, 803, 1983, 1978, 1547, 1522, 1596, 1525, 185,
	1645, 1083, 1521, 1380, 1876, 1077, 1052, 1226, 1519, 1662,
	185, 2499, 185, 1686, 185, 606, 2602, 185, 170, 185,
	1007, 185, 185, 485, 185, 790, 790, 1579, 1041, 790,
	1047, 1673, 1675, 185, 1694, 1634, 170, 1237, 1553, 1172,
	444, 430, 1644, 1799, 1800, 2053, 490, 618, 172, 1648,
	2207, 1884, 486, 1680, 1620, 1619, 607, 1716, 171, 1746,
	1685, 1415, 1629, 1690, 2621, 1098, 172, 1745, 1639, 1640,
	2051, 1635, 1284, 1311, 1678, 1083, 171, 442, 2631, 1231,
	1684, 2454, 1220, 2593, 487, 2629, 2401, 1665, 2199, 1658,
	1671, 2364, 1231, 1693, 1381, 1727, 2329, 1727, 1855, 1081,
	1082, 1084, 1085, 1128, 443, 489, 110, 445, 1739, 1753,
	1638, 931, 110, 931, 606, 1231, 737, 441, 2057, 1654,
	2056, 2261, 802, 603, 2193, 747, 1885, 1242, 746, 803,
	185, 1296, 737, 2507, 1731, 2330, 1742, 2432, 1496, 1098,
	1099, 738, 1748, 1740, 737, 1741, 185, 185, 185, 1743,
	185, 1033, 951, 1749, 1752, 791, 2023, 2329, 411, 2574,
	2322, 1364, 1762, 803, 717, 419, 1361, 2627, 419, 1063,
	1764, 2320, 1772, 1812, 1311, 1311, 2324, 1780, 2614, 185,
	2059, 1670, 1386, 1383, 1774, 1513, 1015, 2508, 2592, 1179,
	424, 1182, 2573, 424, 1038, 420, 2330, 582, 420, 492,
	2601, 2022, 1176, 1175, 1395, 421, 1775, 2092, 421, 791,
	791, 2599, 1770, 791, 1099, 432, 431, 110, 1773, 2323,
	1246, 2372, 488, 1879, 1877, 1878, 1870, 1871, 1872, 1873,
	1875, 1876, 1719, 1995, 987, 660, 1245, 1062, 1086, 1087,
	1079, 1080, 1081, 1082, 1084, 1085, 2325, 977, 2326, 1494,
	1497, 1073, 2575, 1784, 980, 442, 2442, 1008, 1243, 2093,
	969, 1788, 1786, 992, 1039, 2131, 1793, 2290, 1792, 1520,
	503, 1813, 2441, 2622, 1795, 2424, 1244, 1510, 2328, 491,
	2626, 1285, 1062, 1587, 1587, 445, 1493, 2331, 2491, 1371,
	482, 2176, 438, 1508, 1058, 441, 1009, 2347, 1963, 1006,
	2344, 1959, 1720, 1274, 2346, 1061, 803, 2325, 1266, 2326,
	2576, 1262, 433, 2091, 1079, 1080, 1081, 1082, 1084, 1085,
	1040, 1948, 1137, 2535, 1410, 412, 1003, 992, 572, 1811,
	1539, 2612, 1063, 993, 1367, 2640, 1553, 994, 1369, 2328,
	895, 897, 485, 1571, 1571, 1584, 615, 904, 2331, 1604,
	1061, 1370, 607, 1608, 1609, 1611, 2374, 185, 802, 1587,
	1587, 1587, 1838, 185, 185, 490, 1437, 185, 1924, 2327,
	2132, 486, 185, 1930, 1504, 185, 2133, 1063, 2291, 1623,
	1203, 1207, 1505, 185, 1506, 1495, 903, 2613, 1511, 185,
	185, 185, 1841, 1949, 178, 185, 413, 993, 185, 1016,
	992, 994, 1210, 487, 185, 185, 185, 185, 185, 2615,
	1944, 2343, 573, 1929, 185, 2345, 790, 2228, 1636, 185,
	1062, 1937, 972, 802, 489, 2425, 607, 1969, 976, 1208,
	2327, 1968, 185, 1805, 1902, 1903, 1904, 1633, 1632, 1207,
	992, 1939, 185, 1438, 185, 1960, 185, 790, 790, 924,
	185, 501, 714, 495, 185, 618, 1928, 1925, 1984, 185,
	1210, 185, 1932, 1933, 604, 922, 1938, 2257, 185, 913,
	993, 2002, 1943, 2004, 994, 3, 1205, 2217, 1990, 1964,
	2365, 185, 790, 2422, 1953, 1955, 1994, 1208, 1061, 2007,
	2008, 2302, 2153, 1556, 2404, 2289, 185, 2213, 1979, 1507,
	1899, 2069, 1037, 1026, 1977, 1206, 1509, 1024, 1988, 1209,
	572, 1997, 2423, 1862, 474, 34, 473, 33, 1964, 1820,
	1936, 1822, 434, 574, 2038, 1765, 1699, 1691, 615, 1682,
	892, 1046, 1045, 2005, 975, 1818, 185, 2009, 1022, 2027,
	2006, 488, 803, 1032, 1900, 2024, 472, 30, 1058, 1123,
	1124, 1125, 1126, 1127, 2032, 2018, 1020, 471, 69, 1790,
	1136, 470, 68, 607, 435, 1408, 1399, 1209, 1152, 893,
	1144, 2040, 467, 22, 889, 1346, 1018, 2033, 2034, 1555,
	2035, 2036, 1587, 1587, 468, 23, 185, 2569, 2072, 2048,
	2049, 2050, 1249, 2037, 573, 436, 2532, 437, 491, 2318,
	791, 2197, 2054, 575, 2195, 2175, 2011, 803, 2047, 2060,
	466, 28, 2062, 923, 2013, 1012, 1815, 1723, 500, 920,
	494, 1717, 1345, 1715, 773, 792, 1816, 1295, 804, 921,
	1821, 791, 791, 1036, 1025, 2078, 1293, 576, 1023, 1291,
	1935, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
	1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
	2081, 1587, 2076, 34, 1288, 33, 791, 1286, 185, 1021,
	1247, 1031, 1451, 2106, 185, 2103, 1346, 1346, 1240, 2108,
	2105, 1451, 2111, 185, 185, 1198, 1198, 1019, 1238, 2110,
	2094, 2096, 2097, 1232, 2082, 30, 2137, 2087, 2088, 2089,
	735, 1826, 2171, 2465, 1803, 574, 69, 1017, 1829, 2164,
	68, 759, 2138, 1065, 2141, 465, 20, 463, 19, 1310,
	2603, 22, 2385, 1345, 1345, 1845, 1846, 2151, 2384, 2136,
	110, 760, 185, 23, 185, 2187, 2157, 2156, 2154, 464,
	18, 1817, 185, 1390, 2212, 790, 1011, 2186, 1819, 2244,
	919, 2467, 2202, 2172, 2223, 1677, 2236, 1695, 2208, 28,
	185, 185, 1687, 2220, 2211, 1311, 2179, 2160, 455, 15,
	1804, 2230, 2238, 1681, 1791, 1894, 2501, 185, 2337, 2169,
	2200, 1010, 1604, 1604, 1604, 575, 185, 1907, 802, 185,
	185, 1066, 1348, 456, 16, 802, 1661, 2218, 462, 51,
	1421, 1422, 454, 50, 1311, 1676, 2224, 480, 2479, 761,
	2196, 2231, 2198, 2453, 2234, 461, 12, 2188, 2240, 576,
	1310, 1310, 2239, 740, 742, 2232, 2245, 460, 44, 2233,
	2203, 2303, 185, 453, 45, 2268, 2203, 1069, 1661, 1689,
	2263, 1679, 2203, 2258, 2531, 459, 7, 1674, 1075, 1076,
	2264, 2370, 2229, 1730, 458, 6, 1718, 1311, 1714, 1621,
	1928, 1362, 1303, 2610, 20, 2625, 19, 1075, 1076, 502,
	1868, 1869, 1078, 792, 1075, 1076, 1777, 1776, 2416, 2308,
	2246, 2150, 2098, 1777, 2044, 1945, 185, 1914, 18, 185,
	1778, 1618, 1615, 1348, 1348, 1614, 1077, 1545, 792, 802,
	185, 185, 1139, 792, 185, 185, 185, 2288, 2306, 457,
	36, 2276, 452, 35, 2090, 1077, 1149, 15, 1147, 1044,
	2313, 185, 1311, 1035, 618, 618, 185, 1030, 185, 791,
	185, 185, 185, 1027, 2305, 2312, 1013, 185, 790, 2338,
	2342, 802, 16, 979, 790, 1365, 580, 51, 2341, 2309,
	2307, 50, 185, 185, 2310, 2430, 2317, 2187, 1311, 1311,
	790, 483, 1398, 1014, 12, 1941, 1641, 1311, 1311, 2186,
	2525, 2368, 803, 2282, 1854, 2484, 44, 2360, 2366, 803,
	2357, 2400, 45, 1554, 2371, 2304, 2376, 2187, 1150, 1434,
	48, 1439, 2184, 2187, 7, 637, 2359, 1446, 2319, 2186,
	1311, 2178, 792, 6, 1709, 2186, 2369, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 2188,
	1498, 2394, 1500, 1501, 1502, 1503, 2382, 2377, 1708, 185,
	805, 185, 1374, 802, 185, 659, 2381, 2406, 36, 1526,
	1587, 35, 185, 1570, 1452, 734, 1136, 2375, 802, 2188,
	661, 1308, 662, 1309, 1180, 2188, 649, 1306, 948, 1734,
	1378, 2413, 1518, 803, 1535, 1566, 1567, 1837, 1143, 1583,
	2145, 1595, 1597, 1602, 1605, 1606, 1607, 629, 641, 2418,
	640, 1587, 2187, 185, 1533, 1259, 790, 973, 2420, 628,
	185, 481, 2434, 1946, 2186, 2436, 2433, 2021, 185, 185,
	790, 790, 791, 2435, 185, 803, 2456, 2378, 791, 2466,
	2399, 482, 2463, 2452, 1436, 2187, 2415, 1794, 1433, 1347,
	2464, 185, 2017, 2476, 791, 2194, 185, 2186, 422, 1865,
	2472, 946, 2475, 185, 2471, 643, 1593, 2468, 1585, 1581,
	1049, 2444, 2473, 2474, 1129, 2205, 1735, 2495, 1000, 1311,
	2481, 2028, 1759, 2209, 1193, 1587, 1444, 2489, 185, 185,
	758, 2487, 2490, 485, 2188, 185, 2445, 2446, 757, 2459,
	2638, 1368, 2497, 790, 182, 1771, 2512, 1122, 185, 415,
	790, 790, 2510, 425, 1121, 744, 490, 2513, 2493, 446,
	1307, 2203, 486, 2462, 496, 182, 991, 2188, 504, 2515,
	2516, 509, 990, 1962, 2620, 185, 2500, 185, 2191, 528,
	185, 2541, 802, 2521, 2522, 144, 141, 803, 143, 142,
	1347, 1347, 1993, 72, 487, 32, 2537, 31, 2550, 92,
	91, 2552, 803, 2478, 90, 89, 88, 87, 2551, 86,
	85, 185, 84, 2556, 83, 489, 82, 1346, 81, 80,
	2554, 79, 78, 2553, 2538, 77, 2566, 2568, 185, 185,
	185, 76, 2187, 2567, 75, 74, 185, 2543, 2579, 2586,
	791, 2498, 524, 521, 2186, 751, 751, 2583, 2584, 2585,
	185, 2591, 2504, 415, 791, 791, 1346, 2588, 2589, 2590,
	71, 1307, 1307, 70, 1345, 2600, 2598, 613, 29, 572,
	2604, 25, 96, 24, 67, 66, 415, 415, 27, 795,
	415, 1754, 2609, 17, 2608, 182, 891, 615, 11, 21,
	792, 114, 38, 113, 2617, 2616, 2623, 804, 112, 2624,
	111, 14, 13, 1345, 109, 41, 108, 107, 106, 1346,
	802, 105, 802, 10, 2188, 9, 95, 2255, 42, 8,
	40, 614, 2642, 2643, 39, 94, 135, 791, 2649, 132,
	134, 1755, 488, 2655, 791, 791, 1203, 2658, 2656, 2657,
	131, 1311, 133, 2664, 2662, 2663, 103, 2666, 137, 136,
	129, 127, 128, 573, 130, 126, 1345, 125, 138, 102,
	1756, 1310, 101, 1824, 1825, 2633, 803, 2635, 100, 479,
	99, 1808, 1809, 98, 1346, 5, 2, 1814, 792, 1,
	0, 0, 0, 0, 0, 0, 633, 0, 0, 491,
	0, 0, 0, 0, 0, 1207, 1827, 1311, 0, 0,
	1310, 56, 0, 0, 804, 0, 0, 0, 0, 1833,
	1346, 1346, 0, 0, 0, 1840, 1210, 0, 1844, 1346,
	1346, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	414, 0, 1205, 0, 1348, 1858, 0, 2412, 0, 1891,
	1892, 1893, 0, 1208, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 1310, 1311, 0, 0, 1345, 1345, 0,
	0, 1206, 0, 0, 574, 0, 1345, 1345, 0, 1136,
	0, 0, 0, 1348, 2438, 0, 1602, 1602, 1602, 0,
	804, 0, 0, 0, 0, 0, 0, 57, 2449, 0,
	0, 0, 0, 0, 803, 0, 803, 0, 0, 1345,
	0, 0, 0, 1198, 0, 0, 0, 0, 0, 1931,
	0, 0, 0, 118, 59, 0, 60, 0, 1310, 0,
	0, 0, 0, 1209, 0, 528, 1348, 528, 0, 914,
	145, 0, 917, 0, 768, 0, 0, 478, 415, 0,
	93, 0, 612, 0, 575, 0, 0, 528, 528, 415,
	939, 0, 0, 0, 1310, 1310, 0, 777, 781, 0,
	147, 799, 0, 1310, 1310, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 576, 0,
	0, 0, 0, 0, 528, 0, 0, 0, 0, 0,
	0, 1348, 0, 0, 0, 0, 1310, 146, 528, 0,
	0, 0, 0, 2019, 0, 139, 0, 0, 0, 0,
	0, 0, 140, 2528, 978, 0, 0, 804, 0, 0,
	0, 1346, 0, 0, 528, 0, 0, 1348, 1348, 0,
	0, 0, 0, 117, 0, 0, 1348, 1348, 0, 2545,
	2546, 0, 0, 792, 618, 618, 0, 0, 0, 0,
	0, 804, 0, 0, 0, 0, 0, 618, 0, 0,
	0, 0, 2067, 2068, 0, 0, 0, 0, 1345, 1348,
	0, 0, 0, 0, 2061, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 0, 2065, 415, 0, 2066, 0,
	0, 0, 0, 0, 0, 0, 0, 792, 792, 0,
	2071, 792, 0, 0, 0, 0, 0, 0, 0, 2079,
	0, 0, 0, 0, 0, 0, 0, 2083, 0, 0,
	1931, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120,
	2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130,
	2107, 2134, 0, 0, 2109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	449, 0, 0, 0, 0, 1310, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2139, 2140, 0,
	0, 1347, 476, 0, 0, 0, 2146, 2147, 2148, 0,
	0, 0, 0, 38, 804, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 0, 0, 0, 2159, 0, 0, 0, 0, 781,
	1347, 0, 0, 0, 0, 0, 0, 0, 1211, 0,
	799, 0, 475, 0, 0, 0, 0, 0, 1348, 0,
	0, 0, 0, 1346, 2180, 476, 0, 0, 0, 0,
	638, 64, 1307, 509, 0, 751, 38, 0, 0, 0,
	0, 477, 0, 0, 0, 0, 0, 0, 53, 41,
	479, 54, 0, 1347, 0, 0, 0, 415, 415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 1307, 0, 0, 0, 475, 0, 0, 0, 1346,
	1198, 0, 56, 0, 0, 64, 0, 0, 0, 2241,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 477, 0, 0, 0, 0, 0,
	0, 53, 0, 479, 54, 0, 0, 0, 1347, 0,
	0, 0, 0, 0, 1307, 0, 1345, 2267, 0, 0,
	0, 2270, 2271, 0, 0, 2273, 1346, 0, 0, 0,
	0, 596, 2275, 0, 2277, 56, 0, 781, 608, 0,
	0, 0, 0, 0, 1347, 1347, 0, 0, 0, 0,
	2284, 0, 0, 1347, 1347, 0, 0, 1310, 57, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 769, 64,
	0, 0, 0, 1345, 0, 0, 415, 0, 0, 1307,
	0, 0, 0, 2293, 118, 59, 1347, 60, 0, 1272,
	0, 0, 0, 0, 0, 415, 0, 415, 0, 415,
	804, 145, 0, 1280, 0, 0, 0, 0, 478, 0,
	0, 93, 0, 1310, 0, 1307, 1307, 0, 0, 0,
	0, 57, 0, 0, 1307, 1307, 0, 0, 0, 0,
	1348, 147, 0, 2339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 528, 182, 0, 118, 59, 0,
	60, 0, 0, 182, 0, 0, 528, 1307, 792, 0,
	0, 0, 0, 0, 145, 804, 0, 0, 146, 0,
	1310, 478, 0, 0, 93, 0, 139, 0, 0, 0,
	0, 0, 528, 140, 0, 0, 1348, 528, 0, 792,
	792, 0, 182, 528, 147, 528, 0, 528, 0, 528,
	0, 528, 0, 0, 450, 0, 0, 0, 0, 0,
	2403, 0, 1409, 2395, 2396, 0, 0, 0, 528, 528,
	0, 0, 0, 0, 792, 0, 0, 415, 768, 1223,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 1348, 2408, 0, 140, 0, 0, 528,
	2411, 2427, 0, 0, 0, 1347, 0, 0, 0, 1868,
	1869, 0, 1886, 1887, 1888, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 2266, 0, 1868, 1869,
	0, 1886, 1887, 1888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2443, 2265, 0, 1868, 1869, 0,
	1886, 1887, 1888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1883, 2074, 1075, 1076, 0, 0, 0,
	0, 0, 0, 0, 0, 2480, 1307, 0, 0, 0,
	0, 0, 1883, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1883, 0, 0, 0, 0, 0, 1258, 0, 0,
	0, 0, 0, 1077, 0, 509, 0, 751, 0, 1097,
	891, 608, 0, 0, 2492, 0, 781, 1874, 1277, 0,
	1277, 415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1653, 0, 0, 1874, 415, 0, 0,
	415, 0, 0, 0, 1666, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 415, 1874, 1889, 0, 0, 0,
	0, 0, 0, 415, 1100, 1101, 1102, 1103, 1698, 0,
	0, 0, 0, 1083, 0, 1889, 1705, 0, 0, 0,
	0, 1884, 0, 0, 891, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1889, 415, 0, 1738, 0, 528,
	1884, 0, 528, 0, 528, 0, 415, 415, 0, 1744,
	0, 0, 0, 0, 2565, 2565, 0, 1347, 1666, 1884,
	0, 0, 0, 0, 0, 0, 0, 792, 0, 0,
	2580, 0, 0, 0, 0, 0, 0, 1098, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	2565, 0, 0, 0, 0, 0, 1885, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	804, 596, 0, 1347, 0, 1885, 0, 804, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1307, 0,
	0, 1132, 0, 1135, 1885, 0, 0, 1104, 2565, 0,
	1140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 1782, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2646, 0, 0,
	1347, 415, 415, 415, 0, 415, 0, 0, 2646, 0,
	0, 2646, 2646, 0, 1307, 0, 1880, 1881, 1882, 0,
	0, 0, 0, 1879, 1877, 1878, 1870, 1871, 1872, 1873,
	1875, 1876, 0, 0, 415, 1880, 1881, 1882, 0, 0,
	0, 0, 1879, 1877, 1878, 1870, 1871, 1872, 1873, 1875,
	1876, 804, 0, 0, 1880, 1881, 1882, 0, 0, 0,
	0, 1879, 1877, 1878, 1870, 1871, 1872, 1873, 1875, 1876,
	0, 1307, 768, 0, 0, 0, 0, 0, 0, 1088,
	1086, 1087, 1079, 1080, 1081, 1082, 1084, 1085, 768, 0,
	792, 1656, 0, 804, 0, 0, 792, 64, 0, 781,
	0, 0, 1219, 0, 0, 781, 0, 0, 0, 0,
	0, 0, 792, 0, 799, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1736, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 799, 799, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 804, 0, 0, 0, 0,
	0, 0, 415, 0, 0, 0, 0, 0, 415, 415,
	804, 0, 415, 0, 0, 0, 0, 1653, 0, 0,
	1653, 0, 0, 0, 0, 0, 0, 0, 1951, 0,
	0, 0, 0, 0, 415, 1957, 1958, 0, 0, 0,
	1666, 0, 0, 1965, 0, 0, 0, 0, 792, 1970,
	1971, 1973, 1975, 1976, 0, 0, 0, 0, 0, 415,
	0, 0, 792, 792, 1987, 0, 0, 0, 0, 0,
	0, 0, 1785, 799, 1787, 0, 781, 415, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1272, 0, 1272,
	0, 528, 0, 1868, 1869, 415, 1886, 1887, 1888, 2016,
	0, 0, 0, 0, 415, 1806, 2026, 0, 0, 0,
	2073, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1868, 1869, 1782, 1886, 1887, 1888,
	0, 0, 0, 0, 0, 792, 0, 0, 0, 0,
	0, 1782, 792, 792, 0, 0, 0, 1883, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 1075,
	1076, 0, 1105, 1106, 1107, 1115, 1116, 1117, 0, 0,
	0, 0, 1093, 0, 804, 0, 1108, 0, 1883, 0,
	0, 415, 0, 1078, 0, 596, 1119, 0, 596, 596,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1077, 0, 0,
	0, 1874, 0, 1097, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1516, 1874, 0, 0, 0, 0, 0, 0, 0,
	1889, 0, 0, 0, 608, 0, 0, 0, 0, 1135,
	0, 0, 0, 1890, 0, 0, 0, 0, 1100, 1101,
	1102, 1103, 0, 0, 0, 1884, 0, 1083, 0, 0,
	0, 1889, 0, 768, 0, 0, 0, 0, 0, 768,
	768, 0, 0, 768, 0, 0, 0, 1112, 1120, 0,
	0, 0, 804, 0, 804, 0, 1884, 0, 0, 0,
	0, 0, 0, 415, 0, 1956, 1118, 0, 0, 1653,
	0, 0, 0, 0, 0, 0, 769, 0, 891, 1653,
	0, 0, 0, 0, 1110, 0, 0, 0, 0, 0,
	1982, 1098, 1219, 2183, 0, 0, 0, 0, 0, 0,
	1885, 0, 0, 0, 0, 64, 2204, 0, 1998, 0,
	0, 0, 2204, 0, 0, 64, 0, 1109, 2204, 0,
	0, 0, 0, 0, 0, 0, 2010, 1666, 0, 1272,
	0, 1885, 0, 0, 0, 1258, 0, 2226, 0, 0,
	0, 0, 0, 0, 1258, 0, 0, 64, 0, 64,
	0, 1104, 0, 0, 0, 415, 415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 64, 0,
	0, 0, 2252, 0, 64, 0, 0, 0, 0, 0,
	0, 2254, 0, 1113, 2259, 415, 0, 0, 0, 1092,
	1880, 1881, 1882, 0, 0, 0, 0, 1879, 1877, 1878,
	1870, 1871, 1872, 1873, 1875, 1876, 0, 0, 0, 0,
	0, 0, 2063, 0, 0, 0, 0, 0, 0, 0,
	0, 1880, 1881, 1882, 0, 0, 0, 2283, 1879, 1877,
	1878, 1870, 1871, 1872, 1873, 1875, 1876, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1111, 0, 0, 1089, 1090, 1096, 1095,
	1091, 1114, 0, 1088, 1086, 1087, 1079, 1080, 1081, 1082,
	1084, 1085, 0, 0, 0, 0, 0, 0, 0, 64,
	2296, 415, 0, 0, 891, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1653, 891, 0, 0, 2315,
	2316, 1666, 0, 0, 1868, 1869, 0, 1886, 1887, 1888,
	0, 0, 0, 0, 0, 2183, 891, 0, 0, 0,
	0, 2349, 0, 2350, 0, 415, 2352, 2353, 0, 0,
	0, 0, 415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 768, 2183, 0, 891, 1705, 0,
	0, 2183, 0, 0, 0, 0, 0, 0, 1883, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1516, 0,
	1075, 1076, 0, 1105, 1106, 1107, 1115, 1116, 1117, 0,
	0, 0, 0, 1093, 0, 0, 0, 1108, 1135, 0,
	0, 0, 0, 0, 1078, 0, 0, 1119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1868, 1869, 0, 1886, 1887, 1888, 0, 0, 1077, 0,
	0, 0, 1874, 0, 1097, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 1736, 768, 0, 0,
	0, 0, 0, 0, 1666, 0, 2419, 0, 0, 2421,
	0, 0, 0, 0, 0, 0, 0, 415, 0, 0,
	2183, 1889, 1135, 0, 1883, 0, 2260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1100,
	1101, 1102, 1103, 0, 0, 0, 1884, 2204, 1083, 0,
	0, 0, 0, 2183, 0, 0, 0, 769, 415, 0,
	0, 0, 0, 769, 769, 891, 0, 769, 1112, 1120,
	0, 0, 0, 2252, 2252, 0, 0, 0, 0, 891,
	0, 0, 0, 0, 0, 0, 0, 1118, 1874, 0,
	0, 0, 0, 0, 0, 0, 2486, 0, 0, 0,
	0, 1653, 0, 0, 0, 1110, 0, 0, 1272, 0,
	64, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	64, 1885, 768, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2502, 2503, 0, 0, 0, 1109, 0,
	415, 0, 0, 0, 0, 64, 0, 0, 0, 64,
	0, 0, 1884, 2520, 0, 0, 0, 0, 0, 608,
	0, 0, 0, 0, 0, 0, 2351, 0, 0, 0,
	0, 0, 1104, 2356, 0, 0, 0, 0, 0, 0,
	2536, 0, 891, 0, 0, 415, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2183, 0, 0, 0, 1113, 0, 0, 0, 0, 0,
	1092, 1880, 1881, 1882, 0, 0, 2486, 0, 1879, 1877,
	1878, 1870, 1871, 1872, 1873, 1875, 1876, 1885, 0, 0,
	0, 0, 0, 891, 891, 891, 0, 0, 0, 0,
	0, 415, 0, 0, 0, 1075, 1076, 0, 1105, 1106,
	1107, 1115, 1116, 1117, 0, 2597, 0, 0, 1093, 0,
	0, 0, 1108, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 1119, 0, 1111, 0, 0, 1089, 1090, 1096,
	1095, 1091, 1114, 0, 1088, 1086, 1087, 1079, 1080, 1081,
	1082, 1084, 1085, 1077, 0, 0, 0, 0, 2428, 1097,
	0, 1910, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 37, 0, 0, 0, 0, 0, 1880, 1881, 1882,
	0, 0, 38, 120, 1879, 1877, 1878, 1870, 1871, 1872,
	1873, 1875, 1876, 0, 0, 41, 0, 0, 0, 2461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 64, 0, 1100, 1101, 1102, 1103, 0, 43,
	0, 46, 0, 1083, 0, 0, 0, 0, 769, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 47, 1112, 1120, 0, 49, 0, 0, 0,
	52, 0, 0, 123, 0, 0, 0, 53, 0, 104,
	54, 0, 1118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1110, 2509, 55, 0, 0, 0, 0, 1098, 0, 0,
	0, 56, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1109, 0, 0, 0, 0, 0, 0,
	0, 769, 0, 0, 0, 0, 2540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 1113,
	0, 0, 1736, 58, 0, 1092, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 65, 118, 59, 0, 60, 0, 61, 0,
	124, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	145, 0, 0, 0, 0, 0, 0, 73, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 769, 0, 0, 1111,
	147, 0, 1089, 1090, 1096, 1095, 1091, 1114, 0, 1088,
	1086, 1087, 1079, 1080, 1081, 1082, 1084, 1085, 0, 0,
	97, 0, 0, 0, 0, 0, 1909, 0, 0, 119,
	0, 0, 0, 0, 0, 0, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 4, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 801, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 806, 0, 189, 807, 808,
	809, 810, 350, 811, 812, 813, 814, 190, 191, 192,
	351, 352, 353, 354, 193, 355, 356, 815, 194, 357,
	358, 195, 196, 816, 817, 359, 360, 361, 818, 197,
	362, 819, 793, 820, 198, 199, 200, 0, 202, 203,
	204, 201, 821, 205, 0, 206, 207, 822, 719, 208,
	209, 210, 823, 824, 826, 825, 827, 828, 829, 211,
	212, 416, 213, 363, 214, 364, 365, 830, 215, 831,
	216, 832, 217, 833, 834, 218, 219, 835, 220, 836,
	0, 837, 366, 221, 223, 222, 224, 367, 368, 838,
	720, 839, 0, 0, 0, 0, 225, 226, 369, 370,
	371, 64, 227, 840, 228, 841, 842, 721, 843, 229,
	372, 844, 373, 845, 1516, 230, 231, 232, 233, 374,
	375, 723, 846, 376, 237, 847, 234, 848, 722, 235,
	377, 236, 378, 379, 380, 381, 382, 849, 383, 850,
	724, 238, 239, 240, 725, 384, 385, 241, 242, 243,
	851, 245, 244, 852, 386, 726, 246, 247, 727, 853,
	248, 249, 854, 855, 250, 0, 251, 728, 252, 253,
	255, 387, 254, 729, 256, 257, 259, 258, 856, 857,
	858, 388, 260, 389, 261, 262, 859, 263, 860, 861,
	264, 862, 863, 265, 390, 730, 266, 731, 391, 267,
	268, 269, 270, 271, 864, 272, 392, 273, 393, 274,
	865, 275, 276, 277, 278, 279, 394, 280, 281, 866,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 867, 294, 732, 295, 296, 395, 297,
	0, 301, 302, 303, 304, 305, 868, 307, 396, 306,
	308, 309, 869, 310, 298, 299, 311, 733, 312, 397,
	398, 313, 870, 0, 320, 314, 315, 300, 316, 319,
	399, 317, 318, 400, 871, 321, 872, 322, 323, 324,
	325, 326, 327, 328, 329, 873, 401, 402, 403, 874,
	875, 330, 331, 404, 405, 876, 332, 333, 334, 335,
	877, 878, 336, 337, 338, 339, 879, 340, 880, 406,
	341, 342, 343, 407, 408, 881, 882, 344, 883, 884,
	885, 886, 345, 346, 347, 348, 349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 801, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1646, 0, 0,
	0, 0, 0, 187, 188, 806, 1647, 189, 807, 808,
	809, 810, 350, 811, 812, 813, 814, 190, 191, 192,
	351, 352, 353, 354, 193, 355, 356, 815, 194, 357,
	358, 195, 196, 816, 817, 359, 360, 361, 818, 197,
	362, 819, 793, 820, 198, 199, 200, 0, 202, 203,
	204, 201, 821, 205, 0, 206, 207, 822, 719, 208,
	209, 210, 823, 824, 826, 825, 827, 828, 829, 211,
	212, 416, 213, 363, 214, 364, 365, 830, 215, 831,
	216, 832, 217, 833, 834, 218, 219, 835, 220, 836,
	0, 837, 366, 221, 223, 222, 224, 367, 368, 838,
	720, 839, 0, 0, 0, 0, 225, 226, 369, 370,
	371, 0, 227, 840, 228, 841, 842, 721, 843, 229,
	372, 844, 373, 845, 0, 230, 231, 232, 233, 374,
	375, 723, 846, 376, 237, 847, 234, 848, 722, 235,
	377, 236, 378, 379, 380, 381, 382, 849, 383, 850,
	724, 238, 239, 240, 725, 384, 385, 241, 242, 243,
	851, 245, 244, 852, 386, 726, 246, 247, 727, 853,
	248, 249, 854, 855, 250, 0, 251, 728, 252, 253,
	255, 387, 254, 729, 256, 257, 259, 258, 856, 857,
	858, 388, 260, 389, 261, 262, 859, 263, 860, 861,
	264, 862, 863, 265, 390, 730, 266, 731, 391, 267,
	268, 269, 270, 271, 864, 272, 392, 273, 393, 274,
	865, 275, 276, 277, 278, 279, 394, 280, 281, 866,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 867, 294, 732, 295, 296, 395, 297,
	0, 301, 302, 303, 304, 305, 868, 307, 396, 306,
	308, 309, 869, 310, 298, 299, 311, 733, 312, 397,
	398, 313, 870, 0, 320, 314, 315, 300, 316, 319,
	399, 317, 318, 400, 871, 321, 872, 322, 323, 324,
	325, 326, 327, 328, 329, 873, 401, 402, 403, 874,
	875, 330, 331, 404, 405, 876, 332, 333, 334, 335,
	877, 878, 336, 337, 338, 339, 879, 340, 880, 406,
	341, 342, 343, 407, 408, 881, 882, 344, 883, 884,
	885, 886, 345, 346, 347, 348, 349, 0, 801, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 806, 2311, 189, 807,
	808, 809, 810, 350, 811, 812, 813, 814, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 815, 194,
	357, 358, 195, 196, 816, 817, 359, 360, 361, 818,
	197, 362, 819, 793, 820, 198, 199, 200, 0, 202,
	203, 204, 201, 821, 205, 0, 206, 207, 822, 719,
	208, 209, 210, 823, 824, 826, 825, 827, 828, 829,
	211, 212, 416, 213, 363, 214, 364, 365, 830, 215,
	831, 216, 832, 217, 833, 834, 218, 219, 835, 220,
	836, 0, 837, 366, 221, 223, 222, 224, 367, 368,
	838, 720, 839, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 840, 228, 841, 842, 721, 843,
	229, 372, 844, 373, 845, 0, 230, 231, 232, 233,
	374, 375, 723, 846, 376, 237, 847, 234, 848, 722,
	235, 377, 236, 378, 379, 380, 381, 382, 849, 383,
	850, 724, 238, 239, 240, 725, 384, 385, 241, 242,
	243, 851, 245, 244, 852, 386, 726, 246, 247, 727,
	853, 248, 249, 854, 855, 250, 0, 251, 728, 252,
	253, 255, 387, 254, 729, 256, 257, 259, 258, 856,
	857, 858, 388, 260, 389, 261, 262, 859, 263, 860,
	861, 264, 862, 863, 265, 390, 730, 266, 731, 391,
	267, 268, 269, 270, 271, 864, 272, 392, 273, 393,
	274, 865, 275, 276, 277, 278, 279, 394, 280, 281,
	866, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 867, 294, 732, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 868, 307, 396,
	306, 308, 309, 869, 310, 298, 299, 311, 733, 312,
	397, 398, 313, 870, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 871, 321, 872, 322, 323,
	324, 325, 326, 327, 328, 329, 873, 401, 402, 403,
	874, 875, 330, 331, 404, 405, 876, 332, 333, 334,
	335, 877, 878, 336, 337, 338, 339, 879, 340, 880,
	406, 341, 342, 343, 407, 408, 881, 882, 344, 883,
	884, 885, 886, 345, 346, 347, 348, 349, 801, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1254, 187, 188, 806, 0, 189, 807,
	808, 809, 810, 350, 811, 812, 813, 814, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 815, 194,
	357, 358, 195, 196, 816, 817, 359, 360, 361, 818,
	197, 362, 819, 793, 820, 198, 199, 200, 0, 202,
	203, 204, 201, 821, 205, 0, 206, 207, 822, 719,
	208, 209, 210, 823, 824, 826, 825, 827, 828, 829,
	211, 212, 416, 213, 363, 214, 364, 365, 830, 215,
	831, 216, 832, 217, 833, 834, 218, 219, 835, 220,
	836, 0, 837, 366, 221, 223, 222, 224, 367, 368,
	838, 720, 839, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 840, 228, 841, 842, 721, 843,
	229, 372, 844, 373, 845, 0, 230, 231, 232, 233,
	374, 375, 723, 846, 376, 237, 847, 234, 848, 722,
	235, 377, 236, 378, 379, 380, 381, 382, 849, 383,
	850, 724, 238, 239, 240, 725, 384, 385, 241, 242,
	243, 851, 245, 244, 852, 386, 726, 246, 247, 727,
	853, 248, 249, 854, 855, 250, 0, 251, 728, 252,
	253, 255, 387, 254, 729, 256, 257, 259, 258, 856,
	857, 858, 388, 260, 389, 261, 262, 859, 263, 860,
	861, 264, 862, 863, 265, 390, 730, 266, 731, 391,
	267, 268, 269, 270, 271, 864, 272, 392, 273, 393,
	274, 865, 275, 276, 277, 278, 279, 394, 280, 281,
	866, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 867, 294, 732, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 868, 307, 396,
	306, 308, 309, 869, 310, 298, 299, 311, 733, 312,
	397, 398, 313, 870, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 871, 321, 872, 322, 323,
	324, 325, 326, 327, 328, 329, 873, 401, 402, 403,
	874, 875, 330, 331, 404, 405, 876, 332, 333, 334,
	335, 877, 878, 336, 337, 338, 339, 879, 340, 880,
	406, 341, 342, 343, 407, 408, 881, 882, 344, 883,
	884, 885, 886, 345, 346, 347, 348, 349, 1544, 0,
	657, 646, 647, 644, 645, 636, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 1541, 0,
	189, 0, 0, 0, 0, 674, 639, 0, 0, 0,
	190, 191, 192, 351, 689, 353, 690, 193, 691, 692,
	0, 194, 357, 358, 195, 196, 642, 673, 693, 694,
	361, 0, 197, 685, 0, 665, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 719, 208, 209, 210, 0, 666, 667, 669, 0,
	668, 670, 211, 212, 416, 213, 695, 214, 696, 697,
	627, 215, 0, 216, 0, 217, 1542, 0, 688, 219,
	0, 220, 0, 0, 0, 630, 221, 223, 222, 224,
	675, 676, 653, 720, 0, 0, 0, 0, 0, 225,
	226, 698, 699, 700, 0, 227, 0, 228, 0, 0,
	721, 0, 229, 686, 0, 373, 0, 0, 230, 231,
	232, 233, 682, 684, 723, 0, 376, 237, 0, 234,
	0, 722, 235, 701, 236, 702, 703, 704, 705, 706,
	0, 664, 0, 724, 238, 239, 240, 725, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 687, 726, 246,
	247, 727, 0, 248, 249, 0, 0, 250, 0, 251,
	728, 252, 253, 255, 387, 254, 729, 256, 257, 259,
	258, 624, 0, 654, 683, 260, 707, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 730, 266,
	731, 677, 267, 268, 269, 270, 271, 0, 272, 678,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 708,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 732, 295,
	296, 631, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 671, 310, 298, 299, 311,
	733, 312, 709, 398, 313, 0, 0, 320, 314, 315,
	300, 316, 319, 710, 317, 318, 679, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	711, 712, 0, 0, 330, 331, 680, 681, 652, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 672,
	340, 0, 406, 341, 342, 343, 407, 713, 1540, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	625, 0, 0, 0, 0, 0, 0, 0, 623, 0,
	0, 0, 0, 621, 622, 1543, 0, 0, 0, 0,
	0, 0, 632, 1538, 0, 0, 0, 609, 635, 657,
	646, 647, 644, 645, 636, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 0, 0, 189,
	0, 0, 0, 0, 674, 639, 0, 0, 0, 190,
	191, 192, 351, 689, 353, 690, 193, 691, 692, 0,
	194, 357, 358, 195, 196, 642, 673, 693, 694, 361,
	0, 197, 685, 0, 665, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	719, 208, 209, 210, 0, 666, 667, 669, 0, 668,
	670, 211, 212, 416, 213, 695, 214, 696, 697, 627,
	215, 0, 216, 0, 217, 0, 0, 688, 219, 0,
	220, 0, 0, 0, 630, 221, 223, 222, 224, 675,
	676, 653, 720, 0, 0, 0, 0, 0, 225, 226,
	698, 699, 700, 0, 227, 0, 228, 0, 0, 721,
	0, 229, 686, 0, 373, 0, 0, 230, 231, 232,
	233, 682, 684, 723, 0, 376, 237, 0, 234, 0,
	722, 235, 701, 236, 702, 703, 704, 705, 706, 0,
	664, 0, 724, 238, 239, 240, 725, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 687, 726, 246, 247,
	727, 0, 248, 249, 0, 0, 250, 0, 251, 728,
	252, 253, 255, 387, 254, 729, 256, 257, 259, 258,
	624, 0, 654, 683, 260, 707, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 730, 266, 731,
	677, 267, 268, 269, 270, 271, 0, 272, 678, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 708, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 732, 295, 296,
	631, 297, 0, 301, 302, 303, 304, 305, 145, 307,
	396, 306, 308, 309, 671, 310, 298, 299, 311, 733,
	312, 709, 398, 313, 0, 0, 320, 314, 315, 300,
	316, 319, 710, 317, 318, 679, 0, 321, 147, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 711,
	712, 0, 0, 330, 331, 680, 681, 652, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 672, 340,
	0, 406, 341, 342, 343, 952, 713, 0, 0, 344,
	0, 0, 0, 139, 345, 346, 347, 348, 349, 625,
	140, 0, 0, 0, 0, 0, 0, 623, 0, 0,
	0, 0, 621, 622, 657, 646, 647, 644, 645, 636,
	0, 1138, 0, 0, 0, 0, 0, 635, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 674,
	639, 0, 0, 0, 190, 191, 192, 351, 689, 353,
	690, 193, 691, 692, 0, 194, 357, 358, 195, 196,
	642, 673, 693, 694, 361, 0, 197, 685, 0, 665,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 719, 208, 209, 210, 0,
	666, 667, 669, 0, 668, 670, 211, 212, 416, 213,
	695, 214, 696, 697, 627, 215, 0, 216, 0, 217,
	0, 0, 688, 219, 0, 220, 0, 0, 0, 630,
	221, 223, 222, 224, 675, 676, 653, 720, 0, 0,
	0, 0, 0, 225, 226, 698, 699, 700, 0, 227,
	0, 228, 0, 0, 721, 0, 229, 686, 0, 373,
	0, 0, 230, 231, 232, 233, 682, 684, 723, 0,
	376, 237, 0, 234, 0, 722, 235, 701, 236, 702,
	703, 704, 705, 706, 0, 664, 0, 724, 238, 239,
	240, 725, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 687, 726, 246, 247, 727, 0, 248, 249, 0,
	0, 250, 0, 251, 728, 252, 253, 255, 387, 254,
	729, 256, 257, 259, 258, 624, 0, 654, 683, 260,
	707, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 730, 266, 731, 677, 267, 268, 269, 270,
	271, 0, 272, 678, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 708, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 732, 295, 296, 631, 297, 0, 301, 302,
	303, 304, 305, 145, 307, 396, 306, 308, 309, 671,
	310, 298, 299, 311, 733, 312, 709, 398, 313, 0,
	0, 320, 314, 315, 300, 316, 319, 710, 317, 318,
	679, 0, 321, 147, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 711, 712, 0, 0, 330, 331,
	680, 681, 652, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 672, 340, 0, 406, 341, 342, 343,
	952, 713, 0, 0, 344, 0, 0, 0, 139, 345,
	346, 347, 348, 349, 625, 140, 0, 0, 0, 0,
	0, 0, 623, 0, 0, 0, 0, 621, 622, 657,
	646, 647, 644, 645, 636, 0, 1138, 0, 0, 0,
	0, 0, 635, 0, 0, 187, 188, 0, 0, 189,
	0, 0, 0, 0, 674, 639, 0, 0, 0, 190,
	191, 192, 351, 689, 353, 690, 193, 691, 692, 1598,
	194, 357, 358, 195, 196, 642, 673, 693, 694, 361,
	0, 197, 685, 0, 665, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	719, 208, 209, 210, 0, 666, 667, 669, 0, 668,
	670, 211, 212, 416, 213, 695, 214, 696, 697, 627,
	215, 0, 216, 0, 217, 0, 0, 688, 219, 0,
	220, 0, 0, 0, 630, 221, 223, 222, 224, 675,
	676, 653, 720, 0, 0, 0, 0, 0, 225, 226,
	698, 699, 700, 0, 227, 0, 228, 0, 1603, 721,
	0, 229, 686, 0, 373, 0, 0, 230, 231, 232,
	233, 682, 684, 723, 0, 376, 237, 0, 234, 0,
	722, 235, 701, 236, 702, 703, 704, 705, 706, 0,
	664, 0, 724, 238, 239, 240, 725, 384, 385, 241,
	242, 243, 0, 245, 244, 1599, 687, 726, 246, 247,
	727, 0, 248, 249, 0, 0, 250, 0, 251, 728,
	252, 253, 255, 387, 254, 729, 256, 257, 259, 258,
	624, 0, 654, 683, 260, 707, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 730, 266, 731,
	677, 267, 268, 269, 270, 271, 0, 272, 678, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 708, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 732, 295, 296,
	631, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 671, 310, 298, 299, 311, 733,
	312, 709, 398, 313, 0, 0, 320, 314, 315, 300,
	316, 319, 710, 317, 318, 679, 0, 321, 0, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 711,
	712, 0, 1600, 330, 331, 680, 681, 652, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 672, 340,
	0, 406, 341, 342, 343, 407, 713, 0, 0, 344,
	0, 0, 0, 0, 345, 346, 347, 348, 349, 625,
	657, 646, 647, 644, 645, 636, 0, 623, 0, 0,
	0, 0, 621, 622, 0, 0, 187, 188, 0, 0,
	189, 632, 0, 0, 0, 674, 639, 635, 0, 0,
	190, 191, 192, 351, 689, 353, 690, 193, 691, 692,
	0, 194, 357, 358, 195, 196, 642, 673, 693, 694,
	361, 0, 197, 685, 0, 665, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 719, 208, 209, 210, 0, 666, 667, 669, 0,
	668, 670, 211, 212, 416, 213, 695, 214, 696, 697,
	627, 215, 0, 216, 0, 217, 0, 0, 688, 219,
	0, 220, 0, 0, 0, 630, 221, 223, 222, 224,
	675, 676, 653, 720, 0, 0, 0, 0, 0, 225,
	226, 698, 699, 700, 0, 227, 0, 228, 0, 0,
	721, 0, 229, 686, 0, 373, 0, 0, 230, 231,
	232, 233, 682, 684, 723, 0, 376, 237, 0, 234,
	0, 722, 235, 701, 236, 702, 703, 704, 705, 706,
	0, 664, 0, 724, 238, 239, 240, 725, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 687, 726, 246,
	247, 727, 0, 248, 249, 0, 0, 250, 0, 251,
	728, 252, 253, 255, 387, 254, 729, 256, 257, 259,
	258, 624, 2235, 654, 683, 260, 707, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 730, 266,
	731, 677, 267, 268, 269, 270, 271, 0, 272, 678,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 708,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 732, 295,
	296, 631, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 671, 310, 298, 299, 311,
	733, 312, 709, 398, 313, 0, 0, 320, 314, 315,
	300, 316, 319, 710, 317, 318, 679, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	711, 712, 0, 0, 330, 331, 680, 681, 652, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 672,
	340, 0, 406, 341, 342, 343, 407, 713, 0, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	625, 657, 646, 647, 644, 645, 636, 0, 623, 0,
	0, 0, 0, 621, 622, 1199, 0, 187, 188, 0,
	0, 189, 632, 0, 0, 0, 674, 639, 635, 0,
	0, 190, 191, 192, 351, 689, 353, 690, 193, 691,
	692, 0, 194, 357, 358, 195, 196, 642, 673, 693,
	694, 361, 0, 197, 685, 0, 665, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 719, 208, 209, 210, 0, 666, 667, 669,
	0, 668, 670, 211, 212, 416, 213, 695, 214, 696,
	697, 627, 215, 0, 216, 0, 217, 0, 0, 688,
	219, 0, 220, 0, 0, 0, 630, 221, 223, 222,
	224, 675, 676, 653, 720, 0, 0, 0, 0, 0,
	225, 226, 698, 699, 700, 0, 227, 0, 228, 0,
	0, 721, 0, 229, 686, 0, 373, 0, 0, 230,
	231, 232, 233, 682, 684, 723, 0, 376, 237, 1448,
	234, 0, 722, 235, 701, 236, 702, 703, 704, 705,
	706, 0, 664, 0, 724, 238, 239, 240, 725, 384,
	385, 241, 242, 243, 0, 245, 244, 0, 687, 726,
	246, 247, 727, 0, 248, 249, 0, 0, 250, 0,
	251, 728, 252, 253, 255, 387, 254, 729, 256, 257,
	259, 258, 624, 0, 654, 683, 260, 707, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 390, 730,
	266, 731, 677, 267, 268, 269, 270, 271, 0, 272,
	678, 273, 393, 274, 1447, 275, 276, 277, 278, 279,
	708, 280, 281, 0, 282, 283, 284, 285, 286, 0,
	288, 289, 287, 290, 291, 292, 293, 0, 294, 732,
	295, 296, 631, 297, 0, 301, 302, 303, 304, 305,
	0, 307, 396, 306, 308, 309, 671, 310, 298, 299,
	311, 733, 312, 709, 398, 313, 0, 0, 320, 314,
	315, 300, 316, 319, 710, 317, 318, 679, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 711, 712, 0, 0, 330, 331, 680, 681, 652,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	672, 340, 0, 406, 341, 342, 343, 407, 713, 0,
	0, 344, 0, 0, 0, 0, 345, 346, 347, 348,
	349, 625, 0, 0, 0, 0, 0, 0, 0, 623,
	0, 0, 0, 0, 621, 622, 0, 0, 0, 0,
	0, 0, 0, 632, 0, 0, 0, 0, 617, 635,
	657, 646, 647, 644, 645, 636, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 674, 639, 0, 0, 0,
	190, 191, 192, 351, 689, 353, 690, 193, 691, 692,
	0, 194, 357, 358, 195, 196, 642, 673, 693, 694,
	361, 0, 197, 685, 0, 665, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 719, 208, 209, 210, 0, 666, 667, 669, 0,
	668, 670, 211, 212, 416, 213, 695, 214, 696, 697,
	627, 215, 0, 216, 0, 217, 0, 0, 688, 219,
	0, 220, 0, 0, 0, 630, 221, 223, 222, 224,
	675, 676, 653, 720, 0, 0, 0, 0, 0, 225,
	226, 698, 699, 700, 0, 227, 0, 228, 0, 0,
	721, 0, 229, 686, 0, 373, 0, 0, 230, 231,
	232, 233, 682, 684, 723, 0, 376, 237, 0, 234,
	0, 722, 235, 701, 236, 702, 703, 704, 705, 706,
	0, 664, 0, 724, 238, 239, 240, 725, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 687, 726, 246,
	247, 727, 0, 248, 249, 0, 0, 250, 0, 251,
	728, 252, 253, 255, 387, 254, 729, 256, 257, 259,
	258, 624, 0, 654, 683, 260, 707, 261, 262, 0,
	263, 619, 0, 264, 0, 0, 265, 390, 730, 266,
	731, 677, 267, 268, 269, 270, 271, 0, 272, 678,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 708,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 732, 295,
	296, 631, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 671, 310, 298, 299, 311,
	733, 312, 709, 398, 313, 0, 0, 320, 314, 315,
	300, 316, 319, 710, 317, 318, 679, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	711, 712, 0, 0, 330, 331, 680, 681, 652, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 672,
	340, 0, 406, 341, 342, 343, 407, 713, 0, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	625, 657, 646, 647, 644, 645, 636, 0, 623, 0,
	0, 0, 0, 621, 622, 0, 0, 187, 188, 0,
	0, 189, 632, 0, 0, 0, 674, 639, 635, 0,
	0, 190, 191, 192, 351, 689, 353, 690, 193, 691,
	692, 0, 194, 357, 358, 195, 196, 642, 673, 693,
	694, 361, 0, 197, 685, 0, 665, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 719, 208, 209, 210, 0, 666, 667, 669,
	0, 668, 670, 211, 212, 416, 213, 695, 214, 696,
	697, 627, 215, 0, 216, 0, 217, 0, 0, 688,
	219, 0, 220, 0, 0, 0, 630, 221, 223, 222,
	224, 675, 676, 653, 720, 0, 0, 0, 0, 0,
	225, 226, 698, 699, 700, 0, 227, 0, 228, 0,
	0, 721, 0, 229, 686, 0, 373, 0, 0, 230,
	231, 232, 233, 682, 684, 723, 0, 376, 237, 0,
	234, 0, 722, 235, 701, 236, 702, 703, 704, 705,
	706, 0, 664, 0, 724, 238, 239, 240, 725, 384,
	385, 241, 242, 243, 0, 245, 244, 0, 687, 726,
	246, 247, 727, 0, 248, 249, 0, 0, 250, 0,
	251, 728, 252, 253, 255, 387, 254, 729, 256, 257,
	259, 258, 624, 0, 654, 683, 260, 707, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 390, 730,
	266, 731, 677, 267, 268, 269, 270, 271, 0, 272,
	678, 273, 393, 274, 0, 275, 276, 277, 278, 279,
	708, 280, 281, 0, 282, 283, 284, 285, 286, 0,
	288, 289, 287, 290, 291, 292, 293, 0, 294, 732,
	295, 296, 631, 297, 0, 301, 302, 303, 304, 305,
	0, 307, 396, 306, 308, 309, 671, 310, 298, 299,
	311, 733, 312, 709, 398, 313, 0, 0, 320, 314,
	315, 300, 316, 319, 710, 317, 318, 679, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 711, 712, 0, 0, 330, 331, 680, 681, 652,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	672, 340, 0, 406, 341, 342, 343, 407, 713, 2086,
	0, 344, 0, 0, 0, 0, 345, 346, 347, 348,
	349, 625, 657, 646, 647, 644, 645, 636, 0, 623,
	0, 0, 0, 0, 621, 622, 0, 0, 187, 188,
	0, 0, 189, 632, 0, 0, 0, 674, 639, 635,
	0, 0, 190, 191, 192, 351, 689, 353, 690, 193,
	691, 692, 0, 194, 357, 358, 195, 196, 642, 673,
	693, 694, 361, 0, 197, 685, 0, 665, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 719, 208, 209, 210, 0, 666, 667,
	669, 0, 668, 670, 211, 212, 416, 213, 695, 214,
	696, 697, 627, 215, 0, 216, 0, 217, 0, 0,
	688, 219, 0, 220, 0, 0, 0, 630, 221, 223,
	222, 224, 675, 676, 653, 720, 0, 0, 0, 0,
	0, 225, 226, 698, 699, 700, 0, 227, 0, 228,
	0, 0, 721, 0, 229, 686, 0, 373, 0, 0,
	230, 231, 232, 233, 682, 684, 723, 0, 376, 237,
	0, 234, 0, 722, 235, 701, 236, 702, 703, 704,
	705, 706, 0, 664, 0, 724, 238, 239, 240, 725,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 687,
	726, 246, 247, 727, 0, 248, 249, 0, 0, 250,
	0, 251, 728, 252, 253, 255, 387, 254, 729, 256,
	257, 259, 258, 624, 0, 654, 683, 260, 707, 261,
	262, 0, 263, 619, 0, 264, 0, 0, 265, 390,
	730, 266, 731, 677, 267, 268, 269, 270, 271, 0,
	272, 678, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 708, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	732, 295, 296, 631, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 671, 310, 298,
	299, 311, 733, 312, 709, 398, 313, 0, 0, 320,
	314, 315, 300, 316, 319, 710, 317, 318, 679, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 711, 712, 0, 0, 330, 331, 680, 681,
	652, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 672, 340, 0, 406, 341, 342, 343, 407, 713,
	0, 0, 344, 0, 0, 0, 0, 345, 346, 347,
	348, 349, 625, 657, 646, 647, 644, 645, 636, 0,
	623, 0, 0, 0, 0, 621, 622, 0, 0, 187,
	188, 0, 0, 189, 632, 0, 0, 0, 674, 639,
	635, 0, 0, 190, 191, 192, 351, 689, 353, 690,
	193, 691, 692, 0, 194, 357, 358, 195, 196, 642,
	673, 693, 694, 361, 0, 197, 685, 0, 665, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 719, 208, 209, 210, 0, 666,
	667, 669, 0, 668, 670, 211, 212, 416, 213, 695,
	214, 696, 697, 627, 215, 0, 216, 0, 217, 0,
	0, 688, 219, 0, 220, 0, 0, 0, 630, 221,
	223, 222, 224, 675, 676, 653, 720, 0, 0, 0,
	0, 0, 225, 226, 698, 699, 700, 0, 227, 0,
	228, 0, 0, 721, 0, 229, 686, 0, 373, 0,
	0, 230, 231, 232, 233, 682, 684, 723, 0, 376,
	237, 0, 234, 0, 722, 235, 701, 236, 702, 703,
	704, 705, 706, 0, 664, 0, 724, 238, 239, 240,
	725, 384, 385, 241, 242, 243, 0, 245, 244, 0,
	687, 726, 246, 247, 727, 0, 248, 249, 0, 0,
	250, 0, 251, 728, 252, 253, 255, 387, 254, 729,
	256, 257, 259, 258, 624, 0, 654, 683, 260, 707,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	390, 730, 266, 731, 677, 267, 268, 269, 270, 271,
	0, 272, 678, 273, 393, 274, 0, 275, 276, 277,
	278, 279, 708, 280, 281, 0, 282, 283, 284, 285,
	286, 0, 288, 289, 287, 290, 291, 292, 293, 0,
	294, 732, 295, 296, 631, 297, 0, 301, 302, 303,
	304, 305, 0, 307, 396, 306, 308, 309, 671, 310,
	298, 299, 311, 733, 312, 709, 398, 313, 0, 0,
	320, 314, 315, 300, 316, 319, 710, 317, 318, 679,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 711, 712, 0, 0, 330, 331, 680,
	681, 652, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 672, 340, 0, 406, 341, 342, 343, 407,
	713, 0, 0, 344, 0, 0, 0, 0, 345, 346,
	347, 348, 349, 625, 657, 646, 647, 644, 645, 636,
	0, 623, 0, 0, 0, 0, 621, 622, 1199, 0,
	187, 188, 0, 0, 189, 632, 0, 0, 0, 674,
	639, 635, 0, 0, 190, 191, 192, 351, 689, 353,
	690, 193, 691, 692, 0, 194, 357, 358, 195, 196,
	642, 673, 693, 694, 361, 0, 197, 685, 0, 665,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 719, 208, 209, 210, 0,
	666, 667, 669, 0, 668, 670, 211, 212, 416, 213,
	695, 214, 696, 697, 627, 215, 0, 216, 0, 217,
	0, 0, 688, 219, 0, 220, 0, 0, 0, 630,
	221, 223, 222, 224, 675, 676, 653, 720, 0, 0,
	0, 0, 0, 225, 226, 698, 699, 700, 0, 227,
	0, 228, 0, 1603, 721, 0, 229, 686, 0, 373,
	0, 0, 230, 231, 232, 233, 682, 684, 723, 0,
	376, 237, 0, 234, 0, 722, 235, 701, 236, 702,
	703, 704, 705, 706, 0, 664, 0, 724, 238, 239,
	240, 725, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 687, 726, 246, 247, 727, 0, 248, 249, 0,
	0, 250, 0, 251, 728, 252, 253, 255, 387, 254,
	729, 256, 257, 259, 258, 624, 0, 654, 683, 260,
	707, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 730, 266, 731, 677, 267, 268, 269, 270,
	271, 0, 272, 678, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 708, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 732, 295, 296, 631, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 671,
	310, 298, 299, 311, 733, 312, 709, 398, 313, 0,
	0, 320, 314, 315, 300, 316, 319, 710, 317, 318,
	679, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 711, 712, 0, 0, 330, 331,
	680, 681, 652, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 672, 340, 0, 406, 341, 342, 343,
	407, 713, 0, 0, 344, 0, 0, 0, 0, 345,
	346, 347, 348, 349, 625, 0, 0, 0, 0, 0,
	0, 0, 623, 0, 0, 0, 0, 621, 622, 0,
	0, 0, 0, 0, 0, 0, 632, 0, 0, 0,
	0, 1649, 635, 657, 646, 647, 644, 645, 636, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 674, 639,
	0, 0, 0, 190, 191, 192, 351, 689, 353, 690,
	193, 691, 692, 0, 194, 357, 358, 195, 196, 642,
	673, 693, 694, 361, 0, 197, 685, 0, 665, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 719, 208, 209, 210, 0, 666,
	667, 669, 0, 668, 670, 211, 212, 416, 213, 695,
	214, 696, 697, 627, 215, 0, 216, 0, 217, 0,
	0, 688, 219, 0, 220, 0, 0, 0, 630, 221,
	223, 222, 224, 675, 676, 653, 720, 0, 0, 0,
	0, 0, 225, 226, 698, 699, 700, 0, 227, 0,
	228, 0, 0, 721, 0, 229, 686, 0, 373, 0,
	0, 230, 231, 232, 233, 682, 684, 723, 0, 376,
	237, 0, 234, 0, 722, 235, 701, 236, 702, 703,
	704, 705, 706, 0, 664, 0, 724, 238, 239, 240,
	725, 384, 385, 241, 242, 243, 0, 245, 244, 0,
	687, 726, 246, 247, 727, 0, 248, 249, 0, 0,
	250, 0, 251, 728, 252, 253, 255, 387, 254, 729,
	256, 257, 259, 258, 624, 0, 654, 683, 260, 707,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	390, 730, 266, 731, 677, 267, 268, 269, 270, 271,
	0, 272, 678, 273, 393, 274, 0, 275, 276, 277,
	278, 279, 708, 280, 281, 0, 282, 283, 284, 285,
	286, 0, 288, 289, 287, 290, 291, 292, 293, 0,
	294, 732, 295, 296, 631, 297, 0, 301, 302, 303,
	304, 305, 0, 307, 396, 306, 308, 309, 671, 310,
	298, 299, 311, 733, 312, 709, 398, 313, 0, 0,
	320, 314, 315, 300, 316, 319, 710, 317, 318, 679,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 711, 712, 0, 0, 330, 331, 680,
	681, 652, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 672, 340, 0, 406, 341, 342, 343, 407,
	713, 0, 0, 344, 0, 0, 0, 0, 345, 346,
	347, 348, 349, 625, 0, 0, 0, 0, 0, 0,
	0, 623, 0, 0, 0, 0, 621, 622, 0, 0,
	0, 0, 0, 0, 0, 632, 0, 0, 0, 0,
	1612, 635, 657, 646, 647, 644, 645, 636, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 674, 639, 0,
	0, 0, 190, 191, 192, 351, 689, 353, 690, 193,
	691, 692, 0, 194, 357, 358, 195, 196, 642, 673,
	693, 694, 361, 0, 197, 685, 0, 665, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 719, 208, 209, 210, 0, 666, 667,
	669, 0, 668, 670, 211, 212, 416, 213, 695, 214,
	696, 697, 627, 215, 0, 216, 0, 217, 0, 0,
	688, 219, 0, 220, 0, 0, 0, 630, 221, 223,
	222, 224, 675, 676, 653, 720, 0, 0, 0, 0,
	0, 225, 226, 698, 699, 700, 0, 227, 0, 228,
	0, 0, 721, 0, 229, 686, 0, 373, 0, 0,
	230, 231, 232, 233, 682, 684, 723, 0, 376, 237,
	0, 234, 0, 722, 235, 701, 236, 702, 703, 704,
	705, 706, 0, 664, 0, 724, 238, 239, 240, 725,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 687,
	726, 246, 247, 727, 0, 248, 249, 0, 0, 250,
	0, 251, 728, 252, 253, 255, 387, 254, 729, 256,
	257, 259, 258, 624, 0, 654, 683, 260, 707, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	730, 266, 731, 677, 267, 268, 269, 270, 271, 0,
	272, 678, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 708, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	732, 295, 296, 631, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 671, 310, 298,
	299, 311, 733, 312, 709, 398, 313, 0, 0, 320,
	314, 315, 300, 316, 319, 710, 317, 318, 679, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 711, 712, 0, 0, 330, 331, 680, 681,
	652, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 672, 340, 0, 406, 341, 342, 343, 407, 713,
	0, 0, 344, 0, 0, 0, 0, 345, 346, 347,
	348, 349, 625, 0, 0, 0, 0, 0, 0, 0,
	623, 0, 0, 0, 0, 621, 622, 0, 0, 0,
	0, 0, 0, 0, 632, 0, 0, 0, 0, 1610,
	635, 657, 646, 647, 644, 645, 636, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 674, 639, 0, 0,
	0, 190, 191, 192, 351, 689, 353, 690, 193, 691,
	692, 0, 194, 357, 358, 195, 196, 642, 673, 693,
	694, 361, 0, 197, 685, 0, 665, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 719, 208, 209, 210, 0, 666, 667, 669,
	0, 668, 670, 211, 212, 416, 213, 695, 214, 696,
	697, 627, 215, 0, 216, 0, 217, 0, 0, 688,
	219, 0, 220, 0, 0, 0, 630, 221, 223, 222,
	224, 675, 676, 653, 720, 0, 0, 0, 0, 0,
	225, 226, 698, 699, 700, 0, 227, 0, 228, 0,
	0, 721, 0, 229, 686, 0, 373, 0, 0, 230,
	231, 232, 233, 682, 684, 723, 0, 376, 237, 0,
	234, 0, 722, 235, 701, 236, 702, 703, 704, 705,
	706, 0, 664, 0, 724, 238, 239, 240, 725, 384,
	385, 241, 242, 243, 0, 245, 244, 0, 687, 726,
	246, 247, 727, 0, 248, 249, 0, 0, 250, 0,
	251, 728, 252, 253, 255, 387, 254, 729, 256, 257,
	259, 258, 624, 0, 654, 683, 260, 707, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 390, 730,
	266, 731, 677, 267, 268, 269, 270, 271, 0, 272,
	678, 273, 393, 274, 0, 275, 276, 277, 278, 279,
	708, 280, 281, 0, 282, 283, 284, 285, 286, 0,
	288, 289, 287, 290, 291, 292, 293, 0, 294, 732,
	295, 296, 631, 297, 0, 301, 302, 303, 304, 305,
	0, 307, 396, 306, 308, 309, 671, 310, 298, 299,
	311, 733, 312, 709, 398, 313, 0, 0, 320, 314,
	315, 300, 316, 319, 710, 317, 318, 679, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 711, 712, 0, 0, 330, 331, 680, 681, 652,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	672, 340, 0, 406, 341, 342, 343, 407, 713, 0,
	0, 344, 0, 0, 0, 0, 345, 346, 347, 348,
	349, 625, 0, 0, 0, 0, 0, 0, 0, 623,
	0, 0, 0, 0, 621, 622, 0, 0, 0, 0,
	0, 0, 0, 632, 0, 0, 0, 0, 1594, 635,
	657, 646, 647, 644, 645, 636, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 674, 639, 0, 0, 0,
	190, 191, 192, 351, 689, 353, 690, 193, 691, 692,
	0, 194, 357, 358, 195, 196, 642, 673, 693, 694,
	361, 0, 197, 685, 0, 665, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 719, 208, 209, 210, 0, 666, 667, 669, 0,
	668, 670, 211, 212, 416, 213, 695, 214, 696, 697,
	627, 215, 0, 216, 0, 217, 0, 0, 688, 219,
	0, 220, 0, 0, 0, 630, 221, 223, 222, 224,
	675, 676, 653, 720, 0, 0, 0, 0, 0, 225,
	226, 698, 699, 700, 0, 227, 0, 228, 0, 0,
	721, 0, 229, 686, 0, 373, 0, 0, 230, 231,
	232, 233, 682, 684, 723, 0, 376, 237, 0, 234,
	0, 722, 235, 701, 236, 702, 703, 704, 705, 706,
	0, 664, 0, 724, 238, 239, 240, 725, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 687, 726, 246,
	247, 727, 0, 248, 249, 0, 0, 250, 0, 251,
	728, 252, 253, 255, 387, 254, 729, 256, 257, 259,
	258, 624, 0, 654, 683, 260, 707, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 730, 266,
	731, 677, 267, 268, 269, 270, 271, 0, 272, 678,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 708,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 732, 295,
	296, 631, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 671, 310, 298, 299, 311,
	733, 312, 709, 398, 313, 0, 0, 320, 314, 315,
	300, 316, 319, 710, 317, 318, 679, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	711, 712, 0, 0, 330, 331, 680, 681, 652, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 672,
	340, 0, 406, 341, 342, 343, 407, 713, 0, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	625, 0, 0, 0, 0, 0, 0, 0, 623, 0,
	0, 0, 0, 621, 622, 0, 0, 0, 0, 0,
	0, 0, 632, 0, 0, 0, 0, 1582, 635, 657,
	646, 647, 644, 645, 636, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 0, 0, 189,
	0, 0, 0, 0, 674, 639, 0, 0, 0, 190,
	191, 192, 351, 689, 353, 690, 193, 691, 692, 0,
	194, 357, 358, 195, 196, 642, 673, 693, 694, 361,
	0, 197, 685, 0, 665, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	719, 208, 209, 210, 0, 666, 667, 669, 0, 668,
	670, 211, 212, 416, 213, 695, 214, 696, 697, 627,
	215, 0, 216, 0, 217, 0, 0, 688, 219, 0,
	220, 0, 0, 0, 630, 221, 223, 222, 224, 675,
	676, 653, 720, 0, 0, 0, 0, 0, 225, 226,
	698, 699, 700, 0, 227, 0, 228, 0, 0, 721,
	0, 229, 686, 0, 373, 0, 0, 230, 231, 232,
	233, 682, 684, 723, 0, 376, 237, 0, 234, 0,
	722, 235, 701, 236, 702, 703, 704, 705, 706, 0,
	664, 0, 724, 238, 239, 240, 725, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 687, 726, 246, 247,
	727, 0, 248, 249, 0, 0, 250, 0, 251, 728,
	252, 253, 255, 387, 254, 729, 256, 257, 259, 258,
	624, 0, 654, 683, 260, 707, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 730, 266, 731,
	677, 267, 268, 269, 270, 271, 0, 272, 678, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 708, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 732, 295, 296,
	631, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 671, 310, 298, 299, 311, 733,
	312, 709, 398, 313, 0, 0, 320, 314, 315, 300,
	316, 319, 710, 317, 318, 679, 0, 321, 0, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 711,
	712, 0, 0, 330, 331, 680, 681, 652, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 672, 340,
	0, 406, 341, 342, 343, 407, 713, 0, 0, 344,
	0, 0, 0, 0, 345, 346, 347, 348, 349, 625,
	0, 0, 0, 0, 0, 0, 0, 623, 0, 0,
	0, 0, 621, 622, 0, 0, 0, 0, 0, 0,
	0, 632, 0, 0, 0, 0, 1580, 635, 1572, 646,
	647, 644, 645, 636, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 674, 639, 0, 0, 0, 190, 191,
	192, 351, 689, 353, 690, 193, 691, 692, 0, 194,
	357, 358, 195, 196, 642, 673, 693, 694, 361, 0,
	197, 685, 0, 665, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 719,
	208, 209, 210, 0, 666, 667, 669, 0, 668, 670,
	211, 212, 416, 213, 695, 1575, 696, 697, 627, 215,
	0, 216, 0, 217, 0, 0, 688, 219, 0, 220,
	0, 0, 0, 630, 221, 223, 222, 224, 675, 676,
	653, 720, 0, 0, 0, 0, 0, 225, 226, 698,
	699, 700, 0, 227, 0, 228, 0, 0, 721, 0,
	229, 686, 0, 373, 0, 0, 230, 1576, 232, 233,
	682, 684, 723, 0, 376, 237, 0, 234, 0, 722,
	235, 701, 236, 702, 703, 704, 705, 706, 0, 664,
	0, 724, 238, 239, 240, 725, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 687, 726, 246, 247, 727,
	0, 248, 249, 0, 0, 250, 0, 251, 728, 1577,
	1574, 255, 387, 254, 729, 256, 257, 259, 258, 624,
	0, 654, 683, 260, 707, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 730, 266, 731, 677,
	267, 268, 269, 270, 271, 0, 272, 678, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 708, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 732, 295, 296, 631,
	297, 0, 301, 302, 303, 304, 1578, 0, 307, 396,
	306, 308, 309, 671, 310, 298, 299, 311, 733, 312,
	709, 398, 313, 0, 0, 320, 314, 315, 300, 316,
	319, 710, 317, 318, 679, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 711, 712,
	0, 0, 330, 331, 680, 681, 652, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 672, 340, 0,
	406, 341, 342, 343, 407, 713, 0, 0, 344, 0,
	0, 0, 0, 345, 346, 347, 1573, 349, 625, 0,
	0, 0, 0, 0, 0, 0, 623, 0, 0, 0,
	0, 621, 622, 0, 0, 0, 0, 0, 0, 0,
	632, 0, 0, 0, 0, 1569, 635, 1572, 646, 647,
	644, 645, 636, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 674, 639, 0, 0, 0, 190, 191, 192,
	351, 689, 353, 690, 193, 691, 692, 0, 194, 357,
	358, 195, 196, 642, 673, 693, 694, 361, 0, 197,
	685, 0, 665, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 719, 208,
	209, 210, 0, 666, 667, 669, 0, 668, 670, 211,
	212, 416, 213, 695, 1575, 696, 697, 627, 215, 0,
	216, 0, 217, 0, 0, 688, 219, 0, 220, 0,
	0, 0, 630, 221, 223, 222, 224, 675, 676, 653,
	720, 0, 0, 0, 0, 0, 225, 226, 698, 699,
	700, 0, 227, 0, 228, 0, 0, 721, 0, 229,
	686, 0, 373, 0, 0, 230, 1576, 232, 233, 682,
	684, 723, 0, 376, 237, 0, 234, 0, 722, 235,
	701, 236, 702, 703, 704, 705, 706, 0, 664, 0,
	724, 238, 239, 240, 725, 384, 385, 241, 242, 243,
	0, 245, 244, 0, 687, 726, 246, 247, 727, 0,
	248, 249, 0, 0, 250, 0, 251, 728, 1577, 1574,
	255, 387, 254, 729, 256, 257, 259, 258, 624, 0,
	654, 683, 260, 707, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 390, 730, 266, 731, 677, 267,
	268, 269, 270, 271, 0, 272, 678, 273, 393, 274,
	0, 275, 276, 277, 278, 279, 708, 280, 281, 0,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 0, 294, 732, 295, 296, 631, 297,
	0, 301, 302, 303, 304, 1578, 0, 307, 396, 306,
	308, 309, 671, 310, 298, 299, 311, 733, 312, 709,
	398, 313, 0, 0, 320, 314, 315, 300, 316, 319,
	710, 317, 318, 679, 0, 321, 0, 322, 323, 324,
	325, 326, 327, 328, 329, 0, 401, 711, 712, 0,
	0, 330, 331, 680, 681, 652, 332, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 672, 340, 0, 406,
	341, 342, 343, 407, 713, 0, 0, 344, 0, 0,
	0, 0, 345, 346, 347, 1573, 349, 625, 657, 646,
	647, 644, 645, 636, 0, 623, 0, 0, 0, 0,
	621, 622, 0, 0, 187, 188, 0, 0, 189, 632,
	0, 0, 0, 674, 639, 635, 0, 0, 190, 191,
	192, 351, 689, 353, 690, 193, 691, 692, 0, 194,
	357, 358, 195, 196, 642, 673, 693, 694, 361, 0,
	197, 685, 0, 665, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 719,
	208, 209, 210, 0, 666, 667, 669, 0, 668, 670,
	211, 212, 416, 213, 695, 214, 696, 697, 627, 215,
	0, 216, 0, 217, 0, 0, 688, 219, 0, 220,
	0, 0, 0, 630, 221, 223, 222, 224, 675, 676,
	653, 720, 0, 0, 0, 0, 0, 225, 226, 698,
	699, 700, 0, 227, 0, 228, 0, 0, 721, 0,
	229, 686, 0, 373, 0, 0, 230, 231, 232, 233,
	682, 684, 723, 0, 376, 237, 0, 234, 0, 722,
	235, 701, 236, 702, 703, 704, 705, 706, 0, 664,
	0, 724, 238, 239, 240, 725, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 687, 726, 246, 247, 727,
	0, 248, 249, 0, 0, 250, 0, 251, 728, 252,
	253, 255, 387, 254, 729, 256, 257, 259, 258, 624,
	0, 654, 683, 260, 707, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 730, 266, 731, 677,
	267, 268, 269, 270, 271, 0, 272, 678, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 708, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 732, 295, 296, 631,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 671, 310, 298, 299, 311, 733, 312,
	709, 398, 313, 0, 0, 320, 314, 315, 300, 316,
	319, 710, 317, 318, 679, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 711, 712,
	0, 0, 330, 331, 680, 681, 652, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 672, 340, 0,
	406, 341, 342, 343, 407, 713, 0, 0, 344, 0,
	0, 0, 0, 345, 346, 347, 348, 349, 625, 657,
	646, 647, 644, 645, 636, 0, 623, 0, 0, 0,
	0, 621, 622, 0, 0, 187, 188, 1435, 1142, 189,
	632, 0, 0, 0, 674, 639, 635, 0, 0, 190,
	191, 192, 351, 689, 353, 690, 193, 691, 692, 0,
	194, 357, 358, 195, 196, 642, 673, 693, 694, 361,
	0, 197, 685, 0, 665, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	719, 208, 209, 210, 0, 666, 667, 669, 0, 668,
	670, 211, 212, 416, 213, 695, 214, 696, 697, 627,
	215, 0, 216, 0, 217, 0, 0, 688, 219, 0,
	220, 0, 0, 0, 630, 221, 223, 222, 224, 675,
	676, 653, 720, 0, 0, 0, 0, 0, 225, 226,
	698, 699, 700, 0, 227, 0, 228, 0, 0, 721,
	0, 229, 686, 0, 373, 0, 0, 230, 231, 232,
	233, 682, 684, 723, 0, 376, 237, 0, 234, 0,
	722, 235, 701, 236, 702, 703, 704, 705, 706, 0,
	664, 0, 724, 238, 239, 240, 725, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 687, 726, 246, 247,
	727, 0, 248, 249, 0, 0, 250, 0, 251, 728,
	252, 253, 255, 387, 254, 729, 256, 257, 259, 258,
	624, 0, 654, 683, 260, 707, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 730, 266, 731,
	677, 267, 268, 269, 270, 271, 0, 272, 678, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 708, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 732, 295, 296,
	631, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 671, 310, 298, 299, 311, 733,
	312, 709, 398, 313, 0, 0, 320, 314, 315, 300,
	316, 319, 710, 317, 318, 679, 0, 321, 0, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 711,
	712, 0, 0, 330, 331, 680, 681, 652, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 672, 340,
	0, 406, 341, 342, 343, 407, 713, 0, 0, 344,
	0, 0, 0, 0, 345, 346, 347, 348, 349, 625,
	0, 0, 0, 0, 0, 0, 0, 623, 0, 0,
	0, 0, 621, 622, 0, 0, 0, 0, 0, 0,
	0, 632, 0, 0, 0, 0, 898, 635, 657, 646,
	647, 644, 645, 636, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 674, 639, 0, 0, 0, 190, 191,
	192, 351, 689, 353, 690, 193, 691, 692, 0, 194,
	357, 358, 195, 196, 642, 673, 693, 694, 361, 0,
	197, 685, 0, 665, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 719,
	208, 209, 210, 0, 666, 667, 669, 0, 668, 670,
	211, 212, 416, 213, 695, 214, 696, 697, 627, 215,
	0, 216, 0, 217, 0, 0, 688, 219, 0, 220,
	0, 0, 0, 630, 221, 223, 222, 224, 675, 676,
	653, 720, 0, 0, 0, 0, 0, 225, 226, 698,
	699, 700, 0, 227, 0, 228, 0, 0, 721, 0,
	229, 686, 0, 373, 0, 0, 230, 231, 232, 233,
	682, 684, 723, 0, 376, 237, 0, 234, 0, 722,
	235, 701, 236, 702, 703, 704, 705, 706, 0, 664,
	0, 724, 238, 239, 240, 725, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 687, 726, 246, 247, 727,
	0, 248, 249, 0, 0, 250, 0, 251, 728, 252,
	253, 255, 387, 254, 729, 256, 257, 259, 258, 624,
	0, 654, 683, 260, 707, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 730, 266, 731, 677,
	267, 268, 269, 270, 271, 0, 272, 678, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 708, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 732, 295, 296, 631,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 671, 310, 298, 299, 311, 733, 312,
	709, 398, 313, 0, 0, 320, 314, 315, 300, 316,
	319, 710, 317, 318, 679, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 711, 712,
	0, 0, 330, 331, 680, 681, 652, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 672, 340, 0,
	406, 341, 342, 343, 407, 713, 0, 0, 344, 0,
	0, 0, 0, 345, 346, 347, 348, 349, 625, 0,
	0, 0, 0, 0, 0, 0, 623, 0, 0, 0,
	0, 621, 622, 0, 0, 0, 0, 0, 0, 0,
	632, 0, 0, 0, 0, 896, 635, 657, 646, 647,
	644, 645, 636, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 674, 639, 0, 0, 0, 190, 191, 192,
	351, 689, 353, 690, 193, 691, 692, 0, 194, 357,
	358, 195, 196, 642, 673, 693, 694, 361, 0, 197,
	685, 0, 665, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 719, 208,
	209, 210, 0, 666, 667, 669, 0, 668, 670, 211,
	212, 416, 213, 695, 214, 696, 697, 627, 215, 0,
	216, 0, 217, 0, 0, 688, 219, 0, 220, 0,
	0, 0, 630, 221, 223, 222, 224, 675, 676, 653,
	720, 0, 0, 0, 0, 0, 225, 226, 698, 699,
	700, 0, 227, 0, 228, 0, 0, 721, 0, 229,
	686, 0, 373, 0, 0, 230, 231, 232, 233, 682,
	684, 723, 0, 376, 237, 0, 234, 0, 722, 235,
	701, 236, 702, 703, 704, 705, 706, 0, 664, 0,
	724, 238, 239, 240, 725, 384, 385, 241, 242, 243,
	0, 245, 244, 0, 687, 726, 246, 247, 727, 0,
	248, 249, 0, 0, 250, 0, 251, 728, 252, 253,
	255, 387, 254, 729, 256, 257, 259, 258, 624, 0,
	654, 683, 260, 707, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 390, 730, 266, 731, 677, 267,
	268, 269, 270, 271, 0, 272, 678, 273, 393, 274,
	0, 275, 276, 277, 278, 279, 708, 280, 281, 0,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 0, 294, 732, 295, 296, 631, 297,
	0, 301, 302, 303, 304, 305, 0, 307, 396, 306,
	308, 309, 671, 310, 298, 299, 311, 733, 312, 709,
	398, 313, 0, 0, 320, 314, 315, 300, 316, 319,
	710, 317, 318, 679, 0, 321, 0, 322, 323, 324,
	325, 326, 327, 328, 329, 0, 401, 711, 712, 0,
	0, 330, 331, 680, 681, 652, 332, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 672, 340, 0, 406,
	341, 342, 343, 407, 713, 0, 0, 344, 0, 0,
	0, 0, 345, 346, 347, 348, 349, 625, 657, 646,
	647, 644, 645, 636, 0, 623, 0, 0, 0, 0,
	621, 622, 0, 0, 187, 188, 0, 0, 189, 632,
	0, 0, 0, 674, 639, 635, 0, 0, 190, 191,
	192, 351, 689, 353, 690, 193, 691, 692, 0, 194,
	357, 358, 195, 196, 642, 673, 693, 694, 361, 0,
	197, 685, 0, 665, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 719,
	208, 209, 210, 0, 666, 667, 669, 0, 668, 670,
	211, 212, 416, 213, 695, 214, 696, 697, 627, 215,
	0, 216, 0, 217, 0, 0, 688, 219, 0, 220,
	0, 0, 0, 630, 221, 223, 222, 224, 675, 676,
	653, 720, 0, 0, 0, 0, 0, 225, 226, 698,
	699, 700, 0, 227, 0, 228, 0, 0, 721, 0,
	229, 686, 0, 373, 0, 0, 230, 231, 232, 233,
	682, 684, 723, 0, 376, 237, 0, 234, 0, 722,
	235, 701, 236, 702, 703, 704, 705, 706, 0, 664,
	0, 724, 238, 239, 240, 725, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 687, 726, 246, 247, 727,
	0, 248, 249, 0, 0, 250, 0, 251, 2647, 252,
	253, 255, 387, 254, 729, 256, 257, 259, 258, 624,
	0, 654, 683, 260, 707, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 730, 266, 731, 677,
	267, 268, 269, 270, 271, 0, 272, 678, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 708, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 732, 295, 296, 631,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 671, 310, 298, 299, 311, 733, 312,
	709, 398, 313, 0, 0, 320, 314, 315, 300, 316,
	319, 710, 317, 318, 679, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 711, 712,
	0, 0, 330, 331, 680, 681, 652, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 672, 340, 0,
	406, 341, 342, 343, 407, 713, 0, 0, 344, 0,
	0, 0, 0, 345, 346, 347, 348, 349, 625, 657,
	646, 647, 644, 645, 636, 0, 623, 0, 0, 0,
	0, 621, 622, 0, 0, 187, 188, 0, 0, 189,
	632, 0, 0, 0, 674, 639, 635, 0, 0, 190,
	191, 192, 351, 689, 353, 690, 193, 691, 692, 0,
	194, 357, 358, 195, 196, 642, 673, 693, 694, 361,
	0, 197, 685, 0, 665, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	719, 208, 209, 2564, 0, 666, 667, 669, 0, 668,
	670, 211, 212, 416, 213, 695, 214, 696, 697, 627,
	215, 0, 216, 0, 217, 0, 0, 688, 219, 0,
	220, 0, 0, 0, 630, 221, 223, 222, 224, 675,
	676, 653, 720, 0, 0, 0, 0, 0, 225, 226,
	698, 699, 700, 0, 227, 0, 228, 0, 0, 721,
	0, 229, 686, 0, 373, 0, 0, 230, 231, 232,
	233, 682, 684, 723, 0, 376, 237, 0, 234, 0,
	722, 235, 701, 236, 702, 703, 704, 705, 706, 0,
	664, 0, 724, 238, 239, 240, 725, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 687, 726, 246, 247,
	727, 0, 248, 249, 0, 0, 250, 0, 251, 728,
	252, 253, 255, 387, 254, 729, 256, 257, 259, 258,
	624, 0, 654, 683, 260, 707, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 730, 266, 731,
	677, 267, 268, 269, 270, 271, 0, 272, 678, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 708, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 732, 295, 296,
	631, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 671, 310, 298, 299, 311, 733,
	312, 709, 398, 313, 0, 0, 320, 314, 315, 300,
	316, 319, 710, 317, 318, 679, 0, 321, 0, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 711,
	712, 0, 0, 330, 331, 680, 681, 652, 332, 333,
	2563, 335, 0, 0, 336, 337, 338, 339, 672, 340,
	0, 406, 341, 342, 343, 407, 713, 0, 0, 344,
	0, 0, 0, 0, 345, 346, 347, 348, 349, 625,
	657, 646, 647, 644, 645, 636, 0, 623, 0, 0,
	0, 0, 621, 622, 0, 0, 187, 188, 0, 0,
	189, 632, 0, 0, 0, 674, 639, 635, 0, 0,
	190, 191, 192, 351, 689, 353, 690, 193, 691, 692,
	0, 194, 357, 358, 195, 196, 642, 673, 693, 694,
	361, 0, 197, 685, 0, 665, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 719, 208, 209, 210, 0, 666, 667, 669, 0,
	668, 670, 211, 212, 416, 213, 695, 214, 696, 697,
	627, 215, 0, 216, 0, 217, 0, 0, 688, 219,
	0, 220, 0, 0, 0, 630, 221, 223, 222, 224,
	675, 676, 653, 720, 0, 0, 0, 0, 0, 225,
	226, 698, 699, 700, 0, 227, 0, 228, 0, 0,
	721, 0, 229, 686, 0, 373, 0, 0, 230, 231,
	232, 233, 682, 684, 723, 0, 376, 237, 0, 234,
	0, 722, 235, 701, 236, 702, 703, 704, 705, 706,
	0, 664, 0, 724, 238, 239, 240, 725, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 687, 726, 246,
	247, 727, 0, 248, 249, 0, 0, 250, 0, 251,
	728, 252, 253, 255, 387, 254, 729, 256, 257, 259,
	258, 624, 0, 654, 683, 260, 707, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 730, 266,
	731, 677, 267, 268, 269, 270, 271, 0, 272, 678,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 708,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 732, 295,
	296, 631, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 671, 310, 298, 299, 311,
	733, 312, 709, 398, 313, 0, 0, 320, 314, 315,
	300, 316, 319, 710, 317, 318, 679, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	711, 712, 0, 0, 330, 331, 680, 681, 652, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 672,
	340, 0, 406, 341, 342, 343, 407, 713, 0, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	625, 657, 646, 647, 644, 645, 636, 0, 623, 0,
	0, 0, 0, 621, 622, 0, 0, 187, 188, 0,
	0, 189, 632, 0, 0, 0, 674, 639, 635, 0,
	0, 190, 191, 192, 2562, 689, 353, 690, 193, 691,
	692, 0, 194, 357, 358, 195, 196, 642, 673, 693,
	694, 361, 0, 197, 685, 0, 665, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 719, 208, 209, 2564, 0, 666, 667, 669,
	0, 668, 670, 211, 212, 416, 213, 695, 214, 696,
	697, 627, 215, 0, 216, 0, 217, 0, 0, 688,
	219, 0, 220, 0, 0, 0, 630, 221, 223, 222,
	224, 675, 676, 653, 720, 0, 0, 0, 0, 0,
	225, 226, 698, 699, 700, 0, 227, 0, 228, 0,
	0, 721, 0, 229, 686, 0, 373, 0, 0, 230,
	231, 232, 233, 682, 684, 723, 0, 376, 237, 0,
	234, 0, 722, 235, 701, 236, 702, 703, 704, 705,
	706, 0, 664, 0, 724, 238, 239, 240, 725, 384,
	385, 241, 242, 243, 0, 245, 244, 0, 687, 726,
	246, 247, 727, 0, 248, 249, 0, 0, 250, 0,
	251, 728, 252, 253, 255, 387, 254, 729, 256, 257,
	259, 258, 624, 0, 654, 683, 260, 707, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 390, 730,
	266, 731, 677, 267, 268, 269, 270, 271, 0, 272,
	678, 273, 393, 274, 0, 275, 276, 277, 278, 279,
	708, 280, 281, 0, 282, 283, 284, 285, 286, 0,
	288, 289, 287, 290, 291, 292, 293, 0, 294, 732,
	295, 296, 631, 297, 0, 301, 302, 303, 304, 305,
	0, 307, 396, 306, 308, 309, 671, 310, 298, 299,
	311, 733, 312, 709, 398, 313, 0, 0, 320, 314,
	315, 300, 316, 319, 710, 317, 318, 679, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 711, 712, 0, 0, 330, 331, 680, 681, 652,
	332, 333, 2563, 335, 0, 0, 336, 337, 338, 339,
	672, 340, 0, 406, 341, 342, 343, 407, 713, 0,
	0, 344, 0, 0, 0, 0, 345, 346, 347, 348,
	349, 625, 657, 646, 647, 644, 645, 636, 0, 623,
	0, 0, 0, 0, 621, 622, 0, 0, 187, 188,
	0, 0, 189, 632, 0, 0, 0, 674, 639, 635,
	0, 0, 190, 191, 192, 351, 689, 353, 690, 193,
	691, 692, 0, 194, 357, 358, 195, 196, 642, 673,
	693, 694, 361, 0, 197, 685, 0, 665, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 719, 208, 209, 210, 0, 666, 667,
	669, 0, 668, 670, 211, 212, 416, 213, 695, 214,
	696, 697, 0, 215, 0, 216, 0, 217, 0, 0,
	688, 219, 0, 220, 0, 0, 0, 630, 221, 223,
	222, 224, 675, 676, 653, 720, 0, 0, 0, 0,
	0, 225, 226, 698, 699, 700, 0, 227, 0, 228,
	0, 0, 721, 0, 229, 686, 0, 373, 0, 0,
	230, 231, 232, 233, 682, 684, 723, 0, 376, 237,
	0, 234, 0, 722, 235, 701, 236, 702, 703, 704,
	705, 706, 0, 664, 0, 724, 238, 239, 240, 725,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 687,
	726, 246, 247, 727, 0, 248, 249, 0, 0, 250,
	0, 251, 728, 252, 253, 255, 387, 254, 729, 256,
	257, 259, 258, 0, 0, 654, 683, 260, 707, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	730, 266, 731, 677, 267, 268, 269, 270, 271, 0,
	272, 678, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 708, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	732, 295, 296, 1592, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 671, 310, 298,
	299, 311, 733, 312, 709, 398, 313, 0, 0, 320,
	314, 315, 300, 316, 319, 710, 317, 318, 679, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 711, 712, 0, 0, 330, 331, 680, 681,
	652, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 672, 340, 0, 406, 341, 342, 343, 407, 713,
	0, 0, 344, 0, 0, 0, 0, 345, 346, 347,
	348, 349, 657, 646, 647, 644, 645, 636, 0, 0,
	1590, 0, 0, 0, 0, 1588, 1589, 0, 187, 188,
	0, 0, 189, 0, 1591, 0, 0, 674, 639, 0,
	635, 0, 190, 191, 192, 0, 689, 353, 690, 193,
	691, 692, 0, 194, 357, 358, 195, 196, 642, 673,
	693, 694, 361, 0, 197, 685, 0, 665, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 719, 208, 209, 2564, 0, 666, 667,
	669, 0, 668, 670, 211, 212, 416, 213, 695, 214,
	696, 697, 627, 215, 0, 216, 0, 217, 0, 0,
	688, 219, 0, 220, 0, 0, 0, 630, 221, 223,
	222, 224, 675, 676, 653, 720, 0, 0, 0, 0,
	0, 225, 226, 698, 699, 700, 0, 227, 0, 228,
	0, 0, 721, 0, 229, 686, 0, 373, 0, 0,
	230, 231, 232, 233, 682, 684, 0, 0, 376, 237,
	0, 234, 0, 722, 235, 701, 236, 702, 703, 704,
	705, 706, 0, 664, 0, 0, 238, 239, 240, 725,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 687,
	726, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 728, 252, 253, 255, 387, 254, 729, 256,
	257, 259, 258, 624, 0, 654, 683, 260, 707, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	730, 266, 731, 677, 267, 268, 269, 270, 271, 0,
	272, 678, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 708, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	732, 295, 296, 631, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 671, 310, 298,
	299, 311, 0, 312, 709, 398, 313, 0, 0, 320,
	314, 315, 300, 316, 319, 710, 317, 318, 679, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 711, 712, 0, 0, 330, 331, 680, 681,
	652, 332, 333, 2563, 335, 0, 0, 336, 337, 338,
	339, 672, 340, 0, 406, 341, 342, 343, 407, 713,
	0, 0, 344, 0, 0, 0, 0, 345, 346, 347,
	348, 349, 657, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 621, 622, 0, 187, 188,
	0, 0, 189, 0, 632, 0, 0, 674, 0, 0,
	635, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 673,
	359, 360, 361, 0, 197, 685, 0, 665, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 719, 208, 209, 210, 0, 666, 667,
	669, 0, 668, 670, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 675, 676, 0, 720, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 721, 0, 229, 686, 0, 373, 0, 0,
	230, 231, 232, 233, 682, 684, 723, 0, 376, 237,
	0, 234, 0, 722, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 724, 238, 239, 240, 725,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 687,
	726, 246, 247, 727, 0, 248, 249, 0, 0, 250,
	0, 251, 728, 252, 253, 255, 387, 254, 729, 256,
	257, 259, 258, 0, 0, 0, 683, 260, 389, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	730, 266, 731, 677, 267, 268, 269, 270, 271, 0,
	272, 678, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	732, 295, 296, 395, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 671, 310, 298,
	299, 311, 733, 312, 397, 398, 313, 0, 0, 320,
	314, 315, 300, 316, 319, 399, 317, 318, 679, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 402, 403, 0, 0, 330, 331, 680, 681,
	0, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 672, 340, 0, 406, 341, 342, 343, 407, 408,
	0, 0, 344, 949, 0, 789, 0, 345, 346, 347,
	348, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	350, 0, 0, 0, 2185, 190, 191, 192, 351, 352,
	353, 354, 193, 355, 356, 0, 194, 357, 358, 195,
	196, 0, 0, 359, 360, 361, 0, 197, 362, 0,
	793, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 719, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 416,
	213, 363, 214, 364, 365, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	366, 221, 223, 222, 224, 367, 368, 0, 720, 0,
	0, 0, 0, 0, 225, 226, 369, 370, 371, 0,
	227, 0, 228, 0, 0, 721, 0, 229, 372, 0,
	373, 0, 0, 230, 231, 232, 233, 374, 375, 723,
	0, 376, 237, 0, 234, 0, 722, 235, 377, 236,
	378, 379, 380, 381, 382, 0, 383, 0, 724, 238,
	239, 240, 725, 384, 385, 241, 242, 243, 0, 245,
	244, 0, 386, 726, 246, 247, 727, 0, 248, 249,
	0, 0, 250, 0, 251, 728, 252, 253, 255, 387,
	254, 729, 256, 257, 259, 258, 0, 0, 0, 388,
	260, 389, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 390, 730, 266, 731, 391, 267, 268, 269,
	270, 271, 0, 272, 392, 273, 393, 274, 0, 275,
	276, 277, 278, 279, 394, 280, 281, 0, 282, 283,
	284, 285, 286, 0, 288, 289, 287, 290, 291, 292,
	293, 0, 294, 732, 295, 296, 395, 297, 0, 301,
	302, 303, 304, 305, 145, 307, 396, 306, 308, 309,
	0, 310, 298, 299, 311, 733, 312, 397, 398, 313,
	0, 0, 320, 314, 315, 300, 316, 319, 399, 317,
	318, 400, 0, 321, 147, 322, 323, 324, 325, 326,
	327, 328, 329, 0, 401, 402, 403, 0, 0, 330,
	331, 404, 405, 0, 332, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 0, 406, 341, 342,
	343, 952, 408, 0, 0, 344, 609, 0, 184, 139,
	345, 346, 347, 348, 349, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 350, 0, 0, 0, 117, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 0, 194,
	357, 358, 195, 196, 0, 0, 359, 360, 361, 0,
	197, 362, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 416, 213, 363, 214, 364, 365, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 366, 221, 223, 222, 224, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 372, 0, 373, 0, 0, 230, 231, 232, 233,
	374, 375, 0, 0, 376, 237, 0, 234, 0, 0,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 0, 238, 239, 240, 0, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 387, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	772, 264, 0, 0, 265, 390, 0, 266, 0, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 0, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 145, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 0, 312,
	397, 398, 313, 0, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 0, 321, 147, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 402, 403,
	0, 0, 330, 331, 404, 405, 0, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 0,
	406, 341, 342, 343, 952, 408, 0, 0, 344, 0,
	0, 184, 139, 345, 346, 347, 348, 349, 0, 140,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 350, 0, 766, 0,
	1221, 190, 191, 192, 351, 352, 353, 354, 193, 355,
	356, 0, 194, 357, 358, 195, 196, 0, 0, 359,
	360, 361, 0, 197, 362, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 416, 213, 363, 214, 364,
	365, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 366, 221, 223, 222,
	224, 367, 368, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 369, 370, 371, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 372, 0, 373, 0, 0, 230,
	231, 232, 233, 374, 375, 0, 0, 376, 237, 0,
	234, 0, 0, 235, 377, 236, 378, 379, 380, 381,
	382, 0, 383, 0, 0, 238, 239, 240, 0, 384,
	385, 241, 242, 243, 0, 245, 244, 0, 386, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 0, 252, 253, 255, 387, 254, 0, 256, 257,
	259, 258, 0, 0, 0, 388, 260, 389, 261, 262,
	0, 263, 0, 772, 264, 0, 0, 265, 390, 0,
	266, 0, 391, 267, 268, 269, 270, 271, 0, 272,
	392, 273, 393, 274, 0, 275, 276, 277, 278, 279,
	394, 280, 281, 0, 282, 283, 284, 285, 286, 0,
	288, 289, 287, 290, 291, 292, 293, 0, 294, 0,
	295, 296, 395, 297, 0, 301, 302, 303, 304, 305,
	145, 307, 396, 306, 308, 309, 0, 310, 298, 299,
	311, 0, 312, 397, 398, 313, 0, 0, 320, 314,
	315, 300, 316, 319, 399, 317, 318, 400, 0, 321,
	147, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 402, 403, 0, 0, 330, 331, 404, 405, 0,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 0, 406, 341, 342, 343, 952, 408, 0,
	0, 344, 609, 0, 184, 139, 345, 346, 347, 348,
	349, 0, 140, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 350,
	0, 766, 0, 1221, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 197, 362, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 232, 233, 374, 375, 0, 0,
	376, 237, 0, 234, 0, 0, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 0, 238, 239,
	240, 0, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 387, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 0, 266, 0, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 0, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 145, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 0, 312, 397, 398, 313, 0,
	0, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 0, 321, 147, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 402, 403, 0, 0, 330, 331,
	404, 405, 0, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 0, 406, 341, 342, 343,
	952, 408, 0, 0, 344, 1927, 0, 184, 139, 345,
	346, 347, 348, 349, 0, 140, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 350, 0, 0, 0, 117, 190, 191, 192,
	351, 352, 353, 354, 193, 355, 356, 0, 194, 357,
	358, 195, 196, 0, 0, 359, 360, 361, 0, 197,
	362, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 416, 213, 363, 214, 364, 365, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 366, 221, 223, 222, 224, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 369, 370,
	371, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	372, 0, 373, 0, 0, 230, 231, 232, 233, 374,
	375, 0, 0, 376, 237, 0, 234, 0, 0, 235,
	377, 236, 378, 379, 380, 381, 382, 0, 383, 0,
	0, 238, 239, 240, 0, 384, 385, 241, 242, 243,
	0, 245, 244, 0, 386, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 387, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 388, 260, 389, 261, 262, 0, 263, 0, 772,
	264, 0, 0, 265, 390, 0, 266, 0, 391, 267,
	268, 269, 270, 271, 0, 272, 392, 273, 393, 274,
	0, 275, 276, 277, 278, 279, 394, 280, 281, 0,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 0, 294, 0, 295, 296, 395, 297,
	0, 301, 302, 303, 304, 305, 0, 307, 396, 306,
	308, 309, 0, 310, 298, 299, 311, 0, 312, 397,
	398, 313, 0, 0, 320, 314, 315, 300, 316, 319,
	399, 317, 318, 400, 0, 321, 0, 322, 323, 324,
	325, 326, 327, 328, 329, 0, 401, 402, 403, 0,
	0, 330, 331, 404, 405, 0, 332, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 0, 406,
	341, 342, 343, 407, 408, 0, 0, 344, 765, 0,
	184, 0, 345, 346, 347, 348, 349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 350, 0, 766, 0, 771,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	232, 233, 374, 375, 0, 0, 376, 237, 0, 234,
	0, 0, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 0, 238, 239, 240, 0, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 387, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 772, 264, 0, 0, 265, 390, 0, 266,
	0, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 0, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	0, 312, 397, 398, 313, 0, 0, 320, 314, 315,
	300, 316, 319, 399, 317, 318, 400, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	402, 403, 0, 0, 330, 331, 404, 405, 0, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 0, 406, 341, 342, 343, 407, 408, 0, 0,
	344, 0, 0, 184, 0, 345, 346, 347, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 350, 0,
	766, 0, 771, 190, 191, 192, 351, 352, 353, 354,
	193, 355, 356, 0, 194, 357, 358, 195, 196, 0,
	0, 359, 360, 361, 0, 197, 362, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 416, 213, 363,
	214, 364, 365, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 366, 221,
	223, 222, 224, 367, 368, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 369, 370, 371, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 372, 0, 373, 0,
	0, 230, 231, 232, 233, 374, 375, 0, 0, 376,
	237, 0, 234, 0, 0, 235, 377, 236, 378, 379,
	380, 381, 382, 0, 383, 0, 0, 238, 239, 240,
	0, 384, 385, 241, 242, 243, 0, 245, 244, 0,
	386, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 387, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 388, 260, 389,
	261, 262, 0, 263, 0, 772, 264, 0, 0, 265,
	390, 0, 266, 0, 391, 267, 268, 269, 270, 271,
	0, 272, 392, 273, 393, 274, 0, 275, 276, 277,
	278, 279, 394, 280, 281, 0, 282, 283, 284, 285,
	286, 0, 288, 289, 287, 290, 291, 292, 293, 0,
	294, 0, 295, 296, 395, 297, 0, 301, 302, 303,
	304, 305, 0, 307, 396, 306, 308, 309, 0, 310,
	298, 299, 311, 0, 312, 397, 398, 313, 0, 0,
	320, 314, 315, 300, 316, 319, 399, 317, 318, 400,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 402, 403, 0, 0, 330, 331, 404,
	405, 0, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 0, 406, 341, 342, 343, 407,
	408, 0, 0, 344, 0, 0, 184, 0, 345, 346,
	347, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 350, 0, 766, 0, 771, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 0, 197, 362,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 232, 233, 374, 375,
	0, 0, 376, 237, 0, 234, 0, 0, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 0,
	238, 239, 240, 0, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	387, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 0, 266, 0, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 0, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 310, 298, 299, 311, 0, 312, 397, 398,
	313, 0, 0, 320, 314, 315, 300, 316, 319, 399,
	317, 318, 400, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 402, 403, 0, 0,
	330, 331, 404, 405, 0, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 0, 406, 341,
	342, 343, 407, 408, 0, 0, 344, 0, 0, 0,
	184, 345, 346, 347, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 350, 0, 0, 0, 1256,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	232, 233, 374, 375, 0, 0, 376, 237, 0, 234,
	0, 0, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 0, 238, 239, 240, 0, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 387, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 0, 266,
	0, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 0, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	0, 312, 397, 398, 313, 0, 0, 320, 314, 315,
	300, 316, 319, 399, 317, 318, 400, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	402, 403, 0, 0, 330, 331, 404, 405, 0, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 0, 406, 341, 342, 343, 407, 408, 0, 0,
	344, 0, 0, 184, 0, 345, 346, 347, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 350, 0,
	0, 0, 1737, 190, 191, 192, 351, 352, 353, 354,
	193, 355, 356, 0, 194, 357, 358, 195, 196, 0,
	0, 359, 360, 361, 0, 197, 362, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 416, 213, 363,
	214, 364, 365, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 366, 221,
	223, 222, 224, 367, 368, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 369, 370, 371, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 372, 0, 373, 0,
	0, 230, 231, 232, 233, 374, 375, 0, 0, 376,
	237, 0, 234, 0, 0, 235, 377, 236, 378, 379,
	380, 381, 382, 0, 383, 0, 0, 238, 239, 240,
	0, 384, 385, 241, 242, 243, 0, 245, 244, 0,
	386, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 387, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 388, 260, 389,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	390, 0, 266, 0, 391, 267, 268, 269, 270, 271,
	0, 272, 392, 273, 393, 274, 0, 275, 276, 277,
	278, 279, 394, 280, 281, 0, 282, 283, 284, 285,
	286, 0, 288, 289, 287, 290, 291, 292, 293, 0,
	294, 0, 295, 296, 395, 297, 0, 301, 302, 303,
	304, 305, 0, 307, 396, 306, 308, 309, 0, 310,
	298, 299, 311, 0, 312, 397, 398, 313, 0, 0,
	320, 314, 315, 300, 316, 319, 399, 317, 318, 400,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 402, 403, 0, 0, 330, 331, 404,
	405, 0, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 0, 406, 341, 342, 343, 407,
	408, 0, 0, 344, 0, 0, 184, 0, 345, 346,
	347, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 350, 0, 0, 0, 2101, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 0, 197, 362,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 232, 233, 374, 375,
	0, 0, 376, 237, 0, 234, 0, 0, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 0,
	238, 239, 240, 0, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	387, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 0, 266, 0, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 0, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 310, 298, 299, 311, 0, 312, 397, 398,
	313, 0, 0, 320, 314, 315, 300, 316, 319, 399,
	317, 318, 400, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 402, 403, 0, 0,
	330, 331, 404, 405, 0, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 0, 406, 341,
	342, 343, 407, 408, 0, 0, 344, 0, 0, 0,
	0, 345, 346, 347, 348, 349, 657, 646, 647, 644,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 1224, 0,
	0, 350, 0, 0, 0, 0, 190, 191, 192, 351,
	689, 353, 690, 193, 691, 692, 0, 194, 357, 358,
	195, 196, 0, 0, 693, 694, 361, 0, 197, 362,
	0, 793, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 719, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 695, 214, 696, 697, 0, 215, 0, 216,
	0, 217, 0, 0, 688, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 653, 720,
	0, 0, 0, 0, 0, 225, 226, 698, 699, 700,
	0, 227, 0, 228, 0, 0, 721, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 232, 233, 374, 375,
	723, 0, 376, 237, 0, 234, 0, 722, 235, 701,
	236, 702, 703, 704, 705, 706, 0, 664, 0, 724,
	238, 239, 240, 725, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 726, 246, 247, 727, 0, 248,
	249, 0, 0, 250, 0, 251, 728, 252, 253, 255,
	387, 254, 729, 256, 257, 259, 258, 0, 0, 654,
	388, 260, 707, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 730, 266, 731, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 708, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 732, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 310, 298, 299, 311, 733, 312, 709, 398,
	313, 0, 0, 320, 314, 315, 300, 316, 319, 710,
	317, 318, 400, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 711, 712, 0, 0,
	330, 331, 404, 405, 652, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 0, 406, 341,
	342, 343, 407, 713, 0, 0, 344, 0, 0, 0,
	0, 345, 346, 347, 348, 349, 1005, 0, 789, 788,
	0, 0, 0, 786, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 0, 194,
	357, 358, 195, 196, 0, 0, 359, 360, 361, 0,
	197, 362, 0, 793, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 719,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 416, 213, 363, 214, 364, 365, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 366, 221, 223, 222, 224, 367, 368,
	0, 720, 0, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 0, 228, 0, 0, 721, 0,
	229, 372, 0, 373, 0, 0, 230, 231, 232, 233,
	374, 375, 723, 0, 376, 237, 0, 234, 0, 722,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 724, 238, 239, 240, 725, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 726, 246, 247, 727,
	0, 248, 249, 0, 0, 250, 0, 251, 728, 252,
	253, 255, 387, 254, 729, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 730, 266, 731, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 732, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 733, 312,
	397, 398, 313, 0, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 402, 403,
	0, 0, 330, 331, 404, 405, 0, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 0,
	406, 341, 342, 343, 407, 408, 0, 0, 344, 0,
	0, 0, 0, 345, 346, 347, 348, 349, 944, 0,
	789, 788, 0, 0, 0, 786, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 793, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 719, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 720, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	721, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	232, 233, 943, 375, 723, 0, 376, 237, 0, 234,
	0, 722, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 724, 238, 239, 240, 725, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 726, 246,
	247, 727, 0, 248, 249, 0, 0, 250, 0, 251,
	728, 252, 253, 255, 387, 254, 729, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 730, 266,
	731, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 732, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	733, 312, 397, 398, 313, 0, 0, 320, 314, 315,
	300, 316, 319, 399, 317, 318, 400, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	402, 403, 0, 0, 330, 331, 404, 405, 0, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 0, 406, 341, 342, 343, 407, 408, 0, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	910, 0, 789, 788, 0, 0, 0, 786, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 197, 362, 0, 793, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 719, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 720, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 721, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 232, 233, 909, 375, 723, 0, 376, 237,
	0, 234, 0, 722, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 724, 238, 239, 240, 725,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 386,
	726, 246, 247, 727, 0, 248, 249, 0, 0, 250,
	0, 251, 728, 252, 253, 255, 387, 254, 729, 256,
	257, 259, 258, 0, 0, 0, 388, 260, 389, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	730, 266, 731, 391, 267, 268, 269, 270, 271, 0,
	272, 392, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	732, 295, 296, 395, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 0, 310, 298,
	299, 311, 733, 312, 397, 398, 313, 0, 0, 320,
	314, 315, 300, 316, 319, 399, 317, 318, 400, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 402, 403, 0, 0, 330, 331, 404, 405,
	0, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 0, 406, 341, 342, 343, 407, 408,
	0, 0, 344, 0, 0, 0, 0, 345, 346, 347,
	348, 349, 782, 0, 789, 788, 0, 0, 0, 786,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 197, 362, 0, 793,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 719, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 720, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 721, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 232, 233, 784, 375, 723, 0,
	376, 237, 0, 234, 0, 722, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 724, 238, 239,
	240, 725, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 726, 246, 247, 727, 0, 248, 249, 0,
	0, 250, 0, 251, 728, 252, 253, 255, 387, 254,
	729, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 730, 266, 731, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 732, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 733, 312, 397, 398, 313, 0,
	0, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 402, 403, 0, 0, 330, 331,
	404, 405, 0, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 0, 406, 341, 342, 343,
	407, 408, 0, 499, 344, 184, 0, 0, 0, 345,
	346, 347, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	350, 0, 0, 0, 0, 190, 191, 192, 351, 352,
	353, 354, 193, 355, 356, 0, 194, 357, 358, 195,
	196, 0, 0, 359, 360, 361, 0, 197, 362, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 180,
	213, 363, 214, 364, 365, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	366, 221, 223, 222, 224, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 369, 370, 371, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 372, 0,
	373, 0, 0, 230, 231, 232, 233, 374, 375, 0,
	0, 376, 237, 0, 234, 0, 0, 235, 377, 236,
	378, 379, 380, 381, 382, 0, 383, 0, 0, 238,
	239, 240, 0, 384, 385, 241, 242, 243, 0, 245,
	244, 0, 386, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 387,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 388,
	260, 389, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 390, 0, 266, 0, 391, 267, 268, 269,
	270, 271, 0, 272, 392, 273, 393, 274, 0, 275,
	276, 277, 278, 279, 394, 280, 281, 0, 282, 283,
	284, 285, 286, 0, 288, 289, 287, 290, 291, 292,
	293, 0, 294, 0, 295, 296, 395, 297, 0, 301,
	302, 303, 304, 305, 0, 307, 396, 306, 308, 309,
	0, 310, 298, 299, 311, 0, 312, 397, 398, 313,
	0, 0, 320, 314, 315, 300, 316, 319, 399, 317,
	318, 400, 0, 321, 179, 322, 323, 324, 325, 326,
	327, 328, 329, 0, 401, 402, 403, 0, 0, 330,
	331, 404, 405, 0, 332, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 0, 406, 341, 342,
	343, 407, 408, 0, 177, 344, 184, 0, 0, 0,
	345, 346, 347, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	183, 350, 0, 0, 0, 0, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 0, 197, 362,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	180, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 232, 233, 374, 375,
	0, 0, 376, 237, 0, 234, 0, 0, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 0,
	238, 239, 240, 0, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	387, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 0, 266, 0, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 0, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 310, 298, 299, 311, 0, 312, 397, 398,
	313, 0, 0, 320, 314, 315, 300, 316, 319, 399,
	317, 318, 400, 0, 321, 179, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 402, 403, 0, 0,
	330, 331, 404, 405, 0, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 0, 406, 341,
	342, 343, 407, 408, 789, 788, 344, 0, 0, 786,
	0, 345, 346, 347, 348, 349, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 350,
	0, 183, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 197, 362, 0, 793,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 719, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 720, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 721, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 232, 233, 374, 375, 723, 0,
	376, 237, 0, 234, 0, 722, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 724, 238, 239,
	240, 725, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 726, 246, 247, 727, 0, 248, 249, 0,
	0, 250, 0, 251, 728, 252, 253, 255, 387, 254,
	729, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 730, 266, 731, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 732, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 733, 312, 397, 398, 313, 0,
	0, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 402, 403, 0, 0, 330, 331,
	404, 405, 0, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 0, 406, 341, 342, 343,
	407, 408, 184, 0, 344, 0, 0, 0, 0, 345,
	346, 347, 348, 349, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 197, 362, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 180, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 232, 233, 374, 375, 0, 0, 376, 237,
	0, 234, 0, 0, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 0, 238, 239, 240, 0,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 386,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 387, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 388, 260, 389, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	0, 266, 0, 391, 267, 268, 269, 270, 271, 0,
	272, 392, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	0, 295, 296, 395, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 0, 310, 298,
	299, 311, 0, 312, 397, 398, 313, 0, 0, 320,
	314, 315, 300, 316, 319, 399, 317, 318, 400, 0,
	321, 179, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 402, 403, 0, 0, 330, 331, 404, 405,
	0, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 0, 406, 341, 342, 343, 407, 408,
	789, 788, 344, 0, 0, 0, 0, 345, 346, 347,
	348, 349, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 350, 0, 183, 0, 0,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 793, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 719, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 720, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	721, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	232, 233, 374, 375, 723, 0, 376, 237, 0, 234,
	0, 722, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 724, 238, 239, 240, 725, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 726, 246,
	247, 727, 0, 248, 249, 0, 0, 250, 0, 251,
	728, 252, 253, 255, 387, 254, 729, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 730, 266,
	731, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 732, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	733, 312, 397, 398, 313, 0, 0, 320, 314, 315,
	300, 316, 319, 399, 317, 318, 400, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	402, 403, 0, 0, 330, 331, 404, 405, 0, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 0, 406, 341, 342, 343, 407, 408, 184, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 0, 194,
	357, 358, 195, 196, 0, 0, 359, 360, 361, 0,
	197, 362, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 416, 213, 363, 214, 364, 365, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 366, 221, 223, 222, 224, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 372, 0, 373, 0, 0, 230, 231, 232, 233,
	374, 375, 0, 0, 376, 237, 0, 234, 0, 0,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 0, 238, 239, 240, 0, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 387, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 0, 266, 0, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 0, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 0, 312,
	397, 398, 313, 0, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 402, 403,
	0, 0, 330, 331, 404, 405, 0, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 0,
	406, 341, 342, 343, 407, 408, 789, 0, 344, 0,
	0, 0, 0, 345, 346, 347, 348, 349, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 350, 0, 183, 0, 0, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 0, 197, 362,
	0, 793, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 719, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 720,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 0, 0, 721, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 232, 233, 374, 375,
	723, 0, 376, 237, 0, 234, 0, 722, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 724,
	238, 239, 240, 725, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 726, 246, 247, 727, 0, 248,
	249, 0, 0, 250, 0, 251, 728, 252, 253, 255,
	387, 254, 729, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 730, 266, 731, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 732, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 310, 298, 299, 311, 733, 312, 397, 398,
	313, 0, 0, 320, 314, 315, 300, 316, 319, 399,
	317, 318, 400, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 402, 403, 0, 0,
	330, 331, 404, 405, 0, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 0, 406, 341,
	342, 343, 407, 408, 184, 0, 344, 0, 0, 0,
	0, 345, 346, 347, 348, 349, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 1669, 197, 362, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 1667,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 1713, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 1672, 0, 0, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 232, 233, 374, 375, 0, 0,
	376, 237, 1711, 234, 0, 0, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 0, 238, 239,
	240, 0, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 387, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 0, 266, 0, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 1671, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 0, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 0, 312, 397, 398, 313, 0,
	0, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 402, 403, 0, 0, 330, 331,
	404, 405, 0, 332, 333, 334, 335, 0, 1712, 336,
	337, 338, 339, 0, 340, 0, 406, 341, 342, 343,
	407, 408, 184, 0, 344, 0, 0, 0, 0, 345,
	346, 347, 348, 349, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 1669, 197, 362, 0, 0, 1664, 198,
	199, 200, 0, 202, 203, 204, 201, 1667, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	1672, 0, 0, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 232, 233, 1663, 375, 0, 0, 376, 237,
	0, 234, 0, 0, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 0, 238, 239, 240, 0,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 386,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 387, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 388, 260, 389, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	0, 266, 0, 391, 267, 268, 269, 270, 271, 0,
	272, 392, 273, 393, 274, 1671, 275, 276, 277, 278,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	0, 295, 296, 395, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 0, 310, 298,
	299, 311, 0, 312, 397, 398, 313, 0, 0, 320,
	314, 315, 300, 316, 319, 399, 317, 318, 400, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 402, 403, 0, 0, 330, 331, 404, 405,
	0, 332, 333, 334, 335, 0, 1670, 336, 337, 338,
	339, 0, 340, 0, 406, 341, 342, 343, 407, 408,
	0, 926, 344, 184, 0, 0, 0, 345, 346, 347,
	348, 349, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 350, 0,
	0, 0, 0, 190, 191, 192, 351, 352, 353, 354,
	193, 355, 356, 0, 194, 357, 358, 195, 196, 0,
	0, 359, 360, 361, 0, 197, 362, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 416, 213, 363,
	214, 364, 365, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 366, 221,
	223, 222, 224, 367, 368, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 369, 370, 371, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 372, 0, 373, 0,
	0, 230, 231, 232, 233, 374, 375, 0, 0, 376,
	237, 0, 234, 0, 0, 235, 377, 236, 378, 379,
	380, 381, 382, 0, 383, 0, 0, 238, 239, 240,
	0, 384, 385, 241, 242, 243, 0, 245, 244, 0,
	386, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 387, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 388, 260, 389,
	261, 262, 0, 263, 0, 772, 264, 0, 0, 265,
	390, 0, 266, 0, 391, 267, 268, 269, 270, 271,
	0, 272, 392, 273, 393, 274, 0, 275, 276, 277,
	278, 279, 394, 280, 281, 0, 282, 283, 284, 285,
	286, 0, 288, 289, 287, 290, 291, 292, 293, 0,
	294, 0, 295, 296, 395, 297, 0, 301, 302, 303,
	304, 305, 0, 307, 396, 306, 308, 309, 0, 310,
	298, 299, 311, 0, 312, 397, 398, 313, 0, 0,
	320, 314, 315, 300, 316, 319, 399, 317, 318, 400,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 402, 403, 0, 0, 330, 331, 404,
	405, 0, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 0, 406, 341, 342, 343, 407,
	408, 0, 778, 344, 184, 0, 0, 0, 345, 346,
	347, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 197, 362, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 232, 233, 780, 375, 0, 0,
	376, 237, 0, 234, 0, 0, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 0, 238, 239,
	240, 0, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 387, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 772, 264, 0, 0,
	265, 390, 0, 266, 0, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 0, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 0, 312, 397, 398, 313, 0,
	0, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 402, 403, 0, 0, 330, 331,
	404, 405, 0, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 0, 406, 341, 342, 343,
	407, 408, 0, 774, 344, 184, 0, 0, 0, 345,
	346, 347, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	350, 0, 0, 0, 0, 190, 191, 192, 351, 352,
	353, 354, 193, 355, 356, 0, 194, 357, 358, 195,
	196, 0, 0, 359, 360, 361, 0, 197, 362, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 416,
	213, 363, 214, 364, 365, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	366, 221, 223, 222, 224, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 369, 370, 371, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 372, 0,
	373, 0, 0, 230, 231, 232, 233, 776, 375, 0,
	0, 376, 237, 0, 234, 0, 0, 235, 377, 236,
	378, 379, 380, 381, 382, 0, 383, 0, 0, 238,
	239, 240, 0, 384, 385, 241, 242, 243, 0, 245,
	244, 0, 386, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 387,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 388,
	260, 389, 261, 262, 0, 263, 0, 772, 264, 0,
	0, 265, 390, 0, 266, 0, 391, 267, 268, 269,
	270, 271, 0, 272, 392, 273, 393, 274, 0, 275,
	276, 277, 278, 279, 394, 280, 281, 0, 282, 283,
	284, 285, 286, 0, 288, 289, 287, 290, 291, 292,
	293, 0, 294, 0, 295, 296, 395, 297, 0, 301,
	302, 303, 304, 305, 0, 307, 396, 306, 308, 309,
	0, 310, 298, 299, 311, 0, 312, 397, 398, 313,
	0, 0, 320, 314, 315, 300, 316, 319, 399, 317,
	318, 400, 0, 321, 0, 322, 323, 324, 325, 326,
	327, 328, 329, 0, 401, 402, 403, 0, 0, 330,
	331, 404, 405, 0, 332, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 0, 406, 341, 342,
	343, 407, 408, 0, 428, 344, 184, 0, 0, 0,
	345, 346, 347, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 427, 0, 189, 0, 0, 0,
	0, 350, 0, 0, 0, 0, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 0, 197, 362,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 232, 233, 374, 375,
	0, 0, 376, 237, 0, 234, 0, 0, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 0,
	238, 239, 240, 0, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	387, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 0, 266, 0, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 426, 0,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 0, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 310, 298, 299, 311, 0, 312, 397, 398,
	313, 0, 0, 320, 314, 315, 300, 316, 319, 399,
	317, 318, 400, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 402, 403, 0, 0,
	330, 331, 404, 405, 0, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 0, 406, 341,
	342, 343, 407, 408, 184, 0, 344, 0, 0, 0,
	0, 345, 346, 347, 348, 349, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 350,
	0, 1652, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 197, 362, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 232, 233, 374, 375, 0, 0,
	376, 237, 0, 234, 0, 0, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 0, 238, 239,
	240, 0, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 387, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 0, 266, 0, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 0, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 0, 312, 397, 398, 313, 0,
	0, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 402, 403, 0, 0, 330, 331,
	404, 405, 0, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 0, 406, 341, 342, 343,
	407, 408, 184, 2253, 344, 0, 0, 0, 0, 345,
	346, 347, 348, 349, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 197, 362, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 232, 233, 374, 375, 0, 0, 376, 237,
	0, 234, 0, 0, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 0, 238, 239, 240, 0,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 386,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 387, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 388, 260, 389, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	0, 266, 0, 391, 267, 268, 269, 270, 271, 0,
	272, 392, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	0, 295, 296, 395, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 0, 310, 298,
	299, 311, 0, 312, 397, 398, 313, 0, 0, 320,
	314, 315, 300, 316, 319, 399, 317, 318, 400, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 402, 403, 0, 0, 330, 331, 404, 405,
	0, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 0, 406, 341, 342, 343, 407, 408,
	184, 2253, 344, 0, 0, 0, 0, 345, 346, 347,
	348, 349, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	232, 233, 374, 375, 0, 0, 376, 237, 0, 234,
	0, 0, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 0, 238, 239, 240, 0, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 387, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 2250, 0, 0, 265, 390, 0, 266,
	0, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 0, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	0, 312, 397, 398, 313, 0, 0, 320, 314, 315,
	300, 316, 319, 399, 317, 318, 400, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	402, 403, 0, 0, 330, 331, 404, 405, 0, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 0, 406, 341, 342, 343, 407, 408, 184, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 0, 194,
	357, 358, 195, 196, 0, 0, 359, 360, 361, 0,
	197, 362, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 416, 213, 363, 214, 364, 365, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 366, 221, 223, 222, 224, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 372, 0, 373, 0, 0, 230, 231, 232, 233,
	374, 375, 0, 0, 376, 237, 0, 234, 0, 0,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 0, 238, 239, 240, 0, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 387, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	772, 264, 0, 0, 265, 390, 0, 266, 0, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 0, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 0, 312,
	397, 398, 313, 0, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 402, 403,
	0, 0, 330, 331, 404, 405, 0, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 0,
	406, 341, 342, 343, 407, 408, 0, 1414, 344, 184,
	0, 0, 0, 345, 346, 347, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 0, 0, 189,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 190,
	191, 192, 351, 352, 353, 354, 193, 355, 356, 0,
	194, 357, 358, 195, 196, 0, 0, 359, 360, 361,
	0, 197, 362, 0, 0, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	0, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 416, 213, 363, 214, 364, 365, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 366, 221, 223, 222, 224, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	369, 370, 371, 0, 227, 0, 228, 0, 0, 0,
	0, 229, 372, 0, 373, 0, 0, 230, 231, 232,
	233, 374, 375, 0, 0, 376, 237, 0, 234, 0,
	0, 235, 377, 236, 378, 379, 380, 381, 382, 0,
	383, 0, 0, 238, 239, 240, 0, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 386, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 387, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 388, 260, 389, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 0, 266, 0,
	391, 267, 268, 269, 270, 271, 0, 272, 392, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 394, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 0, 295, 296,
	395, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 0, 310, 298, 299, 311, 0,
	312, 397, 398, 313, 0, 0, 320, 314, 315, 300,
	316, 319, 399, 317, 318, 400, 0, 321, 0, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 402,
	403, 0, 0, 330, 331, 404, 405, 0, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	0, 406, 341, 342, 343, 407, 408, 0, 1412, 344,
	184, 0, 0, 0, 345, 346, 347, 348, 349, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	232, 233, 374, 375, 0, 0, 376, 237, 0, 234,
	0, 0, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 0, 238, 239, 240, 0, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 387, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 0, 266,
	0, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 0, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	0, 312, 397, 398, 313, 0, 0, 320, 314, 315,
	300, 316, 319, 399, 317, 318, 400, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	402, 403, 0, 0, 330, 331, 404, 405, 0, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 0, 406, 341, 342, 343, 407, 408, 184, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	0, 0, 0, 0, 187, 188, 1394, 0, 189, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 0, 194,
	357, 358, 195, 196, 0, 0, 359, 360, 361, 0,
	197, 362, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 416, 213, 363, 214, 364, 365, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 366, 221, 223, 222, 224, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 372, 0, 373, 0, 0, 230, 231, 232, 233,
	374, 375, 0, 0, 376, 237, 0, 234, 0, 0,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 0, 238, 239, 240, 0, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 387, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 0, 266, 0, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 0, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 0, 312,
	397, 398, 313, 0, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 402, 403,
	0, 0, 330, 331, 404, 405, 0, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 0,
	406, 341, 342, 343, 407, 408, 0, 525, 344, 184,
	0, 0, 0, 345, 346, 347, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 0, 0, 189,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 190,
	191, 192, 351, 352, 353, 354, 193, 355, 356, 0,
	194, 357, 358, 195, 196, 0, 0, 359, 360, 984,
	0, 197, 362, 0, 0, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	0, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 416, 213, 363, 214, 364, 365, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 366, 221, 223, 222, 224, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	369, 370, 371, 0, 227, 0, 228, 0, 0, 0,
	0, 229, 372, 0, 373, 0, 0, 230, 231, 232,
	233, 374, 375, 0, 0, 376, 237, 0, 234, 0,
	0, 235, 377, 236, 378, 379, 380, 381, 382, 0,
	383, 0, 0, 238, 239, 240, 0, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 386, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 387, 527, 0, 256, 257, 259, 258,
	0, 0, 0, 388, 260, 389, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 0, 266, 0,
	391, 267, 268, 269, 270, 271, 0, 272, 392, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 394, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 0, 295, 296,
	395, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 0, 310, 298, 299, 311, 0,
	312, 397, 398, 313, 0, 0, 320, 314, 315, 300,
	316, 319, 399, 317, 318, 400, 0, 321, 0, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 522, 402,
	403, 0, 0, 330, 331, 404, 405, 0, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	0, 406, 341, 342, 343, 407, 408, 0, 1271, 344,
	184, 0, 0, 0, 345, 346, 347, 348, 349, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	232, 233, 1270, 375, 0, 0, 376, 237, 0, 234,
	0, 0, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 0, 238, 239, 240, 0, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 387, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 0, 266,
	0, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 0, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	0, 312, 397, 398, 313, 0, 0, 320, 314, 315,
	300, 316, 319, 399, 317, 318, 400, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	402, 403, 0, 0, 330, 331, 404, 405, 0, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 0, 406, 341, 342, 343, 407, 408, 0, 525,
	344, 184, 0, 0, 0, 345, 346, 347, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 350, 0, 0, 0,
	0, 190, 191, 192, 351, 352, 353, 354, 193, 355,
	356, 0, 194, 357, 358, 195, 196, 0, 0, 359,
	360, 984, 0, 197, 362, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 416, 213, 363, 214, 364,
	365, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 366, 221, 223, 222,
	224, 367, 368, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 369, 370, 371, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 372, 0, 373, 0, 0, 230,
	231, 232, 233, 374, 375, 0, 0, 376, 237, 0,
	234, 0, 0, 235, 377, 236, 378, 379, 380, 381,
	382, 0, 383, 0, 0, 238, 239, 240, 0, 384,
	385, 241, 242, 243, 0, 245, 244, 0, 386, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 0, 252, 253, 255, 387, 527, 0, 256, 257,
	259, 258, 0, 0, 0, 388, 260, 389, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 390, 0,
	266, 0, 391, 267, 268, 269, 270, 271, 0, 272,
	392, 273, 393, 274, 0, 275, 276, 277, 278, 279,
	394, 280, 281, 0, 282, 283, 284, 285, 286, 0,
	288, 289, 287, 290, 291, 292, 293, 0, 294, 0,
	295, 296, 395, 297, 0, 301, 302, 303, 304, 305,
	0, 307, 396, 306, 308, 309, 0, 310, 298, 299,
	311, 0, 312, 397, 398, 313, 0, 0, 320, 314,
	315, 300, 316, 319, 399, 317, 318, 400, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	522, 402, 403, 0, 0, 330, 985, 404, 405, 0,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 0, 406, 341, 342, 343, 407, 408, 0,
	525, 344, 184, 0, 0, 0, 345, 346, 347, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 516, 362, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 232, 233, 374, 375, 0, 0, 376, 237,
	0, 234, 0, 0, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 0, 238, 239, 240, 0,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 386,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 387, 527, 0, 256,
	257, 259, 258, 0, 0, 0, 388, 260, 389, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	0, 266, 0, 391, 267, 268, 269, 270, 271, 0,
	272, 392, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	0, 295, 296, 395, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 968, 309, 0, 310, 298,
	299, 311, 0, 312, 397, 398, 313, 0, 0, 320,
	314, 315, 300, 316, 319, 399, 317, 318, 400, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 522, 402, 403, 0, 0, 330, 331, 404, 405,
	0, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 0, 406, 341, 342, 343, 407, 408,
	0, 941, 344, 184, 0, 0, 0, 345, 346, 347,
	348, 349, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 350, 0,
	0, 0, 0, 190, 191, 192, 351, 352, 353, 354,
	193, 355, 356, 0, 194, 357, 358, 195, 196, 0,
	0, 359, 360, 361, 0, 197, 362, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 416, 213, 363,
	214, 364, 365, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 366, 221,
	223, 222, 224, 367, 368, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 369, 370, 371, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 372, 0, 373, 0,
	0, 230, 231, 232, 233, 940, 375, 0, 0, 376,
	237, 0, 234, 0, 0, 235, 377, 236, 378, 379,
	380, 381, 382, 0, 383, 0, 0, 238, 239, 240,
	0, 384, 385, 241, 242, 243, 0, 245, 244, 0,
	386, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 387, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 388, 260, 389,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	390, 0, 266, 0, 391, 267, 268, 269, 270, 271,
	0, 272, 392, 273, 393, 274, 0, 275, 276, 277,
	278, 279, 394, 280, 281, 0, 282, 283, 284, 285,
	286, 0, 288, 289, 287, 290, 291, 292, 293, 0,
	294, 0, 295, 296, 395, 297, 0, 301, 302, 303,
	304, 305, 0, 307, 396, 306, 308, 309, 0, 310,
	298, 299, 311, 0, 312, 397, 398, 313, 0, 0,
	320, 314, 315, 300, 316, 319, 399, 317, 318, 400,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 402, 403, 0, 0, 330, 331, 404,
	405, 0, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 0, 406, 341, 342, 343, 407,
	408, 0, 937, 344, 184, 0, 0, 0, 345, 346,
	347, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 197, 362, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 232, 233, 936, 375, 0, 0,
	376, 237, 0, 234, 0, 0, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 0, 238, 239,
	240, 0, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 387, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 0, 266, 0, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 0, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 0, 312, 397, 398, 313, 0,
	0, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 402, 403, 0, 0, 330, 331,
	404, 405, 0, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 0, 406, 341, 342, 343,
	407, 408, 0, 934, 344, 184, 0, 0, 0, 345,
	346, 347, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	350, 0, 0, 0, 0, 190, 191, 192, 351, 352,
	353, 354, 193, 355, 356, 0, 194, 357, 358, 195,
	196, 0, 0, 359, 360, 361, 0, 197, 362, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 416,
	213, 363, 214, 364, 365, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	366, 221, 223, 222, 224, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 369, 370, 371, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 372, 0,
	373, 0, 0, 230, 231, 232, 233, 933, 375, 0,
	0, 376, 237, 0, 234, 0, 0, 235, 377, 236,
	378, 379, 380, 381, 382, 0, 383, 0, 0, 238,
	239, 240, 0, 384, 385, 241, 242, 243, 0, 245,
	244, 0, 386, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 387,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 388,
	260, 389, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 390, 0, 266, 0, 391, 267, 268, 269,
	270, 271, 0, 272, 392, 273, 393, 274, 0, 275,
	276, 277, 278, 279, 394, 280, 281, 0, 282, 283,
	284, 285, 286, 0, 288, 289, 287, 290, 291, 292,
	293, 0, 294, 0, 295, 296, 395, 297, 0, 301,
	302, 303, 304, 305, 0, 307, 396, 306, 308, 309,
	0, 310, 298, 299, 311, 0, 312, 397, 398, 313,
	0, 0, 320, 314, 315, 300, 316, 319, 399, 317,
	318, 400, 0, 321, 0, 322, 323, 324, 325, 326,
	327, 328, 329, 0, 401, 402, 403, 0, 0, 330,
	331, 404, 405, 0, 332, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 0, 406, 341, 342,
	343, 407, 408, 0, 930, 344, 184, 0, 0, 0,
	345, 346, 347, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 350, 0, 0, 0, 0, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 0, 197, 362,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 232, 233, 929, 375,
	0, 0, 376, 237, 0, 234, 0, 0, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 0,
	238, 239, 240, 0, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	387, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 0, 266, 0, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 0, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 310, 298, 299, 311, 0, 312, 397, 398,
	313, 0, 0, 320, 314, 315, 300, 316, 319, 399,
	317, 318, 400, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 402, 403, 0, 0,
	330, 331, 404, 405, 0, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 0, 406, 341,
	342, 343, 407, 408, 184, 0, 344, 0, 0, 0,
	0, 345, 346, 347, 348, 349, 0, 0, 0, 0,
	187, 188, 918, 0, 189, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 197, 362, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 232, 233, 374, 375, 0, 0,
	376, 237, 0, 234, 0, 0, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 0, 238, 239,
	240, 0, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 387, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 0, 266, 0, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 0, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 0, 312, 397, 398, 313, 0,
	0, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 402, 403, 0, 0, 330, 331,
	404, 405, 0, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 0, 406, 341, 342, 343,
	407, 408, 0, 916, 344, 184, 0, 0, 0, 345,
	346, 347, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	350, 0, 0, 0, 0, 190, 191, 192, 351, 352,
	353, 354, 193, 355, 356, 0, 194, 357, 358, 195,
	196, 0, 0, 359, 360, 361, 0, 197, 362, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 416,
	213, 363, 214, 364, 365, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	366, 221, 223, 222, 224, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 369, 370, 371, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 372, 0,
	373, 0, 0, 230, 231, 232, 233, 915, 375, 0,
	0, 376, 237, 0, 234, 0, 0, 235, 377, 236,
	378, 379, 380, 381, 382, 0, 383, 0, 0, 238,
	239, 240, 0, 384, 385, 241, 242, 243, 0, 245,
	244, 0, 386, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 387,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 388,
	260, 389, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 390, 0, 266, 0, 391, 267, 268, 269,
	270, 271, 0, 272, 392, 273, 393, 274, 0, 275,
	276, 277, 278, 279, 394, 280, 281, 0, 282, 283,
	284, 285, 286, 0, 288, 289, 287, 290, 291, 292,
	293, 0, 294, 0, 295, 296, 395, 297, 0, 301,
	302, 303, 304, 305, 0, 307, 396, 306, 308, 309,
	0, 310, 298, 299, 311, 0, 312, 397, 398, 313,
	0, 0, 320, 314, 315, 300, 316, 319, 399, 317,
	318, 400, 0, 321, 0, 322, 323, 324, 325, 326,
	327, 328, 329, 0, 401, 402, 403, 0, 0, 330,
	331, 404, 405, 0, 332, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 0, 406, 341, 342,
	343, 407, 408, 0, 912, 344, 184, 0, 0, 0,
	345, 346, 347, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 350, 0, 0, 0, 0, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 0, 197, 362,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 232, 233, 374, 375,
	0, 0, 376, 237, 0, 234, 0, 0, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 0,
	238, 239, 240, 0, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	387, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 0, 266, 0, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 0, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 310, 298, 299, 311, 0, 312, 397, 398,
	313, 0, 0, 320, 314, 315, 300, 316, 319, 399,
	317, 318, 400, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 402, 403, 0, 0,
	330, 331, 404, 405, 0, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 0, 406, 341,
	342, 343, 407, 408, 0, 905, 344, 184, 0, 0,
	0, 345, 346, 347, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 350, 0, 0, 0, 0, 190, 191, 192,
	351, 352, 353, 354, 193, 355, 356, 0, 194, 357,
	358, 195, 196, 0, 0, 359, 360, 361, 0, 197,
	362, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 416, 213, 363, 214, 364, 365, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 366, 221, 223, 222, 224, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 369, 370,
	371, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	372, 0, 373, 0, 0, 230, 231, 232, 233, 907,
	375, 0, 0, 376, 237, 0, 234, 0, 0, 235,
	377, 236, 378, 379, 380, 381, 382, 0, 383, 0,
	0, 238, 239, 240, 0, 384, 385, 241, 242, 243,
	0, 245, 244, 0, 386, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 387, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 388, 260, 389, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 390, 0, 266, 0, 391, 267,
	268, 269, 270, 271, 0, 272, 392, 273, 393, 274,
	0, 275, 276, 277, 278, 279, 394, 280, 281, 0,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 0, 294, 0, 295, 296, 395, 297,
	0, 301, 302, 303, 304, 305, 0, 307, 396, 306,
	308, 309, 0, 310, 298, 299, 311, 0, 312, 397,
	398, 313, 0, 0, 320, 314, 315, 300, 316, 319,
	399, 317, 318, 400, 0, 321, 0, 322, 323, 324,
	325, 326, 327, 328, 329, 0, 401, 402, 403, 0,
	0, 330, 331, 404, 405, 0, 332, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 0, 406,
	341, 342, 343, 407, 408, 0, 796, 344, 184, 0,
	0, 0, 345, 346, 347, 348, 349, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 0, 194,
	357, 358, 195, 196, 0, 0, 359, 360, 361, 0,
	197, 362, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 416, 213, 363, 214, 364, 365, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 366, 221, 223, 222, 224, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 372, 0, 373, 0, 0, 230, 231, 232, 233,
	798, 375, 0, 0, 376, 237, 0, 234, 0, 0,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 0, 238, 239, 240, 0, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 387, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 0, 266, 0, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 0, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 0, 312,
	397, 398, 313, 0, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 402, 403,
	0, 0, 330, 331, 404, 405, 0, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 0,
	406, 341, 342, 343, 407, 408, 0, 794, 344, 184,
	0, 0, 0, 345, 346, 347, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 0, 0, 189,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 190,
	191, 192, 351, 352, 353, 354, 193, 355, 356, 0,
	194, 357, 358, 195, 196, 0, 0, 359, 360, 361,
	0, 197, 362, 0, 0, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	0, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 416, 213, 363, 214, 364, 365, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 366, 221, 223, 222, 224, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	369, 370, 371, 0, 227, 0, 228, 0, 0, 0,
	0, 229, 372, 0, 373, 0, 0, 230, 231, 232,
	233, 374, 375, 0, 0, 376, 237, 0, 234, 0,
	0, 235, 377, 236, 378, 379, 380, 381, 382, 0,
	383, 0, 0, 238, 239, 240, 0, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 386, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 387, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 388, 260, 389, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 0, 266, 0,
	391, 267, 268, 269, 270, 271, 0, 272, 392, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 394, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 0, 295, 296,
	395, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 0, 310, 298, 299, 311, 0,
	312, 397, 398, 313, 0, 0, 320, 314, 315, 300,
	316, 319, 399, 317, 318, 400, 0, 321, 0, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 402,
	403, 0, 0, 330, 331, 404, 405, 0, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	0, 406, 341, 342, 343, 407, 408, 0, 525, 344,
	184, 0, 0, 0, 345, 346, 347, 348, 349, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 516, 362, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	232, 233, 374, 375, 0, 0, 376, 237, 0, 234,
	0, 0, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 0, 238, 239, 240, 0, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 0, 246,
	247, 0, 0, 248, 515, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 387, 527, 0, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 0, 266,
	0, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 0, 295,
	296, 517, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 518, 309, 0, 310, 298, 299, 311,
	0, 312, 397, 398, 313, 0, 0, 320, 314, 315,
	300, 316, 319, 399, 317, 318, 400, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 522,
	402, 403, 0, 0, 330, 520, 404, 405, 0, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 0, 406, 341, 342, 343, 407, 408, 0, 507,
	344, 184, 0, 0, 0, 345, 346, 347, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 350, 0, 0, 0,
	0, 190, 191, 192, 351, 352, 353, 354, 193, 355,
	356, 0, 194, 357, 358, 195, 196, 0, 0, 359,
	360, 361, 0, 197, 362, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 416, 213, 363, 214, 364,
	365, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 366, 221, 223, 222,
	224, 367, 368, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 369, 370, 371, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 372, 0, 373, 0, 0, 230,
	231, 232, 233, 374, 375, 0, 0, 376, 237, 0,
	234, 0, 0, 235, 377, 236, 378, 379, 380, 381,
	382, 0, 383, 0, 0, 238, 239, 240, 0, 384,
	385, 241, 242, 243, 0, 245, 244, 0, 386, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 0, 252, 253, 255, 387, 254, 0, 256, 257,
	259, 258, 0, 0, 0, 388, 260, 389, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 390, 0,
	266, 0, 391, 267, 268, 269, 270, 271, 0, 272,
	392, 273, 393, 274, 0, 275, 276, 277, 278, 279,
	394, 280, 281, 0, 282, 283, 284, 285, 286, 0,
	288, 289, 287, 290, 291, 292, 293, 0, 294, 0,
	295, 296, 395, 297, 0, 508, 302, 303, 304, 305,
	0, 307, 396, 306, 308, 309, 0, 310, 298, 299,
	311, 0, 312, 397, 398, 313, 0, 0, 320, 314,
	315, 300, 316, 319, 399, 317, 318, 400, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 402, 403, 0, 0, 330, 331, 404, 405, 0,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 0, 406, 341, 342, 343, 407, 408, 0,
	505, 344, 184, 0, 0, 0, 345, 346, 347, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 197, 362, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 232, 233, 374, 375, 0, 0, 376, 237,
	0, 234, 0, 0, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 0, 238, 239, 240, 0,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 386,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 387, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 388, 260, 389, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	0, 266, 0, 391, 267, 268, 269, 270, 271, 0,
	272, 392, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	0, 295, 296, 395, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 0, 310, 298,
	299, 311, 0, 312, 397, 398, 313, 0, 0, 320,
	314, 315, 300, 316, 319, 399, 317, 318, 400, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 402, 403, 0, 0, 330, 331, 404, 405,
	0, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 0, 406, 341, 342, 343, 407, 408,
	0, 497, 344, 184, 0, 0, 0, 345, 346, 347,
	348, 349, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 350, 0,
	0, 0, 0, 190, 191, 192, 351, 352, 353, 354,
	193, 355, 356, 0, 194, 357, 358, 195, 196, 0,
	0, 359, 360, 361, 0, 197, 362, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 416, 213, 363,
	214, 364, 365, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 366, 221,
	223, 222, 224, 367, 368, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 369, 370, 371, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 372, 0, 373, 0,
	0, 230, 231, 232, 233, 374, 375, 0, 0, 376,
	237, 0, 234, 0, 0, 235, 377, 236, 378, 379,
	380, 381, 382, 0, 383, 0, 0, 238, 239, 240,
	0, 384, 385, 241, 242, 243, 0, 245, 244, 0,
	386, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 387, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 388, 260, 389,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	390, 0, 266, 0, 391, 267, 268, 269, 270, 271,
	0, 272, 392, 273, 393, 274, 0, 275, 276, 277,
	278, 279, 394, 280, 281, 0, 282, 283, 284, 285,
	286, 0, 288, 289, 287, 290, 291, 292, 293, 0,
	294, 0, 295, 296, 395, 297, 0, 301, 302, 303,
	304, 305, 0, 307, 396, 306, 308, 309, 0, 310,
	298, 299, 311, 0, 312, 397, 398, 313, 0, 0,
	320, 314, 315, 300, 316, 319, 399, 317, 318, 400,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 402, 403, 0, 0, 330, 331, 404,
	405, 0, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 0, 406, 341, 342, 343, 407,
	408, 0, 447, 344, 184, 0, 0, 0, 345, 346,
	347, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 197, 362, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 232, 233, 374, 375, 0, 0,
	376, 237, 0, 234, 0, 0, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 0, 238, 239,
	240, 0, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 387, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 0, 266, 0, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 0, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 0, 312, 397, 398, 313, 0,
	0, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 402, 403, 0, 0, 330, 331,
	404, 405, 0, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 0, 406, 341, 342, 343,
	407, 408, 184, 0, 344, 0, 0, 0, 0, 345,
	346, 347, 348, 349, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 197, 362, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 232, 233, 374, 375, 0, 0, 376, 237,
	0, 234, 0, 0, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 0, 238, 239, 240, 0,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 386,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 387, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 388, 260, 389, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	0, 266, 0, 391, 267, 268, 269, 270, 271, 0,
	272, 392, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	0, 295, 296, 395, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 0, 310, 298,
	299, 311, 0, 312, 397, 398, 313, 0, 0, 320,
	314, 315, 300, 316, 319, 399, 317, 318, 400, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 402, 403, 0, 0, 330, 331, 404, 405,
	0, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 0, 406, 341, 342, 343, 407, 408,
	184, 0, 344, 0, 0, 0, 0, 345, 346, 347,
	348, 349, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	232, 233, 1974, 375, 0, 0, 376, 237, 0, 234,
	0, 0, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 0, 238, 239, 240, 0, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 387, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 0, 266,
	0, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 0, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	0, 312, 397, 398, 313, 0, 0, 320, 314, 315,
	300, 316, 319, 399, 317, 318, 400, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	402, 403, 0, 0, 330, 331, 404, 405, 0, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 0, 406, 341, 342, 343, 407, 408, 184, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 0, 194,
	357, 358, 195, 196, 0, 0, 359, 360, 361, 0,
	197, 362, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 416, 213, 363, 214, 364, 365, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 366, 221, 223, 222, 224, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 372, 0, 373, 0, 0, 230, 231, 232, 233,
	1972, 375, 0, 0, 376, 237, 0, 234, 0, 0,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 0, 238, 239, 240, 0, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 387, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 0, 266, 0, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 0, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 0, 312,
	397, 398, 313, 0, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 402, 403,
	0, 0, 330, 331, 404, 405, 0, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 0,
	406, 341, 342, 343, 407, 408, 184, 0, 344, 0,
	0, 0, 0, 345, 346, 347, 348, 349, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 350, 0, 0, 0, 0, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 0, 197, 362,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 232, 233, 1961, 375,
	0, 0, 376, 237, 0, 234, 0, 0, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 0,
	238, 239, 240, 0, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	387, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 0, 266, 0, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 0, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 310, 298, 299, 311, 0, 312, 397, 398,
	313, 0, 0, 320, 314, 315, 300, 316, 319, 399,
	317, 318, 400, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 402, 403, 0, 0,
	330, 331, 404, 405, 0, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 0, 406, 341,
	342, 343, 407, 408, 184, 0, 344, 0, 0, 0,
	0, 345, 346, 347, 348, 349, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 197, 362, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 232, 233, 374, 375, 0, 0,
	376, 237, 0, 234, 0, 0, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 0, 238, 239,
	240, 0, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 387, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 0, 266, 0, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 0, 295, 296, 395, 297, 0, 508, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 0, 312, 397, 398, 313, 0,
	0, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 402, 403, 0, 0, 330, 331,
	404, 405, 0, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 0, 406, 341, 342, 343,
	407, 408, 184, 0, 344, 0, 0, 0, 0, 345,
	346, 347, 348, 349, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 350, 0, 1281,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 197, 362, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 232, 233, 374, 375, 0, 0, 376, 237,
	0, 234, 0, 0, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 0, 238, 239, 240, 0,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 386,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 387, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 388, 260, 389, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	0, 266, 0, 391, 267, 268, 269, 270, 271, 0,
	272, 392, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	0, 295, 296, 395, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 0, 0, 298,
	299, 311, 0, 312, 397, 398, 313, 0, 0, 320,
	314, 315, 300, 316, 319, 399, 317, 318, 400, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 402, 403, 0, 0, 330, 331, 404, 405,
	0, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 0, 406, 341, 342, 343, 407, 408,
	184, 0, 344, 0, 0, 0, 0, 345, 346, 347,
	348, 349, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	232, 233, 374, 375, 0, 0, 376, 237, 0, 234,
	0, 0, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 0, 238, 239, 240, 0, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 387, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 0, 266,
	0, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	749, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 0, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	0, 312, 397, 398, 313, 0, 0, 320, 314, 315,
	300, 316, 319, 399, 317, 318, 400, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	402, 403, 0, 0, 330, 331, 404, 405, 0, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 0, 406, 341, 342, 343, 407, 408, 184, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 0, 194,
	357, 358, 195, 196, 0, 0, 359, 360, 361, 0,
	197, 362, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 416, 213, 363, 214, 364, 365, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 366, 221, 223, 222, 224, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 372, 0, 373, 0, 0, 230, 231, 232, 233,
	374, 375, 0, 0, 376, 237, 0, 234, 0, 0,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 0, 238, 239, 240, 0, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 387, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 0, 266, 0, 391,
	267, 268, 0, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 0, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 0, 295, 296, 395,
	0, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 0, 312,
	397, 398, 313, 0, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 402, 403,
	0, 0, 330, 331, 404, 405, 0, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 0,
	406, 341, 342, 343, 407, 408, 0, 0, 344, 0,
	0, 0, 0, 345, 346, 347, 348, 349, 1075, 1076,
	0, 1105, 1106, 1107, 1115, 1116, 1117, 0, 0, 0,
	0, 1093, 0, 0, 0, 1108, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 1119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1077, 0, 0, 0,
	1075, 1076, 1097, 1105, 1106, 1107, 1115, 1116, 1117, 1094,
	0, 0, 0, 1093, 0, 0, 0, 1108, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 1119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1077, 0,
	0, 0, 0, 0, 1097, 0, 0, 1100, 1101, 1102,
	1103, 1094, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1112, 1120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1118, 0, 0, 0, 1100,
	1101, 1102, 1103, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 1110, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 1112, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1109, 1118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1110, 0, 0, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 1109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 1075, 1076, 0, 1105, 1106, 1107,
	1115, 1116, 1117, 0, 1113, 0, 0, 1093, 0, 0,
	1092, 1108, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 1119, 1111, 0, 0, 1089, 1090, 1096, 1095, 1091,
	1114, 0, 1088, 1086, 1087, 1079, 1080, 1081, 1082, 1084,
	1085, 0, 1077, 0, 0, 0, 0, 0, 1097, 1908,
	0, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1111, 0, 0, 1089, 1090, 1096,
	1095, 1091, 1114, 0, 1088, 1086, 1087, 1079, 1080, 1081,
	1082, 1084, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 1860, 0, 1100, 1101, 1102, 1103, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1075, 1076, 0, 1105, 1106, 1107, 1115,
	1116, 1117, 1112, 1120, 0, 0, 1093, 0, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	1119, 1118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1110,
	0, 1077, 0, 0, 0, 0, 1098, 1097, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 1101, 1102, 1103, 1104, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1112, 1120, 0, 0, 0, 0, 0, 1113, 0,
	0, 0, 0, 0, 1092, 0, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1110, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 1075, 1076, 0, 1105, 1106, 1107, 1115, 1116,
	1117, 0, 0, 0, 0, 1093, 0, 0, 0, 1108,
	0, 1109, 0, 0, 0, 0, 1078, 0, 1111, 1119,
	0, 1089, 1090, 1096, 1095, 1091, 1114, 0, 1088, 1086,
	1087, 1079, 1080, 1081, 1082, 1084, 1085, 0, 0, 0,
	1077, 2533, 0, 0, 0, 1104, 1097, 0, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
	0, 1075, 1076, 1092, 1105, 1106, 1107, 1115, 1116, 1117,
	0, 0, 0, 0, 1093, 0, 0, 0, 1108, 0,
	0, 1100, 1101, 1102, 1103, 1078, 0, 0, 1119, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1077,
	1112, 1120, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 1094, 0, 0, 0, 0, 1111, 0, 1118,
	1089, 1090, 1096, 1095, 1091, 1114, 0, 1088, 1086, 1087,
	1079, 1080, 1081, 1082, 1084, 1085, 0, 1110, 0, 0,
	2483, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 1101, 1102, 1103, 0, 0, 0, 0, 0, 1083,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	1120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 0, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 1110, 0, 0, 0,
	0, 0, 0, 1098, 0, 0, 1113, 0, 0, 0,
	1075, 1076, 1092, 1105, 1106, 1107, 1115, 1116, 1117, 0,
	0, 0, 0, 1093, 0, 0, 0, 1108, 0, 1109,
	0, 0, 0, 0, 1078, 0, 0, 1119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1077, 0,
	0, 0, 0, 1104, 1097, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 1111, 0, 1099, 1089,
	1090, 1096, 1095, 1091, 1114, 0, 1088, 1086, 1087, 1079,
	1080, 1081, 1082, 1084, 1085, 1113, 0, 0, 0, 2437,
	0, 1092, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1100,
	1101, 1102, 1103, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1075,
	1076, 0, 1105, 1106, 1107, 1115, 1116, 1117, 1112, 1120,
	0, 0, 1093, 0, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 1078, 0, 1111, 1119, 1118, 1089, 1090,
	1096, 1095, 1091, 1114, 0, 1088, 1086, 1087, 1079, 1080,
	1081, 1082, 1084, 1085, 0, 1110, 0, 1077, 2407, 0,
	0, 0, 1098, 1097, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 1101,
	1102, 1103, 1104, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1112, 1120, 0,
	0, 0, 0, 0, 1113, 0, 0, 0, 0, 0,
	1092, 0, 0, 0, 0, 0, 1118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1110, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 1075, 1076,
	0, 1105, 1106, 1107, 1115, 1116, 1117, 0, 0, 0,
	0, 1093, 0, 0, 0, 1108, 0, 1109, 0, 0,
	0, 0, 1078, 0, 1111, 1119, 0, 1089, 1090, 1096,
	1095, 1091, 1114, 0, 1088, 1086, 1087, 1079, 1080, 1081,
	1082, 1084, 1085, 0, 0, 0, 1077, 2402, 0, 0,
	0, 1104, 1097, 0, 0, 0, 0, 0, 0, 1094,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1113, 0, 0, 0, 1075, 1076, 1092,
	1105, 1106, 1107, 1115, 1116, 1117, 0, 0, 0, 0,
	1093, 0, 0, 0, 1108, 0, 0, 1100, 1101, 1102,
	1103, 1078, 0, 0, 1119, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1077, 1112, 1120, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 1111, 0, 1118, 1089, 1090, 1096, 1095,
	1091, 1114, 0, 1088, 1086, 1087, 1079, 1080, 1081, 1082,
	1084, 1085, 0, 1110, 0, 0, 2398, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 1101, 1102, 1103,
	0, 0, 0, 0, 0, 1083, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1112, 1120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 1118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 1110, 0, 0, 0, 0, 0, 0, 1098,
	0, 0, 1113, 0, 0, 0, 1075, 1076, 1092, 1105,
	1106, 1107, 1115, 1116, 1117, 0, 0, 0, 0, 1093,
	0, 0, 0, 1108, 0, 1109, 0, 0, 0, 0,
	1078, 0, 0, 1119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1077, 0, 0, 0, 0, 1104,
	1097, 0, 0, 0, 0, 0, 0, 1094, 0, 0,
	0, 0, 1111, 0, 1099, 1089, 1090, 1096, 1095, 1091,
	1114, 0, 1088, 1086, 1087, 1079, 1080, 1081, 1082, 1084,
	1085, 1113, 0, 0, 0, 2332, 0, 1092, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 1101, 1102, 1103, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1075, 1076, 0, 1105, 1106,
	1107, 1115, 1116, 1117, 1112, 1120, 0, 0, 1093, 0,
	0, 0, 1108, 0, 0, 0, 0, 0, 0, 1078,
	0, 1111, 1119, 1118, 1089, 1090, 1096, 1095, 1091, 1114,
	0, 1088, 1086, 1087, 1079, 1080, 1081, 1082, 1084, 1085,
	0, 1110, 0, 1077, 2298, 0, 0, 0, 1098, 1097,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 1101, 1102, 1103, 1104, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 1120, 0, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 1092, 0, 0, 0,
	0, 0, 1118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1110, 0, 0, 0, 0, 0, 0, 1098, 0, 0,
	0, 0, 0, 0, 1075, 1076, 0, 1105, 1106, 1107,
	1115, 1116, 1117, 0, 0, 0, 0, 1093, 0, 0,
	0, 1108, 0, 1109, 0, 0, 0, 0, 1078, 0,
	1111, 1119, 0, 1089, 1090, 1096, 1095, 1091, 1114, 0,
	1088, 1086, 1087, 1079, 1080, 1081, 1082, 1084, 1085, 0,
	0, 0, 1077, 2297, 0, 0, 0, 1104, 1097, 0,
	0, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	0, 0, 0, 1075, 1076, 1092, 1105, 1106, 1107, 1115,
	1116, 1117, 0, 0, 0, 0, 1093, 0, 0, 0,
	1108, 0, 0, 1100, 1101, 1102, 1103, 1078, 0, 0,
	1119, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1077, 1112, 1120, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 1111,
	0, 1118, 1089, 1090, 1096, 1095, 1091, 1114, 0, 1088,
	1086, 1087, 1079, 1080, 1081, 1082, 1084, 1085, 0, 1110,
	0, 0, 2262, 0, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 1101, 1102, 1103, 0, 0, 0, 0,
	0, 1083, 1109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1112, 1120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 1110, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 1113, 0,
	0, 0, 1075, 1076, 1092, 1105, 1106, 1107, 1115, 1116,
	1117, 0, 0, 0, 0, 1093, 0, 0, 0, 1108,
	0, 1109, 0, 0, 0, 0, 1078, 0, 0, 1119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1077, 0, 0, 0, 0, 1104, 1097, 0, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 1111, 0,
	1099, 1089, 1090, 1096, 1095, 1091, 1114, 0, 1088, 1086,
	1087, 1079, 1080, 1081, 1082, 1084, 1085, 1113, 0, 0,
	0, 2104, 0, 1092, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 1101, 1102, 1103, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1075, 1076, 0, 1105, 1106, 1107, 1115, 1116, 1117,
	1112, 1120, 0, 0, 1093, 0, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 1078, 0, 1111, 1119, 1118,
	1089, 1090, 1096, 1095, 1091, 1114, 0, 1088, 1086, 1087,
	1079, 1080, 1081, 1082, 1084, 1085, 0, 1110, 0, 1077,
	2080, 0, 0, 0, 1098, 1097, 0, 0, 0, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 1101, 1102, 1103, 1104, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	1120, 0, 0, 0, 0, 0, 1113, 0, 0, 0,
	0, 0, 1092, 0, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1110, 0, 0, 0,
	0, 0, 0, 1098, 0, 0, 0, 0, 0, 0,
	1075, 1076, 0, 1105, 1106, 1107, 1115, 1116, 1117, 0,
	0, 0, 0, 1093, 0, 0, 0, 1108, 0, 1109,
	0, 0, 0, 0, 1078, 0, 1111, 1119, 0, 1089,
	1090, 1096, 1095, 1091, 1114, 0, 1088, 1086, 1087, 1079,
	1080, 1081, 1082, 1084, 1085, 0, 0, 0, 1077, 1530,
	0, 0, 0, 1104, 1097, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1113, 0, 0, 0, 1075,
	1076, 1092, 1105, 1106, 1107, 1115, 1116, 1117, 0, 0,
	0, 0, 1093, 0, 0, 0, 1108, 0, 0, 1100,
	1101, 1102, 1103, 1078, 0, 0, 1119, 0, 1083, 2596,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1077, 1112, 1120,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 1111, 0, 1118, 1089, 1090,
	1096, 1095, 1091, 1114, 0, 1088, 1086, 1087, 1079, 1080,
	1081, 1082, 1084, 1085, 0, 1110, 1830, 0, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 1101,
	1102, 1103, 0, 0, 0, 0, 0, 1083, 1109, 1900,
	0, 0, 1899, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2595, 0, 0, 1112, 1120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 1118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 1110, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 1113, 0, 0, 0, 1075, 1076,
	1092, 1105, 1106, 1107, 1115, 1116, 1117, 0, 0, 0,
	0, 1093, 0, 0, 0, 1108, 0, 1109, 0, 0,
	1803, 0, 1078, 0, 0, 1119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1077, 0, 0, 0,
	0, 1104, 1097, 0, 0, 0, 0, 0, 0, 1094,
	0, 0, 0, 0, 1111, 0, 1099, 1089, 1090, 1096,
	1095, 1091, 1114, 0, 1088, 1086, 1087, 1079, 1080, 1081,
	1082, 1084, 1085, 1113, 0, 0, 1804, 0, 0, 1092,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1100, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 1628, 0, 0, 0, 0, 0, 1075, 1076, 0,
	1105, 1106, 1107, 1115, 1116, 1117, 1112, 1120, 0, 0,
	1093, 0, 0, 0, 1108, 0, 0, 0, 1627, 0,
	0, 1078, 0, 1111, 1119, 1118, 1089, 1090, 1096, 1095,
	1091, 1114, 0, 1088, 1086, 1087, 1079, 1080, 1081, 1082,
	1084, 1085, 0, 1110, 0, 1077, 0, 0, 0, 0,
	1098, 1097, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 1101, 1102, 1103,
	1104, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 1075, 1076, 0, 1105,
	1106, 1107, 1115, 1116, 1117, 1112, 1120, 0, 0, 1093,
	0, 0, 1113, 1108, 0, 0, 0, 0, 1092, 0,
	1078, 0, 0, 1119, 1118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1110, 0, 1077, 0, 0, 0, 0, 1098,
	1097, 0, 0, 0, 0, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1109, 0, 0, 0, 0,
	0, 0, 1111, 0, 0, 1089, 1090, 1096, 1095, 1091,
	1114, 0, 1088, 1086, 1087, 1079, 1080, 1081, 1082, 1084,
	1085, 0, 0, 0, 0, 1100, 1101, 1102, 1103, 1104,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 1075, 1076, 0, 1105, 1106,
	1107, 1115, 1116, 1117, 1112, 1120, 0, 0, 1093, 0,
	0, 1113, 1108, 0, 0, 0, 0, 1092, 0, 1078,
	0, 0, 1119, 1118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1110, 0, 1077, 0, 0, 0, 0, 1098, 1097,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1109, 606, 0, 0, 0, 0,
	0, 1111, 0, 0, 1089, 1090, 1096, 1095, 1091, 1114,
	0, 1088, 1086, 1087, 1079, 1080, 1081, 1082, 1084, 1085,
	0, 0, 0, 0, 1100, 1101, 1102, 1103, 1104, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 1075, 1076, 0, 1105, 1106, 1107,
	1115, 1116, 1117, 1112, 1120, 0, 0, 1093, 0, 0,
	1113, 1108, 0, 0, 0, 0, 1092, 0, 1078, 0,
	0, 1119, 1118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1110, 0, 1077, 0, 0, 0, 0, 1098, 1097, 0,
	0, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1109, 0, 0, 0, 0, 0, 0,
	1111, 0, 0, 1089, 1090, 1096, 1095, 1091, 1114, 0,
	1088, 1086, 1087, 1079, 1080, 1081, 1082, 1084, 1085, 0,
	0, 0, 0, 1100, 1101, 1102, 1103, 1104, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 1906, 0, 0,
	0, 0, 1099, 1075, 1076, 0, 1105, 1106, 1107, 1115,
	1116, 1117, 1112, 1120, 0, 0, 1093, 0, 0, 1113,
	1108, 0, 0, 0, 1901, 1092, 0, 1078, 0, 0,
	1119, 1118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2084, 0, 1110,
	0, 1077, 0, 0, 0, 0, 1098, 1097, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1109, 0, 0, 0, 0, 0, 0, 1111,
	0, 0, 1089, 1090, 1096, 1095, 1091, 1114, 0, 1088,
	1086, 1087, 1079, 1080, 1081, 1082, 1084, 1085, 0, 0,
	0, 0, 1100, 1101, 1102, 1103, 1104, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1112, 1120, 0, 0, 0, 0, 0, 1113, 0,
	0, 0, 0, 0, 1092, 0, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1110, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 1075, 1076, 0, 1105, 1106, 1107, 1115, 1116,
	1117, 0, 0, 0, 0, 1093, 0, 0, 0, 1108,
	0, 1109, 0, 0, 0, 0, 1078, 0, 1111, 1119,
	0, 1089, 1090, 1096, 1095, 1091, 1114, 0, 1088, 1086,
	1087, 1079, 1080, 1081, 1082, 1084, 1085, 0, 0, 0,
	1077, 0, 0, 0, 0, 1104, 1097, 0, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 0, 1092, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 1101, 1102, 1103, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1075, 1076, 0, 1105, 1106, 1107, 1115, 1116, 1117,
	1112, 1120, 0, 0, 1093, 0, 0, 0, 1108, 0,
	0, 0, 1859, 0, 0, 1078, 0, 1111, 1119, 1118,
	1089, 1090, 1096, 1095, 1091, 1114, 0, 1088, 1086, 1087,
	1079, 1080, 1081, 1082, 1084, 1085, 0, 1110, 0, 1077,
	0, 0, 0, 0, 1098, 1097, 0, 0, 0, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 1101, 1102, 1103, 1104, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1099,
	1075, 1076, 0, 1105, 1106, 1107, 1115, 1116, 1117, 1112,
	1120, 0, 0, 1093, 0, 0, 1113, 1108, 0, 0,
	0, 0, 1092, 0, 1078, 0, 0, 1119, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1110, 0, 1077, 0,
	0, 0, 0, 1098, 1097, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1109,
	0, 0, 0, 0, 0, 0, 1111, 0, 0, 1089,
	1090, 1096, 1095, 1091, 1114, 0, 1088, 1086, 1087, 1079,
	1080, 1081, 1082, 1084, 1085, 0, 0, 0, 0, 1100,
	1101, 1102, 1103, 1104, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 1075,
	1076, 0, 1105, 1106, 1107, 1115, 1116, 1117, 1112, 1120,
	0, 0, 1093, 0, 0, 1113, 0, 0, 0, 0,
	0, 1092, 0, 1078, 0, 0, 1119, 1118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1110, 0, 1077, 0, 0,
	0, 0, 1098, 1097, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1109, 0,
	0, 0, 0, 0, 0, 1111, 0, 0, 1089, 1090,
	1096, 1095, 1091, 1114, 0, 1088, 1086, 1087, 1079, 1080,
	1081, 1082, 1084, 1085, 0, 0, 0, 0, 1100, 1101,
	1102, 1103, 1104, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 1075, 1076,
	0, 1105, 1106, 1107, 1115, 1116, 1117, 1112, 1120, 0,
	0, 1093, 0, 0, 1113, 0, 0, 0, 0, 0,
	1092, 0, 1078, 0, 0, 1119, 1118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1110, 0, 1077, 0, 0, 0,
	0, 1098, 1097, 0, 0, 0, 0, 0, 0, 1094,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1111, 0, 0, 1089, 1090, 1096,
	1095, 1091, 1114, 0, 1088, 1086, 1087, 1079, 1080, 1081,
	1082, 1084, 1085, 0, 0, 0, 0, 1100, 1101, 1102,
	1103, 1104, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 546, 1099, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 1112, 1120, 0, 0,
	0, 0, 0, 1113, 0, 551, 0, 0, 0, 1092,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1110, 0, 0, 0, 0, 0, 550,
	1098, 0, 0, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 558, 559, 0, 0, 0, 568, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 553, 1111, 0, 1326, 1089, 1090, 1096, 1095,
	1091, 1114, 0, 1088, 1086, 1087, 1079, 1080, 1081, 1082,
	1084, 1085, 0, 0, 571, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 1334,
	1323, 1353, 1312, 1344, 1343, 1099, 0, 1314, 1313, 554,
	0, 0, 0, 1355, 1354, 0, 0, 0, 0, 0,
	0, 0, 1113, 0, 0, 555, 556, 0, 1092, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 0, 0, 0, 0, 557, 564,
	0, 1349, 0, 1341, 1340, 0, 0, 0, 0, 0,
	0, 561, 0, 1339, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 1336, 1337, 0,
	0, 0, 1111, 0, 0, 1089, 1090, 1096, 1095, 1091,
	1114, 0, 1088, 1086, 1087, 1079, 1080, 1081, 1082, 1084,
	1085, 1322, 560, 0, 0, 0, 0, 0, 1327, 1325,
	1328, 1329, 1330, 1331, 1332, 0, 1352, 0, 0, 0,
	0, 1326, 0, 1316, 1315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 565, 575, 0, 0, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 0, 1334, 1323, 1353, 1312, 1344,
	1343, 1342, 0, 1314, 1313, 1324, 0, 566, 0, 1355,
	1354, 570, 0, 0, 0, 0, 576, 0, 0, 0,
	0, 563, 567, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 569, 1455, 1453,
	1454, 1457, 1456, 0, 0, 0, 0, 1349, 0, 1341,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 1339,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 1320, 0,
	0, 0, 1338, 1336, 1337, 0, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1317, 0, 0, 0, 1350, 1351, 1322, 0, 0,
	0, 0, 0, 0, 1327, 1325, 1328, 1329, 1330, 1331,
	1332, 0, 1352, 0, 0, 0, 0, 1321, 0, 1316,
	1315, 0, 1356, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1333, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1317, 0, 0,
	0, 1350, 1351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 0, 0, 0, 0, 1356,
}
var sqlPact = [...]int{

	5027, -1000, -8, -1000, -1000, -1000, 181, -1000, -1000, -1000,
	-1000, 180, 179, 178, -1000, 177, 173, 172, 170, 168,
	167, 166, 163, 162, 161, 160, -1000, 156, -1000, -1000,
	-1000, -1000, 153, 150, 148, -1000, 147, 985, 23202, 146,
	144, 1426, -1000, 36118, 143, -1000, 1132, 26932, 1155, 1560,
	-1000, 142, 1222, 35780, 3078, 2379, 1166, 1721, 35439, 22861,
	1719, 1538, 35098, -1000, -1000, 34757, 141, 136, 134, 124,
	112, -1000, -1000, 34416, 110, 109, 108, 106, 101, 98,
	97, 96, 95, 93, 91, 82, 79, 76, -1000, 73,
	71, 69, -1000, 43013, 58, 57, 53, 1164, 52, 50,
	49, 44, -1000, -1000, 921, 39, 37, 36, 33, 32,
	116, 31, 30, 25, 24, -1000, 1066, 360, 2585, 9016,
	1095, 1092, 1083, 1067, 1079, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 38146,
	36118, 23, -63, 22, -1000, 1979, 673, 19046, 5027, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26591, 26250, 22520, 34075, 33734, 6474, 819, -1000, -11, 24554,
	36118, -1000, 86, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14533, 14154, 583, 86, -1000, -1000, -1000, 33393,
	22168, 33052, 1587, 32711, -1000, -1000, 32370, -1000, -1000, 1887,
	1733, 1717, 25909, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 32032, 31691, 31350, 31009, 21816, 522, -1000, -1000, -1000,
	17331, -1000, -1000, -1000, -1000, 20, -1000, 19, 18, -1000,
	17, 15, 14, 13, 12, 9, -1000, 7, 3, -1000,
	2, 1, -1000, -1, -5, 1135, 1003, 1044, 30668, 915,
	1315, -1000, -1000, -10, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 36118, -1000, 15586, -1000, 521, -1000, 1671, -1000,
	15586, -1000, 1302, -1000, -1000, -1000, -1000, -1000, 36118, -1000,
	-1000, -1000, -1000, -1000, -1000, 2211, 1243, 516, 30327, -1000,
	1502, -1000, 630, 790, -1000, -1000, -1000, 9718, 187, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1594, 21464,
	1288, 1995, 1883, 2204, 1454, 1844, 1824, 1806, 1775, 1771,
	2201, 982, 2195, 1811, 1103, 2191, 1770, 1296, 712, 2187,
	1669, 1668, -1000, -1000, -1000, -1000, 947, -1000, -1000, -1000,
	28284, -1000, -1000, -1000, -1000, -1000, -1000, 849, 923, -1000,
	-1000, -1000, -1000, -1000, 1066, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1434, 1961, 1961, 1961, 2062, 293, 285, -1000,
	116, -1000, 1776, -1000, 1240, -1000, -1000, -1000, 42620, -1000,
	-1000, 15586, 15586, 15586, 15586, 15586, 1149, -1000, 542, -1000,
	515, 514, 7570, -1000, -1000, 2165, -1000, -1000, -1000, 292,
	-1000, -1000, 15586, 86, -1000, -1000, -1000, -1000, 508, 2183,
	-1000, 623, -1000, -1000, -1000, 635, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1708, 506, 504, 503, -1000,
	502, -1000, -1000, 501, 499, 497, 496, 493, 491, 489,
	487, 475, 470, 459, 458, 457, 456, 455, 1074, -1000,
	664, -1000, -1000, 664, 664, -1000, 438, 438, 439, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 438, -1000, -1000,
	-1000, 622, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 454, 1365, -1000, -1000, 1365, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 815, 37470, -22, 36118,
	-1000, 452, -22, -1000, -1000, 449, -1000, 10069, 10069, -1000,
	-1000, -1000, 15586, -1000, 2581, -1000, 3141, -181, 326, 581,
	-1000, 18017, 20762, -1000, -1000, 1024, 1854, 807, -1000, 1054,
	1849, 422, -1000, 653, 1839, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1144, -1000, 1237, 1831, -133,
	1750, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 23540, 24554, -11,
	-12, -1000, -1000, -1000, 6124, 42620, -1000, 42620, -1000, 888,
	19732, 86, -1000, -1000, -1000, -1000, 448, 1376, 638, 1373,
	-1000, 336, -1000, 29986, 638, 1368, -1000, -1000, -1000, 28284,
	-1000, 36118, -1000, 36118, -1000, 928, -1000, 37808, 117, 1828,
	-1000, -1000, 117, 1825, -1000, 115, 1800, -1000, -1000, 1293,
	1797, -1000, -53, 1788, -1000, -1000, -1000, 15586, -62, -1000,
	-1000, -1000, 673, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 29645, 23878,
	1219, 595, 42620, 2101, 43267, 23540, 42620, 23878, -1000, -1000,
	36118, -1000, 15586, -1000, 2100, 1429, -26, -1000, -1000, -1000,
	-1000, -1000, 1420, 1417, 732, 1085, 9718, 9718, 1935, -1000,
	186, 6474, -1000, -1000, -1000, -1000, 29304, -1000, -1000, -1000,
	1192, 36118, -1000, -1000, 1706, -1000, 23878, 36118, -1000, 36118,
	-1000, 36118, -1000, 36118, -1000, 36118, -1000, -1000, -1000, -1000,
	-1000, 591, -1000, 1705, -1000, -1000, 36118, -1000, 1410, -1000,
	-1000, -1000, 28966, 28625, -1000, 1028, 848, -1000, -1000, 118,
	-1000, 36118, 2005, 629, -1000, 1434, 1389, 1688, 721, 1226,
	1572, 13775, 1512, 15586, 116, -1000, -1000, 116, 116, 8637,
	-1000, -1000, -1000, 36118, -1000, 43101, 43267, 6474, 831, 15586,
	15586, 15586, 15586, 15586, 15586, 15586, 15586, 15586, 15586, 15586,
	15586, 15586, 15586, 15586, 15586, 15586, 15586, 15586, 15586, 15586,
	15586, 15586, 15586, 15586, 15586, 15586, 15586, 15586, 15586, 15586,
	15586, 1371, 15586, 814, 15586, 15586, 15586, 15586, 1447, 1154,
	387, 1250, -1000, 2134, 2134, 2134, 42749, 42749, 402, 542,
	-1000, 15586, -1000, 114, 15586, 285, 40932, -16, 7205, -1000,
	-1000, -1000, 13424, 661, 42620, 86, 6826, -1000, 2160, 913,
	1726, 1625, 446, 570, 566, 561, 560, 15586, 15586, 13073,
	12694, 12315, 16288, 11936, 15586, 7935, 15586, 15586, 15586, 15586,
	11557, 11178, -1000, 443, -1000, -1000, -1000, -1000, 2158, -1000,
	-1000, 2155, -1000, 830, 829, 2154, -1000, -26, -1000, 37470,
	-1000, 36118, -22, 2098, 36118, 15586, 85, -1000, 41657, -1000,
	85, -67, 42620, 1537, 1536, 19389, 1517, 1158, 1158, 1158,
	-1000, 441, 535, 581, 5413, 10799, -1000, 27270, 1169, 206,
	284, 17674, 2581, -1000, 36118, -36, 1043, -1000, 25568, 2048,
	2006, 1956, 28284, 2077, 114, 1976, 1666, 813, 28284, 1101,
	23540, 1965, 808, 2075, 114, 1664, 805, 36118, 6474, 1960,
	569, -1000, 36118, -1000, -1000, -1000, 1663, -68, -1000, -1000,
	25230, 2097, 1784, -1000, 1098, -1000, 1782, 2095, 36118, 1287,
	1367, -1000, -1000, 842, 1778, 657, 157, 2092, 157, 20076,
	-1000, 36118, -1000, 36118, -1000, -1000, 36118, -1000, 36118, -1000,
	36118, 36118, -1000, 36118, 23540, 23540, -69, 685, 24892, 804,
	-1000, 693, 25230, 2577, -70, -1000, 667, -1000, -1000, -1000,
	-1000, 322, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 439, 1074,
	438, 438, 438, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	622, -1000, -1000, 664, 664, 664, -1000, -1000, -64, 1662,
	602, -76, 740, -26, -1000, 1365, -1000, 1200, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2181, -1000, 2139, -1000, -1000, 2153, -29, -1000, -29,
	-1000, 6474, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36118,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 251, -1000,
	-1000, -1000, -1000, -1000, -1000, 36118, 36118, 36118, -1000, 28284,
	652, 1699, -1000, 1978, 1389, 1688, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 42620, -1000, 393, -1000, -1000, 42620,
	1048, 1570, -1000, 1570, -30, -1000, 41528, 1529, 36118, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	627, 1000, 1000, 875, 875, 875, 875, 2108, 585, 1217,
	1143, 286, 286, 286, 286, 286, 286, 286, 286, 472,
	415, 415, 472, 472, 472, 472, 472, 286, 286, 286,
	42749, 319, 3555, 15586, 15586, 803, 1142, 387, 3555, 15586,
	3555, 3555, 3555, 3555, -1000, 1689, -1000, -1000, -1000, -1000,
	1658, 437, 16288, 16288, -1000, -1000, -1000, 7570, 15586, -1000,
	-1000, -1000, -1000, 434, 15586, -1000, 41061, -222, 283, -55,
	-1000, 15586, 533, -75, -1000, 909, -1000, 15586, -1000, -23,
	15586, 15586, 15586, 282, -1000, 272, -1000, 802, -1000, 799,
	797, 791, -1000, 433, 1145, 432, 431, 15586, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 42491, 38880, 270, -1000,
	1650, -55, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 269,
	-1000, 268, -1000, 42362, -55, 267, 4164, -1000, 16288, 16288,
	16288, 7570, 430, 265, -1000, 41339, -1000, 42173, 10420, 10420,
	10420, 261, 42044, 15586, -55, 38828, 4975, 4660, -83, -88,
	-1000, -90, -1000, 2150, -93, 257, 621, 620, 255, -1000,
	-1000, 429, -96, -103, 657, 10069, 18703, 6474, -1000, 657,
	-1000, 15586, 19389, 19389, 1575, 1520, 19389, -1000, -1000, -1000,
	-1000, 27270, 450, 581, 27270, -1000, 2148, 1460, 254, -1000,
	-1000, -1000, 36118, 428, -1000, 581, 252, 1047, 36118, 36118,
	36118, -1000, -1000, 1366, 37132, 1363, 43267, 36118, -1000, 426,
	425, 1527, 1523, 36118, 36118, 36794, 36456, 36118, 1011, 114,
	-1000, 613, 424, 36118, 1010, 23540, 641, 610, 36118, 114,
	-1000, 423, 6474, 1005, -1000, 607, 1611, 1292, -1000, 887,
	1648, 36118, 247, -104, -32, 43267, -1000, -1000, -1000, -1000,
	-1000, 36118, 473, 36118, 114, 36118, 23540, 23540, 114, 36118,
	1767, 1779, 562, 36118, 1572, 15586, 1211, -1000, 18360, 681,
	36118, 980, 78, -1000, -1000, -1000, 576, 36118, -1000, -1000,
	117, 117, -1000, 115, 1293, -1000, -53, -1000, -1000, -1000,
	36118, 23540, -105, -1000, 703, 697, 696, -1000, 43267, -1000,
	537, 725, -1000, 2147, 637, 36118, 9718, 9718, -1000, 1542,
	-1000, -1000, 1014, -1000, 1073, -1000, -1000, -1000, -1000, 9718,
	-1000, -38, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1173,
	1147, -1000, -1000, -1000, 1048, -1000, 15586, 2146, -1000, -1000,
	-1000, 8637, -1000, -1000, -1000, 36118, -179, 15586, 3555, 3555,
	15586, 16288, 16288, -1000, 3555, -1000, -1000, -1000, -1000, -1000,
	1638, 420, 15586, 43267, 4133, 3537, -110, 472, 15586, -33,
	-1000, 15586, -1000, 40743, -1000, -1000, 492, 1858, -1000, 15586,
	41915, 245, 9367, -1000, 41786, -42, -42, -1000, 2179, 1387,
	1334, 1036, 960, 2145, -1000, 20419, 659, 1165, 40654, 43101,
	43267, -1000, 15586, -1000, -1000, 1637, 15586, -1000, 43101, 43267,
	16288, 16288, 16288, 16288, 16288, 16288, 16288, 16288, 16288, 16288,
	16288, 16288, 16288, 16288, 16288, 16288, 16288, 16288, 16288, 1435,
	16288, 2130, 2130, 2130, -34, 15586, -1000, 1684, 1637, 15586,
	15586, 43267, 244, 240, 239, -1000, 15586, -55, 15586, 15586,
	15586, -1000, -1000, -1000, 237, -1000, 2144, -1000, -1000, -1000,
	-1000, 2577, -1000, -1000, 1624, -1000, -148, -1000, 2581, -1000,
	1624, 42620, -1000, 1575, -1000, 418, 15586, 19389, -1000, 532,
	-1000, -111, -1000, 27270, -1000, 531, -219, -1000, 575, -1000,
	581, 417, 36118, 27270, -1000, -1000, -1000, 783, 780, 1766,
	-1000, 1356, -1000, 686, -1000, 1123, 15586, 16988, 416, 414,
	1114, -1000, 1765, 1293, 1762, 1293, -1000, -36, 1042, -1000,
	21112, 15586, -1000, 779, -1000, 1091, 21112, -1000, -1000, 15586,
	-1000, 772, 21112, 637, 1634, 870, -1000, 878, -1000, 1596,
	-1000, 25230, 413, 36118, 405, -1000, 404, -1000, 638, -1000,
	403, 36118, 1508, 562, 24216, -1000, 638, 980, -1000, 42620,
	-1000, 980, 8286, 1958, -112, -1000, -1000, -1000, 657, 20076,
	19389, 15586, -113, -1000, -1000, -1000, -1000, -38, 1943, 1943,
	-1000, 2143, -1000, 530, 236, -1000, 27946, -38, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 36118, 1585, 6474, 36118, 36118,
	1175, 40465, -1000, 1942, 6474, 2127, 3555, 3518, 3499, 15586,
	43267, 42878, -118, 15586, 15586, -1000, 234, 15586, 528, 42620,
	-1000, -1000, -1000, 42620, 15586, 2176, 15586, 231, 230, 227,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 225, -1000,
	-1000, 38484, 15586, 224, -1000, 221, 220, 42620, 1684, 42620,
	-1000, -1000, 484, 484, 902, 902, 902, 902, 2130, 374,
	695, 356, 1129, 1129, 1129, 626, 490, 490, 1129, 1129,
	1129, 1632, 1437, 400, 4594, 15586, 216, -1000, -1000, 42620,
	42620, 212, -1000, -1000, -1000, -55, 4199, 40336, 40147, -1000,
	211, 208, 1621, 2056, -1000, 19389, 1621, -1000, 36118, 42620,
	-1000, -181, -1000, 2142, -1000, -1000, 1460, -1000, 5773, 27270,
	36118, -119, -1000, 36118, 36118, 36118, 1760, -1000, 1372, -1000,
	40058, -120, -1000, 321, 1990, 15586, -1000, -1000, 399, 16988,
	36118, -1000, 1476, 1480, 730, 36118, -1000, 36118, -1000, 36118,
	36118, 36118, -1000, 395, 86, -121, 36118, 23540, -1000, -127,
	6474, -1000, -1000, 23540, 825, -1000, 1133, 1601, -1000, 16988,
	394, 36118, 25230, 2090, -1000, 16988, 1276, 1448, 562, 24216,
	-1000, 842, -1000, -1000, -40, -1000, 375, 114, 980, -1000,
	-41, 42620, 573, 1911, -1000, 1905, 525, -1000, -1000, -43,
	392, -1000, 568, 567, -1000, -50, -1000, 588, -1000, -1000,
	-1000, -1000, -1000, -1000, 1942, 15586, 15586, 42878, -129, -1000,
	3555, 3555, -1000, 39869, -1000, 42620, -1000, 41786, -1000, -1000,
	-1000, -1000, 1128, -1000, 39740, -1000, -1000, -1000, -1000, 16288,
	1631, 391, 43267, 39551, -1000, -1000, 15586, -1000, -1000, -1000,
	-1000, 628, 15586, 15586, 2581, 628, -135, 581, -1000, -1000,
	-1000, 2141, -1000, -136, -1000, -1000, -1000, -1000, 36118, -1000,
	36118, -1000, 6474, 36118, 1636, 1338, -1000, -1000, 1521, 388,
	16288, 36118, -1000, 1108, 16988, 1942, 86, 6474, 1942, 39462,
	6826, -137, -138, 1335, -1000, 1319, 15586, -1000, 43267, 1293,
	1293, -1000, 768, 766, 15586, 754, -1000, -1000, 744, -1000,
	-53, 21112, -1000, -1000, 2038, 1125, -143, 16988, -145, 207,
	114, -146, 36118, -1000, 562, 24216, -1000, 1779, 1872, 36118,
	1952, -1000, -1000, 387, 386, 382, -1000, 27608, 27608, 23540,
	23540, 1585, -1000, 36118, -1000, 3555, 3555, -1000, -1000, 203,
	1165, 2033, -1000, 4700, 16288, 43267, -151, -1000, 39273, -1000,
	36118, 42620, -55, -1000, -1000, 27270, 524, -1000, -1000, 1311,
	-1000, -1000, 36118, 1353, -1000, -1000, 15586, 4594, 381, 1596,
	380, -1000, -1000, -1000, -1000, -1000, -1000, 1990, -23, -1000,
	1035, -1000, -1000, 42620, 1988, -1000, -1000, 36118, 36118, -42,
	371, 362, -1000, 1216, 36118, 1108, -152, -1000, 1596, -1000,
	1108, 355, 24216, -1000, 1508, 832, -153, 36118, -1000, 23540,
	23540, -1000, -158, -1000, -1000, -1000, -160, -1000, 993, 15586,
	4700, -161, -1000, -1000, -54, -1000, 2083, -1000, -1000, -1000,
	-1000, 1757, 39144, 1400, 36118, -1000, 36118, 1942, 202, 36118,
	692, 6474, -1000, -1000, 201, 15586, 15586, 353, 343, 342,
	1596, 1108, -1000, 1596, 16988, -1000, 1448, 920, -1000, 657,
	-1000, -167, -168, -1000, -1000, 200, 15937, 15937, -55, -1000,
	36118, 338, 1740, -1000, 1247, 1295, 199, -175, -1000, -1000,
	336, -1000, 15586, -1000, 2176, -182, -183, 36118, 36118, 36118,
	-1000, 1596, -1000, -184, -1000, 20076, -1000, 637, 637, -1000,
	-1000, -1000, 16638, 1224, 972, 41250, -1000, -1000, -1000, 36118,
	-1000, 1266, 1255, 956, -1000, -1000, -1000, -1000, -1000, 1400,
	42620, -1000, -1000, -189, -190, -191, -1000, 1108, -176, -1000,
	-1000, 2106, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1893,
	-1000, 720, 1399, 1399, 1247, 335, 331, 1285, 1596, -1000,
	15235, -1000, 2115, -1000, -1000, 1343, -1000, -1000, 1127, 1120,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 196, 6474,
	190, 6474, -1000, 679, -1000, 676, 320, 1422, -59, 14884,
	834, 354, -57, -1000, -192, -1000, 42620, -1000, 317, -1000,
	14884, 1127, -1000, 14884, 14884, -198, -1000, -1000, -199, -1000,
	-60, 1120, -102, -1000, -1000, 1120, -1000,
}
var sqlPgo = [...]int{

	0, 2699, 2696, 1745, 2695, 2182, 2693, 2690, 2688, 2682,
	2179, 2679, 2678, 2677, 2675, 2674, 2672, 2671, 2670, 2669,
	2668, 2666, 2662, 2660, 2650, 2649, 2646, 2124, 2645, 2115,
	2644, 2640, 2639, 2638, 2637, 30, 2636, 2635, 2633, 2103,
	2631, 2628, 2627, 2626, 2097, 2624, 2085, 2622, 2621, 2072,
	2620, 2618, 2613, 2068, 2611, 2063, 2609, 75, 114, 2038,
	2608, 2603, 2009, 1987, 1985, 2598, 1880, 2595, 2594, 1854,
	1842, 2593, 88, 2592, 2591, 2588, 1831, 1827, 2583, 2580,
	2563, 153, 2562, 1816, 2555, 2554, 2551, 2545, 2542, 2541,
	2539, 2538, 2536, 2534, 2532, 2530, 2529, 2527, 2526, 2525,
	2524, 2520, 2519, 161, 2517, 2515, 1786, 1784, 2513, 2512,
	36, 31, 20, 56, 104, 144, 3170, 142, 2509, 2508,
	2506, 2505, 2501, 2498, 46, 97, 95, 2496, 106, 2494,
	2493, 85, 32, 25, 23, 67, 91, 2492, 2486, 2425,
	29, 2478, 2475, 135, 2474, 119, 24, 2706, 158, 156,
	115, 127, 2467, 2465, 2461, 53, 121, 7, 4, 3,
	6, 1, 2460, 2, 5, 2458, 2450, 17, 87, 122,
	2446, 28, 19, 2444, 2442, 131, 2441, 57, 86, 1664,
	94, 126, 453, 103, 2438, 61, 21, 62, 2436, 2434,
	159, 38, 76, 149, 113, 2430, 77, 160, 129, 72,
	134, 136, 2429, 2428, 2426, 105, 2421, 120, 109, 2419,
	2418, 71, 2415, 100, 139, 2412, 146, 110, 2408, 2407,
	84, 2404, 125, 2397, 2387, 157, 150, 116, 16, 50,
	65, 13, 1656, 1617, 138, 73, 58, 52, 2383, 1197,
	1170, 40, 41, 2379, 83, 68, 43, 47, 93, 151,
	34, 2377, 2374, 137, 2370, 2368, 2367, 2358, 2357, 96,
	2354, 2352, 2350, 69, 35, 98, 80, 51, 99, 130,
	111, 155, 101, 2349, 81, 124, 2348, 82, 2347, 2346,
	1505, 118, 2344, 2343, 2342, 1434, 1087, 1014, 368, 2341,
	2340, 917, 870, 2335, 2334, 90, 2333, 117, 107, 92,
	143, 145, 55, 2325, 123, 26, 2322, 42, 33, 0,
	1722, 184, 2320, 128, 70, 2318, 2274, 2271, 2268, 27,
	10, 9, 11, 14, 12, 49, 37, 2265, 2262, 132,
	78, 64, 2260, 154, 2258, 2253, 2251, 45, 2245, 22,
	2244, 15, 2243, 2240, 18, 8, 2236, 2235, 147, 2233,
	112, 2232, 2077, 2231, 152, 2225, 2216, 1970, 2215, 108,
	102,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 13, 13,
	14, 23, 17, 25, 12, 20, 18, 16, 16, 22,
	22, 126, 126, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 123, 123,
	128, 128, 128, 130, 130, 127, 127, 122, 122, 27,
	27, 70, 70, 113, 63, 63, 63, 307, 307, 308,
	308, 109, 109, 110, 110, 110, 110, 111, 111, 112,
	112, 112, 37, 37, 37, 29, 29, 29, 29, 29,
	30, 30, 31, 31, 38, 38, 38, 38, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 46,
	46, 47, 47, 47, 47, 47, 47, 48, 48, 48,
	48, 49, 49, 49, 49, 49, 49, 49, 49, 54,
	54, 54, 52, 52, 52, 51, 51, 51, 50, 50,
	50, 53, 53, 53, 181, 181, 180, 180, 184, 184,
	55, 55, 55, 55, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 58, 58, 58, 58,
	58, 58, 58, 276, 276, 275, 56, 56, 251, 251,
	59, 59, 206, 206, 60, 60, 60, 60, 60, 61,
	61, 71, 71, 348, 348, 348, 352, 352, 353, 353,
	354, 354, 354, 354, 354, 354, 354, 350, 350, 66,
	66, 66, 66, 67, 67, 67, 68, 68, 108, 108,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 32,
	33, 33, 34, 34, 35, 35, 77, 77, 77, 79,
	76, 76, 76, 78, 78, 78, 78, 80, 80, 81,
	81, 81, 81, 81, 82, 82, 301, 299, 299, 300,
	300, 153, 153, 153, 153, 153, 154, 154, 154, 306,
	306, 306, 306, 306, 306, 305, 305, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 95, 95, 95, 103, 103, 103,
	103, 103, 103, 103, 84, 84, 89, 89, 89, 89,
	89, 85, 85, 90, 90, 91, 91, 92, 92, 92,
	92, 92, 92, 86, 86, 86, 86, 94, 94, 94,
	94, 93, 93, 99, 99, 99, 99, 99, 99, 96,
	96, 96, 96, 97, 97, 97, 100, 100, 100, 100,
	87, 87, 88, 88, 101, 101, 102, 102, 102, 102,
	102, 98, 98, 98, 349, 349, 351, 351, 64, 64,
	42, 42, 43, 43, 155, 155, 156, 156, 230, 230,
	230, 230, 157, 157, 129, 129, 129, 158, 158, 159,
	159, 160, 160, 160, 162, 162, 163, 163, 164, 164,
	161, 161, 161, 229, 317, 317, 318, 318, 318, 318,
	318, 318, 319, 319, 319, 319, 319, 319, 319, 315,
	315, 316, 313, 313, 314, 314, 314, 314, 355, 355,
	228, 228, 167, 167, 320, 320, 320, 320, 321, 321,
	321, 321, 321, 324, 323, 322, 322, 322, 322, 322,
	262, 262, 262, 105, 105, 44, 44, 44, 135, 135,
	45, 45, 41, 41, 41, 210, 210, 171, 171, 267,
	267, 267, 146, 146, 124, 124, 124, 19, 21, 21,
	15, 15, 15, 15, 15, 15, 26, 26, 24, 24,
	211, 211, 212, 212, 65, 65, 69, 69, 74, 74,
	104, 104, 104, 104, 104, 104, 28, 28, 28, 28,
	36, 36, 36, 36, 73, 73, 357, 357, 142, 142,
	142, 142, 143, 143, 225, 225, 226, 226, 358, 358,
	227, 227, 227, 137, 136, 138, 138, 40, 40, 40,
	131, 131, 132, 132, 133, 133, 134, 134, 359, 359,
	62, 62, 62, 107, 107, 149, 149, 222, 222, 222,
	224, 224, 223, 223, 223, 196, 196, 196, 106, 106,
	176, 176, 186, 186, 187, 187, 273, 188, 72, 72,
	116, 116, 114, 114, 114, 114, 114, 114, 114, 114,
	115, 115, 115, 117, 117, 117, 117, 117, 117, 117,
	120, 120, 120, 121, 121, 121, 119, 119, 330, 330,
	330, 333, 333, 329, 331, 331, 332, 332, 356, 356,
	197, 197, 197, 166, 165, 165, 169, 169, 168, 170,
	170, 266, 266, 266, 194, 194, 193, 193, 193, 193,
	215, 215, 213, 213, 214, 214, 218, 218, 219, 219,
	219, 220, 220, 221, 221, 192, 192, 247, 247, 217,
	217, 216, 118, 118, 118, 175, 175, 175, 177, 177,
	237, 237, 237, 238, 238, 236, 236, 236, 236, 268,
	268, 268, 268, 268, 268, 268, 268, 346, 346, 346,
	347, 347, 265, 265, 269, 269, 269, 269, 269, 269,
	263, 263, 263, 263, 264, 264, 274, 274, 200, 200,
	200, 200, 198, 198, 199, 199, 270, 270, 270, 270,
	195, 195, 271, 271, 271, 231, 231, 277, 277, 277,
	295, 295, 174, 174, 174, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 279, 279, 279, 279,
	281, 281, 281, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 294, 294, 294, 294, 294, 282, 282, 289, 289,
	290, 290, 291, 292, 283, 283, 284, 284, 285, 286,
	293, 293, 293, 293, 297, 297, 287, 287, 287, 287,
	287, 288, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 208, 208, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 241, 241, 241, 241, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 325, 325, 325, 325,
	325, 325, 325, 325, 327, 327, 328, 328, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 334, 334,
	335, 335, 337, 337, 338, 338, 339, 340, 340, 340,
	341, 342, 342, 336, 336, 343, 343, 343, 344, 344,
	345, 345, 345, 345, 345, 253, 253, 254, 255, 261,
	261, 261, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 144, 144,
	144, 144, 144, 183, 183, 182, 182, 250, 250, 248,
	248, 252, 252, 201, 201, 296, 296, 296, 296, 296,
	296, 296, 202, 202, 202, 209, 203, 203, 204, 204,
	204, 204, 204, 244, 245, 205, 205, 205, 246, 246,
	256, 260, 260, 259, 258, 258, 257, 257, 234, 234,
	235, 235, 233, 232, 191, 191, 190, 190, 189, 189,
	360, 360, 185, 185, 272, 272, 272, 272, 178, 178,
	151, 151, 179, 179, 147, 147, 150, 150, 148, 148,
	148, 148, 172, 172, 173, 173, 145, 145, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 298,
	298, 298, 249, 139, 139, 139, 140, 140, 141, 141,
	303, 303, 303, 304, 304, 304, 304, 302, 302, 302,
	302, 302, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 7, 7, 7, 4, 12, 4,
	12, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 7,
	2, 6, 2, 1, 12, 12, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 4, 6, 7, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 2, 7,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 3, 5, 3, 1, 3, 1, 2, 2, 3,
	2, 2, 5, 3, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 1, 5, 2, 3, 0,
	3, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	2, 6, 2, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 1,
	4, 7, 1, 3, 2, 4, 6, 6, 3, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 3, 1,
	3, 3, 1, 1, 2, 1, 1, 1, 1, 1,
	3, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 1, 1, 1,
	1, 1, 2, 2, 3, 3, 4, 4, 3, 4,
	4, 4, 3, 2, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 2, 3, 3,
	3, 2, 3, 4, 3, 5, 3, 4, 5, 2,
	3, 3, 3, 4, 2, 3, 4, 3, 3, 3,
	4, 4, 4, 4, 2, 3, 7, 7, 7, 4,
	5, 5, 5, 5, 2, 0, 2, 0, 3, 2,
	8, 10, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 1, 0, 9,
	9, 6, 7, 5, 3, 5, 1, 3, 1, 1,
	10, 11, 9, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 2, 4, 7, 3, 3, 0,
	6, 3, 11, 14, 4, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 2, 0, 8, 3,
	2, 0, 1, 3, 1, 1, 3, 5, 1, 1,
	3, 3, 1, 2, 4, 4, 2, 3, 5, 5,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 2, 4, 4, 4, 2, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 1, 0, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 1,
	0, 2, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 6, 3, 3, 1, 5, 5, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	1, 1, 2, 3, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 2, 1, 3,
	1, 1, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 3, 4, 1, 1, 1, 5, 1,
	3, 3, 1, 3, 3, 1, 3, 3, 1, 1,
	3, 3, 1, 1, 6, 6, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 5, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 3, 1, 3, 3,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 2, 2, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 379, -4, -27, -29, -32, -37,
	-38, -60, -46, -47, -48, -59, -55, -61, -62, -63,
	-64, -56, -70, -69, -71, -74, -72, -65, -66, -75,
	-83, -104, -105, -106, -107, -5, -10, 24, 35, -30,
	-31, 48, -33, 72, -44, -39, 74, 95, -332, 99,
	-49, -53, 103, 110, 113, 135, 144, 230, 236, 257,
	259, 261, 268, -114, -116, 255, -67, -68, -76, -77,
	-78, -79, -108, 280, -84, -85, -86, -87, -88, -89,
	-90, -91, -92, -93, -94, -95, -96, -97, -98, -99,
	-100, -101, -102, 283, -28, -36, -73, 323, -6, -7,
	-8, -9, -11, -21, 112, -40, -41, -42, -43, -45,
	-330, -50, -51, -52, -54, -117, -115, 376, 256, 332,
	36, 293, 62, 106, 263, -13, -14, -17, -16, -18,
	-15, -23, -25, -22, -24, -26, -19, -20, -12, 348,
	355, -120, -118, -119, -121, 273, 340, 303, 380, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 2,
	303, 343, 333, 88, 152, 241, -348, 2, -179, 303,
	88, -148, -139, 369, 4, -309, -311, 20, 21, 24,
	34, 35, 36, 41, 45, 48, 49, 56, 61, 62,
	63, 68, 65, 66, 67, 70, 72, 73, 76, 77,
	78, 86, 87, 89, 91, 95, 97, 99, 102, 103,
	105, 110, 112, 111, 113, 123, 124, 129, 131, 136,
	142, 143, 144, 145, 153, 156, 158, 151, 168, 169,
	170, 174, 175, 176, 179, 178, 183, 184, 187, 188,
	191, 193, 195, 196, 199, 197, 201, 202, 204, 203,
	209, 211, 212, 214, 217, 220, 223, 226, 227, 228,
	229, 230, 232, 234, 236, 238, 239, 240, 241, 242,
	244, 245, 247, 248, 249, 250, 251, 255, 253, 254,
	256, 257, 258, 259, 261, 263, 264, 266, 281, 282,
	294, 268, 269, 270, 271, 272, 276, 274, 277, 278,
	280, 283, 285, 288, 292, 293, 295, 298, 299, 296,
	291, 302, 304, 305, 306, 307, 308, 309, 310, 311,
	318, 319, 323, 324, 325, 326, 329, 330, 331, 332,
	334, 337, 338, 339, 344, 349, 350, 351, 352, 353,
	29, 37, 38, 39, 40, 42, 43, 46, 47, 52,
	53, 54, 57, 90, 92, 93, 109, 114, 115, 125,
	126, 127, 137, 139, 146, 147, 150, 157, 159, 160,
	161, 162, 163, 165, 172, 173, 181, 198, 208, 210,
	221, 225, 233, 235, 243, 265, 275, 286, 287, 297,
	300, 313, 314, 315, 320, 321, 336, 340, 341, 379,
	379, 2, 169, 240, -147, -139, 88, 379, 2, 303,
	333, 343, -210, 88, 328, -139, 236, 22, 2, 97,
	156, 331, 330, 22, 232, 274, 305, 307, 2, 379,
	2, 343, 303, 152, 88, 333, -139, 2, -58, 2,
	376, -57, -5, -39, -49, -59, -55, -10, -27, -29,
	-44, -46, -53, -63, -62, -64, -66, -70, -69, -72,
	-76, -77, -83, -106, -107, 74, 24, 103, 280, 112,
	-352, 2, 22, -353, -354, 74, 103, 135, 273, 156,
	97, 330, 303, 2, 169, 2, -139, 2, -348, 2,
	169, 2, -352, 2, -139, 2, -143, 2, 268, -139,
	379, 379, 379, 379, 379, 188, 56, 265, 277, -81,
	319, -80, 313, -301, -82, 2, -180, 199, -139, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 2, -103, 277, 35,
	56, 22, 61, 89, 136, 152, 153, 175, 69, 70,
	239, 188, 170, 318, 176, 278, 304, 319, 74, 334,
	308, 111, 4, 88, 199, 279, 313, 379, 379, 379,
	-356, 2, 303, 379, 379, 379, 379, 270, 283, 379,
	379, 379, 379, 379, -115, -117, -116, 379, 379, 379,
	379, -168, -169, 327, 164, 108, 219, -114, -116, 2,
	-330, -103, 277, 2, 56, 22, -299, 2, -239, 215,
	-241, 367, 368, 362, 205, 354, -253, 94, -243, -256,
	109, 265, 376, -147, -242, 382, 9, -327, -116, 30,
	-254, -255, 50, -139, 7, 8, 5, 6, -145, -279,
	-249, -288, 322, 116, 207, -325, -326, 4, -309, -303,
	-280, -290, -284, -287, 165, 59, 80, 81, 84, 82,
	85, 279, 333, 51, 29, 114, 115, 225, 233, 300,
	320, 321, 146, 208, 147, 57, 137, 181, 102, 38,
	40, 42, 43, 52, 53, 90, 92, 93, 125, 126,
	127, 157, 159, 160, 161, 162, 163, 210, 243, 286,
	297, 314, 315, 341, -310, -291, -292, -285, -286, 75,
	117, 134, 155, 148, 167, 171, 182, 185, 194, 200,
	222, 224, 262, 284, -293, -357, 2, 319, 319, 2,
	-357, 2, -357, 2, -142, 2, 319, 316, -333, 244,
	-329, -139, -333, 379, 379, 381, 379, -165, -166, 2,
	22, 100, 376, 2, -268, 2, 374, -270, -147, -116,
	-269, 376, 216, -3, 2, -270, 146, -147, 2, -270,
	146, -147, 2, -307, 146, -305, 9, -304, 5, 4,
	-309, -311, -310, 59, 2, -139, 2, -150, 146, -147,
	-302, 4, -309, -311, -310, -312, 22, 25, 26, 27,
	28, 30, 31, 32, 33, 44, 50, 51, 55, 58,
	60, 69, 74, 79, 80, 82, 81, 83, 84, 85,
	94, 96, 98, 100, 101, 104, 106, 108, 116, 118,
	130, 132, 133, 135, 138, 140, 149, 152, 154, 164,
	166, 177, 180, 186, 189, 190, 205, 206, 207, 213,
	215, 216, 218, 219, 231, 237, 246, 260, 273, 279,
	289, 301, 303, 312, 316, 317, 322, 327, 328, 333,
	335, 342, 343, 345, 346, 347, 348, 316, 381, -179,
	-172, -139, -233, -232, 378, -239, 2, -239, 2, 133,
	376, -190, -191, -232, -233, 2, -180, 146, -307, 146,
	2, -180, 2, 152, -139, 146, 2, -139, 22, 133,
	2, 166, 2, 166, 2, -271, 2, -270, -181, 146,
	2, -180, -181, 146, 2, -151, 146, 2, -150, -139,
	146, 2, -308, 146, 2, -307, -206, 376, -276, 2,
	-275, -304, 340, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 277, 215,
	381, -180, -239, -251, 376, 133, -239, 215, -139, 2,
	281, 2, 376, -81, 54, 319, -226, 2, -227, -136,
	-137, -138, 168, 238, 242, 353, 316, 359, 133, -299,
	-184, 378, -103, 2, -307, 2, 281, 2, 239, 278,
	56, 133, 2, 2, -349, 2, 215, 133, 2, 133,
	2, 133, 2, 133, 2, 133, 2, 2, 239, 278,
	2, 130, 2, 318, 2, 2, 133, 2, 168, 238,
	294, 2, 303, 343, 2, 133, 133, 353, 2, -195,
	-270, 303, 353, 22, -168, -169, -216, -193, 130, -213,
	-214, 186, 118, 213, -197, 22, 100, -197, -197, 45,
	377, 377, -103, 281, 2, 10, 11, 58, 34, 367,
	368, 369, 370, 128, 371, 372, 365, 366, 364, 357,
	358, 361, 290, 23, 71, 360, 359, 64, 192, 267,
	119, 120, 121, 122, 252, 13, 14, 15, 27, 218,
	185, 354, 148, 284, 362, 16, 17, 18, 167, 37,
	149, -144, -152, -239, -239, -239, -239, -239, 224, -189,
	-234, 374, -116, 376, 376, -116, -239, -182, 376, 7,
	-116, -248, 374, -257, -239, -190, 376, 5, 376, 5,
	-334, 349, 130, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 235, -297, 344, -297, -297, -281, 376, -281,
	-282, 376, -281, 350, 355, 376, -225, -226, -225, 316,
	-143, 381, -333, -173, 376, 376, -185, -272, -239, 369,
	-185, -182, -239, 75, -200, 171, 200, 134, 182, 262,
	155, 7, -58, -236, 382, 376, 369, -265, 355, -116,
	-269, 376, -268, -147, 376, -126, 253, -125, 21, 24,
	103, 338, 109, 291, 309, 112, 269, 253, 109, 348,
	109, 112, 253, 291, 309, 269, 253, 109, 382, 112,
	-307, -148, 381, -302, 369, 295, 377, -178, -147, -191,
	376, -167, 205, -135, -331, 348, 205, -167, 376, -140,
	146, 2, -139, -331, 205, -271, -149, -147, -149, 280,
	-139, 31, -128, 381, 49, 258, 109, -128, 109, -128,
	381, 109, -128, 109, 381, 109, -182, 377, 381, -348,
	-354, 74, 376, 31, -250, -277, -278, -280, -289, -283,
	-287, -288, 41, 47, 46, 173, 172, 310, 198, 275,
	287, 336, 150, 39, 214, 158, 4, 157, 159, 160,
	161, 162, 163, 286, 38, 243, 126, 127, 125, 102,
	93, 92, 210, 43, 42, -291, -292, -285, -286, 90,
	314, 315, 165, 40, 53, 52, 341, 297, -308, -348,
	-301, -182, 31, -226, 2, -358, 381, 184, -154, 191,
	204, 142, 216, 351, -306, 5, 4, -249, -262, 94,
	188, -288, 8, 368, -298, 7, 367, -300, -299, -300,
	78, 378, -302, -180, 22, 282, 2, -301, -351, 130,
	-348, -301, -301, -301, -301, -301, 277, -58, 130, -139,
	184, -301, 2, -301, 2, 303, 152, 303, -128, 381,
	-147, 65, 66, 353, -216, -193, -194, -193, -217, -216,
	330, -214, -213, -218, -239, 22, -221, 124, 201, -239,
	-241, -115, -115, -115, -170, -266, -239, 237, 152, -301,
	-295, -277, -294, 248, 249, 247, 251, 250, -277, -302,
	313, -239, -239, -239, -239, -239, -239, -239, -239, -239,
	-239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
	-239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
	-239, -239, -239, 185, 148, 284, 37, 149, -239, 316,
	-239, -239, -239, -239, 197, 205, 207, 322, 116, 329,
	100, 211, -360, 301, 33, -246, -116, 376, -261, 28,
	289, 22, -253, 265, 376, -234, -239, -235, -183, -182,
	377, 381, -183, -252, -248, -260, -259, 345, 377, -182,
	342, 22, 100, 369, 2, 7, -207, 352, 196, 91,
	143, 195, -208, 272, -335, 123, 138, 376, 377, 2,
	377, 2, 377, 2, 377, 2, -239, -239, -201, 2,
	-296, -182, 4, 352, 196, 91, 143, 195, 272, -201,
	2, -202, 2, -239, -182, -203, -240, -241, 367, 368,
	362, 376, 265, -204, 2, -239, -183, -239, 44, 180,
	317, -205, -239, 133, -182, -239, -239, -239, -182, -182,
	2, -182, 2, 376, 7, 7, 313, 313, 7, -143,
	-329, 31, -172, -182, -175, 381, 133, 31, 4, -175,
	377, 381, 171, 171, -268, -200, 171, -198, 222, -198,
	-198, -346, 376, 375, -265, -302, 374, 383, -183, 2,
	-264, -263, 31, -139, 220, 377, -147, 381, 316, -211,
	69, 60, -229, 146, 60, -313, -139, 69, -314, 55,
	328, 237, 132, -211, 69, -211, 69, 69, -270, 34,
	-72, 67, 133, 316, -270, 229, -307, 67, 316, 34,
	-72, 133, 316, -150, -302, 67, -274, 356, -139, 133,
	377, 381, -155, -172, -156, -139, -230, -229, -315, -316,
	-313, 152, 328, 117, 31, 109, 229, 109, 31, 215,
	205, -131, 306, 109, -231, 346, -222, -72, 376, 94,
	31, -222, -186, -187, -273, -188, -147, 376, -139, -180,
	-181, -181, -150, -151, -139, -307, -308, 377, -58, -275,
	316, 335, -156, -57, 24, 74, 103, 377, 381, -174,
	30, 374, -207, 376, -274, 133, 359, 316, 377, 319,
	-227, -153, 242, 288, 254, 276, 8, 7, 7, 381,
	-302, -350, -139, 277, -58, -147, -150, -147, -270, 348,
	130, 66, -194, -217, -219, -298, 376, 368, -220, 265,
	266, 381, -124, 32, 98, 174, -147, 353, -239, -239,
	316, -360, 301, -246, -239, 197, 207, 322, 116, 329,
	100, 211, 133, 376, -240, -240, -182, -239, 376, -182,
	375, 385, 377, -239, 375, 375, 381, -258, -259, 104,
	-239, -169, 381, -168, -239, -182, -182, 377, 377, 316,
	316, 316, 316, 376, -340, 223, 376, 376, -239, 31,
	381, 377, 133, 377, 377, -209, 231, 377, 10, 11,
	367, 368, 369, 370, 128, 371, 372, 365, 366, 364,
	357, 358, 359, 64, 192, 267, 13, 14, 15, 167,
	149, -240, -240, -240, -182, 376, 377, -244, -245, 133,
	130, 31, -205, -205, -205, 377, 133, -182, 381, 381,
	381, 377, 377, 377, 7, 377, 381, 377, 353, 353,
	377, 376, 377, 377, -231, -272, -177, 2, -268, -302,
	-231, -239, -268, -268, -199, 335, 215, 171, -268, -263,
	377, -347, 7, -265, -264, 7, -238, -237, 131, 203,
	377, -139, 376, -265, 377, -125, -147, -139, -139, 205,
	-229, 146, -130, 205, -277, -139, 376, 376, 174, 174,
	-139, -139, 146, -139, 146, -139, -139, -126, 253, -72,
	353, 376, -147, 253, -307, 348, 353, -139, -72, 376,
	-302, 253, 353, -109, 145, 211, 295, 133, -147, 377,
	377, 381, -140, 152, -140, -72, -180, -307, -307, -72,
	-147, 109, -132, 105, -359, 359, -139, -215, -213, -239,
	-196, -224, 260, 215, -178, 340, -139, -196, -176, 381,
	133, 359, -178, -128, -128, -128, -128, -350, -307, 377,
	-277, 374, 375, 7, 7, -112, 348, -350, -299, -299,
	-136, 326, 63, 242, -299, 381, 217, 241, 88, 303,
	-220, -239, -266, -147, 382, -239, -239, -240, -240, 133,
	376, -239, -250, 27, 27, 377, -183, 381, -235, -239,
	377, -248, 106, -239, 312, 377, 342, -169, -169, -169,
	5, 196, 143, 195, -208, 195, -208, -208, 7, -341,
	-139, 376, 346, -168, 377, -295, -277, -239, -244, -239,
	-295, -277, -240, -240, -240, -240, -240, -240, -240, -240,
	-240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
	-240, 100, 205, 211, -240, 381, -183, -245, -244, -239,
	-239, -277, 377, 377, 377, -182, -239, -239, -239, 377,
	7, -57, -192, 138, -274, 381, -192, -199, 376, -239,
	-268, 375, 377, 381, -264, 375, 381, 384, 359, -265,
	376, -172, -263, 316, 316, 109, 205, 337, -317, -314,
	-239, -171, -267, -139, -328, 376, -325, -326, -145, 376,
	376, -123, 103, 280, -212, 109, -128, 109, -128, 316,
	-211, 69, -242, -145, -139, -182, 316, 229, -242, -182,
	316, -242, -112, 133, 302, 295, -157, 151, -230, 376,
	-140, 376, 376, -167, -135, 376, -139, -133, 179, -359,
	-305, -331, -196, -196, -185, 206, 68, 377, -231, -187,
	-177, -239, 377, -113, 76, -113, 7, 375, 377, -111,
	217, -110, -139, 5, -139, -34, -35, 152, -302, -139,
	-147, 216, 377, -124, -302, 27, 27, -239, -250, 377,
	-239, -239, 377, -239, 375, -239, 5, -239, 377, 377,
	377, 377, -342, -139, -239, 377, 377, 377, -245, 133,
	100, 211, 376, -239, 377, 377, 381, 377, 377, 377,
	377, -247, 140, 45, -268, -247, -172, -236, 7, -237,
	-302, 374, -264, -172, 377, -139, -139, -229, 109, -318,
	69, -319, 58, 117, 74, 205, 207, 328, 237, 55,
	94, 246, 377, 377, 381, -146, -190, 58, -146, -239,
	376, -171, -172, 205, 94, 205, 94, 87, 324, -139,
	-139, -147, -139, -139, 376, 377, -147, -307, 377, -302,
	-308, 313, -158, -159, 228, 149, -171, 376, -172, -155,
	31, -171, 215, -134, 178, -359, -305, -131, -223, 376,
	215, -72, -196, 359, 87, 87, 375, 381, 376, 359,
	359, 381, 22, 376, -124, -239, -239, 377, 377, -169,
	-336, 228, 377, -240, 133, 376, -250, 377, -239, -337,
	347, -239, -182, -337, 377, -265, 7, 377, -229, -139,
	-302, -139, 117, 146, 207, 174, 376, -240, -147, -228,
	-355, 73, 299, -267, -124, -302, -124, 377, -182, 377,
	377, 207, 207, -239, -277, -128, -128, 316, 316, -182,
	316, 316, -242, 45, 226, 377, -171, 377, 377, -72,
	377, -147, -359, -305, -132, 101, -172, 69, -246, 376,
	376, -110, -111, -307, -307, -35, -172, 377, -169, 45,
	-240, -250, 377, 377, -338, -339, -139, -264, 375, -319,
	-140, 205, -239, -141, 376, -157, 376, -146, -169, 246,
	-127, 58, -139, -139, -169, 376, 376, 187, 241, -147,
	-228, 377, -157, -228, 376, -305, -133, 330, 206, 377,
	-139, -308, -308, 377, 377, -343, 241, 266, -182, 377,
	381, 31, 109, 377, -320, 193, -139, -172, -124, 377,
	-147, -122, 335, -302, 377, -182, -182, 376, 376, 376,
	-157, -228, -157, -171, -134, 280, -231, 377, 377, 377,
	-344, -345, 37, 325, 78, -239, -344, -339, -341, 117,
	-321, -324, -323, 215, 134, 227, 285, 377, 377, -167,
	-239, 377, 377, -172, -172, -172, -157, 377, -186, -112,
	-112, -345, 234, 129, 265, 234, 129, -139, -323, 215,
	-324, 215, 330, 97, -320, 377, 377, 377, -228, -231,
	27, -322, 202, 258, 49, 280, -322, -321, 376, 376,
	-129, 49, 258, -157, -345, 20, 207, 94, -160, 228,
	-161, 228, 377, -302, 377, -302, 340, 340, -162, 376,
	183, 381, -159, -158, -163, -164, -239, 194, 311, -160,
	376, 381, 377, 381, 376, -163, -160, -164, -163, 377,
	377, 381, -159, -158, -161, 381, -161,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 155,
	157, 0, 319, 0, 164, 166, -2, 0, 0, 0,
	187, 188, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 688, -2, 0, 299, 301, 310, 312,
	314, 316, 317, 0, 367, 369, 371, 373, 375, 377,
	379, 381, 383, 385, 387, 389, 391, 393, 395, 396,
	398, 400, 402, 0, 610, 612, 614, -2, 59, 61,
	63, 65, 67, 77, 0, 168, 170, 172, 174, 177,
	726, 191, 193, 195, 197, -2, 737, 0, 0, 0,
	-2, 0, -2, -2, -2, 68, 69, 70, 71, 72,
	73, 83, 84, 85, 86, 75, 79, 80, 82, 0,
	0, 703, 705, 707, 709, -2, 0, 0, -2, 7,
	13, 15, 17, 20, 22, 24, 26, 28, 30, 32,
	34, 36, 38, 40, 43, 49, 51, 53, 57, 58,
	0, 0, 0, 0, 0, 0, 0, 130, 283, 0,
	1308, 1232, 1238, 1239, 1263, 1264, 1265, 1282, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
	1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
	1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
	1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
	1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
	1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
	1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
	1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
	1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
	1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425,
	1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
	1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
	1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 156,
	158, 159, 0, 0, 0, 1234, 1308, 165, 167, 0,
	0, 0, 0, 0, 575, 274, 1370, 276, 278, 0,
	0, 0, 0, 181, 182, 183, 184, 185, 186, 189,
	190, 0, 0, 0, 0, 0, 273, 271, 220, 221,
	0, 256, 257, 258, 259, 260, 262, 224, 226, 228,
	229, 231, 233, 235, 237, 239, 241, 242, 244, 246,
	247, 249, 251, 252, 254, 576, 0, 0, 0, 0,
	0, 280, 286, 287, 288, 290, 291, 292, 293, 294,
	295, 296, 0, 136, 0, 479, 269, 267, 0, 132,
	0, 607, 0, 282, 608, 609, 604, 605, 1397, 633,
	300, 302, 311, 313, 315, -2, -2, 1491, -2, 331,
	-2, 339, 1497, 0, 342, 343, 346, -2, 216, 368,
	370, 372, 374, 376, 378, 380, 382, 384, 386, 388,
	390, 392, 394, 397, 399, 401, 403, 404, 0, 0,
	0, 408, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 407, 409, 410, 411, 0, 611, 613, 615,
	0, 564, 728, 60, 62, 64, 66, 0, 0, 169,
	171, 173, 175, 178, -2, 701, 702, 192, 194, 196,
	198, -2, 0, 732, 732, 732, 0, 0, 702, 700,
	0, 303, 0, 305, 0, 408, 308, 309, 347, 348,
	938, 0, 0, 0, 0, 0, 0, 1011, 1041, 1043,
	1462, 1491, 0, 1045, 1046, 0, 1048, 1050, 1051, 0,
	1054, 1055, 1207, 1234, 1248, 1249, 1250, 1251, 0, 0,
	1254, 0, 1256, 1257, 1258, 1109, 1065, -2, -2, 1246,
	866, 867, 868, 869, -2, 1505, 1069, 1072, 1075, 1078,
	1079, 1082, 1083, 0, 1446, 1463, 1464, 1487, 1488, 1496,
	1500, 1501, 1470, 1484, 1471, 1458, 1468, 1482, 1314, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1272, 900, 901, 906, 907, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 1518, 1519, 1520, 909, 635, 617, 626, 635, 619,
	620, 621, 622, 623, 624, 625, 628, 0, 718, 1376,
	721, 1245, 719, 704, 706, 0, 708, 0, 0, 712,
	734, 733, 0, 773, 716, 717, 727, 788, 826, 803,
	794, 0, 0, 2, 74, 0, 1470, 826, 76, 0,
	1470, 826, 78, 0, 1470, 137, 138, 365, 366, 1273,
	1274, 1275, 1276, 1505, 81, 0, 87, 0, 1470, 1237,
	0, 1277, 1278, 1279, 1280, 1281, 1521, 1522, 1523, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
	1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
	1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554,
	1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564,
	1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574,
	1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584,
	1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,
	1595, 1596, 1597, 1598, 1599, 1600, 1601, 0, 0, 284,
	285, 1242, 1240, 1241, 0, 160, 161, 162, 163, 0,
	0, 1235, 1216, 1214, 1215, 176, 543, 1470, -2, 1470,
	567, 543, 571, -2, 725, 1470, 649, 275, 277, 0,
	180, 0, 662, 0, 664, 0, 679, 832, 122, 1470,
	201, 214, 122, 1470, 204, 122, 1470, 207, 1230, 122,
	1470, 210, 211, 1470, 213, 139, 270, 0, 0, -2,
	263, 265, -2, 261, 225, 227, 230, 232, 234, 236,
	238, 240, 243, 245, 248, 250, 253, 255, -2, 0,
	0, 0, 478, 0, 0, 0, 606, 0, 632, 318,
	0, 328, 0, 330, 1457, -2, -2, 334, 636, 640,
	641, 642, 0, 0, 0, 0, 0, 0, 0, 344,
	217, 0, 405, 406, 414, 415, 0, 418, 439, 451,
	0, 0, 422, 424, 477, 426, 0, 0, 428, 0,
	430, 0, 432, 0, 434, 0, 436, 438, 440, 452,
	442, 727, 444, 0, 446, 450, 0, 455, 0, 457,
	458, 459, 0, 0, 465, 0, 0, 412, 413, 122,
	830, 0, 0, 0, -2, 0, 745, 770, 0, 748,
	749, 0, 0, 0, 0, 730, 731, 0, 0, 0,
	690, 691, 304, 0, 307, 0, 0, 0, 0, 1142,
	1143, 1144, 1145, 1146, 1147, 1150, 1151, 1148, 1149, 1152,
	1153, 0, 0, 0, 0, 0, 1154, 0, 0, 0,
	0, 0, 0, 0, 0, 1155, 1156, 1157, 0, 0,
	1159, 0, 1161, 0, 0, 0, 0, 0, 0, 1221,
	0, 0, 1158, 943, 944, 945, 977, 978, 0, 1042,
	1218, 1211, 1044, 0, 1164, -2, 1165, 0, 0, 1047,
	1052, 1053, 1164, 0, 1206, -2, 0, 1253, 0, 935,
	1111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1187, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 885, 903, 914, 911, 910, 887, 0, 886,
	884, 0, 888, 0, 0, 0, 616, -2, 618, 0,
	630, 0, 720, 0, 0, 0, 777, 1222, 1226, 1227,
	777, 0, 1165, 0, 0, 0, 0, 823, 823, 823,
	821, 797, 0, 803, 0, -2, 827, 815, 0, -2,
	794, 0, 0, 828, 0, 88, 601, 101, 0, 601,
	601, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	817, 1233, 0, 1212, 1213, 152, 0, 0, 1228, 1217,
	485, 0, 0, 565, 0, 724, 0, 0, 0, 0,
	1470, 574, 1266, 651, 0, 836, 0, 665, 0, 0,
	833, 0, 199, 0, 120, 121, 0, 202, 0, 205,
	0, 0, 208, 0, 0, 0, 0, 727, 0, 0,
	289, 0, 0, 727, 0, 1167, 844, 845, 846, 847,
	848, 935, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 897, 0,
	872, 872, 872, 889, 890, 898, 899, 904, 905, 916,
	917, 919, 921, 915, 915, 915, 912, 913, 817, 0,
	0, 0, 0, -2, 336, 0, 638, 0, 643, 356,
	357, 358, 645, 646, 340, 359, 360, 361, 362, 363,
	364, 0, 560, 0, 562, 1259, 0, 337, 349, 338,
	341, 0, 218, 416, 417, 419, 420, 421, 425, 0,
	474, 427, 429, 431, 433, 435, 443, 447, 727, 453,
	456, 460, 461, 462, 463, 0, 0, 0, 563, 0,
	320, 0, 469, 0, 745, 770, 694, 744, 695, 769,
	771, 746, 747, 752, 756, 757, 760, 763, 764, 754,
	938, 713, 714, 715, 738, 739, 586, 0, 0, 306,
	939, 840, 841, 891, 892, 893, 894, 895, 940, 941,
	0, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, -2, -2, -2, -2, -2, -2, -2, -2, 964,
	965, 966, 967, 968, 969, 970, 971, -2, -2, -2,
	975, 976, -2, 1160, 1162, 0, 1221, 0, -2, 0,
	-2, -2, -2, -2, 989, 0, 991, 994, 996, 998,
	0, 0, 0, 0, 1220, 1008, 1198, 0, 0, 1139,
	1140, 1141, 993, 0, 0, 1219, 1210, 0, 0, 1163,
	1049, 0, 0, 0, 1171, 1205, 1201, 0, 1056, 737,
	0, 0, 0, 0, 1063, 0, 1262, 922, 923, 924,
	925, 926, 927, 936, 1119, 0, 0, 0, 1070, 1071,
	1073, 1074, 1076, 1077, 1080, 1081, 0, 0, 0, 1087,
	0, 1174, -2, -2, -2, -2, -2, -2, -2, 0,
	1089, 0, 1091, 1165, 1184, 0, 0, 1012, 0, 0,
	0, 0, 1491, 0, 1094, 1165, 1192, 0, 0, 0,
	0, 0, 1165, 0, 1197, 0, 0, 0, 0, 0,
	1105, 0, 1107, 0, 0, 0, 0, 0, 0, 629,
	722, 0, 0, 0, 836, 0, 0, 0, 1225, 836,
	772, 0, 0, 0, 0, 0, 0, 818, 822, 819,
	820, 0, 0, 803, 815, 785, 0, 0, 0, 792,
	793, 814, 0, 813, 802, -2, 0, 0, 0, 0,
	0, 600, 103, 1470, 0, 124, 0, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 1236, 0, 142, 0, 1243, 0,
	0, 0, 0, 0, 484, 1242, 486, 488, 489, 490,
	491, 1267, 0, 1267, 0, 0, 0, 0, 0, 0,
	0, 653, 659, 0, 751, 0, 677, 667, 0, 0,
	0, 677, 681, 682, 684, 685, 0, 0, 834, 215,
	122, 122, 1231, 122, 122, 140, 212, 272, 222, 264,
	0, 0, 0, 266, 0, 0, 0, 268, 0, 837,
	839, 0, 849, 0, 151, 0, 0, 0, 329, 0,
	637, 644, 0, 353, 0, 355, 561, 1261, 1260, 0,
	219, 476, 297, 445, 448, 471, 472, 473, 831, 0,
	0, 470, 698, 699, 0, 758, 0, 0, 755, 761,
	762, 0, 741, 584, 585, 0, 0, 0, -2, -2,
	0, 0, 0, 1009, -2, 990, 992, 995, 997, 999,
	0, 0, 0, 0, 0, 0, 0, 1010, 1164, 0,
	1208, 1211, -2, 1166, 1169, 1170, 0, 0, 1202, 0,
	0, 0, 0, 736, 737, 737, 737, 1062, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	0, 1086, 0, 1088, 1090, 0, 0, 1092, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1015, 1016, 1017, 0, 1164, 1093, 1190, 1191, 0,
	0, 0, 0, 0, 0, 1099, 0, 1196, 0, 0,
	0, 1103, 1104, 1106, 0, 870, 0, 896, 918, 920,
	908, 727, 1244, 774, 766, 1223, 817, 776, 778, 1224,
	766, 1166, 805, 0, 807, 0, 0, 0, 809, 0,
	798, 0, 800, 815, 790, 0, 0, 783, 0, 782,
	803, 811, 0, 0, 829, 102, 590, 0, 0, 0,
	105, 1470, 113, 0, 515, 0, 0, 0, 0, 0,
	603, 114, 1470, 122, 1470, 122, 115, 89, 601, 90,
	0, 0, 596, 0, 588, 0, 0, 587, 91, 0,
	598, 0, 0, 151, 0, 0, 153, 0, 1229, 493,
	542, 0, 0, 1267, 0, 482, 543, 568, -2, 570,
	0, 0, 655, 659, 0, 658, 725, 677, 750, 835,
	660, 677, 0, 0, 0, 669, 666, 663, 836, 0,
	0, 0, 0, 200, 203, 206, 209, 279, 0, 0,
	1168, 0, 842, 0, 0, 131, 0, 281, 326, 327,
	332, 351, 352, 354, 350, 0, 0, 0, 0, 0,
	0, 0, 740, 586, 0, 942, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1199, 0, 0, 0, 1210,
	-2, 1172, 1200, 1204, 0, 1057, 0, 0, 0, 0,
	1255, 928, 929, 930, 931, 932, 933, 934, 0, 1117,
	1118, 1122, 0, 0, 1068, 0, 0, 1173, 1183, 1185,
	1013, 1014, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, -2, -2, -2, 1031, 1032, 1033, -2, -2,
	-2, 0, 0, 0, 1186, 0, 0, 1188, 1189, 1193,
	1194, 0, 1096, 1097, 1098, 1195, 0, 0, 0, 902,
	0, 0, 768, 0, 775, 0, 768, 806, 0, 825,
	808, 788, 799, 0, 796, 786, 0, 787, 0, 815,
	0, 0, 795, 0, 0, 0, 0, 123, 513, 532,
	0, 0, 577, 583, 583, 0, 1066, 1067, 0, 0,
	0, 107, 0, 0, 0, 0, 111, 0, 117, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 95, 0,
	0, 94, 129, 0, 0, 154, 498, 0, 487, 0,
	0, 0, 485, 0, 566, 0, 0, 657, 659, 0,
	650, 651, 179, 661, 675, 676, 674, 0, 677, 683,
	680, 686, 0, 0, 133, 0, 0, 843, 850, 149,
	1360, 147, 144, 146, 298, 321, 322, 0, 466, 467,
	468, 753, 759, 742, 586, 0, 0, -2, 0, 1002,
	-2, -2, 1135, 1166, 1209, 1203, 1252, 737, 1058, 1060,
	1061, 937, 1124, 1121, 0, 1108, 1084, 1085, 1182, 0,
	0, 0, 0, 1166, 1137, 1095, 0, 1101, 1102, 871,
	723, 1113, 0, 0, 779, 1113, 0, 803, 801, 784,
	780, 0, 791, 0, 812, 592, 594, 104, 0, 514,
	0, 517, 0, 0, 0, 0, 523, 524, 0, 0,
	0, 0, 534, 541, 0, 586, 1247, 0, 586, 0,
	0, 0, 0, 0, 119, 0, 0, 602, 0, 122,
	122, 591, 0, 0, 0, 0, 597, 589, 0, 599,
	141, 0, 480, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 647, 659, 0, 652, 653, 0, 0,
	0, 668, 678, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 324, 0, 743, -2, -2, 1003, 1136, 0,
	737, 0, 1110, -2, 0, 0, 0, 1138, 0, 710,
	0, 767, 765, 711, 824, 815, 0, 810, 106, 0,
	518, 519, 1267, 0, 522, 525, 0, 527, 1269, 493,
	0, 538, 539, 578, 579, 582, 580, 583, 737, 536,
	0, 108, 109, 118, 126, 110, 116, 0, 0, 737,
	0, 0, 816, 0, 0, 541, 0, 531, 493, 483,
	541, 0, 0, 654, 655, 0, 0, 0, 687, 0,
	0, 148, 0, 143, 145, 323, 0, 1059, 1127, 0,
	-2, 0, 1039, 1100, 1112, 1114, 0, 789, 781, 516,
	520, 0, 0, 547, 0, 535, 0, 586, 0, 0,
	128, 0, 593, 595, 0, 0, 0, 0, 0, 0,
	493, 541, 481, 493, 0, 656, 657, 0, 671, 836,
	673, 0, 0, 150, 325, 0, 0, 0, 1123, 1040,
	0, 0, 0, 526, 552, 0, 0, 0, 581, 1057,
	543, 112, 0, 125, 0, 0, 0, 0, 0, 0,
	529, 493, 572, 0, 648, 0, 672, 151, 151, 1120,
	1125, 1128, -2, 1430, 1305, 0, 1126, 1115, 1116, 0,
	528, 548, 549, 0, 544, 545, 546, 1268, 540, 547,
	127, 98, 100, 0, 0, 0, 530, 541, 836, 134,
	135, 0, 1130, 1131, 1132, 1133, 1134, 521, 550, 0,
	551, 0, 0, 0, 552, 0, 0, 496, 493, 670,
	0, 553, 0, 556, 557, 0, 554, 537, 0, 0,
	492, 494, 495, 573, 1129, 555, 558, 559, 0, 0,
	0, 0, 499, 0, 500, 0, 0, 0, 498, 0,
	0, 0, 497, 503, 0, 506, 508, -2, 0, 501,
	0, 0, 504, 0, 0, 0, 502, 507, 0, 505,
	498, 0, 497, 512, 510, 0, 511,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 365, 3, 371, 366, 3,
	376, 377, 369, 367, 381, 368, 378, 370, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 385, 380,
	357, 359, 358, 361, 382, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 374, 3, 375, 372, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 383, 364, 384, 362,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 360,
	57700, 363, 57701, 373, 57702, 379, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:917
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:923
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:929
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:969
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:970
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:982
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:983
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1026
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1046
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1058
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1081
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1107
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1113
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1119
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1128
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1137
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1206
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1229
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = nil
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = DropCascade
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = DropRestrict
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = DropDefault
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1302
		{
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			return unimplemented(sqllex, "alter using")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1306
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1333
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1359
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.str = "CSV"
		}
	case 134:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1397
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1466
		{
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1486
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			return helpWith(sqllex, "CREATE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1525
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1526
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1528
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			return helpWith(sqllex, "DELETE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1569
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1570
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1574
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1575
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1591
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1606
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1629
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1667
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1734
		{
			return helpWith(sqllex, "DELETE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1735
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1736
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1737
		{
			return helpWith(sqllex, "INSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1738
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1746
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1747
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{ /* SKIP DOC */
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			return helpWith(sqllex, "GRANT")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1885
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "RESET")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1964
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			return helpWith(sqllex, "RESET")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2002
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2003
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{ /* SKIP DOC */
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2006
		{ /* SKIP DOC */
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2007
		{
			return unimplemented(sqllex, "set local")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2066
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2138
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2141
		{
			return unimplemented(sqllex, "set from current")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2143
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2153
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = Low
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = Normal
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = High
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2252
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2253
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2254
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2255
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2256
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2257
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2258
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2259
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2260
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2262
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2263
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2264
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2265
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2267
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2268
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2271
		{
			return helpWith(sqllex, "SHOW")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2280
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.str = "client_encoding"
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2328
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2361
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2372
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2382
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2393
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2409
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2441
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2446
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2487
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2495
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2499
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2503
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2506
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2517
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2528
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2543
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[7].str)}}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2547
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2551
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2555
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2559
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2565
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2569
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2573
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2579
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2607
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2714
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2718
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = DropDefault
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 499:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   UnrestrictedName(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  UnrestrictedName(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2828
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3035
		{
			return unimplemented(sqllex, "match full")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3036
		{
			return unimplemented(sqllex, "match partial")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			return unimplemented(sqllex, "match simple")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3038
		{
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = NoAction
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = Restrict
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = Cascade
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = SetNull
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = SetDefault
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = nil
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3164
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3204
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = true
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = false
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3235
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3238
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3239
		{
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = Ascending
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = Descending
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3290
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3292
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = true
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = false
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3326
		{
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3337
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3348
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3359
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3363
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3364
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3365
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3383
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3401
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3406
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3414
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3424
		{
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3425
		{
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.str = ""
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.str = ""
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3484
		{
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3486
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = ReadOnly
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = ReadWrite
		}
	case 647:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.str = ""
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.str = ""
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.str = ""
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.str = ""
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3593
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3594
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3618
		{
			return helpWith(sqllex, "INSERT")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3635
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3677
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3681
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3689
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 678:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3716
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3717
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3844
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3879
		{
			return helpWith(sqllex, "SELECT")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3880
		{
			return helpWith(sqllex, "VALUES")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3881
		{
			return helpWith(sqllex, "TABLE")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3928
		{
			return helpWith(sqllex, "SELECT")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3972
		{
			return helpWith(sqllex, "TABLE")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3983
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3984
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3985
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3988
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3989
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3992
		{
			return unimplemented(sqllex, "cte")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3995
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3996
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3999
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4000
		{
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4003
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4004
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = true
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = false
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = false
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = true
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4028
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[4].str)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4082
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4106
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4158
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4159
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4162
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4163
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = false
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = true
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4234
		{
			return helpWith(sqllex, "VALUES")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4236
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4251
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &From{}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4273
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4291
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[2].str)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4318
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4355
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4380
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = nil
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4421
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4427
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = true
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = false
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.str = astFullJoin
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.str = astLeftJoin
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.str = astRightJoin
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.str = astInnerJoin
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4539
		{
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4625
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4639
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4647
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4671
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4682
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = jsonbColType
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = jsonColType
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4740
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4771
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4780
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = nil
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4845
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4941
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4973
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5012
		{
		}
	case 915:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5013
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 918:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = year
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = month
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = day
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = hour
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = minute
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = month
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = hour
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = minute
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = minute
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = nil
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = second
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5108
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5143
		{
			return unimplemented(sqllex, "at tz")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5192
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5196
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5204
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5264
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5268
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5272
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5284
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5288
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5296
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5351
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5417
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5457
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5461
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5473
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5477
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5481
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5485
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5489
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5493
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5501
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5505
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5509
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5513
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5517
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5521
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5525
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5529
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5537
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5541
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5549
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5557
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5594
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5640
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5644
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5647
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5648
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5650
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5661
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5672
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5688
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5689
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5693
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5702
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5711
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5713
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5720
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5721
		{
			return unimplemented(sqllex, "current role")
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5730
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5748
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5751
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5753
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5756
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5761
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5763
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5770
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5771
		{
			return unimplemented(sqllex, "treat")
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5777
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5781
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5785
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5789
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5793
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5797
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5805
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5808
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5813
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5817
		{
			return unimplemented(sqllex, "within group")
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5818
		{
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5826
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5843
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5853
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5861
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5865
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5895
		{
			sqlVAL.str = ""
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5905
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5915
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5916
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5917
		{
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5920
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5921
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5927
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5928
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5929
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5930
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5931
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5964
		{
			sqlVAL.union.val = Any
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5968
		{
			sqlVAL.union.val = Some
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = All
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5977
		{
			sqlVAL.union.val = Plus
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = Minus
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = Mult
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = Div
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5981
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = Mod
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = Bitand
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5984
		{
			sqlVAL.union.val = Bitor
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = Pow
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = Bitxor
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = LT
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = GT
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5989
		{
			sqlVAL.union.val = EQ
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = LE
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = GE
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = NE
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = Like
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = NotLike
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = ILike
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5999
		{
			sqlVAL.union.val = NotILike
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6091
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6097
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6104
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6108
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6125
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6133
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6137
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6147
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6153
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6159
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6163
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6167
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6177
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6188
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6195
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6205
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6211
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6222
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6228
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6232
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6239
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6245
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6251
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6257
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6261
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6267
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6277
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6281
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6286
		{
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6287
		{
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6291
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6295
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6301
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6310
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[2].str)}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6314
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6318
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6326
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6330
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6336
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6340
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6346
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6350
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6361
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6365
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6371
		{
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6375
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6388
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6392
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6396
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6400
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6406
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6410
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6416
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6419
		{
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6429
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6433
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6440
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6444
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6448
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6452
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6455
		{
			return unimplemented(sqllex, "func const")
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6457
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6461
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6464
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6466
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6470
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6474
		{
			sqlVAL.union.val = DNull
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6481
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6485
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6491
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6526
		{
			sqlVAL.str = ""
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6532
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6536
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
