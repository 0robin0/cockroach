// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

//line sql.y:482
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const KEY = 57515
const KEYS = 57516
const KV = 57517
const LATERAL = 57518
const LC_CTYPE = 57519
const LC_COLLATE = 57520
const LEADING = 57521
const LEAST = 57522
const LEFT = 57523
const LESS = 57524
const LEVEL = 57525
const LIKE = 57526
const LIMIT = 57527
const LIST = 57528
const LOCAL = 57529
const LOCALTIME = 57530
const LOCALTIMESTAMP = 57531
const LOW = 57532
const LSHIFT = 57533
const MATCH = 57534
const MAXVALUE = 57535
const MINUTE = 57536
const MONTH = 57537
const NAN = 57538
const NAME = 57539
const NAMES = 57540
const NATURAL = 57541
const NEXT = 57542
const NO = 57543
const NO_INDEX_JOIN = 57544
const NORMAL = 57545
const NOT = 57546
const NOTHING = 57547
const NULL = 57548
const NULLIF = 57549
const NULLS = 57550
const NUMERIC = 57551
const OF = 57552
const OFF = 57553
const OFFSET = 57554
const OID = 57555
const ON = 57556
const ONLY = 57557
const OPTIONS = 57558
const OR = 57559
const ORDER = 57560
const ORDINALITY = 57561
const OUT = 57562
const OUTER = 57563
const OVER = 57564
const OVERLAPS = 57565
const OVERLAY = 57566
const PARENT = 57567
const PARTIAL = 57568
const PARTITION = 57569
const PASSWORD = 57570
const PAUSE = 57571
const PLACING = 57572
const PLANS = 57573
const POSITION = 57574
const PRECEDING = 57575
const PRECISION = 57576
const PREPARE = 57577
const PRIMARY = 57578
const PRIORITY = 57579
const QUERIES = 57580
const QUERY = 57581
const RANGE = 57582
const READ = 57583
const REAL = 57584
const RECURSIVE = 57585
const REF = 57586
const REFERENCES = 57587
const REGCLASS = 57588
const REGPROC = 57589
const REGPROCEDURE = 57590
const REGNAMESPACE = 57591
const REGTYPE = 57592
const REMOVE_PATH = 57593
const RENAME = 57594
const REPEATABLE = 57595
const RELEASE = 57596
const RESET = 57597
const RESTORE = 57598
const RESTRICT = 57599
const RESUME = 57600
const RETURNING = 57601
const REVOKE = 57602
const RIGHT = 57603
const ROLLBACK = 57604
const ROLLUP = 57605
const ROW = 57606
const ROWS = 57607
const RSHIFT = 57608
const SAVEPOINT = 57609
const SCATTER = 57610
const SCRUB = 57611
const SEARCH = 57612
const SECOND = 57613
const SELECT = 57614
const SEQUENCES = 57615
const SERIAL = 57616
const SERIALIZABLE = 57617
const SESSION = 57618
const SESSIONS = 57619
const SESSION_USER = 57620
const SET = 57621
const SETTING = 57622
const SETTINGS = 57623
const SHOW = 57624
const SIMILAR = 57625
const SIMPLE = 57626
const SMALLINT = 57627
const SMALLSERIAL = 57628
const SNAPSHOT = 57629
const SOME = 57630
const SPLIT = 57631
const SQL = 57632
const START = 57633
const STATUS = 57634
const STDIN = 57635
const STRICT = 57636
const STRING = 57637
const STORE = 57638
const STORING = 57639
const SUBSTRING = 57640
const SYMMETRIC = 57641
const SYSTEM = 57642
const TABLE = 57643
const TABLES = 57644
const TEMP = 57645
const TEMPLATE = 57646
const TEMPORARY = 57647
const TESTING_RANGES = 57648
const TESTING_RELOCATE = 57649
const TEXT = 57650
const THAN = 57651
const THEN = 57652
const TIME = 57653
const TIMESTAMP = 57654
const TIMESTAMPTZ = 57655
const TO = 57656
const TRAILING = 57657
const TRACE = 57658
const TRANSACTION = 57659
const TREAT = 57660
const TRIM = 57661
const TRUE = 57662
const TRUNCATE = 57663
const TYPE = 57664
const UNBOUNDED = 57665
const UNCOMMITTED = 57666
const UNION = 57667
const UNIQUE = 57668
const UNKNOWN = 57669
const UPDATE = 57670
const UPSERT = 57671
const USE = 57672
const USER = 57673
const USERS = 57674
const USING = 57675
const UUID = 57676
const VALID = 57677
const VALIDATE = 57678
const VALUE = 57679
const VALUES = 57680
const VARCHAR = 57681
const VARIADIC = 57682
const VIEW = 57683
const VARYING = 57684
const WHEN = 57685
const WHERE = 57686
const WINDOW = 57687
const WITH = 57688
const WITHIN = 57689
const WITHOUT = 57690
const WRITE = 57691
const YEAR = 57692
const ZONE = 57693
const NOT_LA = 57694
const WITH_LA = 57695
const AS_LA = 57696
const CONTAINED_BY = 57697
const HAS_SOME_KEY = 57698
const HAS_ALL_KEYS = 57699
const POSTFIXOP = 57700
const UMINUS = 57701
const HELPTOKEN = 57702

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6831

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	380, 54,
	-2, 706,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	153, 558,
	-2, 0,
	-1, 64,
	96, 706,
	157, 706,
	328, 706,
	329, 706,
	-2, 0,
	-1, 74,
	107, 681,
	117, 681,
	165, 681,
	185, 681,
	212, 681,
	218, 681,
	325, 681,
	-2, 670,
	-1, 107,
	4, 708,
	20, 708,
	21, 708,
	23, 708,
	28, 708,
	33, 708,
	34, 708,
	35, 708,
	36, 708,
	37, 708,
	38, 708,
	39, 708,
	40, 708,
	41, 708,
	42, 708,
	44, 708,
	45, 708,
	46, 708,
	47, 708,
	48, 708,
	51, 708,
	52, 708,
	53, 708,
	55, 708,
	56, 708,
	60, 708,
	61, 708,
	62, 708,
	64, 708,
	65, 708,
	66, 708,
	67, 708,
	69, 708,
	71, 708,
	72, 708,
	75, 708,
	76, 708,
	77, 708,
	85, 708,
	86, 708,
	87, 708,
	88, 708,
	89, 708,
	90, 708,
	91, 708,
	92, 708,
	94, 708,
	96, 708,
	98, 708,
	101, 708,
	102, 708,
	104, 708,
	108, 708,
	109, 708,
	110, 708,
	111, 708,
	112, 708,
	113, 708,
	114, 708,
	122, 708,
	123, 708,
	124, 708,
	125, 708,
	126, 708,
	128, 708,
	130, 708,
	135, 708,
	136, 708,
	138, 708,
	141, 708,
	142, 708,
	145, 708,
	146, 708,
	147, 708,
	148, 708,
	151, 708,
	152, 708,
	154, 708,
	157, 708,
	158, 708,
	159, 708,
	160, 708,
	161, 708,
	162, 708,
	163, 708,
	164, 708,
	166, 708,
	169, 708,
	170, 708,
	171, 708,
	173, 708,
	174, 708,
	175, 708,
	177, 708,
	178, 708,
	180, 708,
	182, 708,
	183, 708,
	186, 708,
	187, 708,
	190, 708,
	192, 708,
	194, 708,
	195, 708,
	196, 708,
	197, 708,
	198, 708,
	200, 708,
	201, 708,
	202, 708,
	203, 708,
	207, 708,
	208, 708,
	209, 708,
	210, 708,
	211, 708,
	213, 708,
	215, 708,
	216, 708,
	219, 708,
	220, 708,
	222, 708,
	224, 708,
	225, 708,
	226, 708,
	227, 708,
	228, 708,
	229, 708,
	231, 708,
	232, 708,
	233, 708,
	234, 708,
	235, 708,
	237, 708,
	238, 708,
	239, 708,
	240, 708,
	241, 708,
	242, 708,
	243, 708,
	244, 708,
	246, 708,
	247, 708,
	248, 708,
	249, 708,
	250, 708,
	252, 708,
	253, 708,
	254, 708,
	255, 708,
	256, 708,
	257, 708,
	258, 708,
	260, 708,
	262, 708,
	263, 708,
	264, 708,
	265, 708,
	267, 708,
	268, 708,
	269, 708,
	270, 708,
	271, 708,
	273, 708,
	274, 708,
	275, 708,
	276, 708,
	277, 708,
	279, 708,
	280, 708,
	281, 708,
	282, 708,
	284, 708,
	285, 708,
	286, 708,
	287, 708,
	289, 708,
	290, 708,
	291, 708,
	292, 708,
	293, 708,
	294, 708,
	295, 708,
	296, 708,
	297, 708,
	298, 708,
	300, 708,
	302, 708,
	303, 708,
	304, 708,
	305, 708,
	306, 708,
	307, 708,
	308, 708,
	309, 708,
	311, 708,
	312, 708,
	313, 708,
	316, 708,
	317, 708,
	318, 708,
	319, 708,
	321, 708,
	322, 708,
	323, 708,
	324, 708,
	327, 708,
	328, 708,
	329, 708,
	330, 708,
	332, 708,
	334, 708,
	335, 708,
	336, 708,
	337, 708,
	338, 708,
	339, 708,
	342, 708,
	347, 708,
	348, 708,
	349, 708,
	350, 708,
	351, 708,
	-2, 0,
	-1, 124,
	107, 680,
	117, 680,
	165, 680,
	185, 680,
	212, 680,
	218, 680,
	325, 680,
	-2, 673,
	-1, 129,
	1, 607,
	169, 607,
	237, 607,
	241, 607,
	379, 607,
	380, 607,
	-2, 0,
	-1, 131,
	1, 607,
	379, 607,
	380, 607,
	-2, 0,
	-1, 132,
	1, 607,
	379, 607,
	380, 607,
	-2, 0,
	-1, 133,
	1, 611,
	379, 611,
	380, 611,
	-2, 0,
	-1, 140,
	4, 714,
	5, 714,
	6, 714,
	7, 714,
	8, 714,
	9, 714,
	20, 714,
	21, 714,
	23, 714,
	28, 714,
	29, 714,
	33, 714,
	34, 714,
	35, 714,
	36, 714,
	37, 714,
	38, 714,
	39, 714,
	40, 714,
	41, 714,
	42, 714,
	44, 714,
	45, 714,
	46, 714,
	47, 714,
	48, 714,
	49, 714,
	50, 714,
	51, 714,
	52, 714,
	53, 714,
	55, 714,
	56, 714,
	58, 714,
	60, 714,
	61, 714,
	62, 714,
	64, 714,
	65, 714,
	66, 714,
	67, 714,
	69, 714,
	71, 714,
	72, 714,
	74, 714,
	75, 714,
	76, 714,
	77, 714,
	79, 714,
	80, 714,
	81, 714,
	83, 714,
	84, 714,
	85, 714,
	86, 714,
	87, 714,
	88, 714,
	89, 714,
	90, 714,
	91, 714,
	92, 714,
	94, 714,
	96, 714,
	98, 714,
	101, 714,
	102, 714,
	104, 714,
	108, 714,
	109, 714,
	110, 714,
	111, 714,
	112, 714,
	113, 714,
	114, 714,
	115, 714,
	116, 714,
	122, 714,
	123, 714,
	124, 714,
	125, 714,
	126, 714,
	128, 714,
	130, 714,
	133, 714,
	135, 714,
	136, 714,
	138, 714,
	141, 714,
	142, 714,
	145, 714,
	146, 714,
	147, 714,
	148, 714,
	149, 714,
	151, 714,
	152, 714,
	154, 714,
	156, 714,
	157, 714,
	158, 714,
	159, 714,
	160, 714,
	161, 714,
	162, 714,
	163, 714,
	164, 714,
	166, 714,
	168, 714,
	169, 714,
	170, 714,
	171, 714,
	172, 714,
	173, 714,
	174, 714,
	175, 714,
	177, 714,
	178, 714,
	180, 714,
	181, 714,
	182, 714,
	183, 714,
	184, 714,
	186, 714,
	187, 714,
	190, 714,
	192, 714,
	193, 714,
	194, 714,
	195, 714,
	196, 714,
	197, 714,
	198, 714,
	199, 714,
	200, 714,
	201, 714,
	202, 714,
	203, 714,
	204, 714,
	206, 714,
	207, 714,
	208, 714,
	209, 714,
	210, 714,
	211, 714,
	213, 714,
	216, 714,
	219, 714,
	220, 714,
	221, 714,
	222, 714,
	223, 714,
	224, 714,
	225, 714,
	226, 714,
	227, 714,
	228, 714,
	229, 714,
	231, 714,
	232, 714,
	233, 714,
	234, 714,
	235, 714,
	237, 714,
	238, 714,
	239, 714,
	240, 714,
	241, 714,
	242, 714,
	243, 714,
	244, 714,
	246, 714,
	247, 714,
	248, 714,
	249, 714,
	250, 714,
	252, 714,
	253, 714,
	254, 714,
	255, 714,
	256, 714,
	257, 714,
	258, 714,
	260, 714,
	261, 714,
	262, 714,
	263, 714,
	264, 714,
	265, 714,
	267, 714,
	268, 714,
	269, 714,
	270, 714,
	271, 714,
	273, 714,
	274, 714,
	275, 714,
	276, 714,
	277, 714,
	278, 714,
	279, 714,
	280, 714,
	281, 714,
	282, 714,
	283, 714,
	284, 714,
	285, 714,
	286, 714,
	287, 714,
	289, 714,
	290, 714,
	291, 714,
	292, 714,
	293, 714,
	294, 714,
	295, 714,
	296, 714,
	297, 714,
	298, 714,
	300, 714,
	302, 714,
	303, 714,
	304, 714,
	305, 714,
	306, 714,
	307, 714,
	308, 714,
	309, 714,
	311, 714,
	312, 714,
	313, 714,
	316, 714,
	317, 714,
	318, 714,
	319, 714,
	320, 714,
	321, 714,
	322, 714,
	323, 714,
	324, 714,
	327, 714,
	328, 714,
	329, 714,
	330, 714,
	331, 714,
	332, 714,
	334, 714,
	335, 714,
	336, 714,
	337, 714,
	338, 714,
	339, 714,
	342, 714,
	347, 714,
	348, 714,
	349, 714,
	350, 714,
	351, 714,
	352, 714,
	362, 714,
	367, 714,
	368, 714,
	369, 714,
	376, 714,
	382, 714,
	-2, 0,
	-1, 143,
	1, 54,
	380, 54,
	-2, 706,
	-1, 513,
	132, 1321,
	314, 1321,
	357, 1321,
	378, 1321,
	-2, 0,
	-1, 514,
	132, 1268,
	314, 1268,
	357, 1268,
	378, 1268,
	-2, 0,
	-1, 516,
	132, 1380,
	314, 1380,
	357, 1380,
	378, 1380,
	-2, 0,
	-1, 518,
	132, 1403,
	314, 1403,
	357, 1403,
	378, 1403,
	-2, 0,
	-1, 525,
	132, 1326,
	314, 1326,
	357, 1326,
	378, 1326,
	-2, 327,
	-1, 551,
	1, 405,
	375, 405,
	377, 405,
	379, 405,
	380, 405,
	-2, 0,
	-1, 552,
	1, 457,
	129, 457,
	375, 457,
	377, 457,
	379, 457,
	380, 457,
	-2, 0,
	-1, 558,
	1, 419,
	375, 419,
	377, 419,
	379, 419,
	380, 419,
	-2, 0,
	-1, 560,
	1, 423,
	375, 423,
	377, 423,
	379, 423,
	380, 423,
	-2, 0,
	-1, 563,
	1, 431,
	375, 431,
	377, 431,
	379, 431,
	380, 431,
	-2, 0,
	-1, 564,
	1, 436,
	375, 436,
	377, 436,
	379, 436,
	380, 436,
	-2, 0,
	-1, 567,
	1, 446,
	375, 446,
	377, 446,
	379, 446,
	380, 446,
	-2, 0,
	-1, 583,
	117, 716,
	185, 716,
	212, 716,
	-2, 676,
	-1, 586,
	117, 715,
	185, 715,
	212, 715,
	-2, 674,
	-1, 643,
	376, 1246,
	-2, 1239,
	-1, 644,
	376, 1247,
	-2, 1240,
	-1, 650,
	5, 893,
	376, 893,
	-2, 1455,
	-1, 675,
	5, 852,
	-2, 1424,
	-1, 676,
	5, 887,
	376, 887,
	-2, 1426,
	-1, 677,
	5, 862,
	-2, 1427,
	-1, 678,
	5, 861,
	-2, 1428,
	-1, 679,
	5, 887,
	376, 887,
	-2, 1431,
	-1, 680,
	5, 887,
	376, 887,
	-2, 1432,
	-1, 681,
	5, 888,
	-2, 1435,
	-1, 682,
	5, 844,
	-2, 1436,
	-1, 683,
	5, 844,
	-2, 1437,
	-1, 684,
	5, 869,
	-2, 1441,
	-1, 685,
	5, 854,
	-2, 1442,
	-1, 686,
	5, 855,
	-2, 1443,
	-1, 687,
	5, 845,
	-2, 1449,
	-1, 688,
	5, 846,
	-2, 1450,
	-1, 689,
	5, 847,
	-2, 1451,
	-1, 690,
	5, 848,
	-2, 1452,
	-1, 691,
	5, 849,
	-2, 1453,
	-1, 692,
	5, 850,
	-2, 1454,
	-1, 693,
	5, 844,
	-2, 1459,
	-1, 694,
	5, 853,
	-2, 1464,
	-1, 695,
	5, 851,
	-2, 1467,
	-1, 696,
	5, 885,
	376, 885,
	-2, 1469,
	-1, 697,
	5, 889,
	-2, 1472,
	-1, 698,
	5, 891,
	-2, 1473,
	-1, 699,
	5, 884,
	376, 884,
	-2, 1478,
	-1, 884,
	228, 704,
	-2, 551,
	-1, 888,
	214, 1243,
	-2, 0,
	-1, 923,
	1, 216,
	375, 216,
	377, 216,
	379, 216,
	380, 216,
	-2, 679,
	-1, 930,
	4, 1477,
	10, 1477,
	11, 1477,
	13, 1477,
	14, 1477,
	15, 1477,
	16, 1477,
	17, 1477,
	18, 1477,
	20, 1477,
	21, 1477,
	23, 1477,
	26, 1477,
	28, 1477,
	30, 1477,
	33, 1477,
	34, 1477,
	35, 1477,
	36, 1477,
	37, 1477,
	38, 1477,
	39, 1477,
	40, 1477,
	41, 1477,
	42, 1477,
	44, 1477,
	45, 1477,
	46, 1477,
	47, 1477,
	48, 1477,
	51, 1477,
	52, 1477,
	53, 1477,
	55, 1477,
	56, 1477,
	57, 1477,
	60, 1477,
	61, 1477,
	62, 1477,
	63, 1477,
	64, 1477,
	65, 1477,
	66, 1477,
	67, 1477,
	69, 1477,
	70, 1477,
	71, 1477,
	72, 1477,
	74, 1477,
	75, 1477,
	76, 1477,
	77, 1477,
	85, 1477,
	86, 1477,
	87, 1477,
	88, 1477,
	89, 1477,
	90, 1477,
	91, 1477,
	92, 1477,
	94, 1477,
	96, 1477,
	98, 1477,
	101, 1477,
	102, 1477,
	104, 1477,
	108, 1477,
	109, 1477,
	110, 1477,
	111, 1477,
	112, 1477,
	113, 1477,
	114, 1477,
	118, 1477,
	119, 1477,
	120, 1477,
	121, 1477,
	122, 1477,
	123, 1477,
	124, 1477,
	125, 1477,
	126, 1477,
	127, 1477,
	128, 1477,
	130, 1477,
	133, 1477,
	135, 1477,
	136, 1477,
	138, 1477,
	141, 1477,
	142, 1477,
	145, 1477,
	146, 1477,
	147, 1477,
	148, 1477,
	149, 1477,
	150, 1477,
	151, 1477,
	152, 1477,
	154, 1477,
	156, 1477,
	157, 1477,
	158, 1477,
	159, 1477,
	160, 1477,
	161, 1477,
	162, 1477,
	163, 1477,
	164, 1477,
	166, 1477,
	168, 1477,
	169, 1477,
	170, 1477,
	171, 1477,
	172, 1477,
	173, 1477,
	174, 1477,
	175, 1477,
	177, 1477,
	178, 1477,
	180, 1477,
	181, 1477,
	182, 1477,
	183, 1477,
	184, 1477,
	186, 1477,
	187, 1477,
	190, 1477,
	191, 1477,
	192, 1477,
	194, 1477,
	195, 1477,
	196, 1477,
	197, 1477,
	198, 1477,
	199, 1477,
	200, 1477,
	201, 1477,
	202, 1477,
	203, 1477,
	207, 1477,
	208, 1477,
	209, 1477,
	210, 1477,
	211, 1477,
	213, 1477,
	216, 1477,
	217, 1477,
	219, 1477,
	220, 1477,
	222, 1477,
	224, 1477,
	225, 1477,
	226, 1477,
	227, 1477,
	228, 1477,
	229, 1477,
	231, 1477,
	232, 1477,
	233, 1477,
	234, 1477,
	235, 1477,
	237, 1477,
	238, 1477,
	239, 1477,
	240, 1477,
	241, 1477,
	242, 1477,
	243, 1477,
	244, 1477,
	246, 1477,
	247, 1477,
	248, 1477,
	249, 1477,
	250, 1477,
	251, 1477,
	252, 1477,
	253, 1477,
	254, 1477,
	255, 1477,
	256, 1477,
	257, 1477,
	258, 1477,
	260, 1477,
	261, 1477,
	262, 1477,
	263, 1477,
	264, 1477,
	265, 1477,
	266, 1477,
	267, 1477,
	268, 1477,
	269, 1477,
	270, 1477,
	271, 1477,
	273, 1477,
	274, 1477,
	275, 1477,
	276, 1477,
	277, 1477,
	279, 1477,
	280, 1477,
	281, 1477,
	282, 1477,
	283, 1477,
	284, 1477,
	285, 1477,
	286, 1477,
	287, 1477,
	289, 1477,
	290, 1477,
	291, 1477,
	292, 1477,
	293, 1477,
	294, 1477,
	295, 1477,
	296, 1477,
	297, 1477,
	298, 1477,
	300, 1477,
	302, 1477,
	303, 1477,
	304, 1477,
	305, 1477,
	306, 1477,
	307, 1477,
	308, 1477,
	309, 1477,
	311, 1477,
	312, 1477,
	313, 1477,
	316, 1477,
	317, 1477,
	318, 1477,
	319, 1477,
	321, 1477,
	322, 1477,
	323, 1477,
	324, 1477,
	327, 1477,
	328, 1477,
	329, 1477,
	330, 1477,
	332, 1477,
	334, 1477,
	335, 1477,
	336, 1477,
	337, 1477,
	338, 1477,
	339, 1477,
	342, 1477,
	347, 1477,
	348, 1477,
	349, 1477,
	350, 1477,
	351, 1477,
	352, 1477,
	353, 1477,
	355, 1477,
	356, 1477,
	357, 1477,
	358, 1477,
	359, 1477,
	360, 1477,
	361, 1477,
	362, 1477,
	364, 1477,
	365, 1477,
	366, 1477,
	367, 1477,
	368, 1477,
	369, 1477,
	370, 1477,
	371, 1477,
	372, 1477,
	374, 1477,
	377, 1477,
	378, 1477,
	381, 1477,
	382, 1477,
	-2, 0,
	-1, 943,
	132, 1380,
	314, 1380,
	357, 1380,
	378, 1380,
	-2, 0,
	-1, 960,
	132, 1403,
	314, 1403,
	357, 1403,
	378, 1403,
	-2, 0,
	-1, 961,
	169, 619,
	237, 619,
	241, 619,
	-2, 315,
	-1, 1033,
	117, 715,
	185, 715,
	212, 715,
	-2, 677,
	-1, 1112,
	107, 681,
	117, 681,
	165, 681,
	185, 681,
	212, 681,
	218, 681,
	325, 681,
	-2, 1022,
	-1, 1122,
	376, 1223,
	-2, 1211,
	-1, 1140,
	377, 1135,
	-2, 0,
	-1, 1164,
	169, 619,
	237, 619,
	241, 619,
	-2, 614,
	-1, 1192,
	377, 1135,
	-2, 0,
	-1, 1196,
	107, 681,
	117, 681,
	165, 681,
	185, 681,
	212, 681,
	218, 681,
	325, 681,
	-2, 777,
	-1, 1336,
	169, 619,
	237, 619,
	241, 619,
	-2, 317,
	-1, 1438,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 928,
	-1, 1439,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 929,
	-1, 1440,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 930,
	-1, 1441,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 931,
	-1, 1442,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 932,
	-1, 1443,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 933,
	-1, 1444,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 934,
	-1, 1445,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 935,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 944,
	-1, 1455,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 945,
	-1, 1456,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 946,
	-1, 1459,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 951,
	-1, 1465,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 953,
	-1, 1467,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 957,
	-1, 1468,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 958,
	-1, 1469,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 959,
	-1, 1470,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 960,
	-1, 1539,
	132, 1146,
	376, 1246,
	-2, 1239,
	-1, 1540,
	132, 1147,
	-2, 1420,
	-1, 1541,
	132, 1148,
	-2, 1325,
	-1, 1542,
	132, 1149,
	-2, 1286,
	-1, 1543,
	132, 1150,
	-2, 1303,
	-1, 1544,
	132, 1151,
	-2, 1324,
	-1, 1545,
	132, 1152,
	-2, 1377,
	-1, 1621,
	1, 778,
	74, 778,
	107, 778,
	117, 778,
	133, 778,
	137, 778,
	139, 778,
	156, 778,
	165, 778,
	172, 778,
	181, 778,
	185, 778,
	199, 778,
	212, 778,
	214, 778,
	218, 778,
	259, 778,
	261, 778,
	325, 778,
	333, 778,
	344, 778,
	345, 778,
	354, 778,
	375, 778,
	377, 778,
	379, 778,
	380, 778,
	381, 778,
	-2, 777,
	-1, 1766,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 952,
	-1, 1767,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 954,
	-1, 1772,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 955,
	-1, 1790,
	223, 1106,
	-2, 1108,
	-1, 2021,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 956,
	-1, 2026,
	168, 0,
	-2, 972,
	-1, 2035,
	223, 1107,
	-2, 1109,
	-1, 2077,
	13, 0,
	14, 0,
	15, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 999,
	-1, 2078,
	13, 0,
	14, 0,
	15, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 1000,
	-1, 2079,
	13, 0,
	14, 0,
	15, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 1001,
	-1, 2083,
	13, 0,
	14, 0,
	15, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 1005,
	-1, 2084,
	13, 0,
	14, 0,
	15, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 1006,
	-1, 2085,
	13, 0,
	14, 0,
	15, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 1007,
	-1, 2217,
	168, 0,
	-2, 973,
	-1, 2220,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 976,
	-1, 2221,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 978,
	-1, 2341,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 977,
	-1, 2342,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 979,
	-1, 2349,
	168, 0,
	-2, 1008,
	-1, 2426,
	168, 0,
	-2, 1009,
	-1, 2507,
	36, 0,
	149, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 1423,
	-1, 2593,
	376, 1489,
	-2, 492,
}

const sqlPrivate = 57344

const sqlLast = 43578

var sqlAct = [...]int{

	644, 2575, 2573, 2312, 2311, 2589, 2170, 2590, 2515, 2506,
	2556, 2479, 2054, 1687, 2516, 2375, 2517, 1695, 1667, 1236,
	2431, 2000, 2180, 603, 2505, 981, 2136, 642, 2322, 2285,
	1760, 1243, 73, 2271, 1330, 2202, 1616, 1278, 748, 1966,
	1331, 2204, 182, 878, 620, 2355, 2137, 182, 1968, 1666,
	1684, 1671, 1904, 1856, 2251, 182, 1974, 2196, 1190, 1696,
	1173, 1670, 1883, 1625, 182, 1239, 470, 26, 2107, 182,
	182, 637, 1634, 182, 1118, 775, 182, 1617, 1660, 634,
	641, 1891, 587, 1194, 182, 1494, 1801, 1412, 1855, 1495,
	1417, 1756, 1361, 455, 1232, 964, 1174, 595, 123, 1036,
	614, 1202, 1742, 1503, 1204, 1279, 1568, 1482, 1357, 1519,
	1479, 963, 452, 1513, 1154, 983, 1150, 910, 1668, 524,
	1603, 1689, 1590, 924, 757, 1181, 736, 504, 1107, 124,
	521, 613, 636, 1037, 1535, 182, 182, 913, 1035, 1360,
	903, 1164, 125, 182, 173, 482, 517, 1250, 900, 734,
	178, 1163, 1674, 2286, 545, 1041, 1789, 2121, 2313, 592,
	2122, 1258, 123, 1258, 1258, 2313, 1688, 591, 591, 182,
	182, 182, 182, 777, 1191, 2606, 2605, 182, 182, 2599,
	2599, 1661, 754, 2598, 2552, 1199, 2551, 2599, 1227, 2550,
	1227, 2532, 2019, 1227, 1984, 2284, 866, 1052, 1053, 1223,
	2527, 2526, 2523, 1983, 1710, 1710, 1227, 40, 2110, 2503,
	26, 2502, 586, 1725, 496, 1725, 1592, 2611, 41, 2474,
	1055, 601, 2469, 1718, 2465, 2457, 2336, 1793, 1227, 2284,
	2428, 44, 2406, 1794, 1718, 2403, 2284, 1052, 1053, 1227,
	1661, 123, 2401, 2386, 1054, 2385, 2284, 1227, 2363, 2284,
	1074, 2360, 1227, 584, 2343, 1227, 2597, 51, 1718, 2307,
	1055, 2305, 1710, 1710, 2283, 1710, 583, 1725, 2284, 1270,
	2264, 1052, 1053, 740, 1227, 741, 2219, 1092, 1093, 1094,
	1718, 1516, 596, 2195, 1054, 738, 62, 1665, 2190, 2475,
	1725, 2336, 1665, 63, 1055, 477, 64, 1096, 2117, 2030,
	1994, 2110, 2118, 1710, 1956, 1077, 1078, 1079, 1080, 772,
	1591, 1955, 2607, 1880, 1060, 1227, 1873, 1227, 1054, 2586,
	1874, 1871, 1870, 1869, 1074, 1710, 1710, 1710, 751, 66,
	1710, 1800, 1729, 1517, 1717, 1709, 1710, 1256, 1718, 1710,
	1664, 1597, 1271, 2011, 1665, 1596, 1272, 1623, 2090, 2032,
	1227, 762, 766, 1956, 1060, 1759, 1740, 1339, 1168, 1498,
	140, 1052, 1053, 864, 1082, 1083, 1084, 1092, 1093, 1094,
	1259, 945, 1259, 1259, 143, 942, 2287, 1085, 1075, 1077,
	1078, 1079, 1080, 941, 1055, 1518, 1515, 1096, 1060, 142,
	940, 939, 938, 1692, 937, 1358, 936, 935, 605, 934,
	933, 932, 931, 594, 742, 739, 577, 140, 1054, 576,
	1089, 1097, 575, 67, 1074, 543, 542, 182, 1075, 182,
	182, 1071, 182, 541, 540, 539, 141, 182, 1052, 1053,
	538, 537, 536, 182, 134, 535, 142, 534, 1081, 127,
	69, 135, 70, 1983, 533, 1087, 182, 182, 182, 182,
	182, 1055, 1075, 1076, 532, 927, 140, 531, 530, 529,
	1744, 528, 1520, 476, 126, 1591, 103, 870, 917, 1077,
	1078, 1079, 1080, 141, 527, 1054, 512, 182, 1060, 511,
	510, 509, 508, 443, 442, 142, 441, 592, 440, 439,
	424, 182, 1899, 1076, 1264, 1532, 1257, 1392, 423, 415,
	1089, 1097, 414, 413, 412, 41, 405, 182, 183, 404,
	166, 126, 1081, 165, 2600, 164, 163, 182, 44, 1095,
	162, 161, 141, 160, 159, 158, 157, 1076, 156, 155,
	134, 154, 153, 152, 151, 1087, 882, 135, 150, 886,
	149, 1514, 1075, 148, 1090, 1060, 147, 146, 927, 145,
	144, 1065, 1063, 1064, 1056, 1057, 1058, 1059, 1061, 1062,
	126, 1195, 2329, 1364, 877, 906, 906, 1723, 1086, 2579,
	925, 976, 140, 1530, 1528, 1526, 2577, 1052, 1053, 182,
	2522, 2574, 477, 2504, 2489, 1048, 2484, 907, 979, 2423,
	2404, 1065, 1063, 1064, 1056, 1057, 1058, 1059, 1061, 1062,
	1055, 142, 1081, 2250, 1958, 2249, 2245, 2244, 2237, 1075,
	946, 1826, 1827, 1088, 2236, 902, 66, 1076, 974, 2235,
	1052, 1053, 2231, 1091, 1054, 1065, 1063, 1064, 1056, 1057,
	1058, 1059, 1061, 1062, 1090, 2230, 2229, 2228, 141, 2222,
	2201, 2104, 2099, 1055, 2098, 2097, 134, 2040, 1954, 1052,
	1053, 592, 1911, 135, 1907, 1878, 1875, 1863, 1854, 1825,
	961, 1822, 1821, 958, 1841, 1819, 1034, 1054, 1806, 1805,
	1033, 1790, 1055, 140, 1621, 1048, 1691, 871, 873, 749,
	1275, 778, 1193, 1126, 1076, 1047, 1119, 1490, 1110, 1192,
	2584, 2564, 2563, 1242, 1060, 2434, 1054, 870, 875, 2056,
	67, 977, 142, 1088, 1826, 1827, 1066, 1067, 1073, 1072,
	1068, 1069, 1070, 1091, 2494, 1065, 1063, 1064, 1056, 1057,
	1058, 1059, 1061, 1062, 2328, 584, 127, 69, 1832, 70,
	2596, 2493, 2246, 2492, 182, 2460, 182, 1060, 583, 141,
	2452, 2451, 2442, 140, 2440, 1044, 1045, 134, 2418, 2417,
	476, 2416, 1049, 103, 135, 1359, 1755, 2372, 1075, 182,
	182, 1029, 947, 2351, 1754, 2337, 1060, 2316, 951, 2304,
	2290, 2242, 142, 2178, 1179, 2176, 2175, 126, 2173, 2145,
	1172, 2144, 2125, 1122, 1064, 1056, 1057, 1058, 1059, 1061,
	1062, 592, 1842, 2113, 2335, 605, 1152, 1153, 1156, 1491,
	2025, 1944, 1938, 1826, 1827, 1177, 1924, 1923, 1159, 141,
	1998, 1909, 1879, 1853, 1815, 1814, 1811, 134, 1786, 1781,
	1484, 1832, 1155, 1158, 135, 1608, 1580, 1924, 1524, 1235,
	1075, 750, 1171, 1076, 1162, 1148, 1147, 1146, 1145, 1144,
	1143, 1142, 1141, 1140, 1139, 1052, 1053, 126, 1138, 1137,
	1136, 123, 1135, 1134, 1133, 1132, 1131, 1130, 1826, 1827,
	1123, 1167, 1897, 1111, 927, 182, 1189, 1843, 1055, 2224,
	1531, 777, 1110, 957, 949, 921, 1165, 182, 1100, 1101,
	1102, 1103, 1104, 1197, 2200, 1169, 2120, 2116, 1113, 182,
	1792, 1609, 1054, 1720, 1119, 182, 1996, 182, 1121, 182,
	1826, 1827, 1108, 182, 1225, 1076, 1241, 1193, 1969, 1728,
	702, 973, 2339, 2338, 2332, 2123, 1985, 1160, 1212, 1661,
	1832, 1234, 1161, 1195, 1032, 1947, 1027, 1941, 1937, 1877,
	1876, 1765, 1063, 1064, 1056, 1057, 1058, 1059, 1061, 1062,
	1396, 970, 876, 1128, 182, 182, 1228, 1345, 1529, 1527,
	1525, 927, 1727, 182, 2001, 1247, 182, 1240, 2356, 1688,
	2057, 1797, 1504, 928, 1151, 1837, 1835, 1836, 1828, 1829,
	1830, 1831, 1833, 1834, 2582, 1832, 2581, 777, 1979, 1058,
	1059, 1061, 1062, 1276, 1842, 1021, 182, 1205, 2132, 1206,
	2487, 182, 1714, 2548, 2547, 2464, 182, 182, 1205, 182,
	1206, 182, 2298, 182, 1730, 182, 1056, 1057, 1058, 1059,
	1061, 1062, 2397, 1175, 1175, 1226, 182, 429, 2008, 2396,
	605, 1285, 182, 182, 2394, 1022, 2393, 2164, 1627, 1627,
	2161, 927, 2129, 701, 2128, 1810, 1809, 2156, 1626, 1635,
	1808, 1807, 1354, 1249, 1768, 1713, 1252, 1656, 1652, 1649,
	1466, 182, 1365, 750, 1125, 777, 928, 1166, 863, 1843,
	2310, 1828, 1829, 1830, 1831, 1833, 1834, 1013, 1207, 1584,
	1583, 1393, 729, 1427, 590, 1213, 2594, 902, 430, 1207,
	1685, 1346, 1390, 1221, 1030, 731, 1333, 2013, 2168, 1273,
	958, 1274, 2169, 971, 1052, 1053, 1210, 1332, 1389, 1220,
	1481, 1951, 1336, 1350, 727, 1366, 725, 579, 123, 1230,
	722, 582, 1362, 581, 1211, 2500, 1638, 1055, 2463, 2147,
	1218, 1370, 1733, 1380, 1285, 1285, 582, 1374, 1253, 1375,
	1426, 1376, 589, 1377, 1735, 1378, 972, 1399, 1219, 491,
	1373, 1054, 444, 592, 1520, 2050, 2519, 2539, 592, 1216,
	1481, 1976, 1384, 1386, 1007, 2471, 1736, 438, 1418, 1425,
	1828, 1829, 1830, 1831, 1833, 1834, 1234, 182, 1734, 182,
	1398, 584, 182, 1397, 584, 584, 1193, 433, 1997, 417,
	2472, 1416, 1369, 182, 1408, 591, 1051, 1409, 1410, 956,
	1589, 1488, 777, 1008, 1501, 182, 1486, 1757, 1758, 182,
	1946, 1504, 182, 2445, 1940, 2377, 182, 1062, 1149, 1499,
	182, 1060, 1214, 986, 2009, 1977, 182, 1830, 1831, 1833,
	1834, 1637, 1520, 182, 777, 2547, 2566, 448, 182, 1935,
	1563, 592, 1553, 1680, 700, 1492, 182, 1489, 1721, 2520,
	2012, 605, 605, 182, 2400, 1261, 1388, 2576, 1263, 432,
	431, 2574, 1266, 1031, 182, 2347, 182, 1628, 182, 2313,
	1976, 182, 1834, 182, 421, 182, 182, 1611, 182, 182,
	1639, 1641, 1546, 927, 1610, 1026, 1105, 182, 1646, 1020,
	2007, 1813, 1614, 2154, 1624, 1604, 1654, 1708, 1620, 1258,
	1217, 167, 588, 447, 1586, 1587, 2148, 2521, 1337, 1658,
	1595, 2014, 1208, 1826, 1827, 591, 1605, 1606, 1401, 1601,
	1406, 1636, 2211, 1208, 994, 962, 1413, 1690, 1516, 1690,
	2518, 2546, 649, 1197, 2544, 406, 1428, 1429, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
	1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
	1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1631, 1465,
	1657, 1467, 1468, 1469, 1470, 777, 1391, 1770, 1600, 123,
	1517, 1716, 928, 182, 1694, 123, 170, 1702, 1493, 778,
	906, 1012, 906, 1706, 1711, 1113, 434, 723, 925, 182,
	182, 182, 1644, 182, 607, 1715, 1712, 733, 1650, 1722,
	732, 1703, 1705, 1704, 1533, 1534, 580, 779, 1550, 1724,
	1562, 1564, 1569, 1572, 1573, 1574, 182, 1480, 1180, 723,
	1832, 724, 1518, 1515, 1205, 723, 1206, 1156, 435, 1159,
	2378, 2538, 1463, 1349, 1348, 2567, 1358, 1355, 490, 967,
	1741, 446, 171, 1153, 1152, 2321, 1017, 1826, 1827, 987,
	1731, 1056, 1057, 1058, 1059, 1061, 1062, 1487, 436, 928,
	437, 1368, 1682, 2279, 1050, 967, 1039, 955, 2047, 2453,
	952, 449, 944, 1040, 1477, 1950, 2240, 1184, 416, 123,
	2388, 445, 967, 2572, 1842, 778, 2387, 2086, 988, 2437,
	1475, 985, 483, 407, 1745, 2131, 1184, 704, 1259, 1520,
	1187, 2370, 2280, 422, 1920, 1207, 2294, 968, 418, 1916,
	1683, 969, 1753, 1248, 1018, 488, 1182, 592, 419, 1187,
	2048, 484, 1352, 2454, 570, 1185, 995, 1747, 2559, 172,
	1905, 2297, 1237, 968, 1038, 1602, 2537, 969, 2296, 928,
	1496, 1778, 600, 1183, 1185, 1461, 1464, 978, 2046, 570,
	968, 2480, 1344, 485, 969, 1039, 1404, 1776, 1893, 1843,
	2585, 1040, 408, 778, 1832, 1383, 1340, 600, 2323, 1019,
	880, 1471, 1771, 879, 1769, 1749, 487, 2181, 1514, 1472,
	1460, 1473, 1894, 175, 1599, 1478, 1785, 2241, 2371, 1799,
	168, 592, 2087, 182, 777, 1324, 2571, 1520, 2088, 182,
	182, 1342, 1906, 182, 1881, 1186, 1796, 571, 182, 1887,
	967, 182, 1926, 2275, 1343, 2276, 1353, 2293, 1598, 182,
	1888, 1925, 1763, 1038, 1186, 182, 182, 182, 1842, 589,
	169, 182, 571, 1405, 182, 899, 888, 2171, 1773, 2314,
	182, 182, 182, 182, 182, 2278, 897, 1901, 1774, 2295,
	182, 1180, 1779, 182, 2281, 1203, 1949, 182, 1835, 1836,
	1828, 1829, 1830, 1831, 1833, 1834, 182, 2368, 2252, 1886,
	2108, 3, 1860, 1861, 1862, 1523, 182, 1892, 182, 1462,
	182, 2557, 1917, 182, 499, 1896, 2350, 182, 1882, 929,
	493, 486, 182, 1900, 182, 1474, 2239, 1016, 2369, 2167,
	778, 182, 1476, 1843, 1285, 1910, 1857, 1957, 2024, 1959,
	1184, 1005, 1936, 1952, 182, 927, 721, 1820, 572, 1780,
	1943, 475, 34, 1726, 592, 1003, 927, 182, 1912, 1001,
	1766, 1767, 778, 1187, 999, 2277, 1772, 2558, 1921, 1208,
	997, 1285, 991, 572, 895, 1960, 1934, 489, 1963, 1182,
	868, 1981, 1663, 869, 1655, 1993, 474, 33, 1185, 2560,
	865, 1648, 1775, 1025, 182, 1011, 2002, 1024, 1791, 1777,
	629, 950, 473, 30, 1798, 1921, 1183, 1802, 1885, 1858,
	1750, 928, 929, 1381, 1889, 1890, 1978, 1972, 1895, 703,
	1285, 472, 79, 1372, 1816, 1986, 1359, 1356, 573, 1961,
	898, 1837, 1835, 1836, 1828, 1829, 1830, 1831, 1833, 1834,
	646, 896, 179, 1129, 182, 760, 1992, 410, 1522, 2027,
	2004, 2005, 2514, 573, 1995, 425, 2006, 1015, 1113, 2003,
	598, 574, 570, 2010, 450, 1569, 1569, 1569, 1186, 494,
	179, 1004, 1224, 502, 2015, 2477, 507, 2017, 726, 728,
	600, 2268, 498, 1285, 526, 1002, 574, 2152, 492, 1000,
	1318, 1175, 471, 78, 998, 34, 605, 468, 22, 2036,
	996, 2037, 990, 778, 894, 2033, 2031, 2150, 469, 23,
	2130, 467, 28, 599, 1965, 2042, 2043, 2044, 1686, 1285,
	1285, 1679, 1010, 1268, 1267, 182, 466, 20, 1285, 1285,
	33, 182, 2058, 619, 1265, 737, 737, 1262, 2060, 2092,
	182, 182, 2063, 410, 1260, 571, 30, 2065, 2049, 2051,
	2052, 464, 19, 1418, 2061, 465, 18, 1222, 2126, 1215,
	1209, 1285, 1418, 2066, 1967, 79, 2411, 2119, 2548, 410,
	410, 770, 410, 2091, 2334, 2093, 1042, 179, 867, 2333,
	409, 745, 2142, 1761, 1363, 2197, 2111, 182, 1973, 182,
	2413, 478, 2109, 1318, 1318, 2096, 182, 1627, 1643, 927,
	2166, 746, 2112, 2106, 459, 15, 1642, 123, 460, 16,
	1991, 2177, 2157, 1317, 182, 182, 2162, 2189, 2127, 1659,
	2174, 2124, 2165, 1651, 2183, 2134, 2191, 605, 605, 2155,
	1647, 1751, 182, 2447, 2143, 2141, 78, 1394, 1395, 2194,
	605, 22, 182, 777, 182, 182, 2182, 2158, 2172, 1762,
	777, 2158, 23, 1043, 2016, 28, 572, 2158, 2185, 1413,
	1627, 2287, 2186, 500, 989, 2020, 2184, 2187, 2021, 1640,
	20, 1987, 1988, 2192, 1989, 1990, 755, 2193, 747, 2213,
	2026, 2425, 2198, 2399, 458, 14, 2253, 182, 1046, 2034,
	463, 12, 1653, 2218, 1645, 19, 2476, 2038, 2319, 18,
	1991, 1693, 764, 768, 1681, 774, 1678, 457, 10, 1588,
	2115, 1335, 1277, 462, 7, 2555, 1317, 1317, 2208, 2570,
	2062, 2362, 461, 6, 2064, 2214, 2258, 1285, 929, 456,
	5, 2199, 778, 2105, 597, 779, 573, 1052, 1053, 1826,
	1827, 182, 1052, 1053, 182, 1738, 1737, 2238, 15, 2053,
	1052, 1053, 16, 1738, 777, 182, 182, 2094, 2095, 182,
	182, 182, 2256, 1999, 1902, 1872, 2101, 2102, 2103, 574,
	1739, 1585, 1582, 1055, 2263, 1581, 182, 1512, 1116, 2226,
	2045, 182, 1962, 182, 1054, 182, 182, 182, 1126, 1114,
	1124, 2262, 182, 2114, 2292, 182, 2255, 1054, 927, 2288,
	1885, 2291, 2142, 1023, 2259, 2257, 182, 182, 1014, 1009,
	1006, 992, 2267, 927, 954, 929, 1338, 526, 578, 884,
	526, 2376, 889, 2135, 2317, 481, 1371, 892, 14, 2260,
	2315, 2142, 2309, 410, 12, 2320, 2142, 993, 2325, 1898,
	1607, 779, 2470, 501, 2232, 1812, 526, 526, 410, 914,
	867, 10, 2430, 928, 2143, 2141, 2318, 7, 2346, 1521,
	2324, 1127, 55, 480, 928, 2326, 6, 2139, 623, 2269,
	2133, 1673, 1672, 5, 780, 2340, 1175, 526, 2331, 1347,
	645, 1537, 1419, 2143, 2141, 605, 720, 2330, 2143, 2141,
	647, 526, 1282, 648, 1283, 929, 1157, 635, 2151, 182,
	2153, 182, 1284, 777, 182, 1280, 922, 953, 1697, 1351,
	2352, 1485, 182, 1502, 483, 1795, 1120, 526, 777, 779,
	615, 627, 626, 1500, 2217, 948, 2254, 1903, 2220, 2221,
	1975, 2359, 2223, 2327, 1403, 1752, 1400, 488, 1971, 2225,
	2345, 2227, 2142, 484, 1285, 2149, 2380, 420, 1823, 2382,
	2364, 920, 182, 1560, 1552, 927, 1548, 2234, 1028, 182,
	1234, 2379, 1178, 1106, 1698, 975, 768, 182, 182, 927,
	927, 2361, 1982, 2402, 2142, 485, 1719, 2412, 2366, 410,
	2409, 774, 1170, 1411, 744, 2398, 743, 182, 2583, 1341,
	2243, 1732, 182, 2381, 2143, 2141, 2410, 1099, 487, 182,
	1285, 2414, 2408, 2420, 1098, 1284, 1284, 730, 2419, 2421,
	2422, 2439, 2441, 966, 965, 1238, 2405, 1919, 2565, 2427,
	2158, 2446, 2146, 2486, 182, 182, 2143, 2141, 2433, 2435,
	2436, 182, 139, 136, 2390, 138, 137, 1948, 82, 927,
	2289, 2458, 32, 2443, 182, 31, 102, 2456, 927, 927,
	101, 100, 2459, 1285, 99, 98, 779, 97, 96, 2424,
	95, 94, 93, 2462, 2461, 1407, 92, 479, 91, 90,
	1179, 182, 89, 182, 88, 87, 182, 1320, 777, 592,
	1826, 1827, 2467, 2468, 86, 85, 84, 480, 779, 522,
	519, 2482, 1269, 2495, 81, 80, 2497, 2444, 29, 25,
	106, 24, 77, 2496, 2483, 76, 182, 928, 2450, 2501,
	27, 17, 768, 486, 11, 2341, 2342, 2498, 2142, 2513,
	21, 2499, 60, 182, 182, 182, 2512, 2511, 1334, 61,
	59, 182, 58, 2531, 507, 2524, 737, 929, 483, 57,
	13, 2528, 2529, 2530, 53, 182, 2354, 2536, 2533, 52,
	50, 778, 2357, 2488, 2534, 2535, 49, 48, 778, 410,
	410, 488, 2545, 2543, 1554, 47, 2549, 484, 9, 489,
	2143, 2141, 105, 1318, 45, 8, 43, 2554, 2553, 42,
	1320, 1320, 104, 118, 115, 117, 114, 116, 2562, 2561,
	2568, 120, 119, 112, 110, 2569, 2389, 1832, 111, 485,
	113, 109, 108, 121, 39, 777, 38, 777, 37, 36,
	1318, 35, 2, 1, 0, 0, 0, 2587, 2588, 2595,
	0, 0, 487, 0, 0, 0, 0, 0, 0, 779,
	2602, 0, 2601, 0, 0, 0, 2604, 2603, 0, 2610,
	2608, 2609, 0, 2612, 0, 0, 0, 0, 0, 0,
	0, 0, 2279, 0, 0, 2272, 0, 0, 0, 1318,
	0, 1842, 778, 0, 0, 179, 2270, 2391, 2392, 0,
	0, 2274, 2438, 0, 0, 0, 0, 410, 0, 0,
	2578, 0, 2580, 0, 0, 0, 1114, 0, 0, 1246,
	0, 2280, 755, 1200, 1506, 410, 1317, 410, 0, 410,
	0, 0, 0, 1254, 0, 0, 928, 1538, 1538, 1551,
	0, 0, 0, 1571, 2273, 0, 605, 1575, 1576, 1578,
	0, 928, 1318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1317, 0, 0, 1843, 486, 0, 0,
	0, 0, 1782, 1783, 526, 179, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 526, 0, 1318, 1318,
	0, 0, 0, 0, 0, 0, 0, 1318, 1318, 1319,
	0, 2510, 2510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 526, 2525, 0, 0,
	1281, 526, 0, 489, 0, 0, 179, 526, 0, 526,
	1318, 526, 2275, 526, 2276, 526, 0, 2510, 0, 0,
	1233, 778, 0, 0, 0, 0, 1382, 0, 1849, 1850,
	1851, 0, 526, 526, 0, 0, 778, 0, 768, 0,
	1251, 0, 1251, 0, 2278, 0, 1836, 1828, 1829, 1830,
	1831, 1833, 1834, 2281, 0, 1317, 0, 0, 0, 0,
	0, 526, 0, 0, 0, 2510, 0, 0, 779, 0,
	0, 0, 0, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 1319, 1319, 624, 74, 0, 928, 928, 0,
	0, 1317, 1317, 0, 2591, 0, 0, 0, 0, 0,
	1317, 1317, 0, 1281, 1281, 0, 2591, 0, 0, 2591,
	2591, 0, 0, 0, 1554, 1554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1317, 2277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	1826, 1827, 0, 1844, 1845, 1846, 0, 928, 0, 0,
	0, 0, 0, 0, 0, 0, 928, 928, 0, 0,
	0, 0, 0, 0, 0, 0, 1318, 507, 0, 737,
	0, 0, 867, 0, 0, 0, 0, 0, 0, 929,
	1554, 1554, 1554, 410, 0, 1284, 778, 0, 0, 0,
	929, 0, 0, 1841, 0, 1619, 0, 0, 585, 410,
	0, 593, 410, 0, 0, 0, 1632, 0, 0, 0,
	410, 0, 0, 0, 0, 0, 410, 756, 74, 0,
	0, 0, 1284, 410, 0, 0, 0, 0, 1662, 0,
	0, 0, 2022, 2023, 0, 0, 1669, 0, 0, 0,
	0, 0, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 410, 1784, 1701, 1832, 526, 0,
	0, 526, 1787, 526, 0, 410, 410, 0, 1707, 867,
	0, 1284, 0, 0, 0, 0, 0, 1632, 0, 1803,
	1804, 0, 0, 0, 0, 0, 0, 0, 0, 1317,
	0, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075,
	2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085,
	0, 2089, 0, 778, 0, 778, 755, 0, 0, 0,
	0, 1842, 0, 0, 0, 0, 0, 0, 0, 1852,
	0, 0, 755, 0, 1284, 1622, 1571, 1571, 1571, 0,
	0, 1865, 0, 768, 0, 0, 0, 0, 0, 768,
	0, 0, 0, 0, 0, 0, 774, 0, 0, 0,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1284, 1284, 0, 1743, 0, 0, 0, 0, 0, 1284,
	1284, 0, 0, 1318, 0, 0, 0, 1699, 0, 410,
	410, 410, 0, 410, 1554, 1554, 1843, 1320, 774, 774,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1284, 0, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 929, 0, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 0, 0, 1320, 0, 0, 0,
	0, 0, 0, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
	1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
	1554, 1554, 0, 1554, 0, 0, 0, 779, 0, 0,
	0, 0, 0, 0, 779, 1838, 1839, 1840, 0, 0,
	0, 0, 1318, 0, 1837, 1835, 1836, 1828, 1829, 1830,
	1831, 1833, 1834, 0, 0, 0, 1317, 0, 0, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1746, 774, 1748, 0, 768, 0, 0, 593,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1320, 1320, 0, 0, 1764,
	0, 0, 0, 0, 1320, 1320, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1284, 0,
	0, 0, 0, 0, 0, 0, 0, 1320, 779, 0,
	0, 0, 0, 410, 0, 0, 0, 0, 0, 410,
	410, 0, 0, 410, 0, 0, 0, 0, 1619, 0,
	0, 1619, 0, 0, 0, 1317, 0, 0, 0, 1908,
	0, 0, 0, 0, 0, 410, 1914, 1915, 0, 0,
	0, 1632, 929, 0, 1922, 2100, 0, 0, 0, 0,
	1927, 1928, 1930, 1932, 1933, 0, 0, 929, 0, 0,
	410, 0, 1319, 1942, 0, 0, 0, 1945, 0, 0,
	0, 0, 0, 0, 0, 0, 410, 0, 0, 0,
	585, 0, 0, 1281, 0, 0, 1246, 0, 1246, 0,
	526, 0, 0, 410, 0, 0, 0, 1970, 0, 1319,
	0, 1109, 410, 1112, 1980, 0, 0, 0, 0, 0,
	1117, 410, 2349, 0, 0, 0, 0, 0, 0, 2160,
	1281, 0, 0, 0, 1743, 2163, 0, 0, 0, 0,
	0, 0, 0, 40, 0, 0, 755, 1743, 0, 0,
	0, 0, 755, 755, 41, 0, 755, 779, 1319, 0,
	0, 0, 0, 2373, 0, 0, 0, 44, 0, 0,
	0, 0, 779, 1320, 0, 0, 0, 0, 1913, 1281,
	0, 0, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1939, 0, 0, 0, 0, 0, 929,
	0, 0, 0, 0, 0, 1284, 0, 0, 0, 1953,
	0, 1319, 62, 929, 929, 0, 0, 0, 0, 63,
	0, 477, 64, 2426, 2055, 0, 1964, 0, 0, 0,
	0, 0, 1281, 0, 0, 1233, 0, 0, 74, 0,
	0, 0, 0, 1196, 1233, 0, 0, 1319, 1319, 0,
	0, 0, 0, 0, 0, 66, 1319, 1319, 0, 0,
	0, 1284, 0, 0, 0, 0, 0, 0, 1281, 1281,
	0, 0, 0, 0, 1554, 0, 0, 1281, 1281, 0,
	0, 0, 0, 929, 0, 0, 0, 0, 0, 1319,
	0, 0, 929, 929, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 410, 0, 2018, 0, 0,
	1281, 1619, 0, 0, 1284, 1554, 0, 0, 0, 0,
	867, 1619, 779, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2138, 0, 0, 0, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 2159, 0,
	0, 0, 2159, 0, 0, 0, 0, 0, 2159, 0,
	0, 0, 0, 0, 0, 127, 69, 1632, 70, 1246,
	0, 0, 0, 0, 0, 0, 2179, 0, 0, 0,
	1320, 0, 140, 0, 0, 1554, 1379, 0, 0, 476,
	0, 0, 103, 0, 410, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 2205, 1188, 0, 0, 0, 0, 0, 0,
	0, 0, 2207, 0, 2209, 410, 0, 0, 0, 40,
	0, 0, 0, 0, 2358, 0, 1320, 0, 755, 0,
	41, 0, 0, 0, 0, 0, 0, 0, 141, 779,
	0, 779, 0, 44, 0, 1319, 134, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 2233, 0, 0,
	0, 2384, 0, 0, 0, 0, 1281, 0, 0, 51,
	0, 0, 0, 0, 0, 2395, 126, 0, 0, 1320,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 63, 0, 477, 64, 0,
	0, 410, 0, 0, 867, 0, 585, 1699, 755, 585,
	585, 0, 0, 0, 0, 1619, 867, 0, 0, 2265,
	2266, 1632, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 0, 0, 0, 2138, 867, 0, 2210, 0,
	0, 2299, 0, 2300, 0, 410, 2302, 2303, 0, 0,
	0, 0, 410, 0, 0, 2308, 0, 0, 0, 0,
	0, 0, 1483, 0, 2138, 0, 867, 1669, 0, 2138,
	0, 0, 0, 0, 0, 593, 0, 0, 0, 0,
	1112, 0, 0, 0, 0, 0, 2473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2490, 2491, 0, 67, 0, 0, 0, 0,
	0, 1826, 1827, 0, 1844, 1845, 1846, 0, 0, 0,
	0, 0, 0, 0, 755, 0, 0, 2216, 0, 0,
	0, 127, 69, 0, 70, 0, 0, 756, 0, 0,
	0, 0, 1319, 0, 0, 0, 0, 0, 140, 1632,
	0, 2365, 0, 1196, 2367, 476, 0, 0, 103, 0,
	0, 0, 410, 1281, 1841, 2138, 74, 0, 2301, 0,
	0, 0, 0, 0, 74, 2306, 0, 142, 0, 0,
	1052, 1053, 0, 1082, 1083, 1084, 1092, 1093, 1094, 0,
	0, 2159, 0, 0, 0, 0, 1085, 2138, 1319, 0,
	0, 0, 410, 1055, 0, 74, 1096, 74, 0, 867,
	0, 0, 0, 0, 141, 0, 0, 2205, 2205, 1281,
	0, 0, 134, 0, 0, 0, 74, 1054, 1832, 135,
	0, 0, 74, 1074, 0, 0, 0, 2432, 0, 0,
	1071, 0, 1619, 0, 0, 0, 0, 0, 0, 1246,
	0, 1319, 126, 0, 0, 0, 0, 0, 0, 1826,
	1827, 0, 1844, 1845, 1846, 0, 0, 0, 0, 1847,
	0, 0, 1281, 0, 2448, 2449, 0, 0, 0, 0,
	0, 410, 0, 0, 0, 0, 0, 0, 1077, 1078,
	1079, 1080, 1842, 0, 2466, 2374, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1841, 0, 0, 0, 0, 0, 0, 1089,
	1097, 2481, 0, 867, 1052, 1053, 410, 1082, 1083, 1084,
	1092, 1093, 1094, 0, 0, 2407, 74, 0, 1095, 0,
	1085, 2138, 0, 0, 0, 0, 0, 1055, 0, 0,
	1096, 0, 0, 0, 1087, 0, 2432, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 1843, 0, 0,
	0, 1054, 0, 867, 867, 867, 1832, 1074, 0, 0,
	0, 410, 0, 0, 1071, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 2542, 0, 0, 0, 1848,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2455, 0, 0, 1847, 0, 1483,
	0, 1081, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1077, 1078, 1079, 1080, 1076, 0, 0, 1112,
	1842, 1060, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 1838, 1839, 1840, 2485,
	0, 0, 0, 1089, 1097, 1837, 1835, 1836, 1828, 1829,
	1830, 1831, 1833, 1834, 0, 0, 0, 0, 0, 0,
	0, 0, 1095, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 1075, 0, 0, 0, 0,
	0, 0, 0, 1112, 1699, 1843, 0, 0, 0, 0,
	0, 0, 1088, 0, 0, 1066, 1067, 1073, 1072, 1068,
	1069, 1070, 1091, 0, 1065, 1063, 1064, 1056, 1057, 1058,
	1059, 1061, 1062, 0, 0, 0, 0, 756, 0, 0,
	0, 1868, 0, 756, 756, 0, 0, 756, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	74, 0, 0, 0, 1838, 1839, 1840, 0, 74, 0,
	0, 0, 0, 1837, 1835, 1836, 1828, 1829, 1830, 1831,
	1833, 1834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 593, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 0, 0, 1066,
	1067, 1073, 1072, 1068, 1069, 1070, 1091, 0, 1065, 1063,
	1064, 1056, 1057, 1058, 1059, 1061, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1511, 0, 643, 632,
	633, 630, 631, 622, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 1508, 186, 0, 0,
	0, 0, 660, 625, 0, 0, 0, 187, 188, 189,
	348, 675, 350, 676, 190, 677, 678, 0, 191, 354,
	355, 192, 193, 628, 659, 679, 680, 358, 0, 194,
	671, 0, 651, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 705, 205,
	206, 207, 0, 652, 653, 655, 0, 654, 656, 208,
	209, 411, 210, 681, 211, 682, 683, 0, 212, 0,
	213, 0, 214, 1509, 0, 674, 216, 0, 217, 0,
	0, 0, 616, 218, 220, 219, 221, 661, 662, 639,
	706, 0, 0, 0, 0, 0, 222, 223, 684, 685,
	686, 0, 224, 0, 225, 0, 0, 707, 0, 226,
	672, 0, 370, 0, 74, 227, 228, 0, 0, 229,
	230, 668, 670, 709, 0, 373, 234, 0, 231, 756,
	708, 232, 687, 233, 688, 689, 690, 691, 692, 0,
	650, 0, 710, 235, 236, 237, 711, 238, 239, 240,
	0, 242, 241, 0, 673, 712, 243, 244, 713, 0,
	245, 246, 0, 0, 247, 0, 248, 714, 249, 250,
	252, 382, 251, 715, 253, 254, 256, 255, 611, 0,
	640, 669, 257, 693, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 385, 716, 263, 717, 663, 264,
	265, 266, 267, 268, 0, 269, 664, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 694, 277, 278, 756,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 718, 292, 293, 617, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 657, 307, 295, 296, 308, 719, 309, 695,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 696,
	314, 315, 665, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 697, 698, 0, 0,
	327, 328, 666, 667, 638, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 658, 337, 0, 401, 338,
	339, 340, 402, 699, 1507, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 612, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 610, 0, 0, 0,
	0, 608, 609, 1510, 0, 756, 0, 0, 0, 0,
	618, 1505, 0, 0, 0, 0, 621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2415, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 776, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 782, 186, 783, 784, 785, 786, 347,
	787, 788, 789, 790, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 791, 191, 354, 355, 192, 193,
	792, 793, 356, 357, 358, 794, 194, 359, 795, 781,
	796, 195, 196, 197, 0, 199, 200, 201, 198, 797,
	202, 1112, 203, 204, 798, 705, 205, 206, 207, 799,
	800, 802, 801, 803, 804, 805, 208, 209, 411, 210,
	360, 211, 361, 362, 806, 212, 807, 213, 808, 214,
	809, 810, 215, 216, 811, 217, 812, 0, 813, 363,
	218, 220, 219, 221, 364, 365, 814, 706, 815, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	816, 225, 817, 818, 707, 819, 226, 369, 820, 370,
	821, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	709, 822, 373, 234, 823, 231, 824, 708, 232, 374,
	233, 375, 376, 377, 378, 379, 825, 380, 826, 710,
	235, 236, 237, 711, 238, 239, 240, 827, 242, 241,
	828, 381, 712, 243, 244, 713, 829, 245, 246, 830,
	831, 247, 0, 248, 714, 249, 250, 252, 382, 251,
	715, 253, 254, 256, 255, 832, 833, 834, 383, 257,
	384, 258, 259, 835, 260, 836, 837, 261, 838, 839,
	262, 385, 716, 263, 717, 386, 264, 265, 266, 267,
	268, 840, 269, 387, 270, 388, 271, 841, 272, 273,
	274, 275, 276, 389, 277, 278, 842, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	843, 291, 718, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 844, 304, 391, 303, 305, 306, 845,
	307, 295, 296, 308, 719, 309, 392, 393, 310, 846,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	847, 318, 848, 319, 320, 321, 322, 323, 324, 325,
	326, 849, 396, 397, 398, 850, 851, 327, 328, 399,
	400, 852, 329, 330, 331, 332, 853, 854, 333, 334,
	335, 336, 855, 337, 856, 401, 338, 339, 340, 402,
	403, 857, 858, 341, 859, 860, 861, 862, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 776,
	0, 0, 0, 0, 0, 1612, 0, 0, 0, 0,
	0, 0, 0, 0, 1613, 184, 185, 782, 186, 783,
	784, 785, 786, 347, 787, 788, 789, 790, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 791, 191,
	354, 355, 192, 193, 792, 793, 356, 357, 358, 794,
	194, 359, 795, 781, 796, 195, 196, 197, 0, 199,
	200, 201, 198, 797, 202, 0, 203, 204, 798, 705,
	205, 206, 207, 799, 800, 802, 801, 803, 804, 805,
	208, 209, 411, 210, 360, 211, 361, 362, 806, 212,
	807, 213, 808, 214, 809, 810, 215, 216, 811, 217,
	812, 0, 813, 363, 218, 220, 219, 221, 364, 365,
	814, 706, 815, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 816, 225, 817, 818, 707, 819,
	226, 369, 820, 370, 821, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 709, 822, 373, 234, 823, 231,
	824, 708, 232, 374, 233, 375, 376, 377, 378, 379,
	825, 380, 826, 710, 235, 236, 237, 711, 238, 239,
	240, 827, 242, 241, 828, 381, 712, 243, 244, 713,
	829, 245, 246, 830, 831, 247, 0, 248, 714, 249,
	250, 252, 382, 251, 715, 253, 254, 256, 255, 832,
	833, 834, 383, 257, 384, 258, 259, 835, 260, 836,
	837, 261, 838, 839, 262, 385, 716, 263, 717, 386,
	264, 265, 266, 267, 268, 840, 269, 387, 270, 388,
	271, 841, 272, 273, 274, 275, 276, 389, 277, 278,
	842, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 843, 291, 718, 292, 293, 390,
	294, 0, 298, 299, 300, 301, 302, 844, 304, 391,
	303, 305, 306, 845, 307, 295, 296, 308, 719, 309,
	392, 393, 310, 846, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 847, 318, 848, 319, 320, 321,
	322, 323, 324, 325, 326, 849, 396, 397, 398, 850,
	851, 327, 328, 399, 400, 852, 329, 330, 331, 332,
	853, 854, 333, 334, 335, 336, 855, 337, 856, 401,
	338, 339, 340, 402, 403, 857, 858, 341, 859, 860,
	861, 862, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 776, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2261,
	184, 185, 782, 186, 783, 784, 785, 786, 347, 787,
	788, 789, 790, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 791, 191, 354, 355, 192, 193, 792,
	793, 356, 357, 358, 794, 194, 359, 795, 781, 796,
	195, 196, 197, 0, 199, 200, 201, 198, 797, 202,
	0, 203, 204, 798, 705, 205, 206, 207, 799, 800,
	802, 801, 803, 804, 805, 208, 209, 411, 210, 360,
	211, 361, 362, 806, 212, 807, 213, 808, 214, 809,
	810, 215, 216, 811, 217, 812, 0, 813, 363, 218,
	220, 219, 221, 364, 365, 814, 706, 815, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 816,
	225, 817, 818, 707, 819, 226, 369, 820, 370, 821,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 709,
	822, 373, 234, 823, 231, 824, 708, 232, 374, 233,
	375, 376, 377, 378, 379, 825, 380, 826, 710, 235,
	236, 237, 711, 238, 239, 240, 827, 242, 241, 828,
	381, 712, 243, 244, 713, 829, 245, 246, 830, 831,
	247, 0, 248, 714, 249, 250, 252, 382, 251, 715,
	253, 254, 256, 255, 832, 833, 834, 383, 257, 384,
	258, 259, 835, 260, 836, 837, 261, 838, 839, 262,
	385, 716, 263, 717, 386, 264, 265, 266, 267, 268,
	840, 269, 387, 270, 388, 271, 841, 272, 273, 274,
	275, 276, 389, 277, 278, 842, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 843,
	291, 718, 292, 293, 390, 294, 0, 298, 299, 300,
	301, 302, 844, 304, 391, 303, 305, 306, 845, 307,
	295, 296, 308, 719, 309, 392, 393, 310, 846, 317,
	311, 312, 297, 313, 316, 394, 314, 315, 395, 847,
	318, 848, 319, 320, 321, 322, 323, 324, 325, 326,
	849, 396, 397, 398, 850, 851, 327, 328, 399, 400,
	852, 329, 330, 331, 332, 853, 854, 333, 334, 335,
	336, 855, 337, 856, 401, 338, 339, 340, 402, 403,
	857, 858, 341, 859, 860, 861, 862, 342, 343, 344,
	345, 346, 0, 0, 776, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1229,
	184, 185, 782, 186, 783, 784, 785, 786, 347, 787,
	788, 789, 790, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 791, 191, 354, 355, 192, 193, 792,
	793, 356, 357, 358, 794, 194, 359, 795, 781, 796,
	195, 196, 197, 0, 199, 200, 201, 198, 797, 202,
	0, 203, 204, 798, 705, 205, 206, 207, 799, 800,
	802, 801, 803, 804, 805, 208, 209, 411, 210, 360,
	211, 361, 362, 806, 212, 807, 213, 808, 214, 809,
	810, 215, 216, 811, 217, 812, 0, 813, 363, 218,
	220, 219, 221, 364, 365, 814, 706, 815, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 816,
	225, 817, 818, 707, 819, 226, 369, 820, 370, 821,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 709,
	822, 373, 234, 823, 231, 824, 708, 232, 374, 233,
	375, 376, 377, 378, 379, 825, 380, 826, 710, 235,
	236, 237, 711, 238, 239, 240, 827, 242, 241, 828,
	381, 712, 243, 244, 713, 829, 245, 246, 830, 831,
	247, 0, 248, 714, 249, 250, 252, 382, 251, 715,
	253, 254, 256, 255, 832, 833, 834, 383, 257, 384,
	258, 259, 835, 260, 836, 837, 261, 838, 839, 262,
	385, 716, 263, 717, 386, 264, 265, 266, 267, 268,
	840, 269, 387, 270, 388, 271, 841, 272, 273, 274,
	275, 276, 389, 277, 278, 842, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 843,
	291, 718, 292, 293, 390, 294, 0, 298, 299, 300,
	301, 302, 844, 304, 391, 303, 305, 306, 845, 307,
	295, 296, 308, 719, 309, 392, 393, 310, 846, 317,
	311, 312, 297, 313, 316, 394, 314, 315, 395, 847,
	318, 848, 319, 320, 321, 322, 323, 324, 325, 326,
	849, 396, 397, 398, 850, 851, 327, 328, 399, 400,
	852, 329, 330, 331, 332, 853, 854, 333, 334, 335,
	336, 855, 337, 856, 401, 338, 339, 340, 402, 403,
	857, 858, 341, 859, 860, 861, 862, 342, 343, 344,
	345, 346, 643, 632, 633, 630, 631, 622, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 660, 625, 0, 0,
	0, 187, 188, 189, 348, 675, 350, 676, 190, 677,
	678, 0, 191, 354, 355, 192, 193, 628, 659, 679,
	680, 358, 0, 194, 671, 0, 651, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 705, 205, 206, 207, 0, 652, 653, 655,
	0, 654, 656, 208, 209, 411, 210, 681, 211, 682,
	683, 606, 212, 0, 213, 0, 214, 0, 0, 674,
	216, 0, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 661, 662, 639, 706, 0, 0, 0, 0, 0,
	222, 223, 684, 685, 686, 0, 224, 0, 225, 0,
	0, 707, 0, 226, 672, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 668, 670, 709, 0, 373,
	234, 0, 231, 0, 708, 232, 687, 233, 688, 689,
	690, 691, 692, 0, 650, 0, 710, 235, 236, 237,
	711, 238, 239, 240, 0, 242, 241, 0, 673, 712,
	243, 244, 713, 0, 245, 246, 0, 0, 247, 0,
	248, 714, 249, 250, 252, 382, 251, 715, 253, 254,
	256, 255, 611, 0, 640, 669, 257, 693, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 385, 716,
	263, 717, 663, 264, 265, 266, 267, 268, 0, 269,
	664, 270, 388, 271, 0, 272, 273, 274, 275, 276,
	694, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 718,
	292, 293, 617, 294, 0, 298, 299, 300, 301, 302,
	140, 304, 391, 303, 305, 306, 657, 307, 295, 296,
	308, 719, 309, 695, 393, 310, 0, 317, 311, 312,
	297, 313, 316, 696, 314, 315, 665, 0, 318, 142,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 396,
	697, 698, 0, 0, 327, 328, 666, 667, 638, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 658,
	337, 0, 401, 338, 339, 340, 930, 699, 0, 0,
	341, 0, 0, 0, 134, 342, 343, 344, 345, 346,
	612, 135, 594, 0, 643, 632, 633, 630, 631, 622,
	610, 0, 0, 0, 0, 608, 609, 0, 0, 0,
	184, 185, 0, 186, 1115, 0, 0, 0, 660, 625,
	621, 0, 0, 187, 188, 189, 348, 675, 350, 676,
	190, 677, 678, 0, 191, 354, 355, 192, 193, 628,
	659, 679, 680, 358, 0, 194, 671, 0, 651, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 705, 205, 206, 207, 0, 652,
	653, 655, 0, 654, 656, 208, 209, 411, 210, 681,
	211, 682, 683, 0, 212, 0, 213, 0, 214, 0,
	0, 674, 216, 0, 217, 0, 0, 0, 616, 218,
	220, 219, 221, 661, 662, 639, 706, 0, 0, 0,
	0, 0, 222, 223, 684, 685, 686, 0, 224, 0,
	225, 0, 0, 707, 0, 226, 672, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 668, 670, 709,
	0, 373, 234, 0, 231, 0, 708, 232, 687, 233,
	688, 689, 690, 691, 692, 0, 650, 0, 710, 235,
	236, 237, 711, 238, 239, 240, 0, 242, 241, 0,
	673, 712, 243, 244, 713, 0, 245, 246, 0, 0,
	247, 0, 248, 714, 249, 250, 252, 382, 251, 715,
	253, 254, 256, 255, 611, 0, 640, 669, 257, 693,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 716, 263, 717, 663, 264, 265, 266, 267, 268,
	0, 269, 664, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 694, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 718, 292, 293, 617, 294, 0, 298, 299, 300,
	301, 302, 140, 304, 391, 303, 305, 306, 657, 307,
	295, 296, 308, 719, 309, 695, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 696, 314, 315, 665, 0,
	318, 142, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 697, 698, 0, 0, 327, 328, 666, 667,
	638, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 658, 337, 0, 401, 338, 339, 340, 930, 699,
	0, 0, 341, 0, 0, 0, 134, 342, 343, 344,
	345, 346, 612, 135, 643, 632, 633, 630, 631, 622,
	0, 0, 610, 0, 0, 0, 0, 608, 609, 0,
	184, 185, 0, 186, 0, 0, 1115, 0, 660, 625,
	0, 0, 621, 187, 188, 189, 348, 675, 350, 676,
	190, 677, 678, 0, 191, 354, 355, 192, 193, 628,
	659, 679, 680, 358, 0, 194, 671, 0, 651, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 705, 205, 206, 207, 0, 652,
	653, 655, 0, 654, 656, 208, 209, 411, 210, 681,
	211, 682, 683, 0, 212, 0, 213, 0, 214, 0,
	0, 674, 216, 0, 217, 0, 0, 0, 616, 218,
	220, 219, 221, 661, 662, 639, 706, 0, 0, 0,
	0, 0, 222, 223, 684, 685, 686, 0, 224, 0,
	225, 0, 0, 707, 0, 226, 672, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 668, 670, 709,
	0, 373, 234, 0, 231, 0, 708, 232, 687, 233,
	688, 689, 690, 691, 692, 0, 650, 0, 710, 235,
	236, 237, 711, 238, 239, 240, 0, 242, 241, 0,
	673, 712, 243, 244, 713, 0, 245, 246, 0, 0,
	247, 0, 248, 714, 249, 250, 252, 382, 251, 715,
	253, 254, 256, 255, 611, 0, 640, 669, 257, 693,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 716, 263, 717, 663, 264, 265, 266, 267, 268,
	0, 269, 664, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 694, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 718, 292, 293, 617, 294, 0, 298, 299, 300,
	301, 302, 140, 304, 391, 303, 305, 306, 657, 307,
	295, 296, 308, 719, 309, 695, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 696, 314, 315, 665, 0,
	318, 142, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 697, 698, 0, 0, 327, 328, 666, 667,
	638, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 658, 337, 0, 401, 338, 339, 340, 930, 699,
	0, 0, 341, 0, 0, 0, 134, 342, 343, 344,
	345, 346, 612, 135, 643, 632, 633, 630, 631, 622,
	0, 0, 610, 0, 0, 0, 0, 608, 609, 0,
	184, 185, 0, 186, 0, 0, 1115, 0, 660, 625,
	0, 0, 621, 187, 188, 189, 348, 675, 350, 676,
	190, 677, 678, 1565, 191, 354, 355, 192, 193, 628,
	659, 679, 680, 358, 0, 194, 671, 0, 651, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 705, 205, 206, 207, 0, 652,
	653, 655, 0, 654, 656, 208, 209, 411, 210, 681,
	211, 682, 683, 0, 212, 0, 213, 0, 214, 0,
	0, 674, 216, 0, 217, 0, 0, 0, 616, 218,
	220, 219, 221, 661, 662, 639, 706, 0, 0, 0,
	0, 0, 222, 223, 684, 685, 686, 0, 224, 0,
	225, 0, 1570, 707, 0, 226, 672, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 668, 670, 709,
	0, 373, 234, 0, 231, 0, 708, 232, 687, 233,
	688, 689, 690, 691, 692, 0, 650, 0, 710, 235,
	236, 237, 711, 238, 239, 240, 0, 242, 241, 1566,
	673, 712, 243, 244, 713, 0, 245, 246, 0, 0,
	247, 0, 248, 714, 249, 250, 252, 382, 251, 715,
	253, 254, 256, 255, 611, 0, 640, 669, 257, 693,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 716, 263, 717, 663, 264, 265, 266, 267, 268,
	0, 269, 664, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 694, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 718, 292, 293, 617, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 657, 307,
	295, 296, 308, 719, 309, 695, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 696, 314, 315, 665, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 697, 698, 0, 1567, 327, 328, 666, 667,
	638, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 658, 337, 0, 401, 338, 339, 340, 402, 699,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 612, 602, 0, 643, 632, 633, 630, 631,
	622, 0, 610, 0, 0, 0, 0, 608, 609, 0,
	0, 184, 185, 0, 186, 0, 618, 0, 0, 660,
	625, 0, 621, 0, 187, 188, 189, 348, 675, 350,
	676, 190, 677, 678, 0, 191, 354, 355, 192, 193,
	628, 659, 679, 680, 358, 0, 194, 671, 0, 651,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 705, 205, 206, 207, 0,
	652, 653, 655, 0, 654, 656, 208, 209, 411, 210,
	681, 211, 682, 683, 606, 212, 0, 213, 0, 214,
	0, 0, 674, 216, 0, 217, 0, 0, 0, 616,
	218, 220, 219, 221, 661, 662, 639, 706, 0, 0,
	0, 0, 0, 222, 223, 684, 685, 686, 0, 224,
	0, 225, 0, 0, 707, 0, 226, 672, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 668, 670,
	709, 0, 373, 234, 0, 231, 0, 708, 232, 687,
	233, 688, 689, 690, 691, 692, 0, 650, 0, 710,
	235, 236, 237, 711, 238, 239, 240, 0, 242, 241,
	0, 673, 712, 243, 244, 713, 0, 245, 246, 0,
	0, 247, 0, 248, 714, 249, 250, 252, 382, 251,
	715, 253, 254, 256, 255, 611, 0, 640, 669, 257,
	693, 258, 259, 0, 260, 604, 0, 261, 0, 0,
	262, 385, 716, 263, 717, 663, 264, 265, 266, 267,
	268, 0, 269, 664, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 694, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 718, 292, 293, 617, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 657,
	307, 295, 296, 308, 719, 309, 695, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 696, 314, 315, 665,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 697, 698, 0, 0, 327, 328, 666,
	667, 638, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 658, 337, 0, 401, 338, 339, 340, 402,
	699, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 612, 0, 643, 632, 633, 630, 631,
	622, 0, 0, 610, 0, 0, 0, 0, 608, 609,
	0, 184, 185, 0, 186, 0, 0, 618, 0, 660,
	625, 0, 0, 621, 187, 188, 189, 348, 675, 350,
	676, 190, 677, 678, 0, 191, 354, 355, 192, 193,
	628, 659, 679, 680, 358, 0, 194, 671, 0, 651,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 705, 205, 206, 207, 0,
	652, 653, 655, 0, 654, 656, 208, 209, 411, 210,
	681, 211, 682, 683, 0, 212, 0, 213, 0, 214,
	0, 0, 674, 216, 0, 217, 0, 0, 0, 616,
	218, 220, 219, 221, 661, 662, 639, 706, 0, 0,
	0, 0, 0, 222, 223, 684, 685, 686, 0, 224,
	0, 225, 0, 0, 707, 0, 226, 672, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 668, 670,
	709, 0, 373, 234, 0, 231, 0, 708, 232, 687,
	233, 688, 689, 690, 691, 692, 0, 650, 0, 710,
	235, 236, 237, 711, 238, 239, 240, 0, 242, 241,
	0, 673, 712, 243, 244, 713, 0, 245, 246, 0,
	0, 247, 0, 248, 714, 249, 250, 252, 382, 251,
	715, 253, 254, 256, 255, 611, 2188, 640, 669, 257,
	693, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 716, 263, 717, 663, 264, 265, 266, 267,
	268, 0, 269, 664, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 694, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 718, 292, 293, 617, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 657,
	307, 295, 296, 308, 719, 309, 695, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 696, 314, 315, 665,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 697, 698, 0, 0, 327, 328, 666,
	667, 638, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 658, 337, 0, 401, 338, 339, 340, 402,
	699, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 612, 0, 643, 632, 633, 630, 631,
	622, 0, 0, 610, 0, 0, 0, 0, 608, 609,
	1176, 184, 185, 0, 186, 0, 0, 618, 0, 660,
	625, 0, 0, 621, 187, 188, 189, 348, 675, 350,
	676, 190, 677, 678, 0, 191, 354, 355, 192, 193,
	628, 659, 679, 680, 358, 0, 194, 671, 0, 651,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 705, 205, 206, 207, 0,
	652, 653, 655, 0, 654, 656, 208, 209, 411, 210,
	681, 211, 682, 683, 0, 212, 0, 213, 0, 214,
	0, 0, 674, 216, 0, 217, 0, 0, 0, 616,
	218, 220, 219, 221, 661, 662, 639, 706, 0, 0,
	0, 0, 0, 222, 223, 684, 685, 686, 0, 224,
	0, 225, 0, 0, 707, 0, 226, 672, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 668, 670,
	709, 0, 373, 234, 1415, 231, 0, 708, 232, 687,
	233, 688, 689, 690, 691, 692, 0, 650, 0, 710,
	235, 236, 237, 711, 238, 239, 240, 0, 242, 241,
	0, 673, 712, 243, 244, 713, 0, 245, 246, 0,
	0, 247, 0, 248, 714, 249, 250, 252, 382, 251,
	715, 253, 254, 256, 255, 611, 0, 640, 669, 257,
	693, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 716, 263, 717, 663, 264, 265, 266, 267,
	268, 0, 269, 664, 270, 388, 271, 1414, 272, 273,
	274, 275, 276, 694, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 718, 292, 293, 617, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 657,
	307, 295, 296, 308, 719, 309, 695, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 696, 314, 315, 665,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 697, 698, 0, 0, 327, 328, 666,
	667, 638, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 658, 337, 0, 401, 338, 339, 340, 402,
	699, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 612, 0, 643, 632, 633, 630, 631,
	622, 0, 0, 610, 0, 0, 0, 0, 608, 609,
	0, 184, 185, 0, 186, 0, 0, 618, 0, 660,
	625, 0, 0, 621, 187, 188, 189, 348, 675, 350,
	676, 190, 677, 678, 0, 191, 354, 355, 192, 193,
	628, 659, 679, 680, 358, 0, 194, 671, 0, 651,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 705, 205, 206, 207, 0,
	652, 653, 655, 0, 654, 656, 208, 209, 411, 210,
	681, 211, 682, 683, 606, 212, 0, 213, 0, 214,
	0, 0, 674, 216, 0, 217, 0, 0, 0, 616,
	218, 220, 219, 221, 661, 662, 639, 706, 0, 0,
	0, 0, 0, 222, 223, 684, 685, 686, 0, 224,
	0, 225, 0, 0, 707, 0, 226, 672, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 668, 670,
	709, 0, 373, 234, 0, 231, 0, 708, 232, 687,
	233, 688, 689, 690, 691, 692, 0, 650, 0, 710,
	235, 236, 237, 711, 238, 239, 240, 0, 242, 241,
	0, 673, 712, 243, 244, 713, 0, 245, 246, 0,
	0, 247, 0, 248, 714, 249, 250, 252, 382, 251,
	715, 253, 254, 256, 255, 611, 0, 640, 669, 257,
	693, 258, 259, 0, 260, 604, 0, 261, 0, 0,
	262, 385, 716, 263, 717, 663, 264, 265, 266, 267,
	268, 0, 269, 664, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 694, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 718, 292, 293, 617, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 657,
	307, 295, 296, 308, 719, 309, 695, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 696, 314, 315, 665,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 697, 698, 0, 0, 327, 328, 666,
	667, 638, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 658, 337, 0, 401, 338, 339, 340, 402,
	699, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 612, 0, 643, 632, 633, 630, 631,
	622, 0, 0, 610, 0, 0, 0, 0, 608, 609,
	0, 184, 185, 0, 186, 0, 0, 618, 0, 660,
	625, 0, 0, 621, 187, 188, 189, 348, 675, 350,
	676, 190, 677, 678, 0, 191, 354, 355, 192, 193,
	628, 659, 679, 680, 358, 0, 194, 671, 0, 651,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 705, 205, 206, 207, 0,
	652, 653, 655, 0, 654, 656, 208, 209, 411, 210,
	681, 211, 682, 683, 2592, 212, 0, 213, 0, 214,
	0, 0, 674, 216, 0, 217, 0, 0, 0, 616,
	218, 220, 219, 221, 661, 662, 639, 706, 0, 0,
	0, 0, 0, 222, 223, 684, 685, 686, 0, 224,
	0, 225, 0, 0, 707, 0, 226, 672, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 668, 670,
	709, 0, 373, 234, 0, 231, 0, 708, 232, 687,
	233, 688, 689, 690, 691, 692, 0, 650, 0, 710,
	235, 236, 237, 711, 238, 239, 240, 0, 242, 241,
	0, 673, 712, 243, 244, 713, 0, 245, 246, 0,
	0, 247, 0, 248, 2593, 249, 250, 252, 382, 251,
	715, 253, 254, 256, 255, 611, 0, 640, 669, 257,
	693, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 716, 263, 717, 663, 264, 265, 266, 267,
	268, 0, 269, 664, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 694, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 718, 292, 293, 617, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 657,
	307, 295, 296, 308, 719, 309, 695, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 696, 314, 315, 665,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 697, 698, 0, 0, 327, 328, 666,
	667, 638, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 658, 337, 0, 401, 338, 339, 340, 402,
	699, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 612, 0, 643, 632, 633, 630, 631,
	622, 0, 0, 610, 0, 0, 0, 0, 608, 609,
	0, 184, 185, 0, 186, 0, 0, 618, 0, 660,
	625, 0, 0, 621, 187, 188, 189, 348, 675, 350,
	676, 190, 677, 678, 0, 191, 354, 355, 192, 193,
	628, 659, 679, 680, 358, 0, 194, 671, 0, 651,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 705, 205, 206, 207, 0,
	652, 653, 655, 0, 654, 656, 208, 209, 411, 210,
	681, 211, 682, 683, 606, 212, 0, 213, 0, 214,
	0, 0, 674, 216, 0, 217, 0, 0, 0, 616,
	218, 220, 219, 221, 661, 662, 639, 706, 0, 0,
	0, 0, 0, 222, 223, 684, 685, 686, 0, 224,
	0, 225, 0, 0, 707, 0, 226, 672, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 668, 670,
	709, 0, 373, 234, 0, 231, 0, 708, 232, 687,
	233, 688, 689, 690, 691, 692, 0, 650, 0, 710,
	235, 236, 237, 711, 238, 239, 240, 0, 242, 241,
	0, 673, 712, 243, 244, 713, 0, 245, 246, 0,
	0, 247, 0, 248, 714, 249, 250, 252, 382, 251,
	715, 253, 254, 256, 255, 611, 0, 640, 669, 257,
	693, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 716, 263, 717, 663, 264, 265, 266, 267,
	268, 0, 269, 664, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 694, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 718, 292, 293, 617, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 657,
	307, 295, 296, 308, 719, 309, 695, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 696, 314, 315, 665,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 697, 698, 0, 0, 327, 328, 666,
	667, 638, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 658, 337, 0, 401, 338, 339, 340, 402,
	699, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 612, 0, 643, 632, 633, 630, 631,
	622, 0, 0, 610, 0, 0, 0, 0, 608, 609,
	0, 184, 185, 0, 186, 0, 0, 618, 0, 660,
	625, 0, 0, 621, 187, 188, 189, 348, 675, 350,
	676, 190, 677, 678, 0, 191, 354, 355, 192, 193,
	628, 659, 679, 680, 358, 0, 194, 671, 0, 651,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 705, 205, 206, 207, 0,
	652, 653, 655, 0, 654, 656, 208, 209, 411, 210,
	681, 211, 682, 683, 0, 212, 0, 213, 0, 214,
	0, 0, 674, 216, 0, 217, 0, 0, 0, 616,
	218, 220, 219, 221, 661, 662, 639, 706, 0, 0,
	0, 0, 0, 222, 223, 684, 685, 686, 0, 224,
	0, 225, 0, 0, 707, 0, 226, 672, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 668, 670,
	709, 0, 373, 234, 0, 231, 0, 708, 232, 687,
	233, 688, 689, 690, 691, 692, 0, 650, 0, 710,
	235, 236, 237, 711, 238, 239, 240, 0, 242, 241,
	0, 673, 712, 243, 244, 713, 0, 245, 246, 0,
	0, 247, 0, 248, 714, 249, 250, 252, 382, 251,
	715, 253, 254, 256, 255, 611, 0, 640, 669, 257,
	693, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 716, 263, 717, 663, 264, 265, 266, 267,
	268, 0, 269, 664, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 694, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 718, 292, 293, 617, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 657,
	307, 295, 296, 308, 719, 309, 695, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 696, 314, 315, 665,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 697, 698, 0, 0, 327, 328, 666,
	667, 638, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 658, 337, 0, 401, 338, 339, 340, 402,
	699, 2041, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 612, 0, 643, 632, 633, 630, 631,
	622, 0, 0, 610, 0, 0, 0, 0, 608, 609,
	0, 184, 185, 0, 186, 0, 0, 618, 0, 660,
	625, 0, 0, 621, 187, 188, 189, 348, 675, 350,
	676, 190, 677, 678, 0, 191, 354, 355, 192, 193,
	628, 659, 679, 680, 358, 0, 194, 671, 0, 651,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 705, 205, 206, 207, 0,
	652, 653, 655, 0, 654, 656, 208, 209, 411, 210,
	681, 211, 682, 683, 0, 212, 0, 213, 0, 214,
	0, 0, 674, 216, 0, 217, 0, 0, 0, 616,
	218, 220, 219, 221, 661, 662, 639, 706, 0, 0,
	0, 0, 0, 222, 223, 684, 685, 686, 0, 224,
	0, 225, 0, 0, 707, 0, 226, 672, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 668, 670,
	709, 0, 373, 234, 0, 231, 0, 708, 232, 687,
	233, 688, 689, 690, 691, 692, 0, 650, 0, 710,
	235, 236, 237, 711, 238, 239, 240, 0, 242, 241,
	0, 673, 712, 243, 244, 713, 0, 245, 246, 0,
	0, 247, 0, 248, 714, 249, 250, 252, 382, 251,
	715, 253, 254, 256, 255, 611, 0, 640, 669, 257,
	693, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 716, 263, 717, 663, 264, 265, 266, 267,
	268, 0, 269, 664, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 694, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 718, 292, 293, 617, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 657,
	307, 295, 296, 308, 719, 309, 695, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 696, 314, 315, 665,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 697, 698, 0, 0, 327, 328, 666,
	667, 638, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 658, 337, 0, 401, 338, 339, 340, 402,
	699, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 612, 0, 643, 632, 633, 630, 631,
	622, 0, 0, 610, 0, 0, 0, 0, 608, 609,
	1176, 184, 185, 0, 186, 0, 0, 618, 0, 660,
	625, 0, 0, 621, 187, 188, 189, 348, 675, 350,
	676, 190, 677, 678, 0, 191, 354, 355, 192, 193,
	628, 659, 679, 680, 358, 0, 194, 671, 0, 651,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 705, 205, 206, 207, 0,
	652, 653, 655, 0, 654, 656, 208, 209, 411, 210,
	681, 211, 682, 683, 0, 212, 0, 213, 0, 214,
	0, 0, 674, 216, 0, 217, 0, 0, 0, 616,
	218, 220, 219, 221, 661, 662, 639, 706, 0, 0,
	0, 0, 0, 222, 223, 684, 685, 686, 0, 224,
	0, 225, 0, 1570, 707, 0, 226, 672, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 668, 670,
	709, 0, 373, 234, 0, 231, 0, 708, 232, 687,
	233, 688, 689, 690, 691, 692, 0, 650, 0, 710,
	235, 236, 237, 711, 238, 239, 240, 0, 242, 241,
	0, 673, 712, 243, 244, 713, 0, 245, 246, 0,
	0, 247, 0, 248, 714, 249, 250, 252, 382, 251,
	715, 253, 254, 256, 255, 611, 0, 640, 669, 257,
	693, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 716, 263, 717, 663, 264, 265, 266, 267,
	268, 0, 269, 664, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 694, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 718, 292, 293, 617, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 657,
	307, 295, 296, 308, 719, 309, 695, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 696, 314, 315, 665,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 697, 698, 0, 0, 327, 328, 666,
	667, 638, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 658, 337, 0, 401, 338, 339, 340, 402,
	699, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 612, 1615, 0, 643, 632, 633, 630,
	631, 622, 0, 610, 0, 0, 0, 0, 608, 609,
	0, 0, 184, 185, 0, 186, 0, 618, 0, 0,
	660, 625, 0, 621, 0, 187, 188, 189, 348, 675,
	350, 676, 190, 677, 678, 0, 191, 354, 355, 192,
	193, 628, 659, 679, 680, 358, 0, 194, 671, 0,
	651, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 705, 205, 206, 207,
	0, 652, 653, 655, 0, 654, 656, 208, 209, 411,
	210, 681, 211, 682, 683, 0, 212, 0, 213, 0,
	214, 0, 0, 674, 216, 0, 217, 0, 0, 0,
	616, 218, 220, 219, 221, 661, 662, 639, 706, 0,
	0, 0, 0, 0, 222, 223, 684, 685, 686, 0,
	224, 0, 225, 0, 0, 707, 0, 226, 672, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 668,
	670, 709, 0, 373, 234, 0, 231, 0, 708, 232,
	687, 233, 688, 689, 690, 691, 692, 0, 650, 0,
	710, 235, 236, 237, 711, 238, 239, 240, 0, 242,
	241, 0, 673, 712, 243, 244, 713, 0, 245, 246,
	0, 0, 247, 0, 248, 714, 249, 250, 252, 382,
	251, 715, 253, 254, 256, 255, 611, 0, 640, 669,
	257, 693, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 385, 716, 263, 717, 663, 264, 265, 266,
	267, 268, 0, 269, 664, 270, 388, 271, 0, 272,
	273, 274, 275, 276, 694, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 718, 292, 293, 617, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 391, 303, 305, 306,
	657, 307, 295, 296, 308, 719, 309, 695, 393, 310,
	0, 317, 311, 312, 297, 313, 316, 696, 314, 315,
	665, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 396, 697, 698, 0, 0, 327, 328,
	666, 667, 638, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 658, 337, 0, 401, 338, 339, 340,
	402, 699, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 612, 1579, 0, 643, 632, 633,
	630, 631, 622, 0, 610, 0, 0, 0, 0, 608,
	609, 0, 0, 184, 185, 0, 186, 0, 618, 0,
	0, 660, 625, 0, 621, 0, 187, 188, 189, 348,
	675, 350, 676, 190, 677, 678, 0, 191, 354, 355,
	192, 193, 628, 659, 679, 680, 358, 0, 194, 671,
	0, 651, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 705, 205, 206,
	207, 0, 652, 653, 655, 0, 654, 656, 208, 209,
	411, 210, 681, 211, 682, 683, 0, 212, 0, 213,
	0, 214, 0, 0, 674, 216, 0, 217, 0, 0,
	0, 616, 218, 220, 219, 221, 661, 662, 639, 706,
	0, 0, 0, 0, 0, 222, 223, 684, 685, 686,
	0, 224, 0, 225, 0, 0, 707, 0, 226, 672,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	668, 670, 709, 0, 373, 234, 0, 231, 0, 708,
	232, 687, 233, 688, 689, 690, 691, 692, 0, 650,
	0, 710, 235, 236, 237, 711, 238, 239, 240, 0,
	242, 241, 0, 673, 712, 243, 244, 713, 0, 245,
	246, 0, 0, 247, 0, 248, 714, 249, 250, 252,
	382, 251, 715, 253, 254, 256, 255, 611, 0, 640,
	669, 257, 693, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 716, 263, 717, 663, 264, 265,
	266, 267, 268, 0, 269, 664, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 694, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 718, 292, 293, 617, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 657, 307, 295, 296, 308, 719, 309, 695, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 696, 314,
	315, 665, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 697, 698, 0, 0, 327,
	328, 666, 667, 638, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 658, 337, 0, 401, 338, 339,
	340, 402, 699, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 612, 1577, 0, 643, 632,
	633, 630, 631, 622, 0, 610, 0, 0, 0, 0,
	608, 609, 0, 0, 184, 185, 0, 186, 0, 618,
	0, 0, 660, 625, 0, 621, 0, 187, 188, 189,
	348, 675, 350, 676, 190, 677, 678, 0, 191, 354,
	355, 192, 193, 628, 659, 679, 680, 358, 0, 194,
	671, 0, 651, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 705, 205,
	206, 207, 0, 652, 653, 655, 0, 654, 656, 208,
	209, 411, 210, 681, 211, 682, 683, 0, 212, 0,
	213, 0, 214, 0, 0, 674, 216, 0, 217, 0,
	0, 0, 616, 218, 220, 219, 221, 661, 662, 639,
	706, 0, 0, 0, 0, 0, 222, 223, 684, 685,
	686, 0, 224, 0, 225, 0, 0, 707, 0, 226,
	672, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 668, 670, 709, 0, 373, 234, 0, 231, 0,
	708, 232, 687, 233, 688, 689, 690, 691, 692, 0,
	650, 0, 710, 235, 236, 237, 711, 238, 239, 240,
	0, 242, 241, 0, 673, 712, 243, 244, 713, 0,
	245, 246, 0, 0, 247, 0, 248, 714, 249, 250,
	252, 382, 251, 715, 253, 254, 256, 255, 611, 0,
	640, 669, 257, 693, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 385, 716, 263, 717, 663, 264,
	265, 266, 267, 268, 0, 269, 664, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 694, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 718, 292, 293, 617, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 657, 307, 295, 296, 308, 719, 309, 695,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 696,
	314, 315, 665, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 697, 698, 0, 0,
	327, 328, 666, 667, 638, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 658, 337, 0, 401, 338,
	339, 340, 402, 699, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 612, 1561, 0, 643,
	632, 633, 630, 631, 622, 0, 610, 0, 0, 0,
	0, 608, 609, 0, 0, 184, 185, 0, 186, 0,
	618, 0, 0, 660, 625, 0, 621, 0, 187, 188,
	189, 348, 675, 350, 676, 190, 677, 678, 0, 191,
	354, 355, 192, 193, 628, 659, 679, 680, 358, 0,
	194, 671, 0, 651, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 705,
	205, 206, 207, 0, 652, 653, 655, 0, 654, 656,
	208, 209, 411, 210, 681, 211, 682, 683, 0, 212,
	0, 213, 0, 214, 0, 0, 674, 216, 0, 217,
	0, 0, 0, 616, 218, 220, 219, 221, 661, 662,
	639, 706, 0, 0, 0, 0, 0, 222, 223, 684,
	685, 686, 0, 224, 0, 225, 0, 0, 707, 0,
	226, 672, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 668, 670, 709, 0, 373, 234, 0, 231,
	0, 708, 232, 687, 233, 688, 689, 690, 691, 692,
	0, 650, 0, 710, 235, 236, 237, 711, 238, 239,
	240, 0, 242, 241, 0, 673, 712, 243, 244, 713,
	0, 245, 246, 0, 0, 247, 0, 248, 714, 249,
	250, 252, 382, 251, 715, 253, 254, 256, 255, 611,
	0, 640, 669, 257, 693, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 716, 263, 717, 663,
	264, 265, 266, 267, 268, 0, 269, 664, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 694, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 718, 292, 293, 617,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 657, 307, 295, 296, 308, 719, 309,
	695, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	696, 314, 315, 665, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 697, 698, 0,
	0, 327, 328, 666, 667, 638, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 658, 337, 0, 401,
	338, 339, 340, 402, 699, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 612, 1549, 0,
	643, 632, 633, 630, 631, 622, 0, 610, 0, 0,
	0, 0, 608, 609, 0, 0, 184, 185, 0, 186,
	0, 618, 0, 0, 660, 625, 0, 621, 0, 187,
	188, 189, 348, 675, 350, 676, 190, 677, 678, 0,
	191, 354, 355, 192, 193, 628, 659, 679, 680, 358,
	0, 194, 671, 0, 651, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	705, 205, 206, 207, 0, 652, 653, 655, 0, 654,
	656, 208, 209, 411, 210, 681, 211, 682, 683, 0,
	212, 0, 213, 0, 214, 0, 0, 674, 216, 0,
	217, 0, 0, 0, 616, 218, 220, 219, 221, 661,
	662, 639, 706, 0, 0, 0, 0, 0, 222, 223,
	684, 685, 686, 0, 224, 0, 225, 0, 0, 707,
	0, 226, 672, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 668, 670, 709, 0, 373, 234, 0,
	231, 0, 708, 232, 687, 233, 688, 689, 690, 691,
	692, 0, 650, 0, 710, 235, 236, 237, 711, 238,
	239, 240, 0, 242, 241, 0, 673, 712, 243, 244,
	713, 0, 245, 246, 0, 0, 247, 0, 248, 714,
	249, 250, 252, 382, 251, 715, 253, 254, 256, 255,
	611, 0, 640, 669, 257, 693, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 385, 716, 263, 717,
	663, 264, 265, 266, 267, 268, 0, 269, 664, 270,
	388, 271, 0, 272, 273, 274, 275, 276, 694, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 718, 292, 293,
	617, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	391, 303, 305, 306, 657, 307, 295, 296, 308, 719,
	309, 695, 393, 310, 0, 317, 311, 312, 297, 313,
	316, 696, 314, 315, 665, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 396, 697, 698,
	0, 0, 327, 328, 666, 667, 638, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 658, 337, 0,
	401, 338, 339, 340, 402, 699, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 612, 1547,
	0, 1539, 632, 633, 630, 631, 622, 0, 610, 0,
	0, 0, 0, 608, 609, 0, 0, 184, 185, 0,
	186, 0, 618, 0, 0, 660, 625, 0, 621, 0,
	187, 188, 189, 348, 675, 350, 676, 190, 677, 678,
	0, 191, 354, 355, 192, 193, 628, 659, 679, 680,
	358, 0, 194, 671, 0, 651, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 705, 205, 206, 207, 0, 652, 653, 655, 0,
	654, 656, 208, 209, 411, 210, 681, 1542, 682, 683,
	0, 212, 0, 213, 0, 214, 0, 0, 674, 216,
	0, 217, 0, 0, 0, 616, 218, 220, 219, 221,
	661, 662, 639, 706, 0, 0, 0, 0, 0, 222,
	223, 684, 685, 686, 0, 224, 0, 225, 0, 0,
	707, 0, 226, 672, 0, 370, 0, 0, 227, 1543,
	0, 0, 229, 230, 668, 670, 709, 0, 373, 234,
	0, 231, 0, 708, 232, 687, 233, 688, 689, 690,
	691, 692, 0, 650, 0, 710, 235, 236, 237, 711,
	238, 239, 240, 0, 242, 241, 0, 673, 712, 243,
	244, 713, 0, 245, 246, 0, 0, 247, 0, 248,
	714, 1544, 1541, 252, 382, 251, 715, 253, 254, 256,
	255, 611, 0, 640, 669, 257, 693, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 716, 263,
	717, 663, 264, 265, 266, 267, 268, 0, 269, 664,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 694,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 718, 292,
	293, 617, 294, 0, 298, 299, 300, 301, 1545, 0,
	304, 391, 303, 305, 306, 657, 307, 295, 296, 308,
	719, 309, 695, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 696, 314, 315, 665, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 697,
	698, 0, 0, 327, 328, 666, 667, 638, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 658, 337,
	0, 401, 338, 339, 340, 402, 699, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 1540, 346, 612,
	1536, 0, 1539, 632, 633, 630, 631, 622, 0, 610,
	0, 0, 0, 0, 608, 609, 0, 0, 184, 185,
	0, 186, 0, 618, 0, 0, 660, 625, 0, 621,
	0, 187, 188, 189, 348, 675, 350, 676, 190, 677,
	678, 0, 191, 354, 355, 192, 193, 628, 659, 679,
	680, 358, 0, 194, 671, 0, 651, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 705, 205, 206, 207, 0, 652, 653, 655,
	0, 654, 656, 208, 209, 411, 210, 681, 1542, 682,
	683, 0, 212, 0, 213, 0, 214, 0, 0, 674,
	216, 0, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 661, 662, 639, 706, 0, 0, 0, 0, 0,
	222, 223, 684, 685, 686, 0, 224, 0, 225, 0,
	0, 707, 0, 226, 672, 0, 370, 0, 0, 227,
	1543, 0, 0, 229, 230, 668, 670, 709, 0, 373,
	234, 0, 231, 0, 708, 232, 687, 233, 688, 689,
	690, 691, 692, 0, 650, 0, 710, 235, 236, 237,
	711, 238, 239, 240, 0, 242, 241, 0, 673, 712,
	243, 244, 713, 0, 245, 246, 0, 0, 247, 0,
	248, 714, 1544, 1541, 252, 382, 251, 715, 253, 254,
	256, 255, 611, 0, 640, 669, 257, 693, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 385, 716,
	263, 717, 663, 264, 265, 266, 267, 268, 0, 269,
	664, 270, 388, 271, 0, 272, 273, 274, 275, 276,
	694, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 718,
	292, 293, 617, 294, 0, 298, 299, 300, 301, 1545,
	0, 304, 391, 303, 305, 306, 657, 307, 295, 296,
	308, 719, 309, 695, 393, 310, 0, 317, 311, 312,
	297, 313, 316, 696, 314, 315, 665, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 396,
	697, 698, 0, 0, 327, 328, 666, 667, 638, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 658,
	337, 0, 401, 338, 339, 340, 402, 699, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 1540, 346,
	612, 0, 643, 632, 633, 630, 631, 622, 0, 0,
	610, 0, 0, 0, 0, 608, 609, 0, 184, 185,
	0, 186, 0, 0, 618, 0, 660, 625, 0, 0,
	621, 187, 188, 189, 348, 675, 350, 676, 190, 677,
	678, 0, 191, 354, 355, 192, 193, 628, 659, 679,
	680, 358, 0, 194, 671, 0, 651, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 705, 205, 206, 207, 0, 652, 653, 655,
	0, 654, 656, 208, 209, 411, 210, 681, 211, 682,
	683, 0, 212, 0, 213, 0, 214, 0, 0, 674,
	216, 0, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 661, 662, 639, 706, 0, 0, 0, 0, 0,
	222, 223, 684, 685, 686, 0, 224, 0, 225, 0,
	0, 707, 0, 226, 672, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 668, 670, 709, 0, 373,
	234, 0, 231, 0, 708, 232, 687, 233, 688, 689,
	690, 691, 692, 0, 650, 0, 710, 235, 236, 237,
	711, 238, 239, 240, 0, 242, 241, 0, 673, 712,
	243, 244, 713, 0, 245, 246, 0, 0, 247, 0,
	248, 714, 249, 250, 252, 382, 251, 715, 253, 254,
	256, 255, 611, 0, 640, 669, 257, 693, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 385, 716,
	263, 717, 663, 264, 265, 266, 267, 268, 0, 269,
	664, 270, 388, 271, 0, 272, 273, 274, 275, 276,
	694, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 718,
	292, 293, 617, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 391, 303, 305, 306, 657, 307, 295, 296,
	308, 719, 309, 695, 393, 310, 0, 317, 311, 312,
	297, 313, 316, 696, 314, 315, 665, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 396,
	697, 698, 0, 0, 327, 328, 666, 667, 638, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 658,
	337, 0, 401, 338, 339, 340, 402, 699, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	612, 0, 643, 632, 633, 630, 631, 622, 0, 0,
	610, 0, 0, 0, 0, 608, 609, 0, 184, 185,
	1402, 186, 1119, 0, 618, 0, 660, 625, 0, 0,
	621, 187, 188, 189, 348, 675, 350, 676, 190, 677,
	678, 0, 191, 354, 355, 192, 193, 628, 659, 679,
	680, 358, 0, 194, 671, 0, 651, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 705, 205, 206, 207, 0, 652, 653, 655,
	0, 654, 656, 208, 209, 411, 210, 681, 211, 682,
	683, 0, 212, 0, 213, 0, 214, 0, 0, 674,
	216, 0, 217, 0, 0, 0, 616, 218, 220, 219,
	221, 661, 662, 639, 706, 0, 0, 0, 0, 0,
	222, 223, 684, 685, 686, 0, 224, 0, 225, 0,
	0, 707, 0, 226, 672, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 668, 670, 709, 0, 373,
	234, 0, 231, 0, 708, 232, 687, 233, 688, 689,
	690, 691, 692, 0, 650, 0, 710, 235, 236, 237,
	711, 238, 239, 240, 0, 242, 241, 0, 673, 712,
	243, 244, 713, 0, 245, 246, 0, 0, 247, 0,
	248, 714, 249, 250, 252, 382, 251, 715, 253, 254,
	256, 255, 611, 0, 640, 669, 257, 693, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 385, 716,
	263, 717, 663, 264, 265, 266, 267, 268, 0, 269,
	664, 270, 388, 271, 0, 272, 273, 274, 275, 276,
	694, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 718,
	292, 293, 617, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 391, 303, 305, 306, 657, 307, 295, 296,
	308, 719, 309, 695, 393, 310, 0, 317, 311, 312,
	297, 313, 316, 696, 314, 315, 665, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 396,
	697, 698, 0, 0, 327, 328, 666, 667, 638, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 658,
	337, 0, 401, 338, 339, 340, 402, 699, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	612, 874, 0, 643, 632, 633, 630, 631, 622, 0,
	610, 0, 0, 0, 0, 608, 609, 0, 0, 184,
	185, 0, 186, 0, 618, 0, 0, 660, 625, 0,
	621, 0, 187, 188, 189, 348, 675, 350, 676, 190,
	677, 678, 0, 191, 354, 355, 192, 193, 628, 659,
	679, 680, 358, 0, 194, 671, 0, 651, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 705, 205, 206, 207, 0, 652, 653,
	655, 0, 654, 656, 208, 209, 411, 210, 681, 211,
	682, 683, 0, 212, 0, 213, 0, 214, 0, 0,
	674, 216, 0, 217, 0, 0, 0, 616, 218, 220,
	219, 221, 661, 662, 639, 706, 0, 0, 0, 0,
	0, 222, 223, 684, 685, 686, 0, 224, 0, 225,
	0, 0, 707, 0, 226, 672, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 668, 670, 709, 0,
	373, 234, 0, 231, 0, 708, 232, 687, 233, 688,
	689, 690, 691, 692, 0, 650, 0, 710, 235, 236,
	237, 711, 238, 239, 240, 0, 242, 241, 0, 673,
	712, 243, 244, 713, 0, 245, 246, 0, 0, 247,
	0, 248, 714, 249, 250, 252, 382, 251, 715, 253,
	254, 256, 255, 611, 0, 640, 669, 257, 693, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	716, 263, 717, 663, 264, 265, 266, 267, 268, 0,
	269, 664, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 694, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	718, 292, 293, 617, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 657, 307, 295,
	296, 308, 719, 309, 695, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 696, 314, 315, 665, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 697, 698, 0, 0, 327, 328, 666, 667, 638,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	658, 337, 0, 401, 338, 339, 340, 402, 699, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 612, 872, 0, 643, 632, 633, 630, 631, 622,
	0, 610, 0, 0, 0, 0, 608, 609, 0, 0,
	184, 185, 0, 186, 0, 618, 0, 0, 660, 625,
	0, 621, 0, 187, 188, 189, 348, 675, 350, 676,
	190, 677, 678, 0, 191, 354, 355, 192, 193, 628,
	659, 679, 680, 358, 0, 194, 671, 0, 651, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 705, 205, 206, 207, 0, 652,
	653, 655, 0, 654, 656, 208, 209, 411, 210, 681,
	211, 682, 683, 0, 212, 0, 213, 0, 214, 0,
	0, 674, 216, 0, 217, 0, 0, 0, 616, 218,
	220, 219, 221, 661, 662, 639, 706, 0, 0, 0,
	0, 0, 222, 223, 684, 685, 686, 0, 224, 0,
	225, 0, 0, 707, 0, 226, 672, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 668, 670, 709,
	0, 373, 234, 0, 231, 0, 708, 232, 687, 233,
	688, 689, 690, 691, 692, 0, 650, 0, 710, 235,
	236, 237, 711, 238, 239, 240, 0, 242, 241, 0,
	673, 712, 243, 244, 713, 0, 245, 246, 0, 0,
	247, 0, 248, 714, 249, 250, 252, 382, 251, 715,
	253, 254, 256, 255, 611, 0, 640, 669, 257, 693,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 716, 263, 717, 663, 264, 265, 266, 267, 268,
	0, 269, 664, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 694, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 718, 292, 293, 617, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 657, 307,
	295, 296, 308, 719, 309, 695, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 696, 314, 315, 665, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 697, 698, 0, 0, 327, 328, 666, 667,
	638, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 658, 337, 0, 401, 338, 339, 340, 402, 699,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 612, 0, 643, 632, 633, 630, 631, 622,
	0, 0, 610, 0, 0, 0, 0, 608, 609, 0,
	184, 185, 0, 186, 0, 0, 618, 0, 660, 625,
	0, 0, 621, 187, 188, 189, 348, 675, 350, 676,
	190, 677, 678, 0, 191, 354, 355, 192, 193, 628,
	659, 679, 680, 358, 0, 194, 671, 0, 651, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 705, 205, 206, 2509, 0, 652,
	653, 655, 0, 654, 656, 208, 209, 411, 210, 681,
	211, 682, 683, 0, 212, 0, 213, 0, 214, 0,
	0, 674, 216, 0, 217, 0, 0, 0, 616, 218,
	220, 219, 221, 661, 662, 639, 706, 0, 0, 0,
	0, 0, 222, 223, 684, 685, 686, 0, 224, 0,
	225, 0, 0, 707, 0, 226, 672, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 668, 670, 709,
	0, 373, 234, 0, 231, 0, 708, 232, 687, 233,
	688, 689, 690, 691, 692, 0, 650, 0, 710, 235,
	236, 237, 711, 238, 239, 240, 0, 242, 241, 0,
	673, 712, 243, 244, 713, 0, 245, 246, 0, 0,
	247, 0, 248, 714, 249, 250, 252, 382, 251, 715,
	253, 254, 256, 255, 611, 0, 640, 669, 257, 693,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 716, 263, 717, 663, 264, 265, 266, 267, 268,
	0, 269, 664, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 694, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 718, 292, 293, 617, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 657, 307,
	295, 296, 308, 719, 309, 695, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 696, 314, 315, 665, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 697, 698, 0, 0, 327, 328, 666, 667,
	638, 329, 330, 2508, 332, 0, 0, 333, 334, 335,
	336, 658, 337, 0, 401, 338, 339, 340, 402, 699,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 612, 0, 643, 632, 633, 630, 631, 622,
	0, 0, 610, 0, 0, 0, 0, 608, 609, 0,
	184, 185, 0, 186, 0, 0, 618, 0, 660, 625,
	0, 0, 621, 187, 188, 189, 348, 675, 350, 676,
	190, 677, 678, 0, 191, 354, 355, 192, 193, 628,
	659, 679, 680, 358, 0, 194, 671, 0, 651, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 705, 205, 206, 207, 0, 652,
	653, 655, 0, 654, 656, 208, 209, 411, 210, 681,
	211, 682, 683, 0, 212, 0, 213, 0, 214, 0,
	0, 674, 216, 0, 217, 0, 0, 0, 616, 218,
	220, 219, 221, 661, 662, 639, 706, 0, 0, 0,
	0, 0, 222, 223, 684, 685, 686, 0, 224, 0,
	225, 0, 0, 707, 0, 226, 672, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 668, 670, 709,
	0, 373, 234, 0, 231, 0, 708, 232, 687, 233,
	688, 689, 690, 691, 692, 0, 650, 0, 710, 235,
	236, 237, 711, 238, 239, 240, 0, 242, 241, 0,
	673, 712, 243, 244, 713, 0, 245, 246, 0, 0,
	247, 0, 248, 714, 249, 250, 252, 382, 251, 715,
	253, 254, 256, 255, 611, 0, 640, 669, 257, 693,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 716, 263, 717, 663, 264, 265, 266, 267, 268,
	0, 269, 664, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 694, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 718, 292, 293, 617, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 657, 307,
	295, 296, 308, 719, 309, 695, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 696, 314, 315, 665, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 697, 698, 0, 0, 327, 328, 666, 667,
	638, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 658, 337, 0, 401, 338, 339, 340, 402, 699,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 612, 0, 643, 632, 633, 630, 631, 622,
	0, 0, 610, 0, 0, 0, 0, 608, 609, 0,
	184, 185, 0, 186, 0, 0, 618, 0, 660, 625,
	0, 0, 621, 187, 188, 189, 2507, 675, 350, 676,
	190, 677, 678, 0, 191, 354, 355, 192, 193, 628,
	659, 679, 680, 358, 0, 194, 671, 0, 651, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 705, 205, 206, 2509, 0, 652,
	653, 655, 0, 654, 656, 208, 209, 411, 210, 681,
	211, 682, 683, 0, 212, 0, 213, 0, 214, 0,
	0, 674, 216, 0, 217, 0, 0, 0, 616, 218,
	220, 219, 221, 661, 662, 639, 706, 0, 0, 0,
	0, 0, 222, 223, 684, 685, 686, 0, 224, 0,
	225, 0, 0, 707, 0, 226, 672, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 668, 670, 709,
	0, 373, 234, 0, 231, 0, 708, 232, 687, 233,
	688, 689, 690, 691, 692, 0, 650, 0, 710, 235,
	236, 237, 711, 238, 239, 240, 0, 242, 241, 0,
	673, 712, 243, 244, 713, 0, 245, 246, 0, 0,
	247, 0, 248, 714, 249, 250, 252, 382, 251, 715,
	253, 254, 256, 255, 611, 0, 640, 669, 257, 693,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 716, 263, 717, 663, 264, 265, 266, 267, 268,
	0, 269, 664, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 694, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 718, 292, 293, 617, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 657, 307,
	295, 296, 308, 719, 309, 695, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 696, 314, 315, 665, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 697, 698, 0, 0, 327, 328, 666, 667,
	638, 329, 330, 2508, 332, 0, 0, 333, 334, 335,
	336, 658, 337, 0, 401, 338, 339, 340, 402, 699,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 612, 0, 643, 632, 633, 630, 631, 622,
	0, 0, 610, 0, 0, 0, 0, 608, 609, 0,
	184, 185, 0, 186, 0, 0, 618, 0, 660, 625,
	0, 0, 621, 187, 188, 189, 348, 675, 350, 676,
	190, 677, 678, 0, 191, 354, 355, 192, 193, 628,
	659, 679, 680, 358, 0, 194, 671, 0, 651, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 705, 205, 206, 207, 0, 652,
	653, 655, 0, 654, 656, 208, 209, 411, 210, 681,
	211, 682, 683, 0, 212, 0, 213, 0, 214, 0,
	0, 674, 216, 0, 217, 0, 0, 0, 616, 218,
	220, 219, 221, 661, 662, 639, 706, 0, 0, 0,
	0, 0, 222, 223, 684, 685, 686, 0, 224, 0,
	225, 0, 0, 707, 0, 226, 672, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 668, 670, 709,
	0, 373, 234, 0, 231, 0, 708, 232, 687, 233,
	688, 689, 690, 691, 692, 0, 650, 0, 710, 235,
	236, 237, 711, 238, 239, 240, 0, 242, 241, 0,
	673, 712, 243, 244, 713, 0, 245, 246, 0, 0,
	247, 0, 248, 714, 249, 250, 252, 382, 251, 715,
	253, 254, 256, 255, 0, 0, 640, 669, 257, 693,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 716, 263, 717, 663, 264, 265, 266, 267, 268,
	0, 269, 664, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 694, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 718, 292, 293, 1559, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 657, 307,
	295, 296, 308, 719, 309, 695, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 696, 314, 315, 665, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 697, 698, 0, 0, 327, 328, 666, 667,
	638, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 658, 337, 0, 401, 338, 339, 340, 402, 699,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 643, 632, 633, 630, 631, 622,
	0, 0, 1557, 0, 0, 0, 0, 1555, 1556, 0,
	184, 185, 0, 186, 0, 0, 1558, 0, 660, 625,
	0, 0, 621, 187, 188, 189, 348, 675, 350, 676,
	190, 677, 678, 0, 191, 354, 355, 192, 193, 0,
	659, 679, 680, 358, 0, 194, 671, 0, 651, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 705, 205, 206, 207, 0, 652,
	653, 655, 0, 654, 656, 208, 209, 411, 210, 681,
	211, 682, 683, 0, 212, 0, 213, 0, 214, 0,
	0, 674, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 661, 662, 639, 706, 0, 0, 0,
	0, 0, 222, 223, 684, 685, 686, 0, 224, 0,
	225, 0, 0, 707, 0, 226, 672, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 668, 670, 709,
	0, 373, 234, 0, 231, 0, 708, 232, 687, 233,
	688, 689, 690, 691, 692, 0, 650, 0, 710, 235,
	236, 237, 711, 238, 239, 240, 0, 242, 241, 0,
	673, 712, 243, 244, 713, 0, 245, 246, 0, 0,
	247, 0, 248, 714, 249, 250, 252, 382, 251, 715,
	253, 254, 256, 255, 0, 0, 640, 669, 257, 693,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 716, 263, 717, 663, 264, 265, 266, 267, 268,
	0, 269, 664, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 694, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 718, 292, 293, 1559, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 657, 307,
	295, 296, 308, 719, 309, 695, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 696, 314, 315, 665, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 697, 698, 0, 0, 327, 328, 666, 667,
	638, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 658, 337, 0, 401, 338, 339, 340, 402, 699,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 643, 632, 633, 630, 631, 622,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 1558, 0, 660, 625,
	0, 0, 621, 187, 188, 189, 0, 675, 350, 676,
	190, 677, 678, 0, 191, 354, 355, 192, 193, 628,
	659, 679, 680, 358, 0, 194, 671, 0, 651, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 705, 205, 206, 2509, 0, 652,
	653, 655, 0, 654, 656, 208, 209, 411, 210, 681,
	211, 682, 683, 0, 212, 0, 213, 0, 214, 0,
	0, 674, 216, 0, 217, 0, 0, 0, 616, 218,
	220, 219, 221, 661, 662, 639, 706, 0, 0, 0,
	0, 0, 222, 223, 684, 685, 686, 0, 224, 0,
	225, 0, 0, 707, 0, 226, 672, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 668, 670, 0,
	0, 373, 234, 0, 231, 0, 708, 232, 687, 233,
	688, 689, 690, 691, 692, 0, 650, 0, 0, 235,
	236, 237, 711, 238, 239, 240, 0, 242, 241, 0,
	673, 712, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 714, 249, 250, 252, 382, 251, 715,
	253, 254, 256, 255, 611, 0, 640, 669, 257, 693,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 716, 263, 717, 663, 264, 265, 266, 267, 268,
	0, 269, 664, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 694, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 718, 292, 293, 617, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 657, 307,
	295, 296, 308, 0, 309, 695, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 696, 314, 315, 665, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 697, 698, 0, 0, 327, 328, 666, 667,
	638, 329, 330, 2508, 332, 0, 0, 333, 334, 335,
	336, 658, 337, 0, 401, 338, 339, 340, 402, 699,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 643, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 609, 0,
	184, 185, 0, 186, 0, 0, 618, 0, 660, 0,
	0, 0, 621, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	659, 356, 357, 358, 0, 194, 671, 0, 651, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 705, 205, 206, 207, 0, 652,
	653, 655, 0, 654, 656, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 661, 662, 0, 706, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 707, 0, 226, 672, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 668, 670, 709,
	0, 373, 234, 0, 231, 0, 708, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 710, 235,
	236, 237, 711, 238, 239, 240, 0, 242, 241, 0,
	673, 712, 243, 244, 713, 0, 245, 246, 0, 0,
	247, 0, 248, 714, 249, 250, 252, 382, 251, 715,
	253, 254, 256, 255, 0, 0, 0, 669, 257, 384,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 716, 263, 717, 663, 264, 265, 266, 267, 268,
	0, 269, 664, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 389, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 718, 292, 293, 390, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 657, 307,
	295, 296, 308, 719, 309, 392, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 394, 314, 315, 665, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 397, 398, 0, 0, 327, 328, 666, 667,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 658, 337, 0, 401, 338, 339, 340, 402, 403,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 923, 0, 926, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 2140, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 781, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 705, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 706, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 707, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 709,
	0, 373, 234, 0, 231, 0, 708, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 710, 235,
	236, 237, 711, 238, 239, 240, 0, 242, 241, 0,
	381, 712, 243, 244, 713, 0, 245, 246, 0, 0,
	247, 0, 248, 714, 249, 250, 252, 382, 251, 715,
	253, 254, 256, 255, 0, 0, 0, 383, 257, 384,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 716, 263, 717, 386, 264, 265, 266, 267, 268,
	0, 269, 387, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 389, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 718, 292, 293, 390, 294, 0, 298, 299, 300,
	301, 302, 140, 304, 391, 303, 305, 306, 0, 307,
	295, 296, 308, 719, 309, 392, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 394, 314, 315, 395, 0,
	318, 142, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 397, 398, 0, 0, 327, 328, 399, 400,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 401, 338, 339, 340, 930, 403,
	0, 0, 341, 0, 0, 0, 134, 342, 343, 344,
	345, 346, 594, 135, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 126, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 382, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 383, 257, 384,
	258, 259, 0, 260, 0, 759, 261, 0, 0, 262,
	385, 0, 263, 0, 386, 264, 265, 266, 267, 268,
	0, 269, 387, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 389, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 390, 294, 0, 298, 299, 300,
	301, 302, 140, 304, 391, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 392, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 394, 314, 315, 395, 0,
	318, 142, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 397, 398, 0, 0, 327, 328, 399, 400,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 401, 338, 339, 340, 930, 403,
	0, 0, 341, 0, 0, 0, 134, 342, 343, 344,
	345, 346, 0, 135, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 753, 0, 1198, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 382, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 383, 257, 384,
	258, 259, 0, 260, 0, 759, 261, 0, 0, 262,
	385, 0, 263, 0, 386, 264, 265, 266, 267, 268,
	0, 269, 387, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 389, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 390, 294, 0, 298, 299, 300,
	301, 302, 140, 304, 391, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 392, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 394, 314, 315, 395, 0,
	318, 142, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 397, 398, 0, 0, 327, 328, 399, 400,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 401, 338, 339, 340, 930, 403,
	0, 0, 341, 0, 0, 0, 134, 342, 343, 344,
	345, 346, 594, 135, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 753, 0, 1198, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 382, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 383, 257, 384,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 0, 263, 0, 386, 264, 265, 266, 267, 268,
	0, 269, 387, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 389, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 390, 294, 0, 298, 299, 300,
	301, 302, 140, 304, 391, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 392, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 394, 314, 315, 395, 0,
	318, 142, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 397, 398, 0, 0, 327, 328, 399, 400,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 401, 338, 339, 340, 930, 403,
	0, 0, 341, 0, 0, 0, 134, 342, 343, 344,
	345, 346, 1884, 135, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 126, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 382, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 383, 257, 384,
	258, 259, 0, 260, 0, 759, 261, 0, 0, 262,
	385, 0, 263, 0, 386, 264, 265, 266, 267, 268,
	0, 269, 387, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 389, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 390, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 392, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 394, 314, 315, 395, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 397, 398, 0, 0, 327, 328, 399, 400,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 401, 338, 339, 340, 402, 403,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 752, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 753, 0, 758, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 382, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 383, 257, 384,
	258, 259, 0, 260, 0, 759, 261, 0, 0, 262,
	385, 0, 263, 0, 386, 264, 265, 266, 267, 268,
	0, 269, 387, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 389, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 390, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 392, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 394, 314, 315, 395, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 397, 398, 0, 0, 327, 328, 399, 400,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 401, 338, 339, 340, 402, 403,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 753, 0, 758, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 411, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 381,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 382, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 383, 257, 384, 258,
	259, 0, 260, 0, 759, 261, 0, 0, 262, 385,
	0, 263, 0, 386, 264, 265, 266, 267, 268, 0,
	269, 387, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 389, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 390, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 392, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 397, 398, 0, 0, 327, 328, 399, 400, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 403, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 753, 0, 758, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 411, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 238, 239, 240, 0, 242, 241, 0, 381, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 382, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 383, 257, 384, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 385, 0,
	263, 0, 386, 264, 265, 266, 267, 268, 0, 269,
	387, 270, 388, 271, 0, 272, 273, 274, 275, 276,
	389, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 390, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 391, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 392, 393, 310, 0, 317, 311, 312,
	297, 313, 316, 394, 314, 315, 395, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 396,
	397, 398, 0, 0, 327, 328, 399, 400, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 401, 338, 339, 340, 402, 403, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 1231, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 411, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 381, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 382, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 383, 257, 384, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 385, 0, 263, 0,
	386, 264, 265, 266, 267, 268, 0, 269, 387, 270,
	388, 271, 0, 272, 273, 274, 275, 276, 389, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	390, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	391, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 392, 393, 310, 0, 317, 311, 312, 297, 313,
	316, 394, 314, 315, 395, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 396, 397, 398,
	0, 0, 327, 328, 399, 400, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	401, 338, 339, 340, 402, 403, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 1700, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 381, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 382, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 383, 257, 384, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 0, 263, 0, 386,
	264, 265, 266, 267, 268, 0, 269, 387, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 389, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 390,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	392, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 397, 398, 0,
	0, 327, 328, 399, 400, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 401,
	338, 339, 340, 402, 403, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 2056, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 411, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 381, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 382, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 383, 257, 384, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 385, 0, 263, 0, 386, 264,
	265, 266, 267, 268, 0, 269, 387, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 389, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 390, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 392,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 394,
	314, 315, 395, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 397, 398, 0, 0,
	327, 328, 399, 400, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 401, 338,
	339, 340, 402, 403, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 643, 632, 633,
	630, 631, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	1201, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	675, 350, 676, 190, 677, 678, 0, 191, 354, 355,
	192, 193, 0, 0, 679, 680, 358, 0, 194, 359,
	0, 781, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 705, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	411, 210, 681, 211, 682, 683, 0, 212, 0, 213,
	0, 214, 0, 0, 674, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 639, 706,
	0, 0, 0, 0, 0, 222, 223, 684, 685, 686,
	0, 224, 0, 225, 0, 0, 707, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 709, 0, 373, 234, 0, 231, 0, 708,
	232, 687, 233, 688, 689, 690, 691, 692, 0, 650,
	0, 710, 235, 236, 237, 711, 238, 239, 240, 0,
	242, 241, 0, 381, 712, 243, 244, 713, 0, 245,
	246, 0, 0, 247, 0, 248, 714, 249, 250, 252,
	382, 251, 715, 253, 254, 256, 255, 0, 0, 640,
	383, 257, 693, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 716, 263, 717, 386, 264, 265,
	266, 267, 268, 0, 269, 387, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 694, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 718, 292, 293, 390, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 719, 309, 695, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 696, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 697, 698, 0, 0, 327,
	328, 399, 400, 638, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 699, 0, 497, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 177,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 381, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 382,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 383,
	257, 384, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 385, 0, 263, 0, 386, 264, 265, 266,
	267, 268, 0, 269, 387, 270, 388, 271, 0, 272,
	273, 274, 275, 276, 389, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 390, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 391, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 392, 393, 310,
	0, 317, 311, 312, 297, 313, 316, 394, 314, 315,
	395, 0, 318, 176, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 396, 397, 398, 0, 0, 327, 328,
	399, 400, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 401, 338, 339, 340,
	402, 403, 0, 174, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 180, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 177, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 381, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 382, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 0, 263, 0, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 176, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 0, 181, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	180, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 177, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 238, 239, 240, 0, 242, 241, 0, 381, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 382, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 383, 257, 384, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 385, 0,
	263, 0, 386, 264, 265, 266, 267, 268, 0, 269,
	387, 270, 388, 271, 0, 272, 273, 274, 275, 276,
	389, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 390, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 391, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 392, 393, 310, 0, 317, 311, 312,
	297, 313, 316, 394, 314, 315, 395, 0, 318, 176,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 396,
	397, 398, 0, 0, 327, 328, 399, 400, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 401, 338, 339, 340, 402, 403, 0, 181,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 180, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 381, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 382, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 383, 257, 384, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 0, 263, 0, 386,
	264, 265, 266, 267, 268, 0, 269, 387, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 389, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 390,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	392, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 397, 398, 0,
	0, 327, 328, 399, 400, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 401,
	338, 339, 340, 402, 403, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 980, 0, 926,
	984, 0, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 781, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 705,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 706, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 707, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 709, 0, 373, 234, 0, 231,
	0, 708, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 710, 235, 236, 237, 711, 238, 239,
	240, 0, 242, 241, 0, 381, 712, 243, 244, 713,
	0, 245, 246, 0, 0, 247, 0, 248, 714, 249,
	250, 252, 382, 251, 715, 253, 254, 256, 255, 0,
	0, 0, 383, 257, 384, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 716, 263, 717, 386,
	264, 265, 266, 267, 268, 0, 269, 387, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 389, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 718, 292, 293, 390,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 0, 307, 295, 296, 308, 719, 309,
	392, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 397, 398, 0,
	0, 327, 328, 399, 400, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 401,
	338, 339, 340, 402, 403, 926, 984, 341, 0, 0,
	982, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 781,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 705, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 411, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 706, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 707, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	709, 0, 373, 234, 0, 231, 0, 708, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 710,
	235, 236, 237, 711, 238, 239, 240, 0, 242, 241,
	0, 381, 712, 243, 244, 713, 0, 245, 246, 0,
	0, 247, 0, 248, 714, 249, 250, 252, 382, 251,
	715, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 716, 263, 717, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 718, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	307, 295, 296, 308, 719, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 926, 984, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 781, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 705, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 411, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 706, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	707, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 709, 0, 373, 234,
	0, 231, 0, 708, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 710, 235, 236, 237, 711,
	238, 239, 240, 0, 242, 241, 0, 381, 712, 243,
	244, 713, 0, 245, 246, 0, 0, 247, 0, 248,
	714, 249, 250, 252, 382, 251, 715, 253, 254, 256,
	255, 0, 0, 0, 383, 257, 384, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 716, 263,
	717, 386, 264, 265, 266, 267, 268, 0, 269, 387,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 389,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 718, 292,
	293, 390, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 0, 307, 295, 296, 308,
	719, 309, 392, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 394, 314, 315, 395, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 397,
	398, 0, 0, 327, 328, 399, 400, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 401, 338, 339, 340, 402, 403, 926, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 781, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 705, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	411, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 706,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 707, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 709, 0, 373, 234, 0, 231, 0, 708,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 710, 235, 236, 237, 711, 238, 239, 240, 0,
	242, 241, 0, 381, 712, 243, 244, 713, 0, 245,
	246, 0, 0, 247, 0, 248, 714, 249, 250, 252,
	382, 251, 715, 253, 254, 256, 255, 0, 0, 0,
	383, 257, 384, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 716, 263, 717, 386, 264, 265,
	266, 267, 268, 0, 269, 387, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 389, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 718, 292, 293, 390, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 719, 309, 392, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 394, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 397, 398, 0, 0, 327,
	328, 399, 400, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 403, 181, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 1635, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 1633, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 411, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 1677, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	1638, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 1675, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 381,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 382, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 383, 257, 384, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	0, 263, 0, 386, 264, 265, 266, 267, 268, 0,
	269, 387, 270, 388, 271, 1637, 272, 273, 274, 275,
	276, 389, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 390, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 392, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 397, 398, 0, 0, 327, 328, 399, 400, 0,
	329, 330, 331, 332, 0, 1676, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 403, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 1635,
	194, 359, 0, 0, 1630, 195, 196, 197, 0, 199,
	200, 201, 198, 1633, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 1638, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 1629, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 381, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 382, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 383, 257, 384, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 0, 263, 0, 386,
	264, 265, 266, 267, 268, 0, 269, 387, 270, 388,
	271, 1637, 272, 273, 274, 275, 276, 389, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 390,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	392, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 397, 398, 0,
	0, 327, 328, 399, 400, 0, 329, 330, 331, 332,
	0, 1636, 333, 334, 335, 336, 0, 337, 0, 401,
	338, 339, 340, 402, 403, 0, 901, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 411, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 381, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 382, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 383, 257, 384, 258, 259, 0, 260, 0, 759,
	261, 0, 0, 262, 385, 0, 263, 0, 386, 264,
	265, 266, 267, 268, 0, 269, 387, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 389, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 390, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 392,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 394,
	314, 315, 395, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 397, 398, 0, 0,
	327, 328, 399, 400, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 401, 338,
	339, 340, 402, 403, 0, 765, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	411, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	767, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 381, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	382, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	383, 257, 384, 258, 259, 0, 260, 0, 759, 261,
	0, 0, 262, 385, 0, 263, 0, 386, 264, 265,
	266, 267, 268, 0, 269, 387, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 389, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 390, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 392, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 394, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 397, 398, 0, 0, 327,
	328, 399, 400, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 403, 0, 761, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 411,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 763,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 381, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 382,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 383,
	257, 384, 258, 259, 0, 260, 0, 759, 261, 0,
	0, 262, 385, 0, 263, 0, 386, 264, 265, 266,
	267, 268, 0, 269, 387, 270, 388, 271, 0, 272,
	273, 274, 275, 276, 389, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 390, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 391, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 392, 393, 310,
	0, 317, 311, 312, 297, 313, 316, 394, 314, 315,
	395, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 396, 397, 398, 0, 0, 327, 328,
	399, 400, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 401, 338, 339, 340,
	402, 403, 0, 428, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 427, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 411, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 381, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 382, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 0, 263, 0, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 426, 0, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 1618, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 411, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 381, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 382, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 383, 257, 384, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 0, 263,
	0, 386, 264, 265, 266, 267, 268, 0, 269, 387,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 389,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 390, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 392, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 394, 314, 315, 395, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 397,
	398, 0, 0, 327, 328, 399, 400, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 401, 338, 339, 340, 402, 403, 181, 2206, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	411, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 381, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	382, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	383, 257, 384, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 0, 263, 0, 386, 264, 265,
	266, 267, 268, 0, 269, 387, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 389, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 390, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 392, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 394, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 397, 398, 0, 0, 327,
	328, 399, 400, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 403, 181, 2206, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 411, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 381,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 382, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 383, 257, 384, 258,
	259, 0, 260, 0, 0, 2203, 0, 0, 262, 385,
	0, 263, 0, 386, 264, 265, 266, 267, 268, 0,
	269, 387, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 389, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 390, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 392, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 397, 398, 0, 0, 327, 328, 399, 400, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 403, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 381, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 382, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 383, 257, 384, 258, 259, 0, 260, 0,
	759, 261, 0, 0, 262, 385, 0, 263, 0, 386,
	264, 265, 266, 267, 268, 0, 269, 387, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 389, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 390,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	392, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 397, 398, 0,
	0, 327, 328, 399, 400, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 401,
	338, 339, 340, 402, 403, 0, 1387, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 411, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 381, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 382, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 383, 257, 384, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 385, 0, 263, 0, 386, 264,
	265, 266, 267, 268, 0, 269, 387, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 389, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 390, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 392,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 394,
	314, 315, 395, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 397, 398, 0, 0,
	327, 328, 399, 400, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 401, 338,
	339, 340, 402, 403, 0, 1385, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	411, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 381, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	382, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	383, 257, 384, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 0, 263, 0, 386, 264, 265,
	266, 267, 268, 0, 269, 387, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 389, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 390, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 392, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 394, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 397, 398, 0, 0, 327,
	328, 399, 400, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 403, 181, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 1367, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 411, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 381,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 382, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 383, 257, 384, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	0, 263, 0, 386, 264, 265, 266, 267, 268, 0,
	269, 387, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 389, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 390, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 392, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 397, 398, 0, 0, 327, 328, 399, 400, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 403, 0,
	523, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 959, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 411, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 238, 239, 240, 0, 242, 241, 0, 381, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 382, 525, 0, 253, 254,
	256, 255, 0, 0, 0, 383, 257, 384, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 385, 0,
	263, 0, 386, 264, 265, 266, 267, 268, 0, 269,
	387, 270, 388, 271, 0, 272, 273, 274, 275, 276,
	389, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 390, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 391, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 392, 393, 310, 0, 317, 311, 312,
	297, 313, 316, 394, 314, 315, 395, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 520,
	397, 398, 0, 0, 327, 328, 399, 400, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 401, 338, 339, 340, 402, 403, 0, 1245,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 411, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 1244, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 381, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 382, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 383, 257, 384, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 0, 263,
	0, 386, 264, 265, 266, 267, 268, 0, 269, 387,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 389,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 390, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 392, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 394, 314, 315, 395, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 397,
	398, 0, 0, 327, 328, 399, 400, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 401, 338, 339, 340, 402, 403, 0, 523, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 959,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 411, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 381, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 382, 525, 0, 253, 254, 256, 255,
	0, 0, 0, 383, 257, 384, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 385, 0, 263, 0,
	386, 264, 265, 266, 267, 268, 0, 269, 387, 270,
	388, 271, 0, 272, 273, 274, 275, 276, 389, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	390, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	391, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 392, 393, 310, 0, 317, 311, 312, 297, 313,
	316, 394, 314, 315, 395, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 520, 397, 398,
	0, 0, 327, 960, 399, 400, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	401, 338, 339, 340, 402, 403, 0, 523, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	514, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 381, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 382, 525, 0, 253, 254, 256, 255, 0,
	0, 0, 383, 257, 384, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 0, 263, 0, 386,
	264, 265, 266, 267, 268, 0, 269, 387, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 389, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 390,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 943, 306, 0, 307, 295, 296, 308, 0, 309,
	392, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 520, 397, 398, 0,
	0, 327, 328, 399, 400, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 401,
	338, 339, 340, 402, 403, 0, 919, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 411, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 918, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 381, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 382, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 383, 257, 384, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 385, 0, 263, 0, 386, 264,
	265, 266, 267, 268, 0, 269, 387, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 389, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 390, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 392,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 394,
	314, 315, 395, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 397, 398, 0, 0,
	327, 328, 399, 400, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 401, 338,
	339, 340, 402, 403, 0, 916, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	411, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	915, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 381, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	382, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	383, 257, 384, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 0, 263, 0, 386, 264, 265,
	266, 267, 268, 0, 269, 387, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 389, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 390, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 392, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 394, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 397, 398, 0, 0, 327,
	328, 399, 400, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 403, 0, 912, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 411,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 911,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 381, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 382,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 383,
	257, 384, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 385, 0, 263, 0, 386, 264, 265, 266,
	267, 268, 0, 269, 387, 270, 388, 271, 0, 272,
	273, 274, 275, 276, 389, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 390, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 391, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 392, 393, 310,
	0, 317, 311, 312, 297, 313, 316, 394, 314, 315,
	395, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 396, 397, 398, 0, 0, 327, 328,
	399, 400, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 401, 338, 339, 340,
	402, 403, 0, 909, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 411, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 908, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 381, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 382, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 0, 263, 0, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 0, 905, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 904, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 382, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 383, 257, 384,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 0, 263, 0, 386, 264, 265, 266, 267, 268,
	0, 269, 387, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 389, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 390, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 392, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 394, 314, 315, 395, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 397, 398, 0, 0, 327, 328, 399, 400,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 401, 338, 339, 340, 402, 403,
	181, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 184, 185, 893, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 411, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 381, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 382, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 383, 257, 384, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 385, 0, 263, 0,
	386, 264, 265, 266, 267, 268, 0, 269, 387, 270,
	388, 271, 0, 272, 273, 274, 275, 276, 389, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	390, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	391, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 392, 393, 310, 0, 317, 311, 312, 297, 313,
	316, 394, 314, 315, 395, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 396, 397, 398,
	0, 0, 327, 328, 399, 400, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	401, 338, 339, 340, 402, 403, 0, 891, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 890, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 381, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 382, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 383, 257, 384, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 0, 263, 0, 386,
	264, 265, 266, 267, 268, 0, 269, 387, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 389, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 390,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	392, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 397, 398, 0,
	0, 327, 328, 399, 400, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 401,
	338, 339, 340, 402, 403, 0, 887, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 411, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 238, 239, 240,
	0, 242, 241, 0, 381, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 382, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 383, 257, 384, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 385, 0, 263, 0, 386, 264,
	265, 266, 267, 268, 0, 269, 387, 270, 388, 271,
	0, 272, 273, 274, 275, 276, 389, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 390, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 391, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 392,
	393, 310, 0, 317, 311, 312, 297, 313, 316, 394,
	314, 315, 395, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 396, 397, 398, 0, 0,
	327, 328, 399, 400, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 401, 338,
	339, 340, 402, 403, 0, 885, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	411, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 381, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	382, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	383, 257, 384, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 0, 263, 0, 386, 264, 265,
	266, 267, 268, 0, 269, 387, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 389, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 390, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 392, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 394, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 397, 398, 0, 0, 327,
	328, 399, 400, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 403, 0, 881, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 411,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 883,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 238, 239, 240, 0, 242,
	241, 0, 381, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 382,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 383,
	257, 384, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 385, 0, 263, 0, 386, 264, 265, 266,
	267, 268, 0, 269, 387, 270, 388, 271, 0, 272,
	273, 274, 275, 276, 389, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 390, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 391, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 392, 393, 310,
	0, 317, 311, 312, 297, 313, 316, 394, 314, 315,
	395, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 396, 397, 398, 0, 0, 327, 328,
	399, 400, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 401, 338, 339, 340,
	402, 403, 0, 771, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 411, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 773, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 381, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 382, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 0, 263, 0, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 0, 769, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 411, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 238, 239, 240, 0, 242, 241, 0,
	381, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 382, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 383, 257, 384,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	385, 0, 263, 0, 386, 264, 265, 266, 267, 268,
	0, 269, 387, 270, 388, 271, 0, 272, 273, 274,
	275, 276, 389, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 390, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 391, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 392, 393, 310, 0, 317,
	311, 312, 297, 313, 316, 394, 314, 315, 395, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 396, 397, 398, 0, 0, 327, 328, 399, 400,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 401, 338, 339, 340, 402, 403,
	0, 523, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 514, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 411, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 381,
	0, 243, 244, 0, 0, 245, 513, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 382, 525, 0, 253,
	254, 256, 255, 0, 0, 0, 383, 257, 384, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	0, 263, 0, 386, 264, 265, 266, 267, 268, 0,
	269, 387, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 389, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 515, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 516, 306, 0, 307, 295,
	296, 308, 0, 309, 392, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	520, 397, 398, 0, 0, 327, 518, 399, 400, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 403, 0,
	505, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 411, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 238, 239, 240, 0, 242, 241, 0, 381, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 382, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 383, 257, 384, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 385, 0,
	263, 0, 386, 264, 265, 266, 267, 268, 0, 269,
	387, 270, 388, 271, 0, 272, 273, 274, 275, 276,
	389, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 390, 294, 0, 506, 299, 300, 301, 302,
	0, 304, 391, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 392, 393, 310, 0, 317, 311, 312,
	297, 313, 316, 394, 314, 315, 395, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 396,
	397, 398, 0, 0, 327, 328, 399, 400, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 401, 338, 339, 340, 402, 403, 0, 503,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 411, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 381, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 382, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 383, 257, 384, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 0, 263,
	0, 386, 264, 265, 266, 267, 268, 0, 269, 387,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 389,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 390, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 392, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 394, 314, 315, 395, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 397,
	398, 0, 0, 327, 328, 399, 400, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 401, 338, 339, 340, 402, 403, 0, 495, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 411, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 238,
	239, 240, 0, 242, 241, 0, 381, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 382, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 383, 257, 384, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 385, 0, 263, 0,
	386, 264, 265, 266, 267, 268, 0, 269, 387, 270,
	388, 271, 0, 272, 273, 274, 275, 276, 389, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	390, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	391, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 392, 393, 310, 0, 317, 311, 312, 297, 313,
	316, 394, 314, 315, 395, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 396, 397, 398,
	0, 0, 327, 328, 399, 400, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	401, 338, 339, 340, 402, 403, 0, 451, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 381, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 382, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 383, 257, 384, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 0, 263, 0, 386,
	264, 265, 266, 267, 268, 0, 269, 387, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 389, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 390,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	392, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 397, 398, 0,
	0, 327, 328, 399, 400, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 401,
	338, 339, 340, 402, 403, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 411, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 381, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 382, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 0, 263, 0, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 411, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 1931, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 381, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 382, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 383, 257, 384, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 0, 263,
	0, 386, 264, 265, 266, 267, 268, 0, 269, 387,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 389,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 390, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 392, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 394, 314, 315, 395, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 397,
	398, 0, 0, 327, 328, 399, 400, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 401, 338, 339, 340, 402, 403, 181, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	411, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	1929, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 381, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	382, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	383, 257, 384, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 0, 263, 0, 386, 264, 265,
	266, 267, 268, 0, 269, 387, 270, 388, 271, 0,
	272, 273, 274, 275, 276, 389, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 390, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 392, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 394, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 397, 398, 0, 0, 327,
	328, 399, 400, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 403, 181, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 411, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 1918, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 238, 239, 240, 0, 242, 241, 0, 381,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 382, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 383, 257, 384, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 385,
	0, 263, 0, 386, 264, 265, 266, 267, 268, 0,
	269, 387, 270, 388, 271, 0, 272, 273, 274, 275,
	276, 389, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 390, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 391, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 392, 393, 310, 0, 317, 311,
	312, 297, 313, 316, 394, 314, 315, 395, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	396, 397, 398, 0, 0, 327, 328, 399, 400, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 401, 338, 339, 340, 402, 403, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 411, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 238, 239,
	240, 0, 242, 241, 0, 381, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 382, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 383, 257, 384, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 385, 0, 263, 0, 386,
	264, 265, 266, 267, 268, 0, 269, 387, 270, 388,
	271, 0, 272, 273, 274, 275, 276, 389, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 390,
	294, 0, 506, 299, 300, 301, 302, 0, 304, 391,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	392, 393, 310, 0, 317, 311, 312, 297, 313, 316,
	394, 314, 315, 395, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 396, 397, 398, 0,
	0, 327, 328, 399, 400, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 401,
	338, 339, 340, 402, 403, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 1255, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 411, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 238, 239, 240, 0, 242, 241,
	0, 381, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 382, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 383, 257,
	384, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 385, 0, 263, 0, 386, 264, 265, 266, 267,
	268, 0, 269, 387, 270, 388, 271, 0, 272, 273,
	274, 275, 276, 389, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 390, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 391, 303, 305, 306, 0,
	0, 295, 296, 308, 0, 309, 392, 393, 310, 0,
	317, 311, 312, 297, 313, 316, 394, 314, 315, 395,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 396, 397, 398, 0, 0, 327, 328, 399,
	400, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 401, 338, 339, 340, 402,
	403, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 411, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	238, 239, 240, 0, 242, 241, 0, 381, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 382, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 383, 257, 384, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 385, 0, 263,
	0, 386, 264, 265, 266, 267, 268, 0, 269, 387,
	270, 388, 271, 0, 272, 273, 274, 275, 276, 389,
	735, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 390, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 391, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 392, 393, 310, 0, 317, 311, 312, 297,
	313, 316, 394, 314, 315, 395, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 396, 397,
	398, 0, 0, 327, 328, 399, 400, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 401, 338, 339, 340, 402, 403, 181, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	411, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 238, 239, 240, 0,
	242, 241, 0, 381, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	382, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	383, 257, 384, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 385, 0, 263, 0, 386, 264, 265,
	0, 267, 268, 0, 269, 387, 270, 388, 271, 0,
	272, 273, 274, 0, 276, 389, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 390, 0, 0,
	298, 299, 300, 301, 302, 0, 304, 391, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 392, 393,
	310, 0, 317, 311, 312, 297, 313, 316, 394, 314,
	315, 395, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 396, 397, 398, 0, 0, 327,
	328, 399, 400, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 401, 338, 339,
	340, 402, 403, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 1052, 1053, 0, 1082, 1083,
	1084, 1092, 1093, 1094, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 1055, 0,
	0, 1096, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1052, 1053, 0, 1082, 1083, 1084, 1092, 1093, 1094,
	0, 0, 1054, 0, 0, 0, 0, 1085, 1074, 0,
	0, 0, 0, 0, 1055, 1071, 0, 1096, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1054, 0,
	0, 0, 0, 0, 1074, 0, 0, 0, 0, 0,
	0, 1071, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1077, 1078, 1079, 1080, 0, 0, 0,
	0, 0, 1060, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1089, 1097, 0, 0, 0, 1077,
	1078, 1079, 1080, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1087,
	1089, 1097, 0, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1095,
	1052, 1053, 0, 1082, 1083, 1084, 1092, 1093, 1094, 0,
	0, 0, 1086, 0, 0, 1087, 1085, 0, 0, 0,
	0, 0, 1075, 1055, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 1054, 1086, 0,
	0, 0, 0, 1074, 0, 0, 0, 0, 0, 0,
	1071, 1076, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 0, 1081, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1076, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1077, 1078,
	1079, 1080, 0, 0, 1090, 0, 0, 1060, 0, 0,
	0, 0, 1052, 1053, 0, 1082, 1083, 1084, 1092, 1093,
	1094, 0, 0, 0, 0, 0, 0, 0, 1085, 1089,
	1097, 0, 0, 0, 0, 1055, 0, 1088, 1096, 0,
	1066, 1067, 1073, 1072, 1068, 1069, 1070, 1091, 1095, 1065,
	1063, 1064, 1056, 1057, 1058, 1059, 1061, 1062, 0, 1054,
	0, 0, 0, 0, 1087, 1074, 1867, 0, 0, 0,
	0, 1075, 1071, 1088, 0, 0, 1066, 1067, 1073, 1072,
	1068, 1069, 1070, 1091, 0, 1065, 1063, 1064, 1056, 1057,
	1058, 1059, 1061, 1062, 0, 0, 0, 1086, 0, 0,
	0, 0, 1866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1077, 1078, 1079, 1080, 0, 0, 0, 0, 0, 1060,
	0, 1081, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1076, 0, 0, 0,
	0, 1089, 1097, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	1095, 1052, 1053, 0, 1082, 1083, 1084, 1092, 1093, 1094,
	0, 0, 0, 0, 0, 0, 1087, 1085, 0, 0,
	0, 0, 0, 1075, 1055, 0, 0, 1096, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1052, 1053, 0,
	1082, 1083, 1084, 1092, 1093, 1094, 0, 0, 1054, 1086,
	0, 0, 0, 1085, 1074, 0, 0, 0, 0, 0,
	1055, 1071, 1088, 1096, 0, 1066, 1067, 1073, 1072, 1068,
	1069, 1070, 1091, 0, 1065, 1063, 1064, 1056, 1057, 1058,
	1059, 1061, 1062, 1081, 1054, 0, 0, 0, 0, 0,
	1074, 1818, 0, 0, 0, 0, 0, 1071, 1076, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1077,
	1078, 1079, 1080, 0, 0, 1090, 0, 0, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 1097, 0, 0, 0, 1077, 1078, 1079, 1080, 0,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1087, 1089, 1097, 0, 0,
	0, 0, 1075, 0, 1088, 0, 0, 1066, 1067, 1073,
	1072, 1068, 1069, 1070, 1091, 1095, 1065, 1063, 1064, 1056,
	1057, 1058, 1059, 1061, 1062, 0, 0, 0, 1086, 2478,
	0, 1087, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1076, 0, 0,
	0, 1052, 1053, 0, 1082, 1083, 1084, 1092, 1093, 1094,
	0, 0, 0, 0, 1090, 0, 0, 1085, 1081, 0,
	0, 0, 0, 0, 1055, 0, 0, 1096, 0, 0,
	0, 0, 0, 1076, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1054, 0,
	1090, 0, 1826, 1827, 1074, 1844, 1845, 1846, 0, 0,
	0, 1071, 0, 0, 0, 0, 0, 0, 2215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 1066, 1067, 1073, 1072,
	1068, 1069, 1070, 1091, 0, 1065, 1063, 1064, 1056, 1057,
	1058, 1059, 1061, 1062, 0, 1841, 0, 0, 2429, 1077,
	1078, 1079, 1080, 0, 0, 0, 0, 0, 1060, 1088,
	0, 0, 1066, 1067, 1073, 1072, 1068, 1069, 1070, 1091,
	0, 1065, 1063, 1064, 1056, 1057, 1058, 1059, 1061, 1062,
	1089, 1097, 0, 0, 2383, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1095,
	1052, 1053, 0, 1082, 1083, 1084, 1092, 1093, 1094, 1832,
	0, 0, 0, 0, 0, 1087, 1085, 0, 0, 0,
	0, 0, 1075, 1055, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1052, 1053, 0, 1082,
	1083, 1084, 1092, 1093, 1094, 0, 0, 1054, 1086, 0,
	1847, 0, 1085, 1074, 0, 0, 0, 0, 0, 1055,
	1071, 0, 1096, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1842, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 1054, 0, 0, 0, 0, 0, 1074,
	0, 0, 0, 0, 0, 0, 1071, 1076, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1077, 1078,
	1079, 1080, 0, 0, 1090, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1089,
	1097, 0, 0, 0, 1077, 1078, 1079, 1080, 1843, 0,
	0, 0, 0, 1060, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1087, 1089, 1097, 0, 0, 0,
	0, 1075, 0, 1088, 0, 0, 1066, 1067, 1073, 1072,
	1068, 1069, 1070, 1091, 1095, 1065, 1063, 1064, 1056, 1057,
	1058, 1059, 1061, 1062, 0, 0, 0, 1086, 2353, 0,
	1087, 0, 0, 0, 0, 0, 0, 1075, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1838, 1839, 1840,
	0, 1081, 0, 1086, 0, 0, 1837, 1835, 1836, 1828,
	1829, 1830, 1831, 1833, 1834, 0, 1076, 0, 0, 0,
	1052, 1053, 0, 1082, 1083, 1084, 1092, 1093, 1094, 0,
	0, 0, 0, 1090, 0, 0, 1085, 1081, 0, 0,
	0, 0, 0, 1055, 0, 0, 1096, 0, 0, 0,
	0, 0, 1076, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1054, 0, 1090,
	0, 1826, 1827, 1074, 1844, 1845, 1846, 0, 0, 0,
	1071, 0, 0, 0, 0, 0, 0, 2029, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1088, 0, 0, 1066, 1067, 1073, 1072, 1068,
	1069, 1070, 1091, 0, 1065, 1063, 1064, 1056, 1057, 1058,
	1059, 1061, 1062, 0, 1841, 0, 0, 2348, 1077, 1078,
	1079, 1080, 0, 0, 0, 0, 0, 1060, 1088, 0,
	0, 1066, 1067, 1073, 1072, 1068, 1069, 1070, 1091, 0,
	1065, 1063, 1064, 1056, 1057, 1058, 1059, 1061, 1062, 1089,
	1097, 0, 0, 2344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1095, 1052,
	1053, 0, 1082, 1083, 1084, 1092, 1093, 1094, 1832, 0,
	0, 0, 0, 0, 1087, 1085, 0, 0, 0, 0,
	0, 1075, 1055, 0, 0, 1096, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 1053, 0, 1082, 1083,
	1084, 1092, 1093, 1094, 0, 0, 1054, 1086, 0, 1847,
	0, 1085, 1074, 0, 0, 0, 0, 0, 1055, 1071,
	0, 1096, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1842, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 1054, 0, 0, 0, 0, 0, 1074, 0,
	0, 0, 0, 0, 0, 1071, 1076, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1077, 1078, 1079,
	1080, 0, 0, 1090, 0, 0, 1060, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 1097,
	0, 0, 0, 1077, 1078, 1079, 1080, 1843, 0, 0,
	0, 0, 1060, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1087, 1089, 1097, 0, 0, 0, 0,
	1075, 0, 1088, 0, 0, 1066, 1067, 1073, 1072, 1068,
	1069, 1070, 1091, 1095, 1065, 1063, 1064, 1056, 1057, 1058,
	1059, 1061, 1062, 0, 0, 0, 1086, 2282, 0, 1087,
	0, 0, 0, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1838, 1839, 1840, 0,
	1081, 0, 1086, 0, 0, 1837, 1835, 1836, 1828, 1829,
	1830, 1831, 1833, 1834, 0, 1076, 0, 0, 0, 1052,
	1053, 0, 1082, 1083, 1084, 1092, 1093, 1094, 0, 0,
	0, 0, 1090, 0, 0, 1085, 1081, 0, 0, 0,
	0, 0, 1055, 0, 0, 1096, 0, 0, 0, 0,
	0, 1076, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1054, 0, 1090, 0,
	1826, 1827, 1074, 1844, 1845, 1846, 0, 0, 0, 1071,
	0, 0, 0, 0, 0, 0, 2028, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 1066, 1067, 1073, 1072, 1068, 1069,
	1070, 1091, 0, 1065, 1063, 1064, 1056, 1057, 1058, 1059,
	1061, 1062, 0, 1841, 0, 0, 2248, 1077, 1078, 1079,
	1080, 0, 0, 0, 0, 0, 1060, 1088, 0, 0,
	1066, 1067, 1073, 1072, 1068, 1069, 1070, 1091, 0, 1065,
	1063, 1064, 1056, 1057, 1058, 1059, 1061, 1062, 1089, 1097,
	0, 0, 2247, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1095, 1052, 1053,
	0, 1082, 1083, 1084, 1092, 1093, 1094, 1832, 0, 0,
	0, 0, 0, 1087, 1085, 0, 0, 0, 0, 0,
	1075, 1055, 0, 0, 1096, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1052, 1053, 0, 1082, 1083, 1084,
	1092, 1093, 1094, 0, 0, 1054, 1086, 0, 1847, 0,
	1085, 1074, 0, 0, 0, 0, 0, 1055, 1071, 0,
	1096, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1842, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 1054, 0, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 1071, 1076, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1077, 1078, 1079, 1080,
	0, 0, 1090, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1097, 0,
	0, 0, 1077, 1078, 1079, 1080, 1843, 0, 0, 0,
	0, 1060, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1087, 1089, 1097, 0, 0, 0, 0, 1075,
	0, 1088, 0, 0, 1066, 1067, 1073, 1072, 1068, 1069,
	1070, 1091, 1095, 1065, 1063, 1064, 1056, 1057, 1058, 1059,
	1061, 1062, 0, 0, 0, 1086, 2212, 0, 1087, 0,
	0, 0, 0, 0, 0, 1075, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1838, 1839, 1840, 0, 1081,
	0, 1086, 0, 0, 1837, 1835, 1836, 1828, 1829, 1830,
	1831, 1833, 1834, 0, 1076, 0, 0, 0, 1052, 1053,
	0, 1082, 1083, 1084, 1092, 1093, 1094, 0, 0, 0,
	0, 1090, 0, 0, 1085, 1081, 0, 0, 0, 0,
	0, 1055, 0, 0, 1096, 0, 0, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1054, 0, 1090, 0, 1826,
	1827, 1074, 1844, 1845, 1846, 0, 0, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 1066, 1067, 1073, 1072, 1068, 1069, 1070,
	1091, 0, 1065, 1063, 1064, 1056, 1057, 1058, 1059, 1061,
	1062, 0, 1841, 0, 0, 2059, 1077, 1078, 1079, 1080,
	0, 0, 0, 0, 0, 1060, 1088, 0, 0, 1066,
	1067, 1073, 1072, 1068, 1069, 1070, 1091, 0, 1065, 1063,
	1064, 1056, 1057, 1058, 1059, 1061, 1062, 1089, 1097, 0,
	0, 2035, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 1052, 1053, 0,
	1082, 1083, 1084, 1092, 1093, 1094, 1832, 0, 0, 0,
	0, 0, 1087, 1085, 0, 0, 0, 0, 0, 1075,
	1055, 0, 0, 1096, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1052, 1053, 0, 1082, 1083, 1084, 1092,
	1093, 1094, 0, 0, 1054, 1086, 0, 1847, 0, 1085,
	1074, 0, 0, 0, 0, 0, 1055, 1071, 0, 1096,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1842, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	1054, 0, 0, 0, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 1071, 1076, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1077, 1078, 1079, 1080, 0,
	0, 1090, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 1097, 0, 0,
	0, 1077, 1078, 1079, 1080, 1843, 0, 0, 0, 0,
	1060, 2541, 0, 0, 0, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1087, 1089, 1097, 0, 0, 0, 0, 1075, 0,
	1088, 0, 0, 1066, 1067, 1073, 1072, 1068, 1069, 1070,
	1091, 1095, 1065, 1063, 1064, 1056, 1057, 1058, 1059, 1061,
	1062, 0, 0, 0, 1086, 1497, 0, 1087, 0, 0,
	0, 0, 0, 0, 1075, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1838, 1839, 1840, 0, 1081, 0,
	1086, 0, 0, 1837, 1835, 1836, 1828, 1829, 1830, 1831,
	1833, 1834, 0, 1076, 0, 0, 2540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 0, 1081, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1076,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 1052, 1053, 0, 1082, 1083, 1084,
	1092, 1093, 1094, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 1055, 0, 1088,
	1096, 0, 1066, 1067, 1073, 1072, 1068, 1069, 1070, 1091,
	0, 1065, 1063, 1064, 1056, 1057, 1058, 1059, 1061, 1062,
	0, 1054, 1788, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 1071, 1088, 0, 0, 1066, 1067,
	1073, 1072, 1068, 1069, 1070, 1091, 0, 1065, 1063, 1064,
	1056, 1057, 1058, 1059, 1061, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1077, 1078, 1079, 1080, 0, 0, 0, 0,
	0, 1060, 0, 1858, 0, 0, 1857, 0, 0, 1052,
	1053, 0, 1082, 1083, 1084, 1092, 1093, 1094, 0, 0,
	0, 0, 0, 1089, 1097, 1085, 0, 0, 0, 0,
	1761, 0, 1055, 0, 0, 1096, 0, 0, 0, 0,
	0, 0, 1095, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1054, 0, 1087, 0,
	0, 0, 1074, 0, 0, 1075, 0, 0, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 1762, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1077, 1078, 1079,
	1080, 0, 0, 0, 0, 1081, 1060, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 0, 0, 1089, 1097,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	0, 0, 1594, 0, 0, 0, 0, 1095, 1052, 1053,
	0, 1082, 1083, 1084, 1092, 1093, 1094, 0, 0, 0,
	0, 0, 0, 1087, 1085, 0, 0, 0, 1593, 0,
	1075, 1055, 0, 0, 1096, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1054, 1086, 0, 0, 0,
	0, 1074, 0, 0, 0, 0, 1088, 0, 1071, 1066,
	1067, 1073, 1072, 1068, 1069, 1070, 1091, 0, 1065, 1063,
	1064, 1056, 1057, 1058, 1059, 1061, 1062, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1077, 1078, 1079, 1080,
	0, 0, 1090, 0, 0, 1060, 0, 0, 0, 0,
	1052, 1053, 0, 1082, 1083, 1084, 1092, 1093, 1094, 0,
	0, 0, 0, 0, 0, 0, 1085, 1089, 1097, 0,
	0, 0, 0, 1055, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1054, 0, 0,
	0, 0, 1087, 1074, 0, 0, 0, 0, 0, 1075,
	1071, 1088, 0, 0, 1066, 1067, 1073, 1072, 1068, 1069,
	1070, 1091, 0, 1065, 1063, 1064, 1056, 1057, 1058, 1059,
	1061, 1062, 0, 0, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1077, 1078,
	1079, 1080, 0, 0, 0, 0, 0, 1060, 0, 1081,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1076, 0, 0, 0, 0, 1089,
	1097, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 0, 0, 0, 0, 1095, 1052,
	1053, 0, 1082, 1083, 1084, 1092, 1093, 1094, 0, 0,
	0, 0, 0, 0, 1087, 1085, 0, 0, 0, 0,
	0, 1075, 1055, 0, 0, 1096, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1054, 1086, 591, 0,
	0, 0, 1074, 0, 0, 0, 0, 0, 0, 1071,
	1088, 0, 0, 1066, 1067, 1073, 1072, 1068, 1069, 1070,
	1091, 0, 1065, 1063, 1064, 1056, 1057, 1058, 1059, 1061,
	1062, 1081, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1076, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1077, 1078, 1079,
	1080, 0, 0, 1090, 0, 0, 1060, 0, 0, 0,
	0, 1052, 1053, 0, 1082, 1083, 1084, 1092, 1093, 1094,
	0, 0, 0, 0, 0, 0, 0, 1085, 1089, 1097,
	0, 0, 0, 0, 1055, 0, 0, 1096, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1054, 0,
	0, 0, 0, 1087, 1074, 0, 0, 0, 0, 0,
	1075, 1071, 1088, 0, 0, 1066, 1067, 1073, 1072, 1068,
	1069, 1070, 1091, 0, 1065, 1063, 1064, 1056, 1057, 1058,
	1059, 1061, 1062, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1077,
	1078, 1079, 1080, 0, 0, 0, 0, 0, 1060, 0,
	1081, 0, 0, 1864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 0, 0, 0, 0,
	1089, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 1095,
	1052, 1053, 0, 1082, 1083, 1084, 1092, 1093, 1094, 0,
	0, 0, 0, 0, 0, 1087, 1085, 0, 0, 2039,
	1859, 0, 1075, 1055, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1054, 1086, 0,
	0, 0, 0, 1074, 0, 0, 0, 0, 0, 0,
	1071, 1088, 0, 0, 1066, 1067, 1073, 1072, 1068, 1069,
	1070, 1091, 0, 1065, 1063, 1064, 1056, 1057, 1058, 1059,
	1061, 1062, 1081, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1076, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1077, 1078,
	1079, 1080, 0, 0, 1090, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1089,
	1097, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1095, 1052,
	1053, 0, 1082, 1083, 1084, 1092, 1093, 1094, 0, 0,
	0, 0, 0, 0, 1087, 1085, 0, 0, 0, 0,
	0, 1075, 1055, 1088, 0, 1096, 1066, 1067, 1073, 1072,
	1068, 1069, 1070, 1091, 0, 1065, 1063, 1064, 1056, 1057,
	1058, 1059, 1061, 1062, 0, 0, 1054, 1086, 0, 0,
	0, 0, 1074, 0, 0, 0, 0, 0, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1076, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1077, 1078, 1079,
	1080, 0, 0, 1090, 0, 0, 1060, 0, 0, 0,
	0, 1052, 1053, 0, 1082, 1083, 1084, 1092, 1093, 1094,
	0, 0, 0, 0, 0, 0, 0, 1085, 1089, 1097,
	0, 1817, 0, 0, 1055, 0, 0, 1096, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1054, 0,
	0, 0, 0, 1087, 1074, 0, 0, 0, 0, 0,
	1075, 1071, 1088, 0, 0, 1066, 1067, 1073, 1072, 1068,
	1069, 1070, 1091, 0, 1065, 1063, 1064, 1056, 1057, 1058,
	1059, 1061, 1062, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1824,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1077,
	1078, 1079, 1080, 0, 0, 0, 0, 0, 1060, 0,
	1081, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 0, 0, 0, 0,
	1089, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 1095,
	1052, 1053, 0, 1082, 1083, 1084, 1092, 1093, 1094, 0,
	0, 0, 0, 0, 0, 1087, 1085, 0, 0, 0,
	0, 0, 1075, 1055, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1052, 1053, 0, 1082,
	1083, 1084, 1092, 1093, 1094, 0, 0, 1054, 1086, 0,
	0, 0, 0, 1074, 0, 0, 0, 0, 0, 1055,
	1071, 1088, 1096, 0, 1066, 1067, 1073, 1072, 1068, 1069,
	1070, 1091, 0, 1065, 1063, 1064, 1056, 1057, 1058, 1059,
	1061, 1062, 1081, 1054, 0, 0, 0, 0, 0, 1074,
	0, 0, 0, 0, 0, 0, 1071, 1076, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1077, 1078,
	1079, 1080, 0, 0, 1090, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1089,
	1097, 0, 0, 0, 1077, 1078, 1079, 1080, 0, 0,
	0, 0, 0, 1060, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1087, 1089, 1097, 0, 0, 0,
	0, 1075, 0, 1088, 0, 0, 1066, 1067, 1073, 1072,
	1068, 1069, 1070, 1091, 1095, 1065, 1063, 1064, 1056, 1057,
	1058, 1059, 1061, 1062, 0, 0, 0, 1086, 0, 40,
	1087, 0, 0, 0, 0, 0, 0, 1075, 0, 0,
	41, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 1076, 46, 0, 51,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 1081, 0, 0,
	54, 0, 0, 0, 56, 0, 0, 0, 62, 0,
	0, 132, 1076, 0, 0, 63, 0, 122, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1088, 0, 0, 1066, 1067, 1073, 1072, 1068,
	1069, 1070, 1091, 0, 1065, 1063, 1064, 1056, 1057, 1058,
	1059, 1061, 1062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1088, 0,
	0, 1066, 1067, 1073, 1072, 1068, 1069, 1070, 1091, 0,
	1065, 1063, 1064, 1056, 1057, 1058, 1059, 1061, 1062, 0,
	0, 0, 1052, 1053, 0, 1082, 1083, 1084, 1092, 1093,
	1094, 0, 0, 0, 0, 67, 0, 0, 0, 0,
	0, 68, 0, 0, 0, 1055, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 453, 0,
	75, 127, 69, 0, 70, 0, 71, 0, 133, 1054,
	0, 0, 0, 72, 0, 1074, 0, 0, 140, 40,
	0, 0, 1071, 0, 40, 83, 0, 0, 103, 0,
	41, 0, 0, 0, 0, 41, 0, 130, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 142, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 51,
	1077, 1078, 1079, 1080, 51, 0, 128, 0, 0, 1060,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 62, 135,
	0, 1089, 1097, 62, 0, 63, 0, 477, 64, 0,
	63, 0, 477, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 4, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1087, 0, 0, 0,
	0, 66, 0, 1075, 0, 0, 66, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 0, 0, 0, 0, 67, 0, 0, 0, 0,
	67, 0, 0, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 69, 1298, 70, 0, 127, 69, 0, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 0,
	0, 0, 0, 140, 0, 476, 0, 0, 103, 0,
	476, 0, 0, 103, 0, 0, 1306, 1295, 1325, 1286,
	1316, 1315, 0, 0, 1288, 1287, 0, 142, 0, 0,
	1327, 1326, 142, 0, 1088, 0, 0, 1066, 1067, 1073,
	1072, 1068, 1069, 1070, 1091, 0, 1065, 1063, 1064, 1056,
	1057, 1058, 1059, 1061, 1062, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 1321, 141,
	1313, 1312, 134, 0, 0, 0, 1298, 134, 0, 135,
	1311, 0, 0, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 454, 1310, 1308, 1309, 0, 126, 0, 1306,
	1295, 1325, 1286, 1316, 1315, 0, 0, 1288, 1287, 0,
	0, 0, 0, 1327, 1326, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 0, 0, 1299, 1297, 1300,
	1301, 1302, 1303, 1304, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 0, 1313, 1312, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1314, 0,
	0, 0, 1296, 0, 0, 0, 1310, 1308, 1309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 544, 0, 570,
	0, 1307, 0, 1294, 0, 1422, 1420, 1421, 1424, 1423,
	1299, 1297, 1300, 1301, 1302, 1303, 1304, 549, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 547,
	0, 0, 0, 1291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1305, 1292, 0, 0, 0, 1290,
	548, 0, 0, 0, 1329, 550, 0, 0, 0, 0,
	0, 1314, 0, 556, 557, 1296, 0, 1289, 566, 0,
	0, 1322, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 571, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1293, 1307, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 569, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1291, 0, 0, 0,
	552, 0, 0, 0, 0, 0, 0, 1305, 1292, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 553, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1289, 0, 0, 0, 1322, 1323, 560, 0, 0, 555,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 0, 0, 0, 1293, 0, 0, 0,
	0, 1328, 0, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 546, 563, 573, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 0, 0,
	0, 568, 0, 0, 0, 0, 574, 0, 0, 0,
	0, 561, 565, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 567,
}
var sqlPact = [...]int{

	42506, -1000, -6, -1000, -1000, -1000, 171, -1000, -1000, -1000,
	-1000, 170, 168, 167, -1000, 164, 161, 159, 155, 154,
	153, 152, 150, 149, 147, 146, -1000, 145, -1000, -1000,
	-1000, -1000, 144, 142, 141, 137, 136, 134, 131, -1000,
	1289, 21991, 130, 127, 1323, -1000, 35861, 125, 124, 123,
	120, 1177, 119, 111, 26051, 921, 1155, 110, 109, 107,
	105, 104, 1140, 35525, 42756, 2435, 1137, 1688, 35186, 21652,
	1682, 2211, 34847, -1000, -1000, 34508, 103, 102, 101, 100,
	97, -1000, -1000, 34169, 95, 82, 80, 79, 78, 75,
	65, 58, 56, 53, 52, 51, 46, 45, -1000, 44,
	37, 36, -1000, 43245, 33, 30, 27, 1105, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 844, 135, -1000, 967, 401, 1828, 8011, 1108,
	1104, 1102, 1070, 1083, 37877, 35861, 26, -106, 25, -1000,
	1949, 677, 19220, 42506, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25712, 25373,
	33830, 33491, 6260, 744, -1000, -18, 22665, 35861, -1000, 89,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 14670, 14319, 566,
	89, -1000, -1000, -1000, -1000, -1000, 33152, -1000, 32813, 32474,
	1483, 32135, -1000, -1000, -1000, -1000, 31796, -1000, -1000, 1742,
	1644, 1633, 25034, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 31460, 31121, 30782, 30443, 30104,
	499, -1000, -1000, -1000, 17470, -1000, -1000, -1000, -1000, 23,
	-1000, 22, -1000, 21, 20, 18, 17, -1000, 15, 13,
	-1000, 12, 11, -1000, 4, -4, 29765, 829, 1258, -1000,
	-1000, -10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35861, -1000, 15370, -1000, 498, -1000, 1639, -1000, 15370, -1000,
	1256, -1000, -1000, -1000, -1000, -1000, 35861, -1000, -1000, -1000,
	-1000, -1000, -1000, 2182, 1187, 497, 29426, -1000, 1313, -1000,
	590, 779, -1000, -1000, -1000, 9061, 193, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1545, 23015, 1211, 1979,
	1740, 2179, 1312, 1738, 1732, 1727, 1723, 1709, 2178, 916,
	2177, 1763, 1065, 2176, 1695, 1277, 684, 2171, 1635, 1631,
	-1000, -1000, -1000, -1000, 924, -1000, -1000, -1000, 27395, -1000,
	-1000, 783, 902, 967, -1000, -1000, -1000, 1349, 1924, 1924,
	1924, 2014, 308, 298, -1000, 135, -1000, 1520, -1000, 1184,
	-1000, -1000, -1000, -1000, -1000, 42310, -1000, -1000, 15370, 15370,
	15370, 15370, 15370, 1053, 528, -1000, 496, 487, 7310, -1000,
	-1000, 2141, -1000, -1000, -1000, 312, -1000, -1000, 15370, 89,
	-1000, -1000, -1000, -1000, 484, 2155, -1000, 678, -1000, -1000,
	-1000, 596, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1684, 481, 480, 479, -1000, 478, -1000, -1000, 477,
	476, 474, 473, 472, 468, 467, 466, 465, 464, 463,
	462, 461, 460, 459, 974, -1000, 622, -1000, -1000, 622,
	622, -1000, 446, 446, 447, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 446, -1000, -1000, -1000, 569, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	458, 1270, -1000, -1000, 1270, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 743, 37205, -23, 35861, -1000, 456, -23, -1000,
	-1000, 455, -1000, 10461, 10461, -1000, -1000, -1000, -1000, -1000,
	9761, 1577, -1000, 3766, -208, 313, 570, -1000, 18170, 20964,
	-1000, -1000, 1403, 1822, 807, -1000, 960, 1821, 538, -1000,
	1038, -1000, 831, 1819, -183, 1731, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 23351, 22665, -18, -31, -1000, -1000, -1000,
	5910, 42310, -1000, 42310, -1000, 816, 19918, 89, -1000, -1000,
	-1000, -1000, 453, 1328, 611, -1000, 317, -1000, 29087, 611,
	1309, -1000, -1000, -1000, 27395, -1000, 35861, -1000, 35861, -1000,
	849, -1000, 37541, 115, 1806, -1000, -1000, 115, 1799, -1000,
	113, 1796, -1000, -1000, 1241, 1786, -1000, -31, 1785, -1000,
	-1000, 15370, -35, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	677, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 28748, 22328, 1419, 607, 42310, 2052, 43102,
	23351, 42310, 22328, -1000, -1000, 35861, -1000, 15370, -1000, 2051,
	1296, -24, -1000, -1000, -1000, -1000, -1000, 1383, 1411, 732,
	1429, 9061, 9061, 1877, -1000, 185, 6260, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 28409, -1000, -1000, -1000, 1180,
	35861, -1000, -1000, 1664, -1000, 22328, 35861, -1000, 35861, -1000,
	35861, -1000, 35861, -1000, 35861, -1000, -1000, -1000, -1000, -1000,
	3470, -1000, 1654, -1000, -1000, 35861, -1000, 1382, -1000, -1000,
	-1000, 28073, 27734, -1000, 945, 781, -1000, -1000, 116, -1000,
	23351, 1943, 589, -1000, 1349, -1000, 1261, 1438, 13968, 1433,
	15370, 135, -1000, -1000, 135, 135, 8711, -1000, -1000, -1000,
	35861, -1000, 43009, 43102, 6260, 762, 15370, 15370, 15370, 15370,
	15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
	15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370,
	15370, 15370, 15370, 15370, 15370, 15370, 15370, 15370, 1396, 15370,
	736, 15370, 15370, 15370, 15370, 1375, 1118, 444, 1169, -1000,
	2102, 2102, 2102, 42346, 42346, 423, 528, -1000, 15370, -1000,
	88, 15370, 298, 40548, -22, 6960, -1000, -1000, -1000, 13618,
	619, 42310, 89, 4584, -1000, 2140, 1228, 1696, 1538, 452,
	573, 572, 571, 493, 15370, 15370, 13268, 12917, 12566, 16070,
	12215, 15370, 7660, 15370, 15370, 15370, 15370, 11864, 11513, -1000,
	450, -1000, -1000, -1000, -1000, 2138, -1000, -1000, 2135, -1000,
	759, 758, 2134, -1000, -24, -1000, 37205, -1000, 35861, -23,
	2049, 35861, -1000, 84, -1000, 41308, -1000, 84, -36, -1000,
	1446, 1412, 19569, 1363, 1064, 1064, 1064, -1000, 449, 516,
	570, 5191, 11162, -1000, 26387, 1069, 208, 297, 17820, 1577,
	-1000, 35861, -34, 970, -1000, 24695, 1971, 1908, 1900, 27395,
	2031, 88, 1934, 1629, 735, 27395, 1927, 734, 2029, 88,
	1622, 733, 35861, 6260, 1923, 565, -1000, 35861, -1000, -1000,
	-1000, 1620, -37, -1000, -1000, 24359, 2046, 1783, -1000, 1005,
	-1000, 2044, 35861, 1248, 1306, -1000, -1000, 776, 1780, 615,
	300, 2041, 300, 20266, -1000, 35861, -1000, 35861, -1000, -1000,
	35861, -1000, 35861, -1000, 35861, 35861, -1000, 35861, 35861, -42,
	42310, 42761, 24023, 731, -1000, 659, 24359, 471, -43, -1000,
	864, -1000, -1000, -1000, -1000, 191, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	447, 974, 446, 446, 446, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 569, -1000, -1000, 622, 622, 622, -1000, -1000,
	-114, -1000, 1591, 595, -45, 687, -24, -1000, 1270, -1000,
	881, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2153, -1000, 2108, -1000, -1000, 2133,
	-25, -1000, -25, -1000, 6260, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35861, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 184, -1000, -1000, -1000, -1000, -1000, -1000, 35861, 35861,
	35861, -1000, 27395, -1000, 1651, -1000, 1936, -1000, -1000, -1000,
	-1000, 42310, -1000, 388, -1000, -1000, 42310, 933, 1464, -1000,
	1464, -26, -1000, 41149, 1449, 35861, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 580, 610, 610,
	835, 835, 835, 835, 2110, 418, 639, 567, 261, 261,
	261, 261, 261, 261, 261, 261, 227, 1084, 1084, 227,
	227, 227, 227, 227, 261, 261, 261, 42346, 4204, 187,
	15370, 15370, 730, 1068, 444, 187, 15370, 187, 187, 187,
	187, -1000, 1442, -1000, -1000, -1000, -1000, 1587, 443, 16070,
	16070, -1000, -1000, -1000, 7310, 16420, -1000, -1000, -1000, -1000,
	442, 15370, -1000, 40707, -229, 294, -119, -1000, 15370, 515,
	-148, -1000, 858, -1000, 15370, -1000, -50, 15370, 15370, 15370,
	292, -1000, 291, -1000, 727, -1000, 726, 722, 721, -1000,
	440, 1059, 439, 438, 15370, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 42151, 38750, 288, -1000, 1585, -119, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 285, -1000, 284, -1000,
	42029, -119, 282, 4139, -1000, 16070, 16070, 16070, 7310, 437,
	281, -1000, 41024, -1000, 41870, 10811, 10811, 10811, 280, 41711,
	15370, -119, 38591, 38555, 4060, -54, -55, -1000, -56, -1000,
	2128, -61, 279, 579, 578, 278, -1000, -1000, 436, -64,
	615, 10461, 18870, 6260, -1000, 615, 9761, -1000, 19569, 19569,
	1344, 1410, 19569, -1000, -1000, -1000, -1000, 26387, 485, 570,
	26387, -1000, 2127, 1400, 277, -1000, -1000, -1000, 35861, 435,
	-1000, 570, 275, 966, 35861, 35861, 35861, -1000, -1000, 1305,
	36869, 1300, 43102, 35861, -1000, 431, 430, 1448, 1439, 35861,
	35861, 36533, 36197, 35861, 977, 88, -1000, 577, 426, 35861,
	952, 576, 35861, 88, -1000, 425, 35861, 948, -1000, 574,
	1510, 1265, -1000, 808, 1581, 35861, 271, -66, -28, 43102,
	-1000, -1000, -1000, -1000, -1000, 35861, 451, 35861, 88, 35861,
	2147, 88, 35861, 1776, 1830, 551, 35861, 1438, 15370, 1001,
	-1000, 18520, 640, 35861, 892, 62, -1000, -1000, -1000, 559,
	35861, -1000, -1000, 115, 115, -1000, 113, 1241, -31, -1000,
	15370, -1000, -1000, 35861, 23351, -77, -1000, -1000, 43102, -1000,
	522, 803, -1000, 2126, 608, 23351, 35861, 9061, 9061, -1000,
	1441, -1000, -1000, 956, -1000, 973, -1000, -1000, -1000, -1000,
	9061, -1000, -38, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1000, -1000, 933, -1000, 15370, 2116, -1000, -1000, -1000, 8711,
	-1000, -1000, -1000, 35861, -190, 15370, 187, 187, 15370, 16070,
	16070, -1000, 187, -1000, -1000, -1000, -1000, -1000, 1576, 424,
	15370, 43102, 40180, 39761, -78, -1000, 15370, -32, -1000, 15370,
	-1000, 40324, -1000, -1000, 520, 1766, -1000, 15370, 41589, 270,
	10111, -1000, 41430, -51, -51, -1000, 2145, 1353, 1326, 951,
	873, 2112, -1000, 20615, 616, 1087, 40288, 43009, 43102, -1000,
	15370, -1000, -1000, 1574, 15370, -1000, 43009, 43102, 16070, 16070,
	16070, 16070, 16070, 16070, 16070, 16070, 16070, 16070, 16070, 16070,
	16070, 16070, 16070, 16070, 16070, 16070, 16070, 1388, 16070, 2099,
	2099, 2099, -33, 15370, -1000, 1650, 1574, 15370, 15370, 43102,
	268, 267, 265, -1000, 15370, -119, 15370, 15370, 15370, -1000,
	-1000, -1000, 264, -1000, 2096, -1000, -1000, -1000, -1000, 471,
	-1000, 1533, -1000, -173, -1000, 1577, -1000, 1533, -1000, -1000,
	1344, -1000, 417, 15370, 19569, -1000, 512, -1000, -79, -1000,
	26387, -1000, 511, -224, -1000, 558, -1000, 570, 406, 35861,
	26387, -1000, -1000, -1000, 720, 718, 1772, -1000, 1291, -1000,
	653, -1000, 985, 15370, 17120, 405, 403, 1017, -1000, 1769,
	1241, 1749, 1241, -1000, -34, 969, -1000, 21313, 15370, -1000,
	716, 21313, -1000, -1000, 15370, -1000, 713, 21313, 608, 1567,
	788, -1000, 799, -1000, 1485, -1000, 24359, 402, 35861, 400,
	-1000, 399, -1000, -1000, 397, 35861, 1399, 551, 23687, -1000,
	611, 892, -1000, 42310, -1000, 892, 8361, 1920, -89, -1000,
	-1000, -1000, 615, 20266, 19569, 9761, -94, -1000, -1000, -1000,
	-1000, 42310, -38, 1880, 1880, -1000, 2094, -1000, 509, 263,
	-1000, 27059, -1000, -38, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 35861, 6260, 35861, 35861, 1097, 40129, -1000, 1922, 6260,
	2097, 187, 39342, 3991, 15370, 43102, 42712, -101, 15370, 15370,
	-1000, 262, 15370, 494, 42310, -1000, -1000, -1000, 42310, 15370,
	2144, 15370, 260, 259, 258, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 245, -1000, -1000, 38213, 15370, 242, -1000,
	237, 231, 42310, 1650, 42310, -1000, -1000, 848, 848, 890,
	890, 890, 890, 2099, 2440, 793, 1293, 601, 601, 601,
	1437, 694, 694, 601, 601, 601, 1564, 1377, 395, 40599,
	15370, 230, -1000, -1000, 42310, 42310, 229, -1000, -1000, -1000,
	-119, 351, 39905, 39869, -1000, 228, 226, 1529, 2012, -1000,
	19569, 1529, -1000, 35861, 42310, -1000, -208, -1000, 2089, -1000,
	-1000, 1400, -1000, 5555, 26387, 35861, -107, -1000, 35861, 35861,
	35861, 1743, -1000, 2568, -1000, 39710, -113, -1000, 319, 1974,
	15370, -1000, -1000, 394, 17120, 35861, -1000, 1413, 1445, 680,
	35861, -1000, 35861, -1000, 35861, 35861, 35861, -1000, 393, 89,
	-116, 35861, -1000, -118, 35861, -1000, -1000, 23351, 749, -1000,
	1032, 1489, -1000, 17120, 391, 35861, 24359, 2038, 17120, 1231,
	1391, 551, 23687, -1000, 776, -1000, -1000, -71, -1000, 348,
	88, 892, -1000, -80, -1000, 557, 1863, -1000, 1858, 419,
	-1000, -1000, -90, 389, -1000, 556, 555, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1922, 15370, 15370, 42712, -123, -1000,
	187, 187, -1000, 39486, -1000, 42310, -1000, 41430, -1000, -1000,
	-1000, -1000, 1028, -1000, 39450, -1000, -1000, -1000, -1000, 16070,
	1554, 387, 43102, 39291, -1000, -1000, 15370, -1000, -1000, -1000,
	-1000, 613, 15370, 15370, 1577, 613, -126, 570, -1000, -1000,
	-1000, 2084, -1000, -129, -1000, -1000, -1000, -1000, 35861, -1000,
	35861, -1000, 6260, 35861, 1551, 1295, -1000, -1000, 1415, 381,
	16070, 35861, -1000, 1133, 17120, 1922, 89, 6260, 1922, 39067,
	4584, -132, -134, 1280, -1000, 1274, 15370, -1000, 43102, 1241,
	1241, -1000, 712, 710, 15370, 705, -1000, 698, -1000, -91,
	21313, -1000, -1000, 2009, 1019, -135, 17120, -142, 213, 88,
	-145, 35861, -1000, 551, 23687, -1000, 1830, 1836, 35861, 1892,
	-1000, -1000, 375, 373, 372, -1000, 26723, 26723, 23351, 23351,
	-1000, 187, 187, -1000, -1000, 212, 1087, 2007, -1000, 2900,
	16070, 43102, -147, -1000, 39031, -1000, 35861, 42310, -119, -1000,
	-1000, 26387, 320, -1000, -1000, 1409, -1000, -1000, 35861, 1285,
	-1000, -1000, 15370, 40599, 368, 1485, 366, -1000, -1000, -1000,
	-1000, -1000, -1000, 1974, -50, -1000, 958, -1000, -1000, 42310,
	1946, -1000, -1000, 35861, 35861, -51, 365, 364, -1000, 1283,
	35861, 1133, -152, -1000, 1485, -1000, 1133, 359, 23687, -1000,
	1399, 790, -153, 35861, -1000, -1000, 6608, 23351, 23351, -1000,
	-155, -1000, -1000, -1000, 915, 15370, 2900, -158, -1000, -1000,
	-92, -1000, 2036, -1000, -1000, -1000, -1000, 1737, 38872, 1359,
	35861, -1000, 35861, 1922, 209, 35861, 657, 6260, -1000, -1000,
	207, 15370, 15370, 357, 355, 338, 1485, 1133, -1000, 1485,
	17120, -1000, 1391, 836, -1000, 615, -1000, -166, -168, -1000,
	206, 15720, 15720, -119, -1000, 35861, 323, 1706, -1000, 1106,
	1013, 203, -175, -1000, -1000, 317, -1000, 15370, -1000, 2144,
	-176, -177, 35861, 35861, 35861, -1000, 1485, -1000, -186, -1000,
	20266, -1000, 608, 608, -1000, -1000, -1000, 16770, 1303, 883,
	40743, -1000, -1000, -1000, 35861, -1000, 1110, 1107, 897, -1000,
	-1000, -1000, -1000, -1000, 1359, 42310, -1000, -1000, -188, -191,
	-193, -1000, 1133, -178, -1000, -1000, 2059, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1842, -1000, 666, 1480, 1480, 1106,
	316, 315, 1178, 1485, -1000, 15020, -1000, 2069, -1000, -1000,
	1390, -1000, -1000, 1024, 1020, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 199, 6260, 192, 6260, -1000, 638, -1000,
	636, 314, 1378, -62, 9411, 767, 354, -125, -1000, -194,
	-1000, 42310, -1000, -1000, 138, -1000, 9411, 1024, -1000, 9411,
	9411, -201, -1000, -1000, -202, -1000, -69, 1020, -164, -1000,
	-1000, 1020, -1000,
}
var sqlPgo = [...]int{

	0, 2583, 2582, 1671, 2099, 2581, 2579, 2578, 2576, 2574,
	2573, 2572, 2571, 2570, 2568, 2564, 2563, 2562, 2561, 2557,
	2556, 2555, 2554, 2553, 2092, 2552, 2083, 2549, 2546, 2545,
	2544, 2542, 2538, 2077, 2535, 2527, 2526, 2520, 2519, 2514,
	2060, 2510, 2054, 2509, 2502, 2500, 2499, 2492, 1978, 2490,
	93, 112, 1974, 2484, 2481, 1925, 1921, 1896, 2480, 1881,
	2475, 2472, 1878, 1867, 2471, 66, 2470, 2469, 2468, 1862,
	1791, 2465, 2464, 2460, 146, 2459, 1772, 2456, 2455, 2454,
	2445, 2444, 2442, 2439, 2438, 2436, 2432, 2431, 2430, 2428,
	2427, 2425, 2424, 2421, 2420, 2416, 154, 2415, 2412, 1756,
	1721, 2408, 2407, 41, 35, 21, 57, 32, 142, 2844,
	129, 2406, 2405, 2403, 2402, 2393, 2392, 30, 104, 101,
	2391, 337, 2388, 2387, 50, 39, 22, 28, 2385, 95,
	2384, 2383, 1770, 31, 2381, 2377, 127, 2374, 79, 29,
	1903, 150, 147, 137, 117, 2367, 2361, 2359, 49, 118,
	6, 4, 3, 2, 1, 2358, 5, 7, 2356, 2354,
	19, 86, 82, 2353, 26, 18, 2352, 2346, 122, 2342,
	62, 94, 1583, 119, 140, 1540, 89, 2335, 60, 17,
	59, 2334, 2333, 153, 43, 2332, 38, 68, 138, 2328,
	56, 155, 120, 81, 125, 134, 2326, 2324, 2323, 106,
	2321, 113, 109, 2318, 2317, 63, 2315, 99, 133, 2308,
	2306, 2305, 91, 2304, 121, 2303, 2300, 151, 141, 111,
	15, 51, 61, 13, 1573, 1570, 128, 85, 58, 52,
	2297, 269, 1232, 1394, 44, 100, 88, 53, 107, 54,
	74, 132, 37, 2295, 2293, 131, 2292, 2291, 2290, 2286,
	2285, 103, 2283, 2281, 23, 2279, 77, 36, 83, 87,
	46, 185, 124, 182, 148, 96, 2278, 78, 123, 2276,
	105, 2275, 2267, 1810, 114, 2266, 2264, 2263, 1789, 1497,
	1322, 71, 2262, 2260, 1033, 910, 2256, 2252, 90, 2251,
	116, 108, 92, 139, 130, 75, 2250, 115, 25, 2249,
	40, 34, 0, 1234, 508, 2244, 152, 72, 2242, 2241,
	2240, 2239, 33, 11, 8, 10, 16, 14, 80, 27,
	2238, 2237, 126, 97, 65, 2232, 149, 2231, 2229, 2228,
	45, 2222, 20, 2215, 12, 2214, 2212, 24, 9, 2210,
	2209, 144, 2207, 102, 2196, 1961, 2195, 145, 2191, 2188,
	1716, 2186, 48, 110,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 119, 119, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 116, 116, 121, 121, 121, 123, 123,
	120, 120, 115, 115, 24, 24, 63, 63, 106, 56,
	56, 56, 300, 300, 301, 301, 102, 102, 103, 103,
	103, 103, 104, 104, 105, 105, 105, 32, 32, 32,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 40, 40, 41, 41, 41, 41, 41,
	41, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 47, 47, 47, 45, 45, 45, 44, 44,
	44, 43, 43, 43, 46, 46, 46, 174, 174, 173,
	173, 177, 177, 48, 48, 48, 48, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 51, 51, 51, 51, 51, 51, 51,
	269, 269, 268, 49, 49, 243, 243, 52, 52, 200,
	200, 53, 53, 53, 53, 53, 54, 54, 64, 64,
	341, 341, 341, 345, 345, 346, 346, 347, 347, 347,
	347, 347, 347, 347, 343, 343, 59, 59, 59, 59,
	60, 60, 60, 61, 61, 101, 101, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 29, 30, 70, 70,
	70, 72, 69, 69, 69, 71, 71, 71, 71, 73,
	73, 74, 74, 74, 74, 74, 75, 75, 294, 292,
	292, 293, 293, 146, 146, 146, 146, 146, 147, 147,
	147, 299, 299, 299, 299, 299, 299, 298, 298, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 88, 88, 88, 96,
	96, 96, 96, 96, 96, 96, 77, 77, 82, 82,
	82, 82, 82, 78, 78, 83, 83, 84, 84, 85,
	85, 85, 85, 85, 85, 79, 79, 79, 79, 87,
	87, 87, 87, 86, 86, 92, 92, 92, 92, 92,
	92, 89, 89, 89, 89, 90, 90, 90, 93, 93,
	93, 93, 80, 80, 81, 81, 94, 94, 95, 95,
	95, 95, 95, 91, 91, 91, 342, 342, 344, 344,
	57, 57, 36, 36, 37, 37, 148, 148, 149, 149,
	222, 222, 222, 222, 150, 150, 122, 122, 122, 151,
	151, 152, 152, 153, 153, 153, 155, 155, 156, 156,
	157, 157, 157, 154, 154, 154, 221, 310, 310, 311,
	311, 311, 311, 311, 311, 312, 312, 312, 312, 312,
	312, 312, 308, 308, 309, 306, 306, 307, 307, 307,
	307, 348, 348, 220, 220, 160, 160, 313, 313, 313,
	313, 314, 314, 314, 314, 314, 317, 316, 315, 315,
	315, 315, 315, 255, 255, 255, 98, 98, 38, 38,
	128, 128, 39, 39, 35, 35, 35, 204, 204, 164,
	164, 260, 260, 260, 139, 139, 117, 117, 117, 17,
	13, 13, 13, 13, 13, 13, 23, 23, 21, 21,
	205, 205, 206, 206, 58, 58, 62, 62, 67, 67,
	97, 97, 97, 97, 97, 97, 25, 25, 25, 25,
	31, 31, 31, 31, 66, 66, 350, 350, 135, 135,
	135, 135, 136, 136, 217, 217, 218, 218, 351, 351,
	219, 219, 219, 130, 129, 131, 131, 34, 34, 34,
	124, 124, 125, 125, 126, 126, 127, 127, 352, 352,
	55, 55, 55, 100, 100, 142, 142, 214, 214, 214,
	216, 216, 215, 215, 215, 190, 190, 190, 99, 99,
	169, 169, 179, 179, 180, 180, 266, 181, 181, 65,
	65, 109, 109, 107, 107, 107, 107, 107, 107, 108,
	108, 108, 110, 110, 110, 110, 110, 110, 110, 113,
	113, 113, 114, 114, 114, 112, 112, 323, 323, 323,
	326, 326, 322, 324, 324, 325, 325, 349, 349, 191,
	191, 191, 159, 158, 158, 162, 162, 161, 163, 163,
	259, 259, 259, 188, 188, 188, 188, 209, 209, 207,
	207, 208, 208, 210, 210, 211, 211, 211, 212, 212,
	213, 213, 187, 187, 239, 239, 111, 111, 111, 168,
	168, 168, 170, 170, 229, 229, 229, 230, 230, 228,
	228, 228, 228, 261, 261, 261, 261, 261, 261, 261,
	261, 339, 339, 339, 340, 340, 258, 258, 262, 262,
	262, 262, 262, 262, 256, 256, 256, 256, 257, 257,
	267, 267, 194, 194, 194, 194, 192, 192, 193, 193,
	263, 263, 263, 263, 189, 189, 264, 264, 264, 223,
	223, 270, 270, 270, 288, 288, 167, 167, 167, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 272, 272,
	272, 272, 274, 274, 274, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 287, 287, 287, 287, 287, 275, 275,
	282, 282, 283, 283, 284, 285, 276, 276, 277, 277,
	278, 279, 286, 286, 286, 286, 290, 290, 280, 280,
	280, 280, 280, 281, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 202, 202,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 233, 233, 233, 233, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 318, 318, 318,
	318, 318, 318, 318, 318, 320, 320, 321, 321, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 327,
	327, 328, 328, 330, 330, 331, 331, 332, 333, 333,
	333, 334, 335, 335, 329, 329, 336, 336, 336, 337,
	337, 338, 338, 338, 338, 338, 245, 245, 246, 247,
	253, 253, 253, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 137,
	137, 137, 137, 137, 176, 176, 175, 175, 242, 242,
	240, 240, 244, 244, 195, 195, 289, 289, 289, 289,
	289, 289, 289, 196, 196, 196, 203, 197, 197, 198,
	198, 198, 198, 198, 236, 237, 199, 199, 199, 238,
	238, 248, 252, 252, 251, 250, 250, 249, 249, 226,
	226, 227, 227, 225, 224, 184, 184, 183, 183, 182,
	182, 353, 353, 254, 254, 185, 185, 186, 178, 178,
	265, 265, 265, 265, 171, 171, 144, 144, 172, 172,
	140, 140, 143, 143, 141, 141, 141, 141, 165, 165,
	166, 166, 138, 138, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 291, 291, 291, 241, 132,
	132, 132, 133, 133, 134, 134, 296, 296, 296, 297,
	297, 297, 297, 295, 295, 295, 295, 295, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 1, 3, 1,
	2, 2, 3, 2, 2, 5, 3, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 3, 1, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 1, 4, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 3, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 4, 3, 5, 3, 4,
	5, 2, 3, 3, 3, 4, 2, 3, 4, 3,
	3, 3, 4, 4, 4, 4, 2, 3, 7, 7,
	7, 4, 5, 5, 5, 5, 2, 0, 2, 0,
	3, 2, 8, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 1,
	0, 9, 9, 6, 7, 5, 3, 5, 1, 3,
	1, 1, 1, 10, 11, 9, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 3,
	3, 0, 6, 3, 11, 14, 4, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 8, 10, 8, 10, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 2, 0, 8, 3,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 2, 3, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 3, 3, 1, 5,
	5, 0, 2, 3, 1, 3, 2, 0, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 3, 3, 1, 3, 3, 1, 3, 3, 1,
	1, 3, 3, 1, 1, 6, 6, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 5, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 379, -4, -24, -26, -29, -32,
	-33, -53, -40, -41, -42, -52, -48, -54, -55, -56,
	-57, -49, -63, -62, -64, -67, -65, -58, -59, -68,
	-76, -97, -98, -99, -100, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -34, -35, -36,
	-37, 73, -38, -39, 94, -325, 98, -43, -44, -45,
	-47, -46, 102, 109, 112, 134, 145, 229, 235, 256,
	258, 260, 267, -107, -109, 254, -60, -61, -69, -70,
	-71, -72, -101, 279, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -88, -89, -90, -91, -92,
	-93, -94, -95, 282, -25, -31, -66, 321, -11, -12,
	-15, -14, -16, -13, -20, -22, -19, -21, -23, -17,
	-18, -10, 111, -323, -110, -108, 376, 255, 330, 35,
	291, 61, 105, 262, 346, 353, -113, -111, -112, -114,
	272, 338, 301, 380, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 2, 301, 341,
	87, 153, 240, -341, 2, -172, 301, 87, -141, -132,
	369, 4, -302, -304, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 67, 64,
	65, 66, 69, 71, 72, 75, 76, 77, 85, 86,
	88, 90, 94, 96, 98, 101, 102, 104, 109, 111,
	110, 112, 122, 123, 128, 130, 135, 141, 142, 145,
	146, 154, 157, 159, 152, 169, 170, 171, 173, 174,
	175, 178, 177, 182, 183, 186, 187, 190, 192, 194,
	195, 198, 196, 200, 201, 203, 202, 208, 210, 211,
	213, 216, 219, 222, 225, 226, 227, 228, 229, 231,
	233, 235, 237, 238, 239, 240, 241, 243, 244, 246,
	247, 248, 249, 250, 254, 252, 253, 255, 256, 257,
	258, 260, 262, 263, 265, 280, 281, 292, 267, 268,
	269, 270, 271, 275, 273, 276, 277, 279, 282, 284,
	287, 290, 291, 293, 296, 297, 294, 289, 300, 302,
	303, 304, 305, 306, 307, 308, 309, 316, 317, 321,
	322, 323, 324, 327, 328, 329, 330, 332, 335, 336,
	337, 342, 347, 348, 349, 350, 351, 28, 36, 37,
	38, 39, 41, 42, 45, 46, 51, 52, 53, 56,
	89, 91, 92, 108, 113, 114, 124, 125, 126, 136,
	138, 147, 148, 151, 158, 160, 161, 162, 163, 164,
	166, 180, 197, 207, 209, 220, 224, 232, 234, 242,
	264, 274, 285, 286, 295, 298, 311, 312, 313, 318,
	319, 334, 338, 339, 379, 379, 2, 170, 239, -140,
	-132, 87, 379, 379, 379, 379, 301, 2, 331, 341,
	-204, 87, 326, 379, 379, -132, 235, 22, 2, 96,
	157, 329, 328, 22, 231, 273, 303, 305, 2, 379,
	379, 379, 379, 379, 2, 341, 301, 153, 87, 331,
	-132, 2, -51, 2, 376, -50, -4, -33, -42, -52,
	-48, -24, -26, -40, -56, -55, -57, -59, -63, -62,
	-65, -69, -70, -76, -99, -100, 279, 111, -345, 2,
	22, -346, -347, 73, 102, 134, 272, 157, 96, 328,
	301, 2, 170, 2, -132, 2, -341, 2, 170, 2,
	-345, 2, -132, 2, -136, 2, 267, -132, 379, 379,
	379, 379, 379, 187, 55, 264, 276, -74, 317, -73,
	311, -294, -75, 2, -173, 198, -132, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 2, -96, 276, 34, 55, 22,
	60, 88, 135, 153, 154, 174, 68, 69, 238, 187,
	171, 316, 175, 277, 302, 317, 73, 332, 306, 110,
	4, 87, 198, 278, 311, 379, 379, 379, -349, 2,
	301, 269, 282, -108, -110, -109, -161, -162, 325, 165,
	107, 218, -107, -109, 2, -323, -96, 276, 2, 55,
	22, -292, 2, -254, 214, -231, 93, -233, 367, 368,
	362, 204, 352, -245, -235, -248, 108, 264, 376, -140,
	-234, 382, 9, -320, -109, 29, -246, -247, 49, -132,
	7, 8, 5, 6, -138, -272, -241, -281, 320, 115,
	206, -318, -319, 4, -302, -296, -273, -283, -277, -280,
	166, 58, 79, 80, 83, 81, 84, 278, 331, 50,
	28, 113, 114, 224, 232, 298, 318, 319, 147, 207,
	148, 56, 136, 180, 101, 37, 39, 41, 42, 51,
	52, 89, 91, 92, 124, 125, 126, 158, 160, 161,
	162, 163, 164, 209, 242, 285, 295, 312, 313, 339,
	-303, -284, -285, -278, -279, 74, 116, 133, 156, 149,
	168, 172, 181, 184, 193, 199, 221, 223, 261, 283,
	-286, -350, 2, 317, 317, 2, -350, 2, -350, 2,
	-135, 2, 317, 314, -326, 243, -322, -132, -326, 379,
	379, 381, 379, -158, -159, 2, 22, 99, -186, 2,
	376, -261, 2, 374, -263, -140, -109, -262, 376, 215,
	-3, 2, -263, 147, -140, 2, -263, 147, -140, 2,
	-132, 2, -143, 147, -140, -295, 4, -302, -304, -303,
	-305, 58, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 43, 49, 50, 54, 57, 59, 68, 73, 78,
	79, 81, 80, 82, 83, 84, 93, 95, 97, 99,
	100, 103, 105, 107, 115, 117, 129, 131, 132, 134,
	137, 139, 150, 153, 155, 165, 167, 176, 179, 185,
	188, 189, 204, 205, 206, 212, 214, 215, 217, 218,
	230, 236, 245, 259, 272, 278, 288, 299, 301, 310,
	314, 315, 320, 325, 326, 331, 333, 340, 341, 343,
	344, 345, 346, 314, 381, -172, -165, -132, -225, -224,
	378, -231, 2, -231, 2, 132, 376, -183, -184, -224,
	-225, 2, -173, 147, -132, 2, -173, 2, 153, -132,
	147, 2, -132, 22, 132, 2, 167, 2, 167, 2,
	-264, 2, -263, -174, 147, 2, -173, -174, 147, 2,
	-144, 147, 2, -143, -132, 147, 2, -165, 147, 2,
	-200, 376, -269, 2, -268, -297, 4, -302, -304, -303,
	338, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 276, 214, 381, -173, -231, -243, 376,
	132, -231, 214, -132, 2, 280, 2, 376, -74, 53,
	317, -218, 2, -219, -129, -130, -131, 169, 237, 241,
	351, 314, 357, 132, -292, -177, 378, -96, 2, -300,
	2, -298, 9, -297, 5, 280, 2, 238, 277, 55,
	132, 2, 2, -342, 2, 214, 132, 2, 132, 2,
	132, 2, 132, 2, 132, 2, 2, 238, 277, 2,
	129, 2, 316, 2, 2, 132, 2, 169, 237, 292,
	2, 301, 341, 2, 132, 132, 351, 2, -189, -263,
	301, 351, 22, -161, -162, -188, -207, -208, 185, 117,
	212, -191, 22, 99, -191, -191, 44, 377, 377, -96,
	280, 2, 10, 11, 57, 33, 367, 368, 369, 370,
	127, 371, 372, 365, 366, 364, 355, 356, 359, 360,
	361, 70, 358, 357, 63, 191, 266, 118, 119, 120,
	121, 251, 13, 14, 15, 26, 217, 184, 352, 149,
	283, 362, 16, 17, 18, 168, 36, 150, -137, -145,
	-231, -231, -231, -231, -231, 223, -182, -226, 374, -109,
	376, 376, -109, -231, -175, 376, 7, -109, -240, 374,
	-249, -231, -183, 376, 5, 376, 5, -327, 347, 129,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 234,
	-290, 342, -290, -290, -274, 376, -274, -275, 376, -274,
	348, 353, 376, -217, -218, -217, 314, -136, 381, -326,
	-166, 376, -186, -178, -265, -231, 369, -178, -185, -254,
	74, -194, 172, 199, 133, 181, 261, 156, 7, -51,
	-228, 382, 376, 369, -258, 353, -109, -262, 376, -261,
	-140, 376, -119, 252, -118, 21, 23, 102, 336, 108,
	289, 307, 111, 268, 252, 108, 111, 252, 289, 307,
	268, 252, 108, 382, 111, -300, -141, 381, -295, 369,
	293, 377, -171, -140, -184, 376, -160, 204, -128, -324,
	346, -160, 376, -133, 147, 2, -132, -324, 204, -264,
	-142, -140, -142, 279, -132, 30, -121, 381, 48, 257,
	108, -121, 108, -121, 381, 108, -121, 108, 108, -175,
	-231, 377, 381, -341, -347, 73, 376, 30, -242, -270,
	-271, -273, -282, -276, -280, -281, 40, 46, 45, 308,
	197, 274, 286, 334, 151, 38, 213, 159, 4, 158,
	160, 161, 162, 163, 164, 285, 37, 242, 125, 126,
	124, 101, 92, 91, 209, 42, 41, -284, -285, -278,
	-279, 89, 312, 313, 166, 39, 52, 51, 339, 295,
	-301, -300, -341, -294, -175, 30, -218, 2, -351, 381,
	183, -147, 190, 203, 141, 215, 349, -299, 5, 4,
	-241, -255, 93, 187, -281, 8, 368, -291, 7, 367,
	-293, -292, -293, 77, 378, -295, -173, 22, 281, 2,
	-294, -344, 129, -341, -294, -294, -294, -294, -294, 276,
	-51, 129, -132, 183, -294, 2, -294, 2, 301, 153,
	301, -121, 381, -300, 64, 65, 351, -188, -208, -207,
	-210, -231, 22, -213, 123, 200, -231, -233, -108, -108,
	-108, -163, -259, -231, 236, 153, -294, -288, -270, -287,
	247, 248, 246, 250, 249, -270, -295, 311, -231, -231,
	-231, -231, -231, -231, -231, -231, -231, -231, -231, -231,
	-231, -231, -231, -231, -231, -231, -231, -231, -231, -231,
	-231, -231, -231, -231, -231, -231, -231, -231, -231, -231,
	184, 149, 283, 36, 150, -231, 314, -231, -231, -231,
	-231, 196, 204, 206, 320, 115, 327, 99, 210, -353,
	299, 32, -238, -109, 376, -253, 27, 288, 22, -245,
	264, 376, -226, -231, -227, -176, -175, 377, 381, -176,
	-244, -240, -252, -251, 343, 377, -175, 340, 22, 99,
	369, 2, 7, -201, 350, 195, 90, 142, 194, -202,
	271, -328, 122, 137, 376, 377, 2, 377, 2, 377,
	2, 377, 2, -231, -231, -195, 2, -289, -175, 4,
	350, 195, 90, 142, 194, 271, -195, 2, -196, 2,
	-231, -175, -197, -232, -233, 367, 368, 362, 376, 264,
	-198, 2, -231, -176, -231, 43, 179, 315, -199, -231,
	132, -175, -231, -231, -231, -175, -175, 2, -175, 2,
	376, 7, 7, 311, 311, 7, -136, -322, 30, -165,
	-168, 381, 132, 30, 4, -168, 381, 377, 172, 172,
	-261, -194, 172, -192, 221, -192, -192, -339, 376, 375,
	-258, -295, 374, 383, -176, 2, -257, -256, 30, -132,
	219, 377, -140, 381, 314, -205, 68, 59, -221, 147,
	59, -306, -132, 68, -307, 54, 326, 236, 131, -205,
	68, -205, 68, 68, -263, 33, -65, 66, 132, 314,
	-263, 66, 314, 33, -65, 132, 314, -143, -295, 66,
	-267, 354, -132, 132, 377, 381, -148, -165, -149, -132,
	-222, -221, -308, -309, -306, 153, 326, 116, 30, 108,
	228, 30, 214, 204, -124, 304, 108, -223, 344, -214,
	-65, 376, 93, 30, -214, -179, -180, -266, -181, -140,
	376, -132, -173, -174, -174, -143, -144, -132, -165, 377,
	381, -51, -268, 314, 333, -149, -50, 377, 381, -167,
	29, 374, -201, 376, -267, 381, 132, 357, 314, 377,
	317, -219, -146, 241, 287, 253, 275, 8, 7, 7,
	381, -295, -343, -132, 276, -51, -140, -143, -140, -263,
	129, 65, -211, -291, 376, 368, -212, 264, 265, 381,
	-117, 31, 97, 173, -140, 351, -231, -231, 314, -353,
	299, -238, -231, 196, 206, 320, 115, 327, 99, 210,
	132, 376, -232, -232, -175, -235, 376, -175, 375, 385,
	377, -231, 375, 375, 381, -250, -251, 103, -231, -162,
	381, -161, -231, -175, -175, 377, 377, 314, 314, 314,
	314, 376, -333, 222, 376, 376, -231, 30, 381, 377,
	132, 377, 377, -203, 230, 377, 10, 11, 367, 368,
	369, 370, 127, 371, 372, 365, 366, 364, 355, 356,
	357, 63, 191, 266, 13, 14, 15, 168, 150, -232,
	-232, -232, -175, 376, 377, -236, -237, 132, 129, 30,
	-199, -199, -199, 377, 132, -175, 381, 381, 381, 377,
	377, 377, 7, 377, 381, 377, 351, 351, 377, 376,
	377, -223, -265, -170, 2, -261, -295, -223, -254, -261,
	-261, -193, 333, 214, 172, -261, -256, 377, -340, 7,
	-258, -257, 7, -230, -229, 130, 202, 377, -132, 376,
	-258, 377, -118, -140, -132, -132, 204, -221, 147, -123,
	204, -270, -132, 376, 376, 173, 173, -132, -132, 147,
	-132, 147, -132, -132, -119, 252, -65, 351, 376, -140,
	252, 351, -132, -65, 376, -132, 252, 351, -102, 146,
	210, 293, 132, -140, 377, 377, 381, -133, 153, -133,
	-65, -173, 5, -65, -140, 108, -125, 104, -352, 357,
	-132, -209, -207, -231, -190, -216, 259, 214, -171, 338,
	-132, -190, -169, 381, 132, 357, -171, -121, -121, -121,
	-121, -231, -343, -300, 377, -270, 374, 375, 7, 7,
	-105, 346, -300, -343, -292, -292, -129, 324, 62, 241,
	-292, 381, 240, 87, 301, -212, -231, -259, -140, 382,
	-231, -231, -232, -232, 132, 376, -231, -242, 26, 26,
	377, -176, 381, -227, -231, 377, -240, 105, -231, 310,
	377, 340, -162, -162, -162, 5, 195, 142, 194, -202,
	194, -202, -202, 7, -334, -132, 376, 344, -161, 377,
	-288, -270, -231, -236, -231, -288, -270, -232, -232, -232,
	-232, -232, -232, -232, -232, -232, -232, -232, -232, -232,
	-232, -232, -232, -232, -232, -232, 99, 204, 210, -232,
	381, -176, -237, -236, -231, -231, -270, 377, 377, 377,
	-175, -231, -231, -231, 377, 7, -50, -187, 137, -267,
	381, -187, -193, 376, -231, -261, 375, 377, 381, -257,
	375, 381, 384, 357, -258, 376, -165, -256, 314, 314,
	108, 204, 335, -310, -307, -231, -164, -260, -132, -321,
	376, -318, -319, -138, 376, 376, -116, 102, 279, -206,
	108, -121, 108, -121, 314, -205, 68, -234, -138, -132,
	-175, 314, -234, -175, 314, -234, -105, 132, 300, 293,
	-150, 152, -222, 376, -133, 376, 376, -160, 376, -132,
	-126, 178, -352, -298, -324, -190, -190, -178, 205, 67,
	377, -223, -180, -170, -254, 377, -106, 75, -106, 7,
	375, 377, -104, 216, -103, -132, 5, -132, -295, -132,
	-140, 215, 377, -117, -295, 26, 26, -231, -242, 377,
	-231, -231, 377, -231, 375, -231, 5, -231, 377, 377,
	377, 377, -335, -132, -231, 377, 377, 377, -237, 132,
	99, 210, 376, -231, 377, 377, 381, 377, 377, 377,
	377, -239, 139, 44, -261, -239, -165, -228, 7, -229,
	-295, 374, -257, -165, 377, -132, -132, -221, 108, -311,
	68, -312, 57, 116, 73, 204, 206, 326, 236, 54,
	93, 245, 377, 377, 381, -139, -183, 57, -139, -231,
	376, -164, -165, 204, 93, 204, 93, 86, 322, -132,
	-132, -140, -132, -132, 376, 377, -140, 377, -132, -301,
	311, -151, -152, 227, 150, -164, 376, -165, -148, 30,
	-164, 214, -127, 177, -352, -298, -124, -215, 376, 214,
	-65, -190, 357, 86, 86, 375, 381, 376, 357, 357,
	-117, -231, -231, 377, 377, -162, -329, 227, 377, -232,
	132, 376, -242, 377, -231, -330, 345, -231, -175, -330,
	377, -258, 7, 377, -221, -132, -295, -132, 116, 147,
	206, 173, 376, -232, -140, -220, -348, 72, 297, -260,
	-117, -295, -117, 377, -175, 377, 377, 206, 206, -231,
	-270, -121, -121, 314, 314, -175, 314, 314, -234, 44,
	225, 377, -164, 377, 377, -65, 377, -140, -352, -298,
	-125, 100, -165, 68, -186, -109, 376, 376, 376, -103,
	-104, -300, -300, 377, -162, 44, -232, -242, 377, 377,
	-331, -332, -132, -257, 375, -312, -133, 204, -231, -134,
	376, -150, 376, -139, -162, 245, -120, 57, -132, -132,
	-162, 376, 376, 186, 240, -140, -220, 377, -150, -220,
	376, -298, -126, 328, 205, 377, -132, -301, -301, 377,
	-336, 240, 265, -175, 377, 381, 30, 108, 377, -313,
	192, -132, -165, -117, 377, -140, -115, 333, -295, 377,
	-175, -175, 376, 376, 376, -150, -220, -150, -164, -127,
	279, -223, 377, 377, 377, -337, -338, 36, 323, 77,
	-231, -337, -332, -334, 116, -314, -317, -316, 214, 133,
	226, 284, 377, 377, -160, -231, 377, 377, -165, -165,
	-165, -150, 377, -179, -105, -105, -338, 233, 128, 264,
	233, 128, -132, -316, 214, -317, 214, 328, 96, -313,
	377, 377, 377, -220, -223, 26, -315, 201, 257, 48,
	279, -315, -314, 376, 376, -122, 48, 257, -150, -338,
	20, 206, 93, -153, 227, -154, 227, 377, -295, 377,
	-295, 338, 338, -155, 376, 182, 381, -152, -151, -156,
	-157, -231, 93, 193, 309, -153, 376, 381, 377, 381,
	376, -156, -153, -157, -156, 377, 377, 381, -152, -151,
	-154, 381, -154,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 306, 0, 159, 161, 163,
	165, -2, 168, 170, 0, 0, 0, 181, 183, 185,
	187, 189, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 669, -2, 0, 286, 288, 297, 299,
	301, 303, 304, 0, 349, 351, 353, 355, 357, 359,
	361, 363, 365, 367, 369, 371, 373, 375, 377, 378,
	380, 382, 384, 0, 590, 592, 594, -2, 65, 66,
	67, 68, 69, 70, 78, 79, 80, 81, 72, 74,
	75, 77, 0, 705, -2, 716, 0, 0, 0, -2,
	0, -2, -2, -2, 0, 0, 682, 684, 686, 688,
	-2, 0, 0, -2, 7, 13, 15, 17, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 40, 43,
	49, 51, 53, 56, 58, 60, 62, 64, 0, 0,
	0, 0, 0, 0, 125, 270, 0, 1284, 1208, 1214,
	1215, 1239, 1240, 1241, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
	1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
	1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
	1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,
	1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
	1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
	1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354,
	1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
	1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
	1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
	1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
	1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
	1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414,
	1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424,
	1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
	1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
	1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
	1475, 1476, 1477, 1478, 151, 153, 154, 0, 0, 0,
	1210, 1284, 160, 162, 164, 166, 0, 172, 0, 0,
	0, 0, 557, 169, 171, 261, 1346, 263, 265, 0,
	0, 0, 0, 175, 176, 177, 178, 179, 180, 182,
	184, 186, 188, 190, 191, 0, 0, 0, 0, 0,
	260, 258, 213, 214, 0, 243, 244, 245, 246, 247,
	249, 217, 219, 220, 222, 224, 226, 228, 229, 231,
	233, 234, 236, 238, 239, 241, 0, 0, 0, 267,
	273, 274, 275, 277, 278, 279, 280, 281, 282, 283,
	0, 131, 0, 461, 256, 254, 0, 127, 0, 587,
	0, 269, 588, 589, 584, 585, 1373, 613, 287, 289,
	298, 300, 302, -2, -2, 1465, -2, 313, -2, 321,
	1471, 0, 324, 325, 328, -2, 209, 350, 352, 354,
	356, 358, 360, 362, 364, 366, 368, 370, 372, 374,
	376, 379, 381, 383, 385, 386, 0, 0, 0, 390,
	0, -2, -2, 0, 0, 0, 0, 0, -2, 0,
	-2, 0, 0, -2, -2, 0, 0, -2, 0, 0,
	389, 391, 392, 393, 0, 591, 593, 595, 0, 547,
	707, 0, 0, -2, 680, 681, -2, 0, 711, 711,
	711, 0, 0, 681, 679, 0, 290, 0, 292, 0,
	390, 295, 296, 329, 330, 1193, 1194, 910, 0, 0,
	0, 0, 0, 0, 1012, 1014, 1438, 1465, 0, 1016,
	1017, 0, 1019, 1021, 1022, 0, 1025, 1026, 1178, 1210,
	1224, 1225, 1226, 1227, 0, 0, 1230, 0, 1232, 1233,
	1234, 1080, 1036, -2, -2, 1222, 838, 839, 840, 841,
	-2, 1479, 1040, 1043, 1046, 1049, 1050, 1053, 1054, 0,
	1422, 1439, 1440, 1461, 1462, 1470, 1474, 1475, 1446, 1458,
	1447, 1434, 1444, 1456, 1290, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1248, 872, 873, 878, 879, 1480, 1481, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
	881, 615, 597, 606, 615, 599, 600, 601, 602, 603,
	604, 605, 608, 0, 697, 1352, 700, 1221, 698, 683,
	685, 0, 687, 0, 0, 691, 713, 712, 746, 747,
	0, 695, 696, 706, 762, 800, 777, 768, 0, 0,
	2, 71, 0, 1446, 800, 73, 0, 1446, 800, 76,
	0, 82, 0, 1446, 1213, 0, 1253, 1254, 1255, 1256,
	1257, 1479, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
	1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
	1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
	1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 0, 0, 271, 272, 1218, 1216, 1217,
	0, 155, 156, 157, 158, 0, 0, 1211, 1187, 1185,
	1186, 167, 526, 1446, -2, 549, 526, 553, -2, 704,
	1446, 629, 262, 264, 0, 174, 0, 642, 0, 644,
	0, 659, 806, 117, 1446, 194, 207, 117, 1446, 197,
	117, 1446, 200, 1206, 117, 1446, 203, 204, 1446, 206,
	257, 0, 0, -2, 250, 252, 1249, 1250, 1251, 1252,
	-2, 248, 218, 221, 223, 225, 227, 230, 232, 235,
	237, 240, 242, -2, 0, 0, 0, 460, 0, 0,
	0, 586, 0, 612, 305, 0, 310, 0, 312, 1433,
	-2, -2, 316, 616, 620, 621, 622, 0, 0, 0,
	0, 0, 0, 0, 326, 210, 0, 387, 388, 396,
	397, 132, 133, 347, 348, 0, 400, 421, 433, 0,
	0, 404, 406, 459, 408, 0, 0, 410, 0, 412,
	0, 414, 0, 416, 0, 418, 420, 422, 434, 424,
	706, 426, 0, 428, 432, 0, 437, 0, 439, 440,
	441, 0, 0, 447, 0, 0, 394, 395, 117, 804,
	0, 0, 0, -2, 0, 675, 725, 726, 0, 0,
	0, 0, 709, 710, 0, 0, 0, 671, 672, 291,
	0, 294, 0, 0, 0, 0, 1113, 1114, 1115, 1116,
	1117, 1118, 1121, 1122, 1119, 1120, 1123, 1124, 0, 0,
	0, 0, 0, 1125, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 1127, 1128, 0, 0, 1130, 0, 1132,
	0, 0, 0, 0, 0, 0, 1192, 0, 0, 1129,
	915, 916, 917, 949, 950, 0, 1013, 1189, 1182, 1015,
	0, 1135, -2, 1136, 0, 0, 1018, 1023, 1024, 1135,
	0, 1177, -2, 0, 1229, 0, 907, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1158,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 857,
	875, 886, 883, 882, 859, 0, 858, 856, 0, 860,
	0, 0, 0, 596, -2, 598, 0, 610, 0, 699,
	0, 0, 748, 751, 1198, 1202, 1203, 751, 0, 1195,
	0, 0, 0, 0, 797, 797, 797, 795, 771, 0,
	777, 0, -2, 801, 789, 0, -2, 768, 0, 0,
	802, 0, 83, 581, 96, 0, 581, 581, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 791, 1209, 0, 1183, 1184,
	147, 0, 0, 1204, 1188, 467, 0, 0, 548, 0,
	703, 0, 0, 0, 1446, 556, 1242, 631, 0, 810,
	0, 645, 0, 0, 807, 0, 192, 0, 115, 116,
	0, 195, 0, 198, 0, 0, 201, 0, 0, 0,
	1136, 706, 0, 0, 276, 0, 0, 706, 0, 1138,
	818, 819, 820, 821, 822, 907, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	869, 0, 844, 844, 844, 861, 862, 870, 871, 876,
	877, 888, 889, 891, 893, 887, 887, 887, 884, 885,
	791, 134, 0, 0, 0, 0, -2, 318, 0, 618,
	0, 623, 338, 339, 340, 625, 626, 322, 341, 342,
	343, 344, 345, 346, 0, 543, 0, 545, 1235, 0,
	319, 331, 320, 323, 0, 211, 398, 399, 401, 402,
	403, 407, 0, 456, 409, 411, 413, 415, 417, 425,
	429, 706, 435, 438, 442, 443, 444, 445, 0, 0,
	0, 546, 0, 307, 0, 451, 0, 678, 723, 724,
	729, 733, 734, 737, 740, 741, 731, 910, 692, 693,
	694, 717, 718, 568, 0, 0, 293, 911, 814, 815,
	863, 864, 865, 866, 867, 912, 913, 0, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, -2, -2,
	-2, -2, -2, -2, -2, -2, 936, 937, 938, 939,
	940, 941, 942, 943, -2, -2, -2, 947, 948, -2,
	1131, 1133, 0, 1192, 0, -2, 0, -2, -2, -2,
	-2, 961, 0, 963, 966, 968, 970, 0, 0, 0,
	0, 1191, 980, 1169, 0, 0, 1110, 1111, 1112, 965,
	0, 0, 1190, 1181, 0, 0, 1134, 1020, 0, 0,
	0, 1142, 1176, 1172, 0, 1027, 716, 0, 0, 0,
	0, 1034, 0, 1238, 894, 895, 896, 897, 898, 899,
	908, 1090, 0, 0, 0, 1041, 1042, 1044, 1045, 1047,
	1048, 1051, 1052, 0, 0, 0, 1058, 0, 1145, -2,
	-2, -2, -2, -2, -2, -2, 0, 1060, 0, 1062,
	1136, 1155, 0, 0, 983, 0, 0, 0, 0, 1465,
	0, 1065, 1136, 1163, 0, 0, 0, 0, 0, 1136,
	0, 1168, 0, 0, 0, 0, 0, 1076, 0, 1078,
	0, 0, 0, 0, 0, 0, 609, 701, 0, 0,
	810, 0, 0, 0, 1201, 810, 0, 1197, 0, 0,
	0, 0, 0, 792, 796, 793, 794, 0, 0, 777,
	789, 759, 0, 0, 0, 766, 767, 788, 0, 787,
	776, -2, 0, 0, 0, 0, 0, 580, 98, 1446,
	0, 119, 0, 0, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 1212, 0,
	137, 0, 1219, 0, 0, 0, 0, 0, 466, 1218,
	468, 470, 471, 472, 473, 1243, 0, 1243, 0, 0,
	0, 0, 0, 0, 633, 639, 0, 728, 0, 657,
	647, 0, 0, 0, 657, 661, 662, 664, 665, 0,
	0, 808, 208, 117, 117, 1207, 117, 117, 205, 259,
	0, 215, 251, 0, 0, 0, 253, 255, 0, 811,
	813, 0, 823, 0, 146, 0, 0, 0, 0, 311,
	0, 617, 624, 0, 335, 0, 337, 544, 1237, 1236,
	0, 212, 458, 284, 427, 430, 453, 454, 455, 805,
	0, 452, 0, 735, 0, 0, 732, 738, 739, 0,
	720, 566, 567, 0, 0, 0, -2, -2, 0, 0,
	0, 981, -2, 962, 964, 967, 969, 971, 0, 0,
	0, 0, 0, 0, 0, 982, 1135, 0, 1179, 1182,
	-2, 1137, 1140, 1141, 0, 0, 1173, 0, 0, 0,
	0, 715, 716, 716, 716, 1033, 0, 0, 0, 0,
	0, 0, 1035, 0, 0, 0, 0, 0, 0, 1057,
	0, 1059, 1061, 0, 0, 1063, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 986,
	987, 988, 0, 1135, 1064, 1161, 1162, 0, 0, 0,
	0, 0, 0, 1070, 0, 1167, 0, 0, 0, 1074,
	1075, 1077, 0, 842, 0, 868, 890, 892, 880, 706,
	1220, 743, 1199, 791, 750, 752, 1200, 743, 1196, 779,
	0, 781, 0, 0, 0, 783, 0, 772, 0, 774,
	789, 764, 0, 0, 757, 0, 756, 777, 785, 0,
	0, 803, 97, 570, 0, 0, 0, 100, 1446, 108,
	0, 498, 0, 0, 0, 0, 0, 583, 109, 1446,
	117, 1446, 117, 110, 84, 581, 85, 0, 0, 576,
	0, 0, 569, 86, 0, 578, 0, 0, 146, 0,
	0, 148, 0, 1205, 475, 525, 0, 0, 1243, 0,
	464, 526, 550, 552, 0, 0, 635, 639, 0, 638,
	704, 657, 727, 809, 640, 657, 0, 0, 0, 649,
	646, 643, 810, 0, 0, 0, 0, 193, 196, 199,
	202, 1137, 266, 0, 0, 1139, 0, 816, 0, 0,
	126, 0, 135, 268, 308, 309, 314, 333, 334, 336,
	332, 0, 0, 0, 0, 0, 0, 719, 568, 0,
	914, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	1170, 0, 0, 0, 1181, -2, 1143, 1171, 1175, 0,
	1028, 0, 0, 0, 0, 1231, 900, 901, 902, 903,
	904, 905, 906, 0, 1088, 1089, 1093, 0, 0, 1039,
	0, 0, 1144, 1154, 1156, 984, 985, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, -2, -2, -2,
	1002, 1003, 1004, -2, -2, -2, 0, 0, 0, 1157,
	0, 0, 1159, 1160, 1164, 1165, 0, 1067, 1068, 1069,
	1166, 0, 0, 0, 874, 0, 0, 745, 0, 749,
	0, 745, 780, 0, 799, 782, 762, 773, 0, 770,
	760, 0, 761, 0, 789, 0, 0, 769, 0, 0,
	0, 0, 118, 496, 515, 0, 0, 559, 565, 565,
	0, 1037, 1038, 0, 0, 0, 102, 0, 0, 0,
	0, 106, 0, 112, 0, 0, 0, 91, 0, 0,
	0, 0, 90, 0, 0, 89, 124, 0, 0, 149,
	480, 0, 469, 0, 0, 0, 467, 0, 0, 0,
	637, 639, 0, 630, 631, 173, 641, 655, 656, 654,
	0, 657, 663, 660, 666, 0, 0, 128, 0, 0,
	817, 824, 144, 1336, 142, 139, 141, 285, 448, 449,
	450, 730, 736, 721, 568, 0, 0, -2, 0, 974,
	-2, -2, 1106, 1137, 1180, 1174, 1228, 716, 1029, 1031,
	1032, 909, 1095, 1092, 0, 1079, 1055, 1056, 1153, 0,
	0, 0, 0, 1137, 1108, 1066, 0, 1072, 1073, 843,
	702, 1084, 0, 0, 753, 1084, 0, 777, 775, 758,
	754, 0, 765, 0, 786, 572, 574, 99, 0, 497,
	0, 500, 0, 0, 0, 0, 506, 507, 0, 0,
	0, 0, 517, 524, 0, 568, 1223, 0, 568, 0,
	0, 0, 0, 0, 114, 0, 0, 582, 0, 117,
	117, 571, 0, 0, 0, 0, 577, 0, 579, 136,
	0, 462, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 639, 0, 632, 633, 0, 0, 0,
	648, 658, 0, 0, 0, 812, 0, 0, 0, 0,
	722, -2, -2, 975, 1107, 0, 716, 0, 1081, -2,
	0, 0, 0, 1109, 0, 689, 0, 744, 742, 690,
	798, 789, 0, 784, 101, 0, 501, 502, 1243, 0,
	505, 508, 0, 510, 1245, 475, 0, 521, 522, 560,
	561, 564, 562, 565, 716, 519, 0, 103, 104, 113,
	121, 105, 111, 0, 0, 716, 0, 0, 790, 0,
	0, 524, 0, 514, 475, 465, 524, 0, 0, 634,
	635, 0, 0, 0, 667, 668, 0, 0, 0, 143,
	0, 138, 140, 1030, 1098, 0, -2, 0, 1010, 1071,
	1083, 1085, 0, 763, 755, 499, 503, 0, 0, 530,
	0, 518, 0, 568, 0, 0, 123, 0, 573, 575,
	0, 0, 0, 0, 0, 0, 475, 524, 463, 475,
	0, 636, 637, 0, 651, 810, 653, 0, 0, 145,
	0, 0, 0, 1094, 1011, 0, 0, 0, 509, 535,
	0, 0, 0, 563, 1028, 526, 107, 0, 120, 0,
	0, 0, 0, 0, 0, 512, 475, 554, 0, 628,
	0, 652, 146, 146, 1091, 1096, 1099, -2, 1406, 1281,
	0, 1097, 1086, 1087, 0, 511, 531, 532, 0, 527,
	528, 529, 1244, 523, 530, 122, 93, 95, 0, 0,
	0, 513, 524, 810, 129, 130, 0, 1101, 1102, 1103,
	1104, 1105, 504, 533, 0, 534, 0, 0, 0, 535,
	0, 0, 478, 475, 650, 0, 536, 0, 539, 540,
	0, 537, 520, 0, 0, 474, 476, 477, 555, 1100,
	538, 541, 542, 0, 0, 0, 0, 481, 0, 482,
	0, 0, 0, 480, 0, 0, 0, 479, 485, 0,
	488, 490, 491, -2, 0, 483, 0, 0, 486, 0,
	0, 0, 484, 489, 0, 487, 480, 0, 479, 495,
	493, 0, 494,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 365, 3, 371, 366, 3,
	376, 377, 369, 367, 381, 368, 378, 370, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 385, 380,
	355, 357, 356, 359, 382, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 374, 3, 375, 372, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 383, 364, 384, 362,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 358, 57698, 360, 57699, 361,
	57700, 363, 57701, 373, 57702, 379, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:896
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:902
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:908
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:917
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:919
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1001
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1012
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1047
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1073
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1079
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1085
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1094
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1103
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1172
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1195
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1205
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1267
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1268
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1272
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1299
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1363
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1432
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1476
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1484
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1485
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1486
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1489
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1490
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			return helpWith(sqllex, "CREATE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1550
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1565
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1588
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1611
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1686
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1691
		{
			return helpWith(sqllex, "DELETE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1693
		{
			return helpWith(sqllex, "INSERT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1696
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1714
		{ /* SKIP DOC */
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1766
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1801
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1821
		{
			return helpWith(sqllex, "GRANT")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1841
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1919
		{
			return helpWith(sqllex, "RESET")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1920
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			return helpWith(sqllex, "RESET")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1951
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1954
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1960
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1961
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1963
		{
			return unimplemented(sqllex, "set local")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.expr()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1989
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2039
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2044
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2061
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			return unimplemented(sqllex, "set from current")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2066
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2076
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = Low
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = Normal
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = High
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2176
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2185
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2186
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			return helpWith(sqllex, "SHOW")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2203
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.str = "client_encoding"
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2251
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2273
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2284
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2300
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2364
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2369
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2410
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2418
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2422
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2440
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2451
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2462
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2466
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2470
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2474
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2478
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2482
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2488
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2492
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2496
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2502
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2530
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2637
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2641
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = DropDefault
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 495:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2755
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2962
		{
			return unimplemented(sqllex, "match full")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2963
		{
			return unimplemented(sqllex, "match partial")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2964
		{
			return unimplemented(sqllex, "match simple")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2965
		{
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = NoAction
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = Restrict
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = Cascade
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = SetNull
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = SetDefault
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3051
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3062
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3066
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3087
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3127
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = true
		}
	case 558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = false
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3157
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3158
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3161
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3162
		{
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = Ascending
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = Descending
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3202
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3204
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = true
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = false
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3237
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3238
		{
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3249
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3260
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3271
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3275
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3276
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3277
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3295
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3313
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3318
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3326
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3333
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3336
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3337
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.str = ""
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.str = ""
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3383
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3396
		{
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3398
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = ReadOnly
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = ReadWrite
		}
	case 627:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.str = ""
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.str = ""
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.str = ""
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.str = ""
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3505
		{
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3506
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			return helpWith(sqllex, "INSERT")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3547
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3589
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3593
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3601
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 658:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3624
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3628
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3629
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3793
		{
			return helpWith(sqllex, "SELECT")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3794
		{
			return helpWith(sqllex, "VALUES")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3795
		{
			return helpWith(sqllex, "TABLE")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			return helpWith(sqllex, "SELECT")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3885
		{
			return helpWith(sqllex, "TABLE")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3896
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3897
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3898
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3901
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3905
		{
			return unimplemented(sqllex, "cte")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3908
		{
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3909
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3913
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3916
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3917
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = true
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = false
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = false
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = true
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3940
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3941
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3988
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4012
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4064
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4065
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4068
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4127
		{
			return helpWith(sqllex, "VALUES")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4129
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4144
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = &From{}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4166
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4211
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4248
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4273
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = nil
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4314
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4320
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = true
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = false
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.str = astFullJoin
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.str = astLeftJoin
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.str = astRightJoin
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.str = astInnerJoin
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4432
		{
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4518
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4532
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4540
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4564
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4575
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4625
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4656
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4665
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = nil
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4730
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4826
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 880:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4858
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4897
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4898
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 890:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = year
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = month
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = day
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = hour
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = minute
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = month
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = hour
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = minute
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = minute
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = nil
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = second
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4993
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5028
		{
			return unimplemented(sqllex, "at tz")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5093
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5109
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5236
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5302
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5342
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5459
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5475
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5501
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5505
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5509
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5513
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5521
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5525
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5528
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5529
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5531
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5535
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5542
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5553
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5569
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5570
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5574
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5583
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5592
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5601
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5602
		{
			return unimplemented(sqllex, "current role")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5604
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5611
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5617
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5632
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5637
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5642
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5644
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5651
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5652
		{
			return unimplemented(sqllex, "treat")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5689
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5694
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5698
		{
			return unimplemented(sqllex, "within group")
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5699
		{
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5707
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5714
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5734
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5757
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.str = ""
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5786
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5796
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5797
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5798
		{
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5801
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5802
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5808
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5809
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5810
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5811
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5812
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5839
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = Any
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5849
		{
			sqlVAL.union.val = Some
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.union.val = All
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = Plus
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5859
		{
			sqlVAL.union.val = Minus
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = Mult
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5861
		{
			sqlVAL.union.val = Div
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5863
		{
			sqlVAL.union.val = Mod
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = Bitand
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5865
		{
			sqlVAL.union.val = Bitor
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = Pow
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5867
		{
			sqlVAL.union.val = Bitxor
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = LT
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = GT
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = EQ
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5871
		{
			sqlVAL.union.val = LE
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = GE
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5873
		{
			sqlVAL.union.val = NE
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5877
		{
			sqlVAL.union.val = Like
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = NotLike
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = ILike
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = NotILike
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5898
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5964
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5968
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5989
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6028
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6040
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6044
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6048
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6080
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6103
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6109
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6120
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6132
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6148
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6152
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6167
		{
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6168
		{
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6177
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6196
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6202
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6212
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6221
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6225
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6229
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6237
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6241
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6247
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6251
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6257
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6261
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6272
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6276
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6282
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6286
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6299
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6303
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6307
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6311
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6317
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6321
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6327
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6330
		{
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6340
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6344
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6355
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6359
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6363
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6366
		{
			return unimplemented(sqllex, "func const")
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6368
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6372
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6375
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6377
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6381
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6385
		{
			sqlVAL.union.val = DNull
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6392
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6396
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6402
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6437
		{
			sqlVAL.str = ""
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6443
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6447
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
